/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.skplanet.querycache.cli.thrift;

import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class THandleIdentifier implements org.apache.thrift.TBase<THandleIdentifier, THandleIdentifier._Fields>, java.io.Serializable, Cloneable, Comparable<THandleIdentifier> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("THandleIdentifier");

  private static final org.apache.thrift.protocol.TField CONNID_FIELD_DESC = new org.apache.thrift.protocol.TField("connid", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField STMTID_FIELD_DESC = new org.apache.thrift.protocol.TField("stmtid", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField DRIVER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("driverType", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new THandleIdentifierStandardSchemeFactory());
    schemes.put(TupleScheme.class, new THandleIdentifierTupleSchemeFactory());
  }

  public long connid; // required
  public long stmtid; // required
  /**
   * 
   * @see TSessionType
   */
  public TSessionType driverType; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CONNID((short)1, "connid"),
    STMTID((short)2, "stmtid"),
    /**
     * 
     * @see TSessionType
     */
    DRIVER_TYPE((short)3, "driverType");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CONNID
          return CONNID;
        case 2: // STMTID
          return STMTID;
        case 3: // DRIVER_TYPE
          return DRIVER_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CONNID_ISSET_ID = 0;
  private static final int __STMTID_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CONNID, new org.apache.thrift.meta_data.FieldMetaData("connid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.STMTID, new org.apache.thrift.meta_data.FieldMetaData("stmtid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DRIVER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("driverType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TSessionType.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(THandleIdentifier.class, metaDataMap);
  }

  public THandleIdentifier() {
    this.connid = 0L;

    this.stmtid = 0L;

  }

  public THandleIdentifier(
    long connid,
    long stmtid,
    TSessionType driverType)
  {
    this();
    this.connid = connid;
    setConnidIsSet(true);
    this.stmtid = stmtid;
    setStmtidIsSet(true);
    this.driverType = driverType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public THandleIdentifier(THandleIdentifier other) {
    __isset_bitfield = other.__isset_bitfield;
    this.connid = other.connid;
    this.stmtid = other.stmtid;
    if (other.isSetDriverType()) {
      this.driverType = other.driverType;
    }
  }

  public THandleIdentifier deepCopy() {
    return new THandleIdentifier(this);
  }

  @Override
  public void clear() {
    this.connid = 0L;

    this.stmtid = 0L;

    this.driverType = null;
  }

  public long getConnid() {
    return this.connid;
  }

  public THandleIdentifier setConnid(long connid) {
    this.connid = connid;
    setConnidIsSet(true);
    return this;
  }

  public void unsetConnid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONNID_ISSET_ID);
  }

  /** Returns true if field connid is set (has been assigned a value) and false otherwise */
  public boolean isSetConnid() {
    return EncodingUtils.testBit(__isset_bitfield, __CONNID_ISSET_ID);
  }

  public void setConnidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONNID_ISSET_ID, value);
  }

  public long getStmtid() {
    return this.stmtid;
  }

  public THandleIdentifier setStmtid(long stmtid) {
    this.stmtid = stmtid;
    setStmtidIsSet(true);
    return this;
  }

  public void unsetStmtid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STMTID_ISSET_ID);
  }

  /** Returns true if field stmtid is set (has been assigned a value) and false otherwise */
  public boolean isSetStmtid() {
    return EncodingUtils.testBit(__isset_bitfield, __STMTID_ISSET_ID);
  }

  public void setStmtidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STMTID_ISSET_ID, value);
  }

  /**
   * 
   * @see TSessionType
   */
  public TSessionType getDriverType() {
    return this.driverType;
  }

  /**
   * 
   * @see TSessionType
   */
  public THandleIdentifier setDriverType(TSessionType driverType) {
    this.driverType = driverType;
    return this;
  }

  public void unsetDriverType() {
    this.driverType = null;
  }

  /** Returns true if field driverType is set (has been assigned a value) and false otherwise */
  public boolean isSetDriverType() {
    return this.driverType != null;
  }

  public void setDriverTypeIsSet(boolean value) {
    if (!value) {
      this.driverType = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CONNID:
      if (value == null) {
        unsetConnid();
      } else {
        setConnid((Long)value);
      }
      break;

    case STMTID:
      if (value == null) {
        unsetStmtid();
      } else {
        setStmtid((Long)value);
      }
      break;

    case DRIVER_TYPE:
      if (value == null) {
        unsetDriverType();
      } else {
        setDriverType((TSessionType)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CONNID:
      return Long.valueOf(getConnid());

    case STMTID:
      return Long.valueOf(getStmtid());

    case DRIVER_TYPE:
      return getDriverType();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CONNID:
      return isSetConnid();
    case STMTID:
      return isSetStmtid();
    case DRIVER_TYPE:
      return isSetDriverType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof THandleIdentifier)
      return this.equals((THandleIdentifier)that);
    return false;
  }

  public boolean equals(THandleIdentifier that) {
    if (that == null)
      return false;

    boolean this_present_connid = true;
    boolean that_present_connid = true;
    if (this_present_connid || that_present_connid) {
      if (!(this_present_connid && that_present_connid))
        return false;
      if (this.connid != that.connid)
        return false;
    }

    boolean this_present_stmtid = true;
    boolean that_present_stmtid = true;
    if (this_present_stmtid || that_present_stmtid) {
      if (!(this_present_stmtid && that_present_stmtid))
        return false;
      if (this.stmtid != that.stmtid)
        return false;
    }

    boolean this_present_driverType = true && this.isSetDriverType();
    boolean that_present_driverType = true && that.isSetDriverType();
    if (this_present_driverType || that_present_driverType) {
      if (!(this_present_driverType && that_present_driverType))
        return false;
      if (!this.driverType.equals(that.driverType))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_connid = true;
    builder.append(present_connid);
    if (present_connid)
      builder.append(connid);

    boolean present_stmtid = true;
    builder.append(present_stmtid);
    if (present_stmtid)
      builder.append(stmtid);

    boolean present_driverType = true && (isSetDriverType());
    builder.append(present_driverType);
    if (present_driverType)
      builder.append(driverType.getValue());

    return builder.toHashCode();
  }

  @Override
  public int compareTo(THandleIdentifier other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetConnid()).compareTo(other.isSetConnid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConnid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.connid, other.connid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStmtid()).compareTo(other.isSetStmtid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStmtid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stmtid, other.stmtid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDriverType()).compareTo(other.isSetDriverType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDriverType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.driverType, other.driverType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("THandleIdentifier(");
    boolean first = true;

    sb.append("connid:");
    sb.append(this.connid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("stmtid:");
    sb.append(this.stmtid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("driverType:");
    if (this.driverType == null) {
      sb.append("null");
    } else {
      sb.append(this.driverType);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'connid' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'stmtid' because it's a primitive and you chose the non-beans generator.
    if (driverType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'driverType' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class THandleIdentifierStandardSchemeFactory implements SchemeFactory {
    public THandleIdentifierStandardScheme getScheme() {
      return new THandleIdentifierStandardScheme();
    }
  }

  private static class THandleIdentifierStandardScheme extends StandardScheme<THandleIdentifier> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, THandleIdentifier struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CONNID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.connid = iprot.readI64();
              struct.setConnidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STMTID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.stmtid = iprot.readI64();
              struct.setStmtidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DRIVER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.driverType = TSessionType.findByValue(iprot.readI32());
              struct.setDriverTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetConnid()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'connid' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetStmtid()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'stmtid' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, THandleIdentifier struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CONNID_FIELD_DESC);
      oprot.writeI64(struct.connid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STMTID_FIELD_DESC);
      oprot.writeI64(struct.stmtid);
      oprot.writeFieldEnd();
      if (struct.driverType != null) {
        oprot.writeFieldBegin(DRIVER_TYPE_FIELD_DESC);
        oprot.writeI32(struct.driverType.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class THandleIdentifierTupleSchemeFactory implements SchemeFactory {
    public THandleIdentifierTupleScheme getScheme() {
      return new THandleIdentifierTupleScheme();
    }
  }

  private static class THandleIdentifierTupleScheme extends TupleScheme<THandleIdentifier> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, THandleIdentifier struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.connid);
      oprot.writeI64(struct.stmtid);
      oprot.writeI32(struct.driverType.getValue());
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, THandleIdentifier struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.connid = iprot.readI64();
      struct.setConnidIsSet(true);
      struct.stmtid = iprot.readI64();
      struct.setStmtidIsSet(true);
      struct.driverType = TSessionType.findByValue(iprot.readI32());
      struct.setDriverTypeIsSet(true);
    }
  }

}

