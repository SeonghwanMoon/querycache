/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.skplanet.querycache.thrift;

import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TypesConstants {

  public static final Set<TTypeId> PRIMITIVE_TYPES = new HashSet<TTypeId>();
  static {
    PRIMITIVE_TYPES.add(com.skplanet.querycache.thrift.TTypeId.BOOLEAN);
    PRIMITIVE_TYPES.add(com.skplanet.querycache.thrift.TTypeId.TINYINT);
    PRIMITIVE_TYPES.add(com.skplanet.querycache.thrift.TTypeId.SMALLINT);
    PRIMITIVE_TYPES.add(com.skplanet.querycache.thrift.TTypeId.INT);
    PRIMITIVE_TYPES.add(com.skplanet.querycache.thrift.TTypeId.BIGINT);
    PRIMITIVE_TYPES.add(com.skplanet.querycache.thrift.TTypeId.FLOAT);
    PRIMITIVE_TYPES.add(com.skplanet.querycache.thrift.TTypeId.DOUBLE);
    PRIMITIVE_TYPES.add(com.skplanet.querycache.thrift.TTypeId.STRING);
    PRIMITIVE_TYPES.add(com.skplanet.querycache.thrift.TTypeId.DATE);
    PRIMITIVE_TYPES.add(com.skplanet.querycache.thrift.TTypeId.DATETIME);
    PRIMITIVE_TYPES.add(com.skplanet.querycache.thrift.TTypeId.TIMESTAMP);
    PRIMITIVE_TYPES.add(com.skplanet.querycache.thrift.TTypeId.BINARY);
    PRIMITIVE_TYPES.add(com.skplanet.querycache.thrift.TTypeId.CHAR);
    PRIMITIVE_TYPES.add(com.skplanet.querycache.thrift.TTypeId.DECIMAL);
  }

  public static final Set<TTypeId> COMPLEX_TYPES = new HashSet<TTypeId>();
  static {
    COMPLEX_TYPES.add(com.skplanet.querycache.thrift.TTypeId.ARRAY);
    COMPLEX_TYPES.add(com.skplanet.querycache.thrift.TTypeId.MAP);
    COMPLEX_TYPES.add(com.skplanet.querycache.thrift.TTypeId.STRUCT);
    COMPLEX_TYPES.add(com.skplanet.querycache.thrift.TTypeId.UNION);
    COMPLEX_TYPES.add(com.skplanet.querycache.thrift.TTypeId.USER_DEFINED);
  }

  public static final Set<TTypeId> COLLECTION_TYPES = new HashSet<TTypeId>();
  static {
    COLLECTION_TYPES.add(com.skplanet.querycache.thrift.TTypeId.ARRAY);
    COLLECTION_TYPES.add(com.skplanet.querycache.thrift.TTypeId.MAP);
  }

  public static final Map<TTypeId,String> TYPE_NAMES = new HashMap<TTypeId,String>();
  static {
    TYPE_NAMES.put(com.skplanet.querycache.thrift.TTypeId.BOOLEAN, "BOOLEAN");
    TYPE_NAMES.put(com.skplanet.querycache.thrift.TTypeId.TINYINT, "TINYINT");
    TYPE_NAMES.put(com.skplanet.querycache.thrift.TTypeId.SMALLINT, "SMALLINT");
    TYPE_NAMES.put(com.skplanet.querycache.thrift.TTypeId.INT, "INT");
    TYPE_NAMES.put(com.skplanet.querycache.thrift.TTypeId.BIGINT, "BIGINT");
    TYPE_NAMES.put(com.skplanet.querycache.thrift.TTypeId.FLOAT, "FLOAT");
    TYPE_NAMES.put(com.skplanet.querycache.thrift.TTypeId.DOUBLE, "DOUBLE");
    TYPE_NAMES.put(com.skplanet.querycache.thrift.TTypeId.STRING, "STRING");
    TYPE_NAMES.put(com.skplanet.querycache.thrift.TTypeId.DATE, "DATE");
    TYPE_NAMES.put(com.skplanet.querycache.thrift.TTypeId.DATETIME, "DATETIME");
    TYPE_NAMES.put(com.skplanet.querycache.thrift.TTypeId.TIMESTAMP, "TIMESTAMP");
    TYPE_NAMES.put(com.skplanet.querycache.thrift.TTypeId.BINARY, "BINARY");
    TYPE_NAMES.put(com.skplanet.querycache.thrift.TTypeId.CHAR, "CHAR");
    TYPE_NAMES.put(com.skplanet.querycache.thrift.TTypeId.DECIMAL, "DECIMAL");
    TYPE_NAMES.put(com.skplanet.querycache.thrift.TTypeId.ARRAY, "ARRAY");
    TYPE_NAMES.put(com.skplanet.querycache.thrift.TTypeId.MAP, "MAP");
    TYPE_NAMES.put(com.skplanet.querycache.thrift.TTypeId.STRUCT, "STRUCT");
    TYPE_NAMES.put(com.skplanet.querycache.thrift.TTypeId.UNION, "UNION");
  }

}
