/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.skplanet.querycache.cli.thrift;

import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class THostInfo implements org.apache.thrift.TBase<THostInfo, THostInfo._Fields>, java.io.Serializable, Cloneable, Comparable<THostInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("THostInfo");

  private static final org.apache.thrift.protocol.TField HOSTNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("hostname", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField IPADDR_FIELD_DESC = new org.apache.thrift.protocol.TField("ipaddr", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PORTNUM_FIELD_DESC = new org.apache.thrift.protocol.TField("portnum", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new THostInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new THostInfoTupleSchemeFactory());
  }

  public String hostname; // required
  public String ipaddr; // required
  public int portnum; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    HOSTNAME((short)1, "hostname"),
    IPADDR((short)2, "ipaddr"),
    PORTNUM((short)3, "portnum");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // HOSTNAME
          return HOSTNAME;
        case 2: // IPADDR
          return IPADDR;
        case 3: // PORTNUM
          return PORTNUM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PORTNUM_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.HOSTNAME, new org.apache.thrift.meta_data.FieldMetaData("hostname", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IPADDR, new org.apache.thrift.meta_data.FieldMetaData("ipaddr", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PORTNUM, new org.apache.thrift.meta_data.FieldMetaData("portnum", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(THostInfo.class, metaDataMap);
  }

  public THostInfo() {
  }

  public THostInfo(
    String hostname,
    String ipaddr,
    int portnum)
  {
    this();
    this.hostname = hostname;
    this.ipaddr = ipaddr;
    this.portnum = portnum;
    setPortnumIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public THostInfo(THostInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetHostname()) {
      this.hostname = other.hostname;
    }
    if (other.isSetIpaddr()) {
      this.ipaddr = other.ipaddr;
    }
    this.portnum = other.portnum;
  }

  public THostInfo deepCopy() {
    return new THostInfo(this);
  }

  @Override
  public void clear() {
    this.hostname = null;
    this.ipaddr = null;
    setPortnumIsSet(false);
    this.portnum = 0;
  }

  public String getHostname() {
    return this.hostname;
  }

  public THostInfo setHostname(String hostname) {
    this.hostname = hostname;
    return this;
  }

  public void unsetHostname() {
    this.hostname = null;
  }

  /** Returns true if field hostname is set (has been assigned a value) and false otherwise */
  public boolean isSetHostname() {
    return this.hostname != null;
  }

  public void setHostnameIsSet(boolean value) {
    if (!value) {
      this.hostname = null;
    }
  }

  public String getIpaddr() {
    return this.ipaddr;
  }

  public THostInfo setIpaddr(String ipaddr) {
    this.ipaddr = ipaddr;
    return this;
  }

  public void unsetIpaddr() {
    this.ipaddr = null;
  }

  /** Returns true if field ipaddr is set (has been assigned a value) and false otherwise */
  public boolean isSetIpaddr() {
    return this.ipaddr != null;
  }

  public void setIpaddrIsSet(boolean value) {
    if (!value) {
      this.ipaddr = null;
    }
  }

  public int getPortnum() {
    return this.portnum;
  }

  public THostInfo setPortnum(int portnum) {
    this.portnum = portnum;
    setPortnumIsSet(true);
    return this;
  }

  public void unsetPortnum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PORTNUM_ISSET_ID);
  }

  /** Returns true if field portnum is set (has been assigned a value) and false otherwise */
  public boolean isSetPortnum() {
    return EncodingUtils.testBit(__isset_bitfield, __PORTNUM_ISSET_ID);
  }

  public void setPortnumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PORTNUM_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case HOSTNAME:
      if (value == null) {
        unsetHostname();
      } else {
        setHostname((String)value);
      }
      break;

    case IPADDR:
      if (value == null) {
        unsetIpaddr();
      } else {
        setIpaddr((String)value);
      }
      break;

    case PORTNUM:
      if (value == null) {
        unsetPortnum();
      } else {
        setPortnum((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case HOSTNAME:
      return getHostname();

    case IPADDR:
      return getIpaddr();

    case PORTNUM:
      return Integer.valueOf(getPortnum());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case HOSTNAME:
      return isSetHostname();
    case IPADDR:
      return isSetIpaddr();
    case PORTNUM:
      return isSetPortnum();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof THostInfo)
      return this.equals((THostInfo)that);
    return false;
  }

  public boolean equals(THostInfo that) {
    if (that == null)
      return false;

    boolean this_present_hostname = true && this.isSetHostname();
    boolean that_present_hostname = true && that.isSetHostname();
    if (this_present_hostname || that_present_hostname) {
      if (!(this_present_hostname && that_present_hostname))
        return false;
      if (!this.hostname.equals(that.hostname))
        return false;
    }

    boolean this_present_ipaddr = true && this.isSetIpaddr();
    boolean that_present_ipaddr = true && that.isSetIpaddr();
    if (this_present_ipaddr || that_present_ipaddr) {
      if (!(this_present_ipaddr && that_present_ipaddr))
        return false;
      if (!this.ipaddr.equals(that.ipaddr))
        return false;
    }

    boolean this_present_portnum = true;
    boolean that_present_portnum = true;
    if (this_present_portnum || that_present_portnum) {
      if (!(this_present_portnum && that_present_portnum))
        return false;
      if (this.portnum != that.portnum)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_hostname = true && (isSetHostname());
    builder.append(present_hostname);
    if (present_hostname)
      builder.append(hostname);

    boolean present_ipaddr = true && (isSetIpaddr());
    builder.append(present_ipaddr);
    if (present_ipaddr)
      builder.append(ipaddr);

    boolean present_portnum = true;
    builder.append(present_portnum);
    if (present_portnum)
      builder.append(portnum);

    return builder.toHashCode();
  }

  @Override
  public int compareTo(THostInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetHostname()).compareTo(other.isSetHostname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHostname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostname, other.hostname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIpaddr()).compareTo(other.isSetIpaddr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIpaddr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ipaddr, other.ipaddr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPortnum()).compareTo(other.isSetPortnum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPortnum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.portnum, other.portnum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("THostInfo(");
    boolean first = true;

    sb.append("hostname:");
    if (this.hostname == null) {
      sb.append("null");
    } else {
      sb.append(this.hostname);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ipaddr:");
    if (this.ipaddr == null) {
      sb.append("null");
    } else {
      sb.append(this.ipaddr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("portnum:");
    sb.append(this.portnum);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (hostname == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'hostname' was not present! Struct: " + toString());
    }
    if (ipaddr == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'ipaddr' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'portnum' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class THostInfoStandardSchemeFactory implements SchemeFactory {
    public THostInfoStandardScheme getScheme() {
      return new THostInfoStandardScheme();
    }
  }

  private static class THostInfoStandardScheme extends StandardScheme<THostInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, THostInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // HOSTNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hostname = iprot.readString();
              struct.setHostnameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // IPADDR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ipaddr = iprot.readString();
              struct.setIpaddrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PORTNUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.portnum = iprot.readI32();
              struct.setPortnumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetPortnum()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'portnum' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, THostInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.hostname != null) {
        oprot.writeFieldBegin(HOSTNAME_FIELD_DESC);
        oprot.writeString(struct.hostname);
        oprot.writeFieldEnd();
      }
      if (struct.ipaddr != null) {
        oprot.writeFieldBegin(IPADDR_FIELD_DESC);
        oprot.writeString(struct.ipaddr);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PORTNUM_FIELD_DESC);
      oprot.writeI32(struct.portnum);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class THostInfoTupleSchemeFactory implements SchemeFactory {
    public THostInfoTupleScheme getScheme() {
      return new THostInfoTupleScheme();
    }
  }

  private static class THostInfoTupleScheme extends TupleScheme<THostInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, THostInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.hostname);
      oprot.writeString(struct.ipaddr);
      oprot.writeI32(struct.portnum);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, THostInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.hostname = iprot.readString();
      struct.setHostnameIsSet(true);
      struct.ipaddr = iprot.readString();
      struct.setIpaddrIsSet(true);
      struct.portnum = iprot.readI32();
      struct.setPortnumIsSet(true);
    }
  }

}

