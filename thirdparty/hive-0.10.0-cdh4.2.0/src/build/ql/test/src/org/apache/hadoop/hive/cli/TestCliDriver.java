/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.hadoop.hive.cli;

import junit.framework.Test;
import junit.framework.TestCase;
import junit.framework.TestSuite;

import java.io.*;
import java.util.*;

import org.apache.hadoop.hive.ql.QTestUtil;
import org.apache.hadoop.hive.ql.exec.Task;
import org.apache.hadoop.hive.ql.history.HiveHistoryViewer;
import org.apache.hadoop.hive.ql.history.HiveHistory.QueryInfo;
import org.apache.hadoop.hive.ql.history.HiveHistory.Keys;
import org.apache.hadoop.hive.ql.history.HiveHistory.TaskInfo;
import org.apache.hadoop.hive.ql.session.SessionState;



import org.antlr.runtime.*;
import org.antlr.runtime.tree.*;

public class TestCliDriver extends TestCase {

  private static QTestUtil qt;

  static {
    try {
      boolean miniMR = false;
      String hadoopVer;
      if ("".equals("miniMR"))
        miniMR = true;
      hadoopVer = "2.0.0-cdh4.2.0";
      qt = new QTestUtil("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/results/clientpositive", "/home/leejy/work/hive-0.10.0-cdh4.2.0/src/build/ql/test/logs/clientpositive", miniMR, hadoopVer);

      // do a one time initialization
      qt.cleanUp();
      qt.createSources();

    } catch (Exception e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.flush();
      fail("Unexpected exception in static initialization");
    }
  }

  public TestCliDriver(String name) {
    super(name);
  }

  @Override
  protected void setUp() {
    try {
      qt.clearTestSideEffects();
    } catch (Exception e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.flush();
      fail("Unexpected exception in setup");
    }
  }

  /**
   * Dummy last test. This is only meant to shutdown qt
   */
  public void testCliDriver_shutdown() {
    System.out.println ("Cleaning up " + "TestCliDriver");
  }

  @Override
  protected void tearDown() {
    try {
      qt.clearPostTestEffects();
      if (getName().equals("testCliDriver_shutdown"))
        qt.shutdown();
    }
    catch (Exception e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.flush();
      fail("Unexpected exception in tearDown");
    }
  }

  public static Test suite() {
    TestSuite suite = new TestSuite();
    suite.addTest(new TestCliDriver("testCliDriver_add_part_exist"));
    suite.addTest(new TestCliDriver("testCliDriver_add_partition_no_whitelist"));
    suite.addTest(new TestCliDriver("testCliDriver_add_partition_with_whitelist"));
    suite.addTest(new TestCliDriver("testCliDriver_alter1"));
    suite.addTest(new TestCliDriver("testCliDriver_alter2"));
    suite.addTest(new TestCliDriver("testCliDriver_alter3"));
    suite.addTest(new TestCliDriver("testCliDriver_alter4"));
    suite.addTest(new TestCliDriver("testCliDriver_alter5"));
    suite.addTest(new TestCliDriver("testCliDriver_alter_concatenate_indexed_table"));
    suite.addTest(new TestCliDriver("testCliDriver_alter_index"));
    suite.addTest(new TestCliDriver("testCliDriver_alter_merge"));
    suite.addTest(new TestCliDriver("testCliDriver_alter_merge_2"));
    suite.addTest(new TestCliDriver("testCliDriver_alter_merge_stats"));
    suite.addTest(new TestCliDriver("testCliDriver_alter_numbuckets_partitioned_table"));
    suite.addTest(new TestCliDriver("testCliDriver_alter_numbuckets_partitioned_table2"));
    suite.addTest(new TestCliDriver("testCliDriver_alter_partition_format_loc"));
    suite.addTest(new TestCliDriver("testCliDriver_alter_partition_protect_mode"));
    suite.addTest(new TestCliDriver("testCliDriver_alter_rename_partition"));
    suite.addTest(new TestCliDriver("testCliDriver_alter_rename_partition_authorization"));
    suite.addTest(new TestCliDriver("testCliDriver_alter_skewed_table"));
    suite.addTest(new TestCliDriver("testCliDriver_alter_table_serde"));
    suite.addTest(new TestCliDriver("testCliDriver_alter_table_serde2"));
    suite.addTest(new TestCliDriver("testCliDriver_alter_view_rename"));
    suite.addTest(new TestCliDriver("testCliDriver_archive"));
    suite.addTest(new TestCliDriver("testCliDriver_archive_corrupt"));
    suite.addTest(new TestCliDriver("testCliDriver_archive_excludeHadoop20"));
    suite.addTest(new TestCliDriver("testCliDriver_archive_mr_1806"));
    suite.addTest(new TestCliDriver("testCliDriver_archive_multi"));
    suite.addTest(new TestCliDriver("testCliDriver_archive_multi_mr_1806"));
    suite.addTest(new TestCliDriver("testCliDriver_authorization_1"));
    suite.addTest(new TestCliDriver("testCliDriver_authorization_2"));
    suite.addTest(new TestCliDriver("testCliDriver_authorization_3"));
    suite.addTest(new TestCliDriver("testCliDriver_authorization_4"));
    suite.addTest(new TestCliDriver("testCliDriver_authorization_5"));
    suite.addTest(new TestCliDriver("testCliDriver_authorization_6"));
    suite.addTest(new TestCliDriver("testCliDriver_authorization_7"));
    suite.addTest(new TestCliDriver("testCliDriver_auto_join0"));
    suite.addTest(new TestCliDriver("testCliDriver_auto_join1"));
    suite.addTest(new TestCliDriver("testCliDriver_auto_join10"));
    suite.addTest(new TestCliDriver("testCliDriver_auto_join11"));
    suite.addTest(new TestCliDriver("testCliDriver_auto_join12"));
    suite.addTest(new TestCliDriver("testCliDriver_auto_join13"));
    suite.addTest(new TestCliDriver("testCliDriver_auto_join14"));
    suite.addTest(new TestCliDriver("testCliDriver_auto_join14_hadoop20"));
    suite.addTest(new TestCliDriver("testCliDriver_auto_join15"));
    suite.addTest(new TestCliDriver("testCliDriver_auto_join16"));
    suite.addTest(new TestCliDriver("testCliDriver_auto_join17"));
    suite.addTest(new TestCliDriver("testCliDriver_auto_join18"));
    suite.addTest(new TestCliDriver("testCliDriver_auto_join18_multi_distinct"));
    suite.addTest(new TestCliDriver("testCliDriver_auto_join19"));
    suite.addTest(new TestCliDriver("testCliDriver_auto_join2"));
    suite.addTest(new TestCliDriver("testCliDriver_auto_join20"));
    suite.addTest(new TestCliDriver("testCliDriver_auto_join21"));
    suite.addTest(new TestCliDriver("testCliDriver_auto_join22"));
    suite.addTest(new TestCliDriver("testCliDriver_auto_join23"));
    suite.addTest(new TestCliDriver("testCliDriver_auto_join24"));
    suite.addTest(new TestCliDriver("testCliDriver_auto_join25"));
    suite.addTest(new TestCliDriver("testCliDriver_auto_join26"));
    suite.addTest(new TestCliDriver("testCliDriver_auto_join27"));
    suite.addTest(new TestCliDriver("testCliDriver_auto_join28"));
    suite.addTest(new TestCliDriver("testCliDriver_auto_join29"));
    suite.addTest(new TestCliDriver("testCliDriver_auto_join3"));
    suite.addTest(new TestCliDriver("testCliDriver_auto_join30"));
    suite.addTest(new TestCliDriver("testCliDriver_auto_join31"));
    suite.addTest(new TestCliDriver("testCliDriver_auto_join4"));
    suite.addTest(new TestCliDriver("testCliDriver_auto_join5"));
    suite.addTest(new TestCliDriver("testCliDriver_auto_join6"));
    suite.addTest(new TestCliDriver("testCliDriver_auto_join7"));
    suite.addTest(new TestCliDriver("testCliDriver_auto_join8"));
    suite.addTest(new TestCliDriver("testCliDriver_auto_join9"));
    suite.addTest(new TestCliDriver("testCliDriver_auto_join_filters"));
    suite.addTest(new TestCliDriver("testCliDriver_auto_join_nulls"));
    suite.addTest(new TestCliDriver("testCliDriver_autogen_colalias"));
    suite.addTest(new TestCliDriver("testCliDriver_avro_change_schema"));
    suite.addTest(new TestCliDriver("testCliDriver_avro_evolved_schemas"));
    suite.addTest(new TestCliDriver("testCliDriver_avro_joins"));
    suite.addTest(new TestCliDriver("testCliDriver_avro_sanity_test"));
    suite.addTest(new TestCliDriver("testCliDriver_avro_schema_error_message"));
    suite.addTest(new TestCliDriver("testCliDriver_avro_schema_literal"));
    suite.addTest(new TestCliDriver("testCliDriver_ba_table1"));
    suite.addTest(new TestCliDriver("testCliDriver_ba_table2"));
    suite.addTest(new TestCliDriver("testCliDriver_ba_table3"));
    suite.addTest(new TestCliDriver("testCliDriver_ba_table_udfs"));
    suite.addTest(new TestCliDriver("testCliDriver_ba_table_union"));
    suite.addTest(new TestCliDriver("testCliDriver_binary_constant"));
    suite.addTest(new TestCliDriver("testCliDriver_binary_output_format"));
    suite.addTest(new TestCliDriver("testCliDriver_binary_table_bincolserde"));
    suite.addTest(new TestCliDriver("testCliDriver_binary_table_colserde"));
    suite.addTest(new TestCliDriver("testCliDriver_binarysortable_1"));
    suite.addTest(new TestCliDriver("testCliDriver_bucket1"));
    suite.addTest(new TestCliDriver("testCliDriver_bucket2"));
    suite.addTest(new TestCliDriver("testCliDriver_bucket3"));
    suite.addTest(new TestCliDriver("testCliDriver_bucket_groupby"));
    suite.addTest(new TestCliDriver("testCliDriver_bucket_map_join_1"));
    suite.addTest(new TestCliDriver("testCliDriver_bucket_map_join_2"));
    suite.addTest(new TestCliDriver("testCliDriver_bucketcontext_1"));
    suite.addTest(new TestCliDriver("testCliDriver_bucketcontext_2"));
    suite.addTest(new TestCliDriver("testCliDriver_bucketcontext_3"));
    suite.addTest(new TestCliDriver("testCliDriver_bucketcontext_4"));
    suite.addTest(new TestCliDriver("testCliDriver_bucketcontext_5"));
    suite.addTest(new TestCliDriver("testCliDriver_bucketcontext_6"));
    suite.addTest(new TestCliDriver("testCliDriver_bucketcontext_7"));
    suite.addTest(new TestCliDriver("testCliDriver_bucketcontext_8"));
    suite.addTest(new TestCliDriver("testCliDriver_bucketizedhiveinputformat_auto"));
    suite.addTest(new TestCliDriver("testCliDriver_bucketmapjoin1"));
    suite.addTest(new TestCliDriver("testCliDriver_bucketmapjoin10"));
    suite.addTest(new TestCliDriver("testCliDriver_bucketmapjoin11"));
    suite.addTest(new TestCliDriver("testCliDriver_bucketmapjoin12"));
    suite.addTest(new TestCliDriver("testCliDriver_bucketmapjoin13"));
    suite.addTest(new TestCliDriver("testCliDriver_bucketmapjoin2"));
    suite.addTest(new TestCliDriver("testCliDriver_bucketmapjoin3"));
    suite.addTest(new TestCliDriver("testCliDriver_bucketmapjoin4"));
    suite.addTest(new TestCliDriver("testCliDriver_bucketmapjoin5"));
    suite.addTest(new TestCliDriver("testCliDriver_bucketmapjoin8"));
    suite.addTest(new TestCliDriver("testCliDriver_bucketmapjoin9"));
    suite.addTest(new TestCliDriver("testCliDriver_bucketmapjoin_negative"));
    suite.addTest(new TestCliDriver("testCliDriver_bucketmapjoin_negative2"));
    suite.addTest(new TestCliDriver("testCliDriver_bucketmapjoin_negative3"));
    suite.addTest(new TestCliDriver("testCliDriver_case_sensitivity"));
    suite.addTest(new TestCliDriver("testCliDriver_cast1"));
    suite.addTest(new TestCliDriver("testCliDriver_cluster"));
    suite.addTest(new TestCliDriver("testCliDriver_columnarserde_create_shortcut"));
    suite.addTest(new TestCliDriver("testCliDriver_columnstats_partlvl"));
    suite.addTest(new TestCliDriver("testCliDriver_columnstats_tbllvl"));
    suite.addTest(new TestCliDriver("testCliDriver_combine1"));
    suite.addTest(new TestCliDriver("testCliDriver_combine2"));
    suite.addTest(new TestCliDriver("testCliDriver_combine2_hadoop20"));
    suite.addTest(new TestCliDriver("testCliDriver_combine2_win"));
    suite.addTest(new TestCliDriver("testCliDriver_combine3"));
    suite.addTest(new TestCliDriver("testCliDriver_compute_stats_binary"));
    suite.addTest(new TestCliDriver("testCliDriver_compute_stats_boolean"));
    suite.addTest(new TestCliDriver("testCliDriver_compute_stats_double"));
    suite.addTest(new TestCliDriver("testCliDriver_compute_stats_long"));
    suite.addTest(new TestCliDriver("testCliDriver_compute_stats_string"));
    suite.addTest(new TestCliDriver("testCliDriver_concatenate_inherit_table_location"));
    suite.addTest(new TestCliDriver("testCliDriver_constant_prop"));
    suite.addTest(new TestCliDriver("testCliDriver_convert_enum_to_string"));
    suite.addTest(new TestCliDriver("testCliDriver_count"));
    suite.addTest(new TestCliDriver("testCliDriver_cp_mj_rc"));
    suite.addTest(new TestCliDriver("testCliDriver_create_1"));
    suite.addTest(new TestCliDriver("testCliDriver_create_alter_list_bucketing_table1"));
    suite.addTest(new TestCliDriver("testCliDriver_create_big_view"));
    suite.addTest(new TestCliDriver("testCliDriver_create_default_prop"));
    suite.addTest(new TestCliDriver("testCliDriver_create_escape"));
    suite.addTest(new TestCliDriver("testCliDriver_create_genericudaf"));
    suite.addTest(new TestCliDriver("testCliDriver_create_genericudf"));
    suite.addTest(new TestCliDriver("testCliDriver_create_insert_outputformat"));
    suite.addTest(new TestCliDriver("testCliDriver_create_like"));
    suite.addTest(new TestCliDriver("testCliDriver_create_like2"));
    suite.addTest(new TestCliDriver("testCliDriver_create_like_view"));
    suite.addTest(new TestCliDriver("testCliDriver_create_merge_compressed"));
    suite.addTest(new TestCliDriver("testCliDriver_create_nested_type"));
    suite.addTest(new TestCliDriver("testCliDriver_create_or_replace_view"));
    suite.addTest(new TestCliDriver("testCliDriver_create_skewed_table1"));
    suite.addTest(new TestCliDriver("testCliDriver_create_struct_table"));
    suite.addTest(new TestCliDriver("testCliDriver_create_udaf"));
    suite.addTest(new TestCliDriver("testCliDriver_create_union_table"));
    suite.addTest(new TestCliDriver("testCliDriver_create_view"));
    suite.addTest(new TestCliDriver("testCliDriver_create_view_partitioned"));
    suite.addTest(new TestCliDriver("testCliDriver_cross_join"));
    suite.addTest(new TestCliDriver("testCliDriver_ct_case_insensitive"));
    suite.addTest(new TestCliDriver("testCliDriver_ctas"));
    suite.addTest(new TestCliDriver("testCliDriver_ctas_hadoop20"));
    suite.addTest(new TestCliDriver("testCliDriver_ctas_uses_database_location"));
    suite.addTest(new TestCliDriver("testCliDriver_custom_input_output_format"));
    suite.addTest(new TestCliDriver("testCliDriver_database"));
    suite.addTest(new TestCliDriver("testCliDriver_database_drop"));
    suite.addTest(new TestCliDriver("testCliDriver_database_location"));
    suite.addTest(new TestCliDriver("testCliDriver_database_properties"));
    suite.addTest(new TestCliDriver("testCliDriver_ddltime"));
    suite.addTest(new TestCliDriver("testCliDriver_decimal_1"));
    suite.addTest(new TestCliDriver("testCliDriver_decimal_2"));
    suite.addTest(new TestCliDriver("testCliDriver_decimal_3"));
    suite.addTest(new TestCliDriver("testCliDriver_decimal_serde"));
    suite.addTest(new TestCliDriver("testCliDriver_decimal_udf"));
    suite.addTest(new TestCliDriver("testCliDriver_default_partition_name"));
    suite.addTest(new TestCliDriver("testCliDriver_delimiter"));
    suite.addTest(new TestCliDriver("testCliDriver_desc_non_existent_tbl"));
    suite.addTest(new TestCliDriver("testCliDriver_describe_database_json"));
    suite.addTest(new TestCliDriver("testCliDriver_describe_formatted_view_partitioned"));
    suite.addTest(new TestCliDriver("testCliDriver_describe_formatted_view_partitioned_json"));
    suite.addTest(new TestCliDriver("testCliDriver_describe_syntax"));
    suite.addTest(new TestCliDriver("testCliDriver_describe_table"));
    suite.addTest(new TestCliDriver("testCliDriver_describe_table_json"));
    suite.addTest(new TestCliDriver("testCliDriver_describe_xpath"));
    suite.addTest(new TestCliDriver("testCliDriver_diff_part_input_formats"));
    suite.addTest(new TestCliDriver("testCliDriver_disable_file_format_check"));
    suite.addTest(new TestCliDriver("testCliDriver_driverhook"));
    suite.addTest(new TestCliDriver("testCliDriver_drop_database_removes_partition_dirs"));
    suite.addTest(new TestCliDriver("testCliDriver_drop_function"));
    suite.addTest(new TestCliDriver("testCliDriver_drop_index"));
    suite.addTest(new TestCliDriver("testCliDriver_drop_index_removes_partition_dirs"));
    suite.addTest(new TestCliDriver("testCliDriver_drop_multi_partitions"));
    suite.addTest(new TestCliDriver("testCliDriver_drop_partitions_filter"));
    suite.addTest(new TestCliDriver("testCliDriver_drop_partitions_filter2"));
    suite.addTest(new TestCliDriver("testCliDriver_drop_partitions_filter3"));
    suite.addTest(new TestCliDriver("testCliDriver_drop_table"));
    suite.addTest(new TestCliDriver("testCliDriver_drop_table2"));
    suite.addTest(new TestCliDriver("testCliDriver_drop_table_removes_partition_dirs"));
    suite.addTest(new TestCliDriver("testCliDriver_drop_udf"));
    suite.addTest(new TestCliDriver("testCliDriver_drop_view"));
    suite.addTest(new TestCliDriver("testCliDriver_enforce_order"));
    suite.addTest(new TestCliDriver("testCliDriver_escape1"));
    suite.addTest(new TestCliDriver("testCliDriver_escape2"));
    suite.addTest(new TestCliDriver("testCliDriver_escape_clusterby1"));
    suite.addTest(new TestCliDriver("testCliDriver_escape_distributeby1"));
    suite.addTest(new TestCliDriver("testCliDriver_escape_orderby1"));
    suite.addTest(new TestCliDriver("testCliDriver_escape_sortby1"));
    suite.addTest(new TestCliDriver("testCliDriver_exim_00_nonpart_empty"));
    suite.addTest(new TestCliDriver("testCliDriver_exim_01_nonpart"));
    suite.addTest(new TestCliDriver("testCliDriver_exim_02_00_part_empty"));
    suite.addTest(new TestCliDriver("testCliDriver_exim_02_part"));
    suite.addTest(new TestCliDriver("testCliDriver_exim_03_nonpart_over_compat"));
    suite.addTest(new TestCliDriver("testCliDriver_exim_04_all_part"));
    suite.addTest(new TestCliDriver("testCliDriver_exim_04_evolved_parts"));
    suite.addTest(new TestCliDriver("testCliDriver_exim_05_some_part"));
    suite.addTest(new TestCliDriver("testCliDriver_exim_06_one_part"));
    suite.addTest(new TestCliDriver("testCliDriver_exim_07_all_part_over_nonoverlap"));
    suite.addTest(new TestCliDriver("testCliDriver_exim_08_nonpart_rename"));
    suite.addTest(new TestCliDriver("testCliDriver_exim_09_part_spec_nonoverlap"));
    suite.addTest(new TestCliDriver("testCliDriver_exim_10_external_managed"));
    suite.addTest(new TestCliDriver("testCliDriver_exim_11_managed_external"));
    suite.addTest(new TestCliDriver("testCliDriver_exim_12_external_location"));
    suite.addTest(new TestCliDriver("testCliDriver_exim_13_managed_location"));
    suite.addTest(new TestCliDriver("testCliDriver_exim_14_managed_location_over_existing"));
    suite.addTest(new TestCliDriver("testCliDriver_exim_15_external_part"));
    suite.addTest(new TestCliDriver("testCliDriver_exim_16_part_external"));
    suite.addTest(new TestCliDriver("testCliDriver_exim_17_part_managed"));
    suite.addTest(new TestCliDriver("testCliDriver_exim_18_part_external"));
    suite.addTest(new TestCliDriver("testCliDriver_exim_19_00_part_external_location"));
    suite.addTest(new TestCliDriver("testCliDriver_exim_19_part_external_location"));
    suite.addTest(new TestCliDriver("testCliDriver_exim_20_part_managed_location"));
    suite.addTest(new TestCliDriver("testCliDriver_exim_21_export_authsuccess"));
    suite.addTest(new TestCliDriver("testCliDriver_exim_22_import_exist_authsuccess"));
    suite.addTest(new TestCliDriver("testCliDriver_exim_23_import_part_authsuccess"));
    suite.addTest(new TestCliDriver("testCliDriver_exim_24_import_nonexist_authsuccess"));
    suite.addTest(new TestCliDriver("testCliDriver_explain_dependency"));
    suite.addTest(new TestCliDriver("testCliDriver_explode_null"));
    suite.addTest(new TestCliDriver("testCliDriver_fileformat_mix"));
    suite.addTest(new TestCliDriver("testCliDriver_fileformat_sequencefile"));
    suite.addTest(new TestCliDriver("testCliDriver_fileformat_text"));
    suite.addTest(new TestCliDriver("testCliDriver_filter_join_breaktask"));
    suite.addTest(new TestCliDriver("testCliDriver_filter_join_breaktask2"));
    suite.addTest(new TestCliDriver("testCliDriver_global_limit"));
    suite.addTest(new TestCliDriver("testCliDriver_groupby1"));
    suite.addTest(new TestCliDriver("testCliDriver_groupby10"));
    suite.addTest(new TestCliDriver("testCliDriver_groupby11"));
    suite.addTest(new TestCliDriver("testCliDriver_groupby1_limit"));
    suite.addTest(new TestCliDriver("testCliDriver_groupby1_map"));
    suite.addTest(new TestCliDriver("testCliDriver_groupby1_map_nomap"));
    suite.addTest(new TestCliDriver("testCliDriver_groupby1_map_skew"));
    suite.addTest(new TestCliDriver("testCliDriver_groupby1_noskew"));
    suite.addTest(new TestCliDriver("testCliDriver_groupby2_limit"));
    suite.addTest(new TestCliDriver("testCliDriver_groupby2_map"));
    suite.addTest(new TestCliDriver("testCliDriver_groupby2_map_multi_distinct"));
    suite.addTest(new TestCliDriver("testCliDriver_groupby2_map_skew"));
    suite.addTest(new TestCliDriver("testCliDriver_groupby2_noskew"));
    suite.addTest(new TestCliDriver("testCliDriver_groupby2_noskew_multi_distinct"));
    suite.addTest(new TestCliDriver("testCliDriver_groupby3"));
    suite.addTest(new TestCliDriver("testCliDriver_groupby3_map"));
    suite.addTest(new TestCliDriver("testCliDriver_groupby3_map_multi_distinct"));
    suite.addTest(new TestCliDriver("testCliDriver_groupby3_map_skew"));
    suite.addTest(new TestCliDriver("testCliDriver_groupby3_noskew"));
    suite.addTest(new TestCliDriver("testCliDriver_groupby3_noskew_multi_distinct"));
    suite.addTest(new TestCliDriver("testCliDriver_groupby4"));
    suite.addTest(new TestCliDriver("testCliDriver_groupby4_map"));
    suite.addTest(new TestCliDriver("testCliDriver_groupby4_map_skew"));
    suite.addTest(new TestCliDriver("testCliDriver_groupby4_noskew"));
    suite.addTest(new TestCliDriver("testCliDriver_groupby5"));
    suite.addTest(new TestCliDriver("testCliDriver_groupby5_map"));
    suite.addTest(new TestCliDriver("testCliDriver_groupby5_map_skew"));
    suite.addTest(new TestCliDriver("testCliDriver_groupby5_noskew"));
    suite.addTest(new TestCliDriver("testCliDriver_groupby6"));
    suite.addTest(new TestCliDriver("testCliDriver_groupby6_map"));
    suite.addTest(new TestCliDriver("testCliDriver_groupby6_map_skew"));
    suite.addTest(new TestCliDriver("testCliDriver_groupby6_noskew"));
    suite.addTest(new TestCliDriver("testCliDriver_groupby7"));
    suite.addTest(new TestCliDriver("testCliDriver_groupby7_map"));
    suite.addTest(new TestCliDriver("testCliDriver_groupby7_map_multi_single_reducer"));
    suite.addTest(new TestCliDriver("testCliDriver_groupby7_map_skew"));
    suite.addTest(new TestCliDriver("testCliDriver_groupby7_noskew"));
    suite.addTest(new TestCliDriver("testCliDriver_groupby7_noskew_multi_single_reducer"));
    suite.addTest(new TestCliDriver("testCliDriver_groupby8"));
    suite.addTest(new TestCliDriver("testCliDriver_groupby8_map"));
    suite.addTest(new TestCliDriver("testCliDriver_groupby8_map_skew"));
    suite.addTest(new TestCliDriver("testCliDriver_groupby8_noskew"));
    suite.addTest(new TestCliDriver("testCliDriver_groupby9"));
    suite.addTest(new TestCliDriver("testCliDriver_groupby_bigdata"));
    suite.addTest(new TestCliDriver("testCliDriver_groupby_complex_types"));
    suite.addTest(new TestCliDriver("testCliDriver_groupby_complex_types_multi_single_reducer"));
    suite.addTest(new TestCliDriver("testCliDriver_groupby_cube1"));
    suite.addTest(new TestCliDriver("testCliDriver_groupby_grouping_id1"));
    suite.addTest(new TestCliDriver("testCliDriver_groupby_grouping_id2"));
    suite.addTest(new TestCliDriver("testCliDriver_groupby_grouping_sets1"));
    suite.addTest(new TestCliDriver("testCliDriver_groupby_map_ppr"));
    suite.addTest(new TestCliDriver("testCliDriver_groupby_map_ppr_multi_distinct"));
    suite.addTest(new TestCliDriver("testCliDriver_groupby_multi_single_reducer"));
    suite.addTest(new TestCliDriver("testCliDriver_groupby_multi_single_reducer2"));
    suite.addTest(new TestCliDriver("testCliDriver_groupby_neg_float"));
    suite.addTest(new TestCliDriver("testCliDriver_groupby_ppd"));
    suite.addTest(new TestCliDriver("testCliDriver_groupby_ppr"));
    suite.addTest(new TestCliDriver("testCliDriver_groupby_ppr_multi_distinct"));
    suite.addTest(new TestCliDriver("testCliDriver_groupby_rollup1"));
    suite.addTest(new TestCliDriver("testCliDriver_groupby_sort_1"));
    suite.addTest(new TestCliDriver("testCliDriver_groupby_sort_2"));
    suite.addTest(new TestCliDriver("testCliDriver_groupby_sort_3"));
    suite.addTest(new TestCliDriver("testCliDriver_groupby_sort_4"));
    suite.addTest(new TestCliDriver("testCliDriver_groupby_sort_5"));
    suite.addTest(new TestCliDriver("testCliDriver_groupby_sort_skew_1"));
    suite.addTest(new TestCliDriver("testCliDriver_having"));
    suite.addTest(new TestCliDriver("testCliDriver_hook_context_cs"));
    suite.addTest(new TestCliDriver("testCliDriver_hook_order"));
    suite.addTest(new TestCliDriver("testCliDriver_implicit_cast1"));
    suite.addTest(new TestCliDriver("testCliDriver_index_auth"));
    suite.addTest(new TestCliDriver("testCliDriver_index_auto"));
    suite.addTest(new TestCliDriver("testCliDriver_index_auto_empty"));
    suite.addTest(new TestCliDriver("testCliDriver_index_auto_file_format"));
    suite.addTest(new TestCliDriver("testCliDriver_index_auto_mult_tables"));
    suite.addTest(new TestCliDriver("testCliDriver_index_auto_mult_tables_compact"));
    suite.addTest(new TestCliDriver("testCliDriver_index_auto_multiple"));
    suite.addTest(new TestCliDriver("testCliDriver_index_auto_partitioned"));
    suite.addTest(new TestCliDriver("testCliDriver_index_auto_self_join"));
    suite.addTest(new TestCliDriver("testCliDriver_index_auto_unused"));
    suite.addTest(new TestCliDriver("testCliDriver_index_auto_update"));
    suite.addTest(new TestCliDriver("testCliDriver_index_bitmap"));
    suite.addTest(new TestCliDriver("testCliDriver_index_bitmap1"));
    suite.addTest(new TestCliDriver("testCliDriver_index_bitmap2"));
    suite.addTest(new TestCliDriver("testCliDriver_index_bitmap3"));
    suite.addTest(new TestCliDriver("testCliDriver_index_bitmap_auto"));
    suite.addTest(new TestCliDriver("testCliDriver_index_bitmap_auto_partitioned"));
    suite.addTest(new TestCliDriver("testCliDriver_index_bitmap_compression"));
    suite.addTest(new TestCliDriver("testCliDriver_index_bitmap_rc"));
    suite.addTest(new TestCliDriver("testCliDriver_index_compact"));
    suite.addTest(new TestCliDriver("testCliDriver_index_compact_1"));
    suite.addTest(new TestCliDriver("testCliDriver_index_compact_2"));
    suite.addTest(new TestCliDriver("testCliDriver_index_compact_3"));
    suite.addTest(new TestCliDriver("testCliDriver_index_compact_binary_search"));
    suite.addTest(new TestCliDriver("testCliDriver_index_compression"));
    suite.addTest(new TestCliDriver("testCliDriver_index_creation"));
    suite.addTest(new TestCliDriver("testCliDriver_index_stale"));
    suite.addTest(new TestCliDriver("testCliDriver_index_stale_partitioned"));
    suite.addTest(new TestCliDriver("testCliDriver_infer_const_type"));
    suite.addTest(new TestCliDriver("testCliDriver_init_file"));
    suite.addTest(new TestCliDriver("testCliDriver_innerjoin"));
    suite.addTest(new TestCliDriver("testCliDriver_inoutdriver"));
    suite.addTest(new TestCliDriver("testCliDriver_input"));
    suite.addTest(new TestCliDriver("testCliDriver_input0"));
    suite.addTest(new TestCliDriver("testCliDriver_input1"));
    suite.addTest(new TestCliDriver("testCliDriver_input10"));
    suite.addTest(new TestCliDriver("testCliDriver_input11"));
    suite.addTest(new TestCliDriver("testCliDriver_input11_limit"));
    suite.addTest(new TestCliDriver("testCliDriver_input12"));
    suite.addTest(new TestCliDriver("testCliDriver_input12_hadoop20"));
    suite.addTest(new TestCliDriver("testCliDriver_input13"));
    suite.addTest(new TestCliDriver("testCliDriver_input14"));
    suite.addTest(new TestCliDriver("testCliDriver_input14_limit"));
    suite.addTest(new TestCliDriver("testCliDriver_input15"));
    suite.addTest(new TestCliDriver("testCliDriver_input16"));
    suite.addTest(new TestCliDriver("testCliDriver_input17"));
    suite.addTest(new TestCliDriver("testCliDriver_input18"));
    suite.addTest(new TestCliDriver("testCliDriver_input19"));
    suite.addTest(new TestCliDriver("testCliDriver_input1_limit"));
    suite.addTest(new TestCliDriver("testCliDriver_input2"));
    suite.addTest(new TestCliDriver("testCliDriver_input20"));
    suite.addTest(new TestCliDriver("testCliDriver_input21"));
    suite.addTest(new TestCliDriver("testCliDriver_input22"));
    suite.addTest(new TestCliDriver("testCliDriver_input23"));
    suite.addTest(new TestCliDriver("testCliDriver_input24"));
    suite.addTest(new TestCliDriver("testCliDriver_input25"));
    suite.addTest(new TestCliDriver("testCliDriver_input26"));
    suite.addTest(new TestCliDriver("testCliDriver_input28"));
    suite.addTest(new TestCliDriver("testCliDriver_input2_limit"));
    suite.addTest(new TestCliDriver("testCliDriver_input3"));
    suite.addTest(new TestCliDriver("testCliDriver_input30"));
    suite.addTest(new TestCliDriver("testCliDriver_input31"));
    suite.addTest(new TestCliDriver("testCliDriver_input32"));
    suite.addTest(new TestCliDriver("testCliDriver_input33"));
    suite.addTest(new TestCliDriver("testCliDriver_input34"));
    suite.addTest(new TestCliDriver("testCliDriver_input35"));
    suite.addTest(new TestCliDriver("testCliDriver_input36"));
    suite.addTest(new TestCliDriver("testCliDriver_input37"));
    suite.addTest(new TestCliDriver("testCliDriver_input38"));
    suite.addTest(new TestCliDriver("testCliDriver_input39"));
    suite.addTest(new TestCliDriver("testCliDriver_input39_hadoop20"));
    suite.addTest(new TestCliDriver("testCliDriver_input3_limit"));
    suite.addTest(new TestCliDriver("testCliDriver_input4"));
    suite.addTest(new TestCliDriver("testCliDriver_input40"));
    suite.addTest(new TestCliDriver("testCliDriver_input41"));
    suite.addTest(new TestCliDriver("testCliDriver_input42"));
    suite.addTest(new TestCliDriver("testCliDriver_input43"));
    suite.addTest(new TestCliDriver("testCliDriver_input44"));
    suite.addTest(new TestCliDriver("testCliDriver_input45"));
    suite.addTest(new TestCliDriver("testCliDriver_input46"));
    suite.addTest(new TestCliDriver("testCliDriver_input49"));
    suite.addTest(new TestCliDriver("testCliDriver_input4_cb_delim"));
    suite.addTest(new TestCliDriver("testCliDriver_input4_limit"));
    suite.addTest(new TestCliDriver("testCliDriver_input5"));
    suite.addTest(new TestCliDriver("testCliDriver_input6"));
    suite.addTest(new TestCliDriver("testCliDriver_input7"));
    suite.addTest(new TestCliDriver("testCliDriver_input8"));
    suite.addTest(new TestCliDriver("testCliDriver_input9"));
    suite.addTest(new TestCliDriver("testCliDriver_input_columnarserde"));
    suite.addTest(new TestCliDriver("testCliDriver_input_dfs"));
    suite.addTest(new TestCliDriver("testCliDriver_input_dynamicserde"));
    suite.addTest(new TestCliDriver("testCliDriver_input_lazyserde"));
    suite.addTest(new TestCliDriver("testCliDriver_input_limit"));
    suite.addTest(new TestCliDriver("testCliDriver_input_part0"));
    suite.addTest(new TestCliDriver("testCliDriver_input_part1"));
    suite.addTest(new TestCliDriver("testCliDriver_input_part10"));
    suite.addTest(new TestCliDriver("testCliDriver_input_part10_win"));
    suite.addTest(new TestCliDriver("testCliDriver_input_part2"));
    suite.addTest(new TestCliDriver("testCliDriver_input_part3"));
    suite.addTest(new TestCliDriver("testCliDriver_input_part4"));
    suite.addTest(new TestCliDriver("testCliDriver_input_part5"));
    suite.addTest(new TestCliDriver("testCliDriver_input_part6"));
    suite.addTest(new TestCliDriver("testCliDriver_input_part7"));
    suite.addTest(new TestCliDriver("testCliDriver_input_part8"));
    suite.addTest(new TestCliDriver("testCliDriver_input_part9"));
    suite.addTest(new TestCliDriver("testCliDriver_input_testsequencefile"));
    suite.addTest(new TestCliDriver("testCliDriver_input_testxpath"));
    suite.addTest(new TestCliDriver("testCliDriver_input_testxpath2"));
    suite.addTest(new TestCliDriver("testCliDriver_input_testxpath3"));
    suite.addTest(new TestCliDriver("testCliDriver_input_testxpath4"));
    suite.addTest(new TestCliDriver("testCliDriver_inputddl1"));
    suite.addTest(new TestCliDriver("testCliDriver_inputddl2"));
    suite.addTest(new TestCliDriver("testCliDriver_inputddl3"));
    suite.addTest(new TestCliDriver("testCliDriver_inputddl4"));
    suite.addTest(new TestCliDriver("testCliDriver_inputddl5"));
    suite.addTest(new TestCliDriver("testCliDriver_inputddl6"));
    suite.addTest(new TestCliDriver("testCliDriver_inputddl7"));
    suite.addTest(new TestCliDriver("testCliDriver_inputddl8"));
    suite.addTest(new TestCliDriver("testCliDriver_insert1"));
    suite.addTest(new TestCliDriver("testCliDriver_insert1_overwrite_partitions"));
    suite.addTest(new TestCliDriver("testCliDriver_insert2_overwrite_partitions"));
    suite.addTest(new TestCliDriver("testCliDriver_insert_compressed"));
    suite.addTest(new TestCliDriver("testCliDriver_insert_into1"));
    suite.addTest(new TestCliDriver("testCliDriver_insert_into2"));
    suite.addTest(new TestCliDriver("testCliDriver_insert_into3"));
    suite.addTest(new TestCliDriver("testCliDriver_insert_into4"));
    suite.addTest(new TestCliDriver("testCliDriver_insert_into5"));
    suite.addTest(new TestCliDriver("testCliDriver_insert_into6"));
    suite.addTest(new TestCliDriver("testCliDriver_insertexternal1"));
    suite.addTest(new TestCliDriver("testCliDriver_join0"));
    suite.addTest(new TestCliDriver("testCliDriver_join10"));
    suite.addTest(new TestCliDriver("testCliDriver_join11"));
    suite.addTest(new TestCliDriver("testCliDriver_join12"));
    suite.addTest(new TestCliDriver("testCliDriver_join13"));
    suite.addTest(new TestCliDriver("testCliDriver_join14"));
    suite.addTest(new TestCliDriver("testCliDriver_join14_hadoop20"));
    suite.addTest(new TestCliDriver("testCliDriver_join15"));
    suite.addTest(new TestCliDriver("testCliDriver_join16"));
    suite.addTest(new TestCliDriver("testCliDriver_join17"));
    suite.addTest(new TestCliDriver("testCliDriver_join18"));
    suite.addTest(new TestCliDriver("testCliDriver_join18_multi_distinct"));
    suite.addTest(new TestCliDriver("testCliDriver_join19"));
    suite.addTest(new TestCliDriver("testCliDriver_join2"));
    suite.addTest(new TestCliDriver("testCliDriver_join20"));
    suite.addTest(new TestCliDriver("testCliDriver_join21"));
    suite.addTest(new TestCliDriver("testCliDriver_join22"));
    suite.addTest(new TestCliDriver("testCliDriver_join23"));
    suite.addTest(new TestCliDriver("testCliDriver_join24"));
    suite.addTest(new TestCliDriver("testCliDriver_join25"));
    suite.addTest(new TestCliDriver("testCliDriver_join26"));
    suite.addTest(new TestCliDriver("testCliDriver_join27"));
    suite.addTest(new TestCliDriver("testCliDriver_join28"));
    suite.addTest(new TestCliDriver("testCliDriver_join29"));
    suite.addTest(new TestCliDriver("testCliDriver_join3"));
    suite.addTest(new TestCliDriver("testCliDriver_join30"));
    suite.addTest(new TestCliDriver("testCliDriver_join31"));
    suite.addTest(new TestCliDriver("testCliDriver_join32"));
    suite.addTest(new TestCliDriver("testCliDriver_join33"));
    suite.addTest(new TestCliDriver("testCliDriver_join34"));
    suite.addTest(new TestCliDriver("testCliDriver_join35"));
    suite.addTest(new TestCliDriver("testCliDriver_join36"));
    suite.addTest(new TestCliDriver("testCliDriver_join37"));
    suite.addTest(new TestCliDriver("testCliDriver_join38"));
    suite.addTest(new TestCliDriver("testCliDriver_join39"));
    suite.addTest(new TestCliDriver("testCliDriver_join4"));
    suite.addTest(new TestCliDriver("testCliDriver_join40"));
    suite.addTest(new TestCliDriver("testCliDriver_join5"));
    suite.addTest(new TestCliDriver("testCliDriver_join6"));
    suite.addTest(new TestCliDriver("testCliDriver_join7"));
    suite.addTest(new TestCliDriver("testCliDriver_join8"));
    suite.addTest(new TestCliDriver("testCliDriver_join9"));
    suite.addTest(new TestCliDriver("testCliDriver_join_1to1"));
    suite.addTest(new TestCliDriver("testCliDriver_join_casesensitive"));
    suite.addTest(new TestCliDriver("testCliDriver_join_empty"));
    suite.addTest(new TestCliDriver("testCliDriver_join_filters"));
    suite.addTest(new TestCliDriver("testCliDriver_join_filters_overlap"));
    suite.addTest(new TestCliDriver("testCliDriver_join_hive_626"));
    suite.addTest(new TestCliDriver("testCliDriver_join_map_ppr"));
    suite.addTest(new TestCliDriver("testCliDriver_join_nulls"));
    suite.addTest(new TestCliDriver("testCliDriver_join_nullsafe"));
    suite.addTest(new TestCliDriver("testCliDriver_join_rc"));
    suite.addTest(new TestCliDriver("testCliDriver_join_reorder"));
    suite.addTest(new TestCliDriver("testCliDriver_join_reorder2"));
    suite.addTest(new TestCliDriver("testCliDriver_join_reorder3"));
    suite.addTest(new TestCliDriver("testCliDriver_join_thrift"));
    suite.addTest(new TestCliDriver("testCliDriver_join_view"));
    suite.addTest(new TestCliDriver("testCliDriver_keyword_1"));
    suite.addTest(new TestCliDriver("testCliDriver_lateral_view"));
    suite.addTest(new TestCliDriver("testCliDriver_lateral_view_cp"));
    suite.addTest(new TestCliDriver("testCliDriver_lateral_view_ppd"));
    suite.addTest(new TestCliDriver("testCliDriver_leftsemijoin"));
    suite.addTest(new TestCliDriver("testCliDriver_lineage1"));
    suite.addTest(new TestCliDriver("testCliDriver_list_bucket_query_multiskew_1"));
    suite.addTest(new TestCliDriver("testCliDriver_list_bucket_query_multiskew_2"));
    suite.addTest(new TestCliDriver("testCliDriver_list_bucket_query_multiskew_3"));
    suite.addTest(new TestCliDriver("testCliDriver_list_bucket_query_oneskew_1"));
    suite.addTest(new TestCliDriver("testCliDriver_list_bucket_query_oneskew_2"));
    suite.addTest(new TestCliDriver("testCliDriver_list_bucket_query_oneskew_3"));
    suite.addTest(new TestCliDriver("testCliDriver_literal_double"));
    suite.addTest(new TestCliDriver("testCliDriver_literal_ints"));
    suite.addTest(new TestCliDriver("testCliDriver_literal_string"));
    suite.addTest(new TestCliDriver("testCliDriver_load_binary_data"));
    suite.addTest(new TestCliDriver("testCliDriver_load_dyn_part1"));
    suite.addTest(new TestCliDriver("testCliDriver_load_dyn_part10"));
    suite.addTest(new TestCliDriver("testCliDriver_load_dyn_part11"));
    suite.addTest(new TestCliDriver("testCliDriver_load_dyn_part12"));
    suite.addTest(new TestCliDriver("testCliDriver_load_dyn_part13"));
    suite.addTest(new TestCliDriver("testCliDriver_load_dyn_part14"));
    suite.addTest(new TestCliDriver("testCliDriver_load_dyn_part14_win"));
    suite.addTest(new TestCliDriver("testCliDriver_load_dyn_part15"));
    suite.addTest(new TestCliDriver("testCliDriver_load_dyn_part2"));
    suite.addTest(new TestCliDriver("testCliDriver_load_dyn_part3"));
    suite.addTest(new TestCliDriver("testCliDriver_load_dyn_part4"));
    suite.addTest(new TestCliDriver("testCliDriver_load_dyn_part5"));
    suite.addTest(new TestCliDriver("testCliDriver_load_dyn_part6"));
    suite.addTest(new TestCliDriver("testCliDriver_load_dyn_part7"));
    suite.addTest(new TestCliDriver("testCliDriver_load_dyn_part8"));
    suite.addTest(new TestCliDriver("testCliDriver_load_dyn_part9"));
    suite.addTest(new TestCliDriver("testCliDriver_load_exist_part_authsuccess"));
    suite.addTest(new TestCliDriver("testCliDriver_load_fs"));
    suite.addTest(new TestCliDriver("testCliDriver_load_nonpart_authsuccess"));
    suite.addTest(new TestCliDriver("testCliDriver_load_overwrite"));
    suite.addTest(new TestCliDriver("testCliDriver_load_part_authsuccess"));
    suite.addTest(new TestCliDriver("testCliDriver_loadpart1"));
    suite.addTest(new TestCliDriver("testCliDriver_loadpart_err"));
    suite.addTest(new TestCliDriver("testCliDriver_lock1"));
    suite.addTest(new TestCliDriver("testCliDriver_lock2"));
    suite.addTest(new TestCliDriver("testCliDriver_lock3"));
    suite.addTest(new TestCliDriver("testCliDriver_lock4"));
    suite.addTest(new TestCliDriver("testCliDriver_louter_join_ppr"));
    suite.addTest(new TestCliDriver("testCliDriver_mapjoin1"));
    suite.addTest(new TestCliDriver("testCliDriver_mapjoin_distinct"));
    suite.addTest(new TestCliDriver("testCliDriver_mapjoin_filter_on_outerjoin"));
    suite.addTest(new TestCliDriver("testCliDriver_mapjoin_hook"));
    suite.addTest(new TestCliDriver("testCliDriver_mapjoin_mapjoin"));
    suite.addTest(new TestCliDriver("testCliDriver_mapjoin_subquery"));
    suite.addTest(new TestCliDriver("testCliDriver_mapjoin_subquery2"));
    suite.addTest(new TestCliDriver("testCliDriver_mapreduce1"));
    suite.addTest(new TestCliDriver("testCliDriver_mapreduce2"));
    suite.addTest(new TestCliDriver("testCliDriver_mapreduce3"));
    suite.addTest(new TestCliDriver("testCliDriver_mapreduce4"));
    suite.addTest(new TestCliDriver("testCliDriver_mapreduce5"));
    suite.addTest(new TestCliDriver("testCliDriver_mapreduce6"));
    suite.addTest(new TestCliDriver("testCliDriver_mapreduce7"));
    suite.addTest(new TestCliDriver("testCliDriver_mapreduce8"));
    suite.addTest(new TestCliDriver("testCliDriver_merge1"));
    suite.addTest(new TestCliDriver("testCliDriver_merge2"));
    suite.addTest(new TestCliDriver("testCliDriver_merge3"));
    suite.addTest(new TestCliDriver("testCliDriver_merge4"));
    suite.addTest(new TestCliDriver("testCliDriver_merge_dynamic_partition"));
    suite.addTest(new TestCliDriver("testCliDriver_merge_dynamic_partition2"));
    suite.addTest(new TestCliDriver("testCliDriver_merge_dynamic_partition3"));
    suite.addTest(new TestCliDriver("testCliDriver_merge_dynamic_partition4"));
    suite.addTest(new TestCliDriver("testCliDriver_merge_dynamic_partition5"));
    suite.addTest(new TestCliDriver("testCliDriver_mergejoins"));
    suite.addTest(new TestCliDriver("testCliDriver_metadata_export_drop"));
    suite.addTest(new TestCliDriver("testCliDriver_metadataonly1"));
    suite.addTest(new TestCliDriver("testCliDriver_mi"));
    suite.addTest(new TestCliDriver("testCliDriver_misc_json"));
    suite.addTest(new TestCliDriver("testCliDriver_multi_insert"));
    suite.addTest(new TestCliDriver("testCliDriver_multi_insert_gby"));
    suite.addTest(new TestCliDriver("testCliDriver_multi_insert_move_tasks_share_dependencies"));
    suite.addTest(new TestCliDriver("testCliDriver_multi_join_union"));
    suite.addTest(new TestCliDriver("testCliDriver_multi_sahooks"));
    suite.addTest(new TestCliDriver("testCliDriver_multigroupby_singlemr"));
    suite.addTest(new TestCliDriver("testCliDriver_nestedvirtual"));
    suite.addTest(new TestCliDriver("testCliDriver_newline"));
    suite.addTest(new TestCliDriver("testCliDriver_no_hooks"));
    suite.addTest(new TestCliDriver("testCliDriver_noalias_subq1"));
    suite.addTest(new TestCliDriver("testCliDriver_nomore_ambiguous_table_col"));
    suite.addTest(new TestCliDriver("testCliDriver_nonmr_fetch"));
    suite.addTest(new TestCliDriver("testCliDriver_notable_alias1"));
    suite.addTest(new TestCliDriver("testCliDriver_notable_alias2"));
    suite.addTest(new TestCliDriver("testCliDriver_null_column"));
    suite.addTest(new TestCliDriver("testCliDriver_nullgroup"));
    suite.addTest(new TestCliDriver("testCliDriver_nullgroup2"));
    suite.addTest(new TestCliDriver("testCliDriver_nullgroup3"));
    suite.addTest(new TestCliDriver("testCliDriver_nullgroup4"));
    suite.addTest(new TestCliDriver("testCliDriver_nullgroup4_multi_distinct"));
    suite.addTest(new TestCliDriver("testCliDriver_nullgroup5"));
    suite.addTest(new TestCliDriver("testCliDriver_nullinput"));
    suite.addTest(new TestCliDriver("testCliDriver_nullinput2"));
    suite.addTest(new TestCliDriver("testCliDriver_nullscript"));
    suite.addTest(new TestCliDriver("testCliDriver_num_op_type_conv"));
    suite.addTest(new TestCliDriver("testCliDriver_ops_comparison"));
    suite.addTest(new TestCliDriver("testCliDriver_order"));
    suite.addTest(new TestCliDriver("testCliDriver_order2"));
    suite.addTest(new TestCliDriver("testCliDriver_outer_join_ppr"));
    suite.addTest(new TestCliDriver("testCliDriver_overridden_confs"));
    suite.addTest(new TestCliDriver("testCliDriver_parallel"));
    suite.addTest(new TestCliDriver("testCliDriver_parenthesis_star_by"));
    suite.addTest(new TestCliDriver("testCliDriver_part_inherit_tbl_props"));
    suite.addTest(new TestCliDriver("testCliDriver_part_inherit_tbl_props_empty"));
    suite.addTest(new TestCliDriver("testCliDriver_part_inherit_tbl_props_with_star"));
    suite.addTest(new TestCliDriver("testCliDriver_partcols1"));
    suite.addTest(new TestCliDriver("testCliDriver_partition_schema1"));
    suite.addTest(new TestCliDriver("testCliDriver_partition_serde_format"));
    suite.addTest(new TestCliDriver("testCliDriver_partition_special_char"));
    suite.addTest(new TestCliDriver("testCliDriver_partition_vs_table_metadata"));
    suite.addTest(new TestCliDriver("testCliDriver_partition_wise_fileformat"));
    suite.addTest(new TestCliDriver("testCliDriver_partition_wise_fileformat2"));
    suite.addTest(new TestCliDriver("testCliDriver_partition_wise_fileformat3"));
    suite.addTest(new TestCliDriver("testCliDriver_partition_wise_fileformat4"));
    suite.addTest(new TestCliDriver("testCliDriver_partition_wise_fileformat5"));
    suite.addTest(new TestCliDriver("testCliDriver_partition_wise_fileformat6"));
    suite.addTest(new TestCliDriver("testCliDriver_partition_wise_fileformat7"));
    suite.addTest(new TestCliDriver("testCliDriver_partitions_json"));
    suite.addTest(new TestCliDriver("testCliDriver_pcr"));
    suite.addTest(new TestCliDriver("testCliDriver_ppd1"));
    suite.addTest(new TestCliDriver("testCliDriver_ppd2"));
    suite.addTest(new TestCliDriver("testCliDriver_ppd_clusterby"));
    suite.addTest(new TestCliDriver("testCliDriver_ppd_constant_expr"));
    suite.addTest(new TestCliDriver("testCliDriver_ppd_gby"));
    suite.addTest(new TestCliDriver("testCliDriver_ppd_gby2"));
    suite.addTest(new TestCliDriver("testCliDriver_ppd_gby_join"));
    suite.addTest(new TestCliDriver("testCliDriver_ppd_join"));
    suite.addTest(new TestCliDriver("testCliDriver_ppd_join2"));
    suite.addTest(new TestCliDriver("testCliDriver_ppd_join3"));
    suite.addTest(new TestCliDriver("testCliDriver_ppd_join_filter"));
    suite.addTest(new TestCliDriver("testCliDriver_ppd_multi_insert"));
    suite.addTest(new TestCliDriver("testCliDriver_ppd_outer_join1"));
    suite.addTest(new TestCliDriver("testCliDriver_ppd_outer_join2"));
    suite.addTest(new TestCliDriver("testCliDriver_ppd_outer_join3"));
    suite.addTest(new TestCliDriver("testCliDriver_ppd_outer_join4"));
    suite.addTest(new TestCliDriver("testCliDriver_ppd_outer_join5"));
    suite.addTest(new TestCliDriver("testCliDriver_ppd_random"));
    suite.addTest(new TestCliDriver("testCliDriver_ppd_repeated_alias"));
    suite.addTest(new TestCliDriver("testCliDriver_ppd_transform"));
    suite.addTest(new TestCliDriver("testCliDriver_ppd_udf_case"));
    suite.addTest(new TestCliDriver("testCliDriver_ppd_udf_col"));
    suite.addTest(new TestCliDriver("testCliDriver_ppd_union"));
    suite.addTest(new TestCliDriver("testCliDriver_ppd_union_view"));
    suite.addTest(new TestCliDriver("testCliDriver_ppr_allchildsarenull"));
    suite.addTest(new TestCliDriver("testCliDriver_ppr_pushdown"));
    suite.addTest(new TestCliDriver("testCliDriver_ppr_pushdown2"));
    suite.addTest(new TestCliDriver("testCliDriver_ppr_pushdown3"));
    suite.addTest(new TestCliDriver("testCliDriver_print_header"));
    suite.addTest(new TestCliDriver("testCliDriver_progress_1"));
    suite.addTest(new TestCliDriver("testCliDriver_protectmode"));
    suite.addTest(new TestCliDriver("testCliDriver_protectmode2"));
    suite.addTest(new TestCliDriver("testCliDriver_ql_rewrite_gbtoidx"));
    suite.addTest(new TestCliDriver("testCliDriver_query_properties"));
    suite.addTest(new TestCliDriver("testCliDriver_query_result_fileformat"));
    suite.addTest(new TestCliDriver("testCliDriver_query_with_semi"));
    suite.addTest(new TestCliDriver("testCliDriver_quote1"));
    suite.addTest(new TestCliDriver("testCliDriver_quote2"));
    suite.addTest(new TestCliDriver("testCliDriver_rand_partitionpruner1"));
    suite.addTest(new TestCliDriver("testCliDriver_rand_partitionpruner2"));
    suite.addTest(new TestCliDriver("testCliDriver_rand_partitionpruner3"));
    suite.addTest(new TestCliDriver("testCliDriver_rcfile_bigdata"));
    suite.addTest(new TestCliDriver("testCliDriver_rcfile_columnar"));
    suite.addTest(new TestCliDriver("testCliDriver_rcfile_createas1"));
    suite.addTest(new TestCliDriver("testCliDriver_rcfile_default_format"));
    suite.addTest(new TestCliDriver("testCliDriver_rcfile_lazydecompress"));
    suite.addTest(new TestCliDriver("testCliDriver_rcfile_merge1"));
    suite.addTest(new TestCliDriver("testCliDriver_rcfile_merge2"));
    suite.addTest(new TestCliDriver("testCliDriver_rcfile_merge3"));
    suite.addTest(new TestCliDriver("testCliDriver_rcfile_merge4"));
    suite.addTest(new TestCliDriver("testCliDriver_rcfile_null_value"));
    suite.addTest(new TestCliDriver("testCliDriver_rcfile_toleratecorruptions"));
    suite.addTest(new TestCliDriver("testCliDriver_rcfile_union"));
    suite.addTest(new TestCliDriver("testCliDriver_recursive_dir"));
    suite.addTest(new TestCliDriver("testCliDriver_reduce_deduplicate_exclude_gby"));
    suite.addTest(new TestCliDriver("testCliDriver_reduce_deduplicate_exclude_join"));
    suite.addTest(new TestCliDriver("testCliDriver_regex_col"));
    suite.addTest(new TestCliDriver("testCliDriver_regexp_extract"));
    suite.addTest(new TestCliDriver("testCliDriver_rename_column"));
    suite.addTest(new TestCliDriver("testCliDriver_rename_external_partition_location"));
    suite.addTest(new TestCliDriver("testCliDriver_rename_partition_location"));
    suite.addTest(new TestCliDriver("testCliDriver_repair"));
    suite.addTest(new TestCliDriver("testCliDriver_repair_hadoop23"));
    suite.addTest(new TestCliDriver("testCliDriver_reset_conf"));
    suite.addTest(new TestCliDriver("testCliDriver_router_join_ppr"));
    suite.addTest(new TestCliDriver("testCliDriver_sample1"));
    suite.addTest(new TestCliDriver("testCliDriver_sample10"));
    suite.addTest(new TestCliDriver("testCliDriver_sample2"));
    suite.addTest(new TestCliDriver("testCliDriver_sample3"));
    suite.addTest(new TestCliDriver("testCliDriver_sample4"));
    suite.addTest(new TestCliDriver("testCliDriver_sample5"));
    suite.addTest(new TestCliDriver("testCliDriver_sample6"));
    suite.addTest(new TestCliDriver("testCliDriver_sample7"));
    suite.addTest(new TestCliDriver("testCliDriver_sample8"));
    suite.addTest(new TestCliDriver("testCliDriver_sample9"));
    suite.addTest(new TestCliDriver("testCliDriver_sample_islocalmode_hook"));
    suite.addTest(new TestCliDriver("testCliDriver_sample_islocalmode_hook_hadoop20"));
    suite.addTest(new TestCliDriver("testCliDriver_script_env_var1"));
    suite.addTest(new TestCliDriver("testCliDriver_script_env_var2"));
    suite.addTest(new TestCliDriver("testCliDriver_script_pipe"));
    suite.addTest(new TestCliDriver("testCliDriver_select_as_omitted"));
    suite.addTest(new TestCliDriver("testCliDriver_select_transform_hint"));
    suite.addTest(new TestCliDriver("testCliDriver_semijoin"));
    suite.addTest(new TestCliDriver("testCliDriver_serde_regex"));
    suite.addTest(new TestCliDriver("testCliDriver_serde_reported_schema"));
    suite.addTest(new TestCliDriver("testCliDriver_set_processor_namespaces"));
    suite.addTest(new TestCliDriver("testCliDriver_set_variable_sub"));
    suite.addTest(new TestCliDriver("testCliDriver_show_columns"));
    suite.addTest(new TestCliDriver("testCliDriver_show_create_table_alter"));
    suite.addTest(new TestCliDriver("testCliDriver_show_create_table_db_table"));
    suite.addTest(new TestCliDriver("testCliDriver_show_create_table_delimited"));
    suite.addTest(new TestCliDriver("testCliDriver_show_create_table_partitioned"));
    suite.addTest(new TestCliDriver("testCliDriver_show_create_table_serde"));
    suite.addTest(new TestCliDriver("testCliDriver_show_create_table_view"));
    suite.addTest(new TestCliDriver("testCliDriver_show_describe_func_quotes"));
    suite.addTest(new TestCliDriver("testCliDriver_show_functions"));
    suite.addTest(new TestCliDriver("testCliDriver_show_indexes_edge_cases"));
    suite.addTest(new TestCliDriver("testCliDriver_show_indexes_syntax"));
    suite.addTest(new TestCliDriver("testCliDriver_show_partitions"));
    suite.addTest(new TestCliDriver("testCliDriver_show_tables"));
    suite.addTest(new TestCliDriver("testCliDriver_show_tablestatus"));
    suite.addTest(new TestCliDriver("testCliDriver_show_tblproperties"));
    suite.addTest(new TestCliDriver("testCliDriver_showparts"));
    suite.addTest(new TestCliDriver("testCliDriver_skewjoin"));
    suite.addTest(new TestCliDriver("testCliDriver_skewjoin_union_remove_1"));
    suite.addTest(new TestCliDriver("testCliDriver_skewjoin_union_remove_2"));
    suite.addTest(new TestCliDriver("testCliDriver_skewjoinopt1"));
    suite.addTest(new TestCliDriver("testCliDriver_skewjoinopt10"));
    suite.addTest(new TestCliDriver("testCliDriver_skewjoinopt11"));
    suite.addTest(new TestCliDriver("testCliDriver_skewjoinopt12"));
    suite.addTest(new TestCliDriver("testCliDriver_skewjoinopt13"));
    suite.addTest(new TestCliDriver("testCliDriver_skewjoinopt14"));
    suite.addTest(new TestCliDriver("testCliDriver_skewjoinopt15"));
    suite.addTest(new TestCliDriver("testCliDriver_skewjoinopt16"));
    suite.addTest(new TestCliDriver("testCliDriver_skewjoinopt17"));
    suite.addTest(new TestCliDriver("testCliDriver_skewjoinopt18"));
    suite.addTest(new TestCliDriver("testCliDriver_skewjoinopt19"));
    suite.addTest(new TestCliDriver("testCliDriver_skewjoinopt2"));
    suite.addTest(new TestCliDriver("testCliDriver_skewjoinopt20"));
    suite.addTest(new TestCliDriver("testCliDriver_skewjoinopt3"));
    suite.addTest(new TestCliDriver("testCliDriver_skewjoinopt4"));
    suite.addTest(new TestCliDriver("testCliDriver_skewjoinopt5"));
    suite.addTest(new TestCliDriver("testCliDriver_skewjoinopt6"));
    suite.addTest(new TestCliDriver("testCliDriver_skewjoinopt7"));
    suite.addTest(new TestCliDriver("testCliDriver_skewjoinopt8"));
    suite.addTest(new TestCliDriver("testCliDriver_skewjoinopt9"));
    suite.addTest(new TestCliDriver("testCliDriver_smb_mapjoin9"));
    suite.addTest(new TestCliDriver("testCliDriver_smb_mapjoin_1"));
    suite.addTest(new TestCliDriver("testCliDriver_smb_mapjoin_10"));
    suite.addTest(new TestCliDriver("testCliDriver_smb_mapjoin_11"));
    suite.addTest(new TestCliDriver("testCliDriver_smb_mapjoin_12"));
    suite.addTest(new TestCliDriver("testCliDriver_smb_mapjoin_13"));
    suite.addTest(new TestCliDriver("testCliDriver_smb_mapjoin_2"));
    suite.addTest(new TestCliDriver("testCliDriver_smb_mapjoin_3"));
    suite.addTest(new TestCliDriver("testCliDriver_smb_mapjoin_4"));
    suite.addTest(new TestCliDriver("testCliDriver_smb_mapjoin_5"));
    suite.addTest(new TestCliDriver("testCliDriver_smb_mapjoin_6"));
    suite.addTest(new TestCliDriver("testCliDriver_smb_mapjoin_7"));
    suite.addTest(new TestCliDriver("testCliDriver_sort"));
    suite.addTest(new TestCliDriver("testCliDriver_sort_merge_join_desc_1"));
    suite.addTest(new TestCliDriver("testCliDriver_sort_merge_join_desc_2"));
    suite.addTest(new TestCliDriver("testCliDriver_sort_merge_join_desc_3"));
    suite.addTest(new TestCliDriver("testCliDriver_sort_merge_join_desc_4"));
    suite.addTest(new TestCliDriver("testCliDriver_sort_merge_join_desc_5"));
    suite.addTest(new TestCliDriver("testCliDriver_sort_merge_join_desc_6"));
    suite.addTest(new TestCliDriver("testCliDriver_sort_merge_join_desc_7"));
    suite.addTest(new TestCliDriver("testCliDriver_source"));
    suite.addTest(new TestCliDriver("testCliDriver_split_sample"));
    suite.addTest(new TestCliDriver("testCliDriver_stats0"));
    suite.addTest(new TestCliDriver("testCliDriver_stats1"));
    suite.addTest(new TestCliDriver("testCliDriver_stats10"));
    suite.addTest(new TestCliDriver("testCliDriver_stats11"));
    suite.addTest(new TestCliDriver("testCliDriver_stats12"));
    suite.addTest(new TestCliDriver("testCliDriver_stats13"));
    suite.addTest(new TestCliDriver("testCliDriver_stats14"));
    suite.addTest(new TestCliDriver("testCliDriver_stats15"));
    suite.addTest(new TestCliDriver("testCliDriver_stats16"));
    suite.addTest(new TestCliDriver("testCliDriver_stats18"));
    suite.addTest(new TestCliDriver("testCliDriver_stats2"));
    suite.addTest(new TestCliDriver("testCliDriver_stats3"));
    suite.addTest(new TestCliDriver("testCliDriver_stats4"));
    suite.addTest(new TestCliDriver("testCliDriver_stats5"));
    suite.addTest(new TestCliDriver("testCliDriver_stats6"));
    suite.addTest(new TestCliDriver("testCliDriver_stats7"));
    suite.addTest(new TestCliDriver("testCliDriver_stats8"));
    suite.addTest(new TestCliDriver("testCliDriver_stats9"));
    suite.addTest(new TestCliDriver("testCliDriver_stats_aggregator_error_1"));
    suite.addTest(new TestCliDriver("testCliDriver_stats_empty_dyn_part"));
    suite.addTest(new TestCliDriver("testCliDriver_stats_empty_partition"));
    suite.addTest(new TestCliDriver("testCliDriver_stats_publisher_error_1"));
    suite.addTest(new TestCliDriver("testCliDriver_str_to_map"));
    suite.addTest(new TestCliDriver("testCliDriver_subq"));
    suite.addTest(new TestCliDriver("testCliDriver_subq2"));
    suite.addTest(new TestCliDriver("testCliDriver_symlink_text_input_format"));
    suite.addTest(new TestCliDriver("testCliDriver_table_access_keys_stats"));
    suite.addTest(new TestCliDriver("testCliDriver_tablename_with_select"));
    suite.addTest(new TestCliDriver("testCliDriver_timestamp_1"));
    suite.addTest(new TestCliDriver("testCliDriver_timestamp_2"));
    suite.addTest(new TestCliDriver("testCliDriver_timestamp_3"));
    suite.addTest(new TestCliDriver("testCliDriver_timestamp_comparison"));
    suite.addTest(new TestCliDriver("testCliDriver_timestamp_lazy"));
    suite.addTest(new TestCliDriver("testCliDriver_timestamp_udf"));
    suite.addTest(new TestCliDriver("testCliDriver_touch"));
    suite.addTest(new TestCliDriver("testCliDriver_transform1"));
    suite.addTest(new TestCliDriver("testCliDriver_transform2"));
    suite.addTest(new TestCliDriver("testCliDriver_transform_ppr1"));
    suite.addTest(new TestCliDriver("testCliDriver_transform_ppr2"));
    suite.addTest(new TestCliDriver("testCliDriver_type_cast_1"));
    suite.addTest(new TestCliDriver("testCliDriver_type_widening"));
    suite.addTest(new TestCliDriver("testCliDriver_udaf_collect_set"));
    suite.addTest(new TestCliDriver("testCliDriver_udaf_context_ngrams"));
    suite.addTest(new TestCliDriver("testCliDriver_udaf_corr"));
    suite.addTest(new TestCliDriver("testCliDriver_udaf_covar_pop"));
    suite.addTest(new TestCliDriver("testCliDriver_udaf_covar_samp"));
    suite.addTest(new TestCliDriver("testCliDriver_udaf_histogram_numeric"));
    suite.addTest(new TestCliDriver("testCliDriver_udaf_ngrams"));
    suite.addTest(new TestCliDriver("testCliDriver_udaf_number_format"));
    suite.addTest(new TestCliDriver("testCliDriver_udaf_percentile_approx"));
    suite.addTest(new TestCliDriver("testCliDriver_udf1"));
    suite.addTest(new TestCliDriver("testCliDriver_udf2"));
    suite.addTest(new TestCliDriver("testCliDriver_udf3"));
    suite.addTest(new TestCliDriver("testCliDriver_udf4"));
    suite.addTest(new TestCliDriver("testCliDriver_udf5"));
    suite.addTest(new TestCliDriver("testCliDriver_udf6"));
    suite.addTest(new TestCliDriver("testCliDriver_udf7"));
    suite.addTest(new TestCliDriver("testCliDriver_udf8"));
    suite.addTest(new TestCliDriver("testCliDriver_udf9"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_10_trims"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_E"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_PI"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_abs"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_acos"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_add"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_array"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_array_contains"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_ascii"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_asin"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_atan"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_avg"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_between"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_bigint"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_bin"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_bitmap_and"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_bitmap_empty"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_bitmap_or"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_bitwise_and"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_bitwise_not"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_bitwise_or"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_bitwise_xor"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_boolean"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_case"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_case_column_pruning"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_case_thrift"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_ceil"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_ceiling"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_coalesce"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_compare_java_string"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_concat"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_concat_insert1"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_concat_insert2"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_concat_ws"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_conv"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_cos"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_count"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_date_add"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_date_sub"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_datediff"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_day"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_dayofmonth"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_degrees"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_div"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_divide"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_double"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_elt"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_equal"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_exp"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_explode"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_field"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_find_in_set"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_float"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_floor"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_format_number"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_from_unixtime"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_get_json_object"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_greaterthan"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_greaterthanorequal"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_hash"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_hex"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_hour"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_if"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_in"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_in_file"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_index"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_inline"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_instr"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_int"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_isnotnull"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_isnull"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_isnull_isnotnull"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_java_method"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_lcase"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_length"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_lessthan"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_lessthanorequal"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_like"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_ln"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_locate"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_log"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_log10"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_log2"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_logic_java_boolean"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_lower"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_lpad"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_ltrim"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_map"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_map_keys"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_map_values"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_max"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_min"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_minute"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_modulo"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_month"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_named_struct"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_negative"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_not"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_notequal"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_notop"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_or"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_parse_url"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_percentile"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_pmod"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_positive"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_pow"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_power"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_printf"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_radians"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_rand"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_reflect"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_regexp"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_regexp_extract"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_regexp_replace"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_repeat"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_reverse"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_rlike"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_round"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_round_2"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_rpad"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_rtrim"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_second"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_sentences"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_sign"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_sin"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_size"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_smallint"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_sort_array"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_space"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_split"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_sqrt"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_std"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_stddev"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_stddev_pop"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_stddev_samp"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_string"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_struct"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_substr"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_substring"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_subtract"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_sum"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_tan"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_testlength"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_testlength2"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_tinyint"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_to_date"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_translate"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_trim"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_ucase"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_unhex"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_union"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_unix_timestamp"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_upper"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_var_pop"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_var_samp"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_variance"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_weekofyear"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_when"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_xpath"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_xpath_boolean"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_xpath_double"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_xpath_float"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_xpath_int"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_xpath_long"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_xpath_short"));
    suite.addTest(new TestCliDriver("testCliDriver_udf_xpath_string"));
    suite.addTest(new TestCliDriver("testCliDriver_udtf_explode"));
    suite.addTest(new TestCliDriver("testCliDriver_udtf_json_tuple"));
    suite.addTest(new TestCliDriver("testCliDriver_udtf_parse_url_tuple"));
    suite.addTest(new TestCliDriver("testCliDriver_udtf_stack"));
    suite.addTest(new TestCliDriver("testCliDriver_union"));
    suite.addTest(new TestCliDriver("testCliDriver_union10"));
    suite.addTest(new TestCliDriver("testCliDriver_union11"));
    suite.addTest(new TestCliDriver("testCliDriver_union12"));
    suite.addTest(new TestCliDriver("testCliDriver_union13"));
    suite.addTest(new TestCliDriver("testCliDriver_union14"));
    suite.addTest(new TestCliDriver("testCliDriver_union15"));
    suite.addTest(new TestCliDriver("testCliDriver_union16"));
    suite.addTest(new TestCliDriver("testCliDriver_union17"));
    suite.addTest(new TestCliDriver("testCliDriver_union18"));
    suite.addTest(new TestCliDriver("testCliDriver_union19"));
    suite.addTest(new TestCliDriver("testCliDriver_union2"));
    suite.addTest(new TestCliDriver("testCliDriver_union20"));
    suite.addTest(new TestCliDriver("testCliDriver_union21"));
    suite.addTest(new TestCliDriver("testCliDriver_union22"));
    suite.addTest(new TestCliDriver("testCliDriver_union23"));
    suite.addTest(new TestCliDriver("testCliDriver_union24"));
    suite.addTest(new TestCliDriver("testCliDriver_union25"));
    suite.addTest(new TestCliDriver("testCliDriver_union26"));
    suite.addTest(new TestCliDriver("testCliDriver_union27"));
    suite.addTest(new TestCliDriver("testCliDriver_union28"));
    suite.addTest(new TestCliDriver("testCliDriver_union29"));
    suite.addTest(new TestCliDriver("testCliDriver_union3"));
    suite.addTest(new TestCliDriver("testCliDriver_union30"));
    suite.addTest(new TestCliDriver("testCliDriver_union31"));
    suite.addTest(new TestCliDriver("testCliDriver_union32"));
    suite.addTest(new TestCliDriver("testCliDriver_union4"));
    suite.addTest(new TestCliDriver("testCliDriver_union5"));
    suite.addTest(new TestCliDriver("testCliDriver_union6"));
    suite.addTest(new TestCliDriver("testCliDriver_union7"));
    suite.addTest(new TestCliDriver("testCliDriver_union8"));
    suite.addTest(new TestCliDriver("testCliDriver_union9"));
    suite.addTest(new TestCliDriver("testCliDriver_union_lateralview"));
    suite.addTest(new TestCliDriver("testCliDriver_union_null"));
    suite.addTest(new TestCliDriver("testCliDriver_union_ppr"));
    suite.addTest(new TestCliDriver("testCliDriver_union_remove_1"));
    suite.addTest(new TestCliDriver("testCliDriver_union_remove_10"));
    suite.addTest(new TestCliDriver("testCliDriver_union_remove_11"));
    suite.addTest(new TestCliDriver("testCliDriver_union_remove_12"));
    suite.addTest(new TestCliDriver("testCliDriver_union_remove_13"));
    suite.addTest(new TestCliDriver("testCliDriver_union_remove_14"));
    suite.addTest(new TestCliDriver("testCliDriver_union_remove_15"));
    suite.addTest(new TestCliDriver("testCliDriver_union_remove_16"));
    suite.addTest(new TestCliDriver("testCliDriver_union_remove_17"));
    suite.addTest(new TestCliDriver("testCliDriver_union_remove_18"));
    suite.addTest(new TestCliDriver("testCliDriver_union_remove_19"));
    suite.addTest(new TestCliDriver("testCliDriver_union_remove_2"));
    suite.addTest(new TestCliDriver("testCliDriver_union_remove_20"));
    suite.addTest(new TestCliDriver("testCliDriver_union_remove_21"));
    suite.addTest(new TestCliDriver("testCliDriver_union_remove_22"));
    suite.addTest(new TestCliDriver("testCliDriver_union_remove_23"));
    suite.addTest(new TestCliDriver("testCliDriver_union_remove_24"));
    suite.addTest(new TestCliDriver("testCliDriver_union_remove_3"));
    suite.addTest(new TestCliDriver("testCliDriver_union_remove_4"));
    suite.addTest(new TestCliDriver("testCliDriver_union_remove_5"));
    suite.addTest(new TestCliDriver("testCliDriver_union_remove_6"));
    suite.addTest(new TestCliDriver("testCliDriver_union_remove_7"));
    suite.addTest(new TestCliDriver("testCliDriver_union_remove_8"));
    suite.addTest(new TestCliDriver("testCliDriver_union_remove_9"));
    suite.addTest(new TestCliDriver("testCliDriver_union_script"));
    suite.addTest(new TestCliDriver("testCliDriver_union_view"));
    suite.addTest(new TestCliDriver("testCliDriver_uniquejoin"));
    suite.addTest(new TestCliDriver("testCliDriver_updateAccessTime"));
    suite.addTest(new TestCliDriver("testCliDriver_view"));
    suite.addTest(new TestCliDriver("testCliDriver_virtual_column"));
    suite.addTest(new TestCliDriver("testCliDriver_shutdown"));
    return suite;
  }

  static String debugHint = "\nSee build/ql/tmp/hive.log, "
     + "or try \"ant test ... -Dtest.silent=false\" to get more logs.";

  public void testCliDriver_add_part_exist() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "add_part_exist.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/add_part_exist.q");

      if (qt.shouldBeSkipped("add_part_exist.q")) {
        return;
      }

      qt.cliInit("add_part_exist.q", false);
      int ecode = qt.executeClient("add_part_exist.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("add_part_exist.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "add_part_exist.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "add_part_exist.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_add_partition_no_whitelist() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "add_partition_no_whitelist.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/add_partition_no_whitelist.q");

      if (qt.shouldBeSkipped("add_partition_no_whitelist.q")) {
        return;
      }

      qt.cliInit("add_partition_no_whitelist.q", false);
      int ecode = qt.executeClient("add_partition_no_whitelist.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("add_partition_no_whitelist.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "add_partition_no_whitelist.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "add_partition_no_whitelist.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_add_partition_with_whitelist() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "add_partition_with_whitelist.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/add_partition_with_whitelist.q");

      if (qt.shouldBeSkipped("add_partition_with_whitelist.q")) {
        return;
      }

      qt.cliInit("add_partition_with_whitelist.q", false);
      int ecode = qt.executeClient("add_partition_with_whitelist.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("add_partition_with_whitelist.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "add_partition_with_whitelist.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "add_partition_with_whitelist.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_alter1() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "alter1.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/alter1.q");

      if (qt.shouldBeSkipped("alter1.q")) {
        return;
      }

      qt.cliInit("alter1.q", false);
      int ecode = qt.executeClient("alter1.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("alter1.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "alter1.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "alter1.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_alter2() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "alter2.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/alter2.q");

      if (qt.shouldBeSkipped("alter2.q")) {
        return;
      }

      qt.cliInit("alter2.q", false);
      int ecode = qt.executeClient("alter2.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("alter2.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "alter2.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "alter2.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_alter3() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "alter3.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/alter3.q");

      if (qt.shouldBeSkipped("alter3.q")) {
        return;
      }

      qt.cliInit("alter3.q", false);
      int ecode = qt.executeClient("alter3.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("alter3.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "alter3.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "alter3.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_alter4() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "alter4.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/alter4.q");

      if (qt.shouldBeSkipped("alter4.q")) {
        return;
      }

      qt.cliInit("alter4.q", false);
      int ecode = qt.executeClient("alter4.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("alter4.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "alter4.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "alter4.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_alter5() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "alter5.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/alter5.q");

      if (qt.shouldBeSkipped("alter5.q")) {
        return;
      }

      qt.cliInit("alter5.q", false);
      int ecode = qt.executeClient("alter5.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("alter5.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "alter5.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "alter5.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_alter_concatenate_indexed_table() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "alter_concatenate_indexed_table.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/alter_concatenate_indexed_table.q");

      if (qt.shouldBeSkipped("alter_concatenate_indexed_table.q")) {
        return;
      }

      qt.cliInit("alter_concatenate_indexed_table.q", false);
      int ecode = qt.executeClient("alter_concatenate_indexed_table.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("alter_concatenate_indexed_table.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "alter_concatenate_indexed_table.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "alter_concatenate_indexed_table.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_alter_index() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "alter_index.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/alter_index.q");

      if (qt.shouldBeSkipped("alter_index.q")) {
        return;
      }

      qt.cliInit("alter_index.q", false);
      int ecode = qt.executeClient("alter_index.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("alter_index.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "alter_index.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "alter_index.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_alter_merge() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "alter_merge.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/alter_merge.q");

      if (qt.shouldBeSkipped("alter_merge.q")) {
        return;
      }

      qt.cliInit("alter_merge.q", false);
      int ecode = qt.executeClient("alter_merge.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("alter_merge.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "alter_merge.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "alter_merge.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_alter_merge_2() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "alter_merge_2.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/alter_merge_2.q");

      if (qt.shouldBeSkipped("alter_merge_2.q")) {
        return;
      }

      qt.cliInit("alter_merge_2.q", false);
      int ecode = qt.executeClient("alter_merge_2.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("alter_merge_2.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "alter_merge_2.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "alter_merge_2.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_alter_merge_stats() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "alter_merge_stats.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/alter_merge_stats.q");

      if (qt.shouldBeSkipped("alter_merge_stats.q")) {
        return;
      }

      qt.cliInit("alter_merge_stats.q", false);
      int ecode = qt.executeClient("alter_merge_stats.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("alter_merge_stats.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "alter_merge_stats.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "alter_merge_stats.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_alter_numbuckets_partitioned_table() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "alter_numbuckets_partitioned_table.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/alter_numbuckets_partitioned_table.q");

      if (qt.shouldBeSkipped("alter_numbuckets_partitioned_table.q")) {
        return;
      }

      qt.cliInit("alter_numbuckets_partitioned_table.q", false);
      int ecode = qt.executeClient("alter_numbuckets_partitioned_table.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("alter_numbuckets_partitioned_table.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "alter_numbuckets_partitioned_table.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "alter_numbuckets_partitioned_table.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_alter_numbuckets_partitioned_table2() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "alter_numbuckets_partitioned_table2.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/alter_numbuckets_partitioned_table2.q");

      if (qt.shouldBeSkipped("alter_numbuckets_partitioned_table2.q")) {
        return;
      }

      qt.cliInit("alter_numbuckets_partitioned_table2.q", false);
      int ecode = qt.executeClient("alter_numbuckets_partitioned_table2.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("alter_numbuckets_partitioned_table2.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "alter_numbuckets_partitioned_table2.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "alter_numbuckets_partitioned_table2.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_alter_partition_format_loc() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "alter_partition_format_loc.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/alter_partition_format_loc.q");

      if (qt.shouldBeSkipped("alter_partition_format_loc.q")) {
        return;
      }

      qt.cliInit("alter_partition_format_loc.q", false);
      int ecode = qt.executeClient("alter_partition_format_loc.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("alter_partition_format_loc.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "alter_partition_format_loc.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "alter_partition_format_loc.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_alter_partition_protect_mode() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "alter_partition_protect_mode.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/alter_partition_protect_mode.q");

      if (qt.shouldBeSkipped("alter_partition_protect_mode.q")) {
        return;
      }

      qt.cliInit("alter_partition_protect_mode.q", false);
      int ecode = qt.executeClient("alter_partition_protect_mode.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("alter_partition_protect_mode.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "alter_partition_protect_mode.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "alter_partition_protect_mode.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_alter_rename_partition() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "alter_rename_partition.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/alter_rename_partition.q");

      if (qt.shouldBeSkipped("alter_rename_partition.q")) {
        return;
      }

      qt.cliInit("alter_rename_partition.q", false);
      int ecode = qt.executeClient("alter_rename_partition.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("alter_rename_partition.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "alter_rename_partition.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "alter_rename_partition.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_alter_rename_partition_authorization() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "alter_rename_partition_authorization.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/alter_rename_partition_authorization.q");

      if (qt.shouldBeSkipped("alter_rename_partition_authorization.q")) {
        return;
      }

      qt.cliInit("alter_rename_partition_authorization.q", false);
      int ecode = qt.executeClient("alter_rename_partition_authorization.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("alter_rename_partition_authorization.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "alter_rename_partition_authorization.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "alter_rename_partition_authorization.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_alter_skewed_table() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "alter_skewed_table.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/alter_skewed_table.q");

      if (qt.shouldBeSkipped("alter_skewed_table.q")) {
        return;
      }

      qt.cliInit("alter_skewed_table.q", false);
      int ecode = qt.executeClient("alter_skewed_table.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("alter_skewed_table.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "alter_skewed_table.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "alter_skewed_table.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_alter_table_serde() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "alter_table_serde.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/alter_table_serde.q");

      if (qt.shouldBeSkipped("alter_table_serde.q")) {
        return;
      }

      qt.cliInit("alter_table_serde.q", false);
      int ecode = qt.executeClient("alter_table_serde.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("alter_table_serde.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "alter_table_serde.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "alter_table_serde.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_alter_table_serde2() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "alter_table_serde2.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/alter_table_serde2.q");

      if (qt.shouldBeSkipped("alter_table_serde2.q")) {
        return;
      }

      qt.cliInit("alter_table_serde2.q", false);
      int ecode = qt.executeClient("alter_table_serde2.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("alter_table_serde2.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "alter_table_serde2.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "alter_table_serde2.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_alter_view_rename() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "alter_view_rename.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/alter_view_rename.q");

      if (qt.shouldBeSkipped("alter_view_rename.q")) {
        return;
      }

      qt.cliInit("alter_view_rename.q", false);
      int ecode = qt.executeClient("alter_view_rename.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("alter_view_rename.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "alter_view_rename.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "alter_view_rename.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_archive() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "archive.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/archive.q");

      if (qt.shouldBeSkipped("archive.q")) {
        return;
      }

      qt.cliInit("archive.q", false);
      int ecode = qt.executeClient("archive.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("archive.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "archive.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "archive.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_archive_corrupt() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "archive_corrupt.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/archive_corrupt.q");

      if (qt.shouldBeSkipped("archive_corrupt.q")) {
        return;
      }

      qt.cliInit("archive_corrupt.q", false);
      int ecode = qt.executeClient("archive_corrupt.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("archive_corrupt.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "archive_corrupt.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "archive_corrupt.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_archive_excludeHadoop20() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "archive_excludeHadoop20.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/archive_excludeHadoop20.q");

      if (qt.shouldBeSkipped("archive_excludeHadoop20.q")) {
        return;
      }

      qt.cliInit("archive_excludeHadoop20.q", false);
      int ecode = qt.executeClient("archive_excludeHadoop20.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("archive_excludeHadoop20.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "archive_excludeHadoop20.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "archive_excludeHadoop20.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_archive_mr_1806() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "archive_mr_1806.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/archive_mr_1806.q");

      if (qt.shouldBeSkipped("archive_mr_1806.q")) {
        return;
      }

      qt.cliInit("archive_mr_1806.q", false);
      int ecode = qt.executeClient("archive_mr_1806.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("archive_mr_1806.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "archive_mr_1806.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "archive_mr_1806.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_archive_multi() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "archive_multi.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/archive_multi.q");

      if (qt.shouldBeSkipped("archive_multi.q")) {
        return;
      }

      qt.cliInit("archive_multi.q", false);
      int ecode = qt.executeClient("archive_multi.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("archive_multi.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "archive_multi.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "archive_multi.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_archive_multi_mr_1806() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "archive_multi_mr_1806.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/archive_multi_mr_1806.q");

      if (qt.shouldBeSkipped("archive_multi_mr_1806.q")) {
        return;
      }

      qt.cliInit("archive_multi_mr_1806.q", false);
      int ecode = qt.executeClient("archive_multi_mr_1806.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("archive_multi_mr_1806.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "archive_multi_mr_1806.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "archive_multi_mr_1806.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_authorization_1() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "authorization_1.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/authorization_1.q");

      if (qt.shouldBeSkipped("authorization_1.q")) {
        return;
      }

      qt.cliInit("authorization_1.q", false);
      int ecode = qt.executeClient("authorization_1.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("authorization_1.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "authorization_1.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "authorization_1.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_authorization_2() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "authorization_2.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/authorization_2.q");

      if (qt.shouldBeSkipped("authorization_2.q")) {
        return;
      }

      qt.cliInit("authorization_2.q", false);
      int ecode = qt.executeClient("authorization_2.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("authorization_2.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "authorization_2.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "authorization_2.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_authorization_3() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "authorization_3.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/authorization_3.q");

      if (qt.shouldBeSkipped("authorization_3.q")) {
        return;
      }

      qt.cliInit("authorization_3.q", false);
      int ecode = qt.executeClient("authorization_3.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("authorization_3.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "authorization_3.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "authorization_3.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_authorization_4() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "authorization_4.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/authorization_4.q");

      if (qt.shouldBeSkipped("authorization_4.q")) {
        return;
      }

      qt.cliInit("authorization_4.q", false);
      int ecode = qt.executeClient("authorization_4.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("authorization_4.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "authorization_4.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "authorization_4.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_authorization_5() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "authorization_5.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/authorization_5.q");

      if (qt.shouldBeSkipped("authorization_5.q")) {
        return;
      }

      qt.cliInit("authorization_5.q", false);
      int ecode = qt.executeClient("authorization_5.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("authorization_5.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "authorization_5.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "authorization_5.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_authorization_6() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "authorization_6.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/authorization_6.q");

      if (qt.shouldBeSkipped("authorization_6.q")) {
        return;
      }

      qt.cliInit("authorization_6.q", false);
      int ecode = qt.executeClient("authorization_6.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("authorization_6.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "authorization_6.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "authorization_6.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_authorization_7() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "authorization_7.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/authorization_7.q");

      if (qt.shouldBeSkipped("authorization_7.q")) {
        return;
      }

      qt.cliInit("authorization_7.q", false);
      int ecode = qt.executeClient("authorization_7.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("authorization_7.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "authorization_7.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "authorization_7.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_auto_join0() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "auto_join0.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/auto_join0.q");

      if (qt.shouldBeSkipped("auto_join0.q")) {
        return;
      }

      qt.cliInit("auto_join0.q", false);
      int ecode = qt.executeClient("auto_join0.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("auto_join0.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "auto_join0.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "auto_join0.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_auto_join1() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "auto_join1.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/auto_join1.q");

      if (qt.shouldBeSkipped("auto_join1.q")) {
        return;
      }

      qt.cliInit("auto_join1.q", false);
      int ecode = qt.executeClient("auto_join1.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("auto_join1.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "auto_join1.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "auto_join1.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_auto_join10() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "auto_join10.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/auto_join10.q");

      if (qt.shouldBeSkipped("auto_join10.q")) {
        return;
      }

      qt.cliInit("auto_join10.q", false);
      int ecode = qt.executeClient("auto_join10.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("auto_join10.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "auto_join10.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "auto_join10.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_auto_join11() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "auto_join11.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/auto_join11.q");

      if (qt.shouldBeSkipped("auto_join11.q")) {
        return;
      }

      qt.cliInit("auto_join11.q", false);
      int ecode = qt.executeClient("auto_join11.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("auto_join11.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "auto_join11.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "auto_join11.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_auto_join12() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "auto_join12.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/auto_join12.q");

      if (qt.shouldBeSkipped("auto_join12.q")) {
        return;
      }

      qt.cliInit("auto_join12.q", false);
      int ecode = qt.executeClient("auto_join12.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("auto_join12.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "auto_join12.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "auto_join12.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_auto_join13() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "auto_join13.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/auto_join13.q");

      if (qt.shouldBeSkipped("auto_join13.q")) {
        return;
      }

      qt.cliInit("auto_join13.q", false);
      int ecode = qt.executeClient("auto_join13.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("auto_join13.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "auto_join13.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "auto_join13.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_auto_join14() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "auto_join14.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/auto_join14.q");

      if (qt.shouldBeSkipped("auto_join14.q")) {
        return;
      }

      qt.cliInit("auto_join14.q", false);
      int ecode = qt.executeClient("auto_join14.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("auto_join14.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "auto_join14.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "auto_join14.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_auto_join14_hadoop20() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "auto_join14_hadoop20.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/auto_join14_hadoop20.q");

      if (qt.shouldBeSkipped("auto_join14_hadoop20.q")) {
        return;
      }

      qt.cliInit("auto_join14_hadoop20.q", false);
      int ecode = qt.executeClient("auto_join14_hadoop20.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("auto_join14_hadoop20.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "auto_join14_hadoop20.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "auto_join14_hadoop20.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_auto_join15() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "auto_join15.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/auto_join15.q");

      if (qt.shouldBeSkipped("auto_join15.q")) {
        return;
      }

      qt.cliInit("auto_join15.q", false);
      int ecode = qt.executeClient("auto_join15.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("auto_join15.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "auto_join15.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "auto_join15.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_auto_join16() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "auto_join16.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/auto_join16.q");

      if (qt.shouldBeSkipped("auto_join16.q")) {
        return;
      }

      qt.cliInit("auto_join16.q", false);
      int ecode = qt.executeClient("auto_join16.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("auto_join16.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "auto_join16.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "auto_join16.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_auto_join17() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "auto_join17.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/auto_join17.q");

      if (qt.shouldBeSkipped("auto_join17.q")) {
        return;
      }

      qt.cliInit("auto_join17.q", false);
      int ecode = qt.executeClient("auto_join17.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("auto_join17.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "auto_join17.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "auto_join17.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_auto_join18() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "auto_join18.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/auto_join18.q");

      if (qt.shouldBeSkipped("auto_join18.q")) {
        return;
      }

      qt.cliInit("auto_join18.q", false);
      int ecode = qt.executeClient("auto_join18.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("auto_join18.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "auto_join18.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "auto_join18.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_auto_join18_multi_distinct() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "auto_join18_multi_distinct.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/auto_join18_multi_distinct.q");

      if (qt.shouldBeSkipped("auto_join18_multi_distinct.q")) {
        return;
      }

      qt.cliInit("auto_join18_multi_distinct.q", false);
      int ecode = qt.executeClient("auto_join18_multi_distinct.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("auto_join18_multi_distinct.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "auto_join18_multi_distinct.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "auto_join18_multi_distinct.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_auto_join19() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "auto_join19.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/auto_join19.q");

      if (qt.shouldBeSkipped("auto_join19.q")) {
        return;
      }

      qt.cliInit("auto_join19.q", false);
      int ecode = qt.executeClient("auto_join19.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("auto_join19.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "auto_join19.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "auto_join19.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_auto_join2() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "auto_join2.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/auto_join2.q");

      if (qt.shouldBeSkipped("auto_join2.q")) {
        return;
      }

      qt.cliInit("auto_join2.q", false);
      int ecode = qt.executeClient("auto_join2.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("auto_join2.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "auto_join2.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "auto_join2.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_auto_join20() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "auto_join20.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/auto_join20.q");

      if (qt.shouldBeSkipped("auto_join20.q")) {
        return;
      }

      qt.cliInit("auto_join20.q", false);
      int ecode = qt.executeClient("auto_join20.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("auto_join20.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "auto_join20.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "auto_join20.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_auto_join21() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "auto_join21.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/auto_join21.q");

      if (qt.shouldBeSkipped("auto_join21.q")) {
        return;
      }

      qt.cliInit("auto_join21.q", false);
      int ecode = qt.executeClient("auto_join21.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("auto_join21.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "auto_join21.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "auto_join21.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_auto_join22() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "auto_join22.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/auto_join22.q");

      if (qt.shouldBeSkipped("auto_join22.q")) {
        return;
      }

      qt.cliInit("auto_join22.q", false);
      int ecode = qt.executeClient("auto_join22.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("auto_join22.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "auto_join22.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "auto_join22.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_auto_join23() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "auto_join23.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/auto_join23.q");

      if (qt.shouldBeSkipped("auto_join23.q")) {
        return;
      }

      qt.cliInit("auto_join23.q", false);
      int ecode = qt.executeClient("auto_join23.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("auto_join23.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "auto_join23.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "auto_join23.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_auto_join24() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "auto_join24.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/auto_join24.q");

      if (qt.shouldBeSkipped("auto_join24.q")) {
        return;
      }

      qt.cliInit("auto_join24.q", false);
      int ecode = qt.executeClient("auto_join24.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("auto_join24.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "auto_join24.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "auto_join24.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_auto_join25() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "auto_join25.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/auto_join25.q");

      if (qt.shouldBeSkipped("auto_join25.q")) {
        return;
      }

      qt.cliInit("auto_join25.q", false);
      int ecode = qt.executeClient("auto_join25.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("auto_join25.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "auto_join25.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "auto_join25.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_auto_join26() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "auto_join26.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/auto_join26.q");

      if (qt.shouldBeSkipped("auto_join26.q")) {
        return;
      }

      qt.cliInit("auto_join26.q", false);
      int ecode = qt.executeClient("auto_join26.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("auto_join26.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "auto_join26.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "auto_join26.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_auto_join27() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "auto_join27.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/auto_join27.q");

      if (qt.shouldBeSkipped("auto_join27.q")) {
        return;
      }

      qt.cliInit("auto_join27.q", false);
      int ecode = qt.executeClient("auto_join27.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("auto_join27.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "auto_join27.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "auto_join27.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_auto_join28() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "auto_join28.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/auto_join28.q");

      if (qt.shouldBeSkipped("auto_join28.q")) {
        return;
      }

      qt.cliInit("auto_join28.q", false);
      int ecode = qt.executeClient("auto_join28.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("auto_join28.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "auto_join28.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "auto_join28.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_auto_join29() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "auto_join29.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/auto_join29.q");

      if (qt.shouldBeSkipped("auto_join29.q")) {
        return;
      }

      qt.cliInit("auto_join29.q", false);
      int ecode = qt.executeClient("auto_join29.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("auto_join29.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "auto_join29.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "auto_join29.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_auto_join3() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "auto_join3.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/auto_join3.q");

      if (qt.shouldBeSkipped("auto_join3.q")) {
        return;
      }

      qt.cliInit("auto_join3.q", false);
      int ecode = qt.executeClient("auto_join3.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("auto_join3.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "auto_join3.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "auto_join3.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_auto_join30() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "auto_join30.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/auto_join30.q");

      if (qt.shouldBeSkipped("auto_join30.q")) {
        return;
      }

      qt.cliInit("auto_join30.q", false);
      int ecode = qt.executeClient("auto_join30.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("auto_join30.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "auto_join30.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "auto_join30.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_auto_join31() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "auto_join31.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/auto_join31.q");

      if (qt.shouldBeSkipped("auto_join31.q")) {
        return;
      }

      qt.cliInit("auto_join31.q", false);
      int ecode = qt.executeClient("auto_join31.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("auto_join31.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "auto_join31.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "auto_join31.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_auto_join4() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "auto_join4.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/auto_join4.q");

      if (qt.shouldBeSkipped("auto_join4.q")) {
        return;
      }

      qt.cliInit("auto_join4.q", false);
      int ecode = qt.executeClient("auto_join4.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("auto_join4.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "auto_join4.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "auto_join4.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_auto_join5() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "auto_join5.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/auto_join5.q");

      if (qt.shouldBeSkipped("auto_join5.q")) {
        return;
      }

      qt.cliInit("auto_join5.q", false);
      int ecode = qt.executeClient("auto_join5.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("auto_join5.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "auto_join5.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "auto_join5.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_auto_join6() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "auto_join6.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/auto_join6.q");

      if (qt.shouldBeSkipped("auto_join6.q")) {
        return;
      }

      qt.cliInit("auto_join6.q", false);
      int ecode = qt.executeClient("auto_join6.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("auto_join6.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "auto_join6.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "auto_join6.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_auto_join7() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "auto_join7.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/auto_join7.q");

      if (qt.shouldBeSkipped("auto_join7.q")) {
        return;
      }

      qt.cliInit("auto_join7.q", false);
      int ecode = qt.executeClient("auto_join7.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("auto_join7.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "auto_join7.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "auto_join7.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_auto_join8() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "auto_join8.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/auto_join8.q");

      if (qt.shouldBeSkipped("auto_join8.q")) {
        return;
      }

      qt.cliInit("auto_join8.q", false);
      int ecode = qt.executeClient("auto_join8.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("auto_join8.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "auto_join8.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "auto_join8.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_auto_join9() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "auto_join9.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/auto_join9.q");

      if (qt.shouldBeSkipped("auto_join9.q")) {
        return;
      }

      qt.cliInit("auto_join9.q", false);
      int ecode = qt.executeClient("auto_join9.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("auto_join9.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "auto_join9.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "auto_join9.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_auto_join_filters() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "auto_join_filters.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/auto_join_filters.q");

      if (qt.shouldBeSkipped("auto_join_filters.q")) {
        return;
      }

      qt.cliInit("auto_join_filters.q", false);
      int ecode = qt.executeClient("auto_join_filters.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("auto_join_filters.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "auto_join_filters.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "auto_join_filters.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_auto_join_nulls() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "auto_join_nulls.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/auto_join_nulls.q");

      if (qt.shouldBeSkipped("auto_join_nulls.q")) {
        return;
      }

      qt.cliInit("auto_join_nulls.q", false);
      int ecode = qt.executeClient("auto_join_nulls.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("auto_join_nulls.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "auto_join_nulls.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "auto_join_nulls.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_autogen_colalias() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "autogen_colalias.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/autogen_colalias.q");

      if (qt.shouldBeSkipped("autogen_colalias.q")) {
        return;
      }

      qt.cliInit("autogen_colalias.q", false);
      int ecode = qt.executeClient("autogen_colalias.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("autogen_colalias.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "autogen_colalias.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "autogen_colalias.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_avro_change_schema() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "avro_change_schema.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/avro_change_schema.q");

      if (qt.shouldBeSkipped("avro_change_schema.q")) {
        return;
      }

      qt.cliInit("avro_change_schema.q", false);
      int ecode = qt.executeClient("avro_change_schema.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("avro_change_schema.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "avro_change_schema.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "avro_change_schema.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_avro_evolved_schemas() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "avro_evolved_schemas.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/avro_evolved_schemas.q");

      if (qt.shouldBeSkipped("avro_evolved_schemas.q")) {
        return;
      }

      qt.cliInit("avro_evolved_schemas.q", false);
      int ecode = qt.executeClient("avro_evolved_schemas.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("avro_evolved_schemas.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "avro_evolved_schemas.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "avro_evolved_schemas.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_avro_joins() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "avro_joins.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/avro_joins.q");

      if (qt.shouldBeSkipped("avro_joins.q")) {
        return;
      }

      qt.cliInit("avro_joins.q", false);
      int ecode = qt.executeClient("avro_joins.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("avro_joins.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "avro_joins.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "avro_joins.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_avro_sanity_test() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "avro_sanity_test.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/avro_sanity_test.q");

      if (qt.shouldBeSkipped("avro_sanity_test.q")) {
        return;
      }

      qt.cliInit("avro_sanity_test.q", false);
      int ecode = qt.executeClient("avro_sanity_test.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("avro_sanity_test.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "avro_sanity_test.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "avro_sanity_test.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_avro_schema_error_message() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "avro_schema_error_message.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/avro_schema_error_message.q");

      if (qt.shouldBeSkipped("avro_schema_error_message.q")) {
        return;
      }

      qt.cliInit("avro_schema_error_message.q", false);
      int ecode = qt.executeClient("avro_schema_error_message.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("avro_schema_error_message.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "avro_schema_error_message.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "avro_schema_error_message.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_avro_schema_literal() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "avro_schema_literal.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/avro_schema_literal.q");

      if (qt.shouldBeSkipped("avro_schema_literal.q")) {
        return;
      }

      qt.cliInit("avro_schema_literal.q", false);
      int ecode = qt.executeClient("avro_schema_literal.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("avro_schema_literal.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "avro_schema_literal.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "avro_schema_literal.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_ba_table1() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "ba_table1.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/ba_table1.q");

      if (qt.shouldBeSkipped("ba_table1.q")) {
        return;
      }

      qt.cliInit("ba_table1.q", false);
      int ecode = qt.executeClient("ba_table1.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("ba_table1.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "ba_table1.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "ba_table1.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_ba_table2() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "ba_table2.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/ba_table2.q");

      if (qt.shouldBeSkipped("ba_table2.q")) {
        return;
      }

      qt.cliInit("ba_table2.q", false);
      int ecode = qt.executeClient("ba_table2.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("ba_table2.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "ba_table2.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "ba_table2.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_ba_table3() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "ba_table3.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/ba_table3.q");

      if (qt.shouldBeSkipped("ba_table3.q")) {
        return;
      }

      qt.cliInit("ba_table3.q", false);
      int ecode = qt.executeClient("ba_table3.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("ba_table3.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "ba_table3.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "ba_table3.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_ba_table_udfs() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "ba_table_udfs.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/ba_table_udfs.q");

      if (qt.shouldBeSkipped("ba_table_udfs.q")) {
        return;
      }

      qt.cliInit("ba_table_udfs.q", false);
      int ecode = qt.executeClient("ba_table_udfs.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("ba_table_udfs.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "ba_table_udfs.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "ba_table_udfs.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_ba_table_union() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "ba_table_union.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/ba_table_union.q");

      if (qt.shouldBeSkipped("ba_table_union.q")) {
        return;
      }

      qt.cliInit("ba_table_union.q", false);
      int ecode = qt.executeClient("ba_table_union.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("ba_table_union.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "ba_table_union.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "ba_table_union.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_binary_constant() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "binary_constant.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/binary_constant.q");

      if (qt.shouldBeSkipped("binary_constant.q")) {
        return;
      }

      qt.cliInit("binary_constant.q", false);
      int ecode = qt.executeClient("binary_constant.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("binary_constant.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "binary_constant.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "binary_constant.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_binary_output_format() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "binary_output_format.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/binary_output_format.q");

      if (qt.shouldBeSkipped("binary_output_format.q")) {
        return;
      }

      qt.cliInit("binary_output_format.q", false);
      int ecode = qt.executeClient("binary_output_format.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("binary_output_format.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "binary_output_format.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "binary_output_format.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_binary_table_bincolserde() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "binary_table_bincolserde.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/binary_table_bincolserde.q");

      if (qt.shouldBeSkipped("binary_table_bincolserde.q")) {
        return;
      }

      qt.cliInit("binary_table_bincolserde.q", false);
      int ecode = qt.executeClient("binary_table_bincolserde.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("binary_table_bincolserde.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "binary_table_bincolserde.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "binary_table_bincolserde.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_binary_table_colserde() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "binary_table_colserde.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/binary_table_colserde.q");

      if (qt.shouldBeSkipped("binary_table_colserde.q")) {
        return;
      }

      qt.cliInit("binary_table_colserde.q", false);
      int ecode = qt.executeClient("binary_table_colserde.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("binary_table_colserde.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "binary_table_colserde.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "binary_table_colserde.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_binarysortable_1() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "binarysortable_1.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/binarysortable_1.q");

      if (qt.shouldBeSkipped("binarysortable_1.q")) {
        return;
      }

      qt.cliInit("binarysortable_1.q", false);
      int ecode = qt.executeClient("binarysortable_1.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("binarysortable_1.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "binarysortable_1.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "binarysortable_1.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_bucket1() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "bucket1.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/bucket1.q");

      if (qt.shouldBeSkipped("bucket1.q")) {
        return;
      }

      qt.cliInit("bucket1.q", false);
      int ecode = qt.executeClient("bucket1.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("bucket1.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "bucket1.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "bucket1.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_bucket2() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "bucket2.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/bucket2.q");

      if (qt.shouldBeSkipped("bucket2.q")) {
        return;
      }

      qt.cliInit("bucket2.q", false);
      int ecode = qt.executeClient("bucket2.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("bucket2.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "bucket2.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "bucket2.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_bucket3() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "bucket3.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/bucket3.q");

      if (qt.shouldBeSkipped("bucket3.q")) {
        return;
      }

      qt.cliInit("bucket3.q", false);
      int ecode = qt.executeClient("bucket3.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("bucket3.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "bucket3.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "bucket3.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_bucket_groupby() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "bucket_groupby.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/bucket_groupby.q");

      if (qt.shouldBeSkipped("bucket_groupby.q")) {
        return;
      }

      qt.cliInit("bucket_groupby.q", false);
      int ecode = qt.executeClient("bucket_groupby.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("bucket_groupby.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "bucket_groupby.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "bucket_groupby.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_bucket_map_join_1() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "bucket_map_join_1.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/bucket_map_join_1.q");

      if (qt.shouldBeSkipped("bucket_map_join_1.q")) {
        return;
      }

      qt.cliInit("bucket_map_join_1.q", false);
      int ecode = qt.executeClient("bucket_map_join_1.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("bucket_map_join_1.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "bucket_map_join_1.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "bucket_map_join_1.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_bucket_map_join_2() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "bucket_map_join_2.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/bucket_map_join_2.q");

      if (qt.shouldBeSkipped("bucket_map_join_2.q")) {
        return;
      }

      qt.cliInit("bucket_map_join_2.q", false);
      int ecode = qt.executeClient("bucket_map_join_2.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("bucket_map_join_2.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "bucket_map_join_2.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "bucket_map_join_2.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_bucketcontext_1() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "bucketcontext_1.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/bucketcontext_1.q");

      if (qt.shouldBeSkipped("bucketcontext_1.q")) {
        return;
      }

      qt.cliInit("bucketcontext_1.q", false);
      int ecode = qt.executeClient("bucketcontext_1.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("bucketcontext_1.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "bucketcontext_1.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "bucketcontext_1.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_bucketcontext_2() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "bucketcontext_2.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/bucketcontext_2.q");

      if (qt.shouldBeSkipped("bucketcontext_2.q")) {
        return;
      }

      qt.cliInit("bucketcontext_2.q", false);
      int ecode = qt.executeClient("bucketcontext_2.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("bucketcontext_2.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "bucketcontext_2.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "bucketcontext_2.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_bucketcontext_3() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "bucketcontext_3.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/bucketcontext_3.q");

      if (qt.shouldBeSkipped("bucketcontext_3.q")) {
        return;
      }

      qt.cliInit("bucketcontext_3.q", false);
      int ecode = qt.executeClient("bucketcontext_3.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("bucketcontext_3.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "bucketcontext_3.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "bucketcontext_3.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_bucketcontext_4() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "bucketcontext_4.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/bucketcontext_4.q");

      if (qt.shouldBeSkipped("bucketcontext_4.q")) {
        return;
      }

      qt.cliInit("bucketcontext_4.q", false);
      int ecode = qt.executeClient("bucketcontext_4.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("bucketcontext_4.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "bucketcontext_4.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "bucketcontext_4.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_bucketcontext_5() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "bucketcontext_5.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/bucketcontext_5.q");

      if (qt.shouldBeSkipped("bucketcontext_5.q")) {
        return;
      }

      qt.cliInit("bucketcontext_5.q", false);
      int ecode = qt.executeClient("bucketcontext_5.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("bucketcontext_5.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "bucketcontext_5.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "bucketcontext_5.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_bucketcontext_6() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "bucketcontext_6.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/bucketcontext_6.q");

      if (qt.shouldBeSkipped("bucketcontext_6.q")) {
        return;
      }

      qt.cliInit("bucketcontext_6.q", false);
      int ecode = qt.executeClient("bucketcontext_6.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("bucketcontext_6.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "bucketcontext_6.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "bucketcontext_6.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_bucketcontext_7() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "bucketcontext_7.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/bucketcontext_7.q");

      if (qt.shouldBeSkipped("bucketcontext_7.q")) {
        return;
      }

      qt.cliInit("bucketcontext_7.q", false);
      int ecode = qt.executeClient("bucketcontext_7.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("bucketcontext_7.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "bucketcontext_7.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "bucketcontext_7.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_bucketcontext_8() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "bucketcontext_8.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/bucketcontext_8.q");

      if (qt.shouldBeSkipped("bucketcontext_8.q")) {
        return;
      }

      qt.cliInit("bucketcontext_8.q", false);
      int ecode = qt.executeClient("bucketcontext_8.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("bucketcontext_8.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "bucketcontext_8.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "bucketcontext_8.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_bucketizedhiveinputformat_auto() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "bucketizedhiveinputformat_auto.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/bucketizedhiveinputformat_auto.q");

      if (qt.shouldBeSkipped("bucketizedhiveinputformat_auto.q")) {
        return;
      }

      qt.cliInit("bucketizedhiveinputformat_auto.q", false);
      int ecode = qt.executeClient("bucketizedhiveinputformat_auto.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("bucketizedhiveinputformat_auto.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "bucketizedhiveinputformat_auto.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "bucketizedhiveinputformat_auto.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_bucketmapjoin1() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "bucketmapjoin1.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/bucketmapjoin1.q");

      if (qt.shouldBeSkipped("bucketmapjoin1.q")) {
        return;
      }

      qt.cliInit("bucketmapjoin1.q", false);
      int ecode = qt.executeClient("bucketmapjoin1.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("bucketmapjoin1.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "bucketmapjoin1.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "bucketmapjoin1.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_bucketmapjoin10() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "bucketmapjoin10.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/bucketmapjoin10.q");

      if (qt.shouldBeSkipped("bucketmapjoin10.q")) {
        return;
      }

      qt.cliInit("bucketmapjoin10.q", false);
      int ecode = qt.executeClient("bucketmapjoin10.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("bucketmapjoin10.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "bucketmapjoin10.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "bucketmapjoin10.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_bucketmapjoin11() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "bucketmapjoin11.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/bucketmapjoin11.q");

      if (qt.shouldBeSkipped("bucketmapjoin11.q")) {
        return;
      }

      qt.cliInit("bucketmapjoin11.q", false);
      int ecode = qt.executeClient("bucketmapjoin11.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("bucketmapjoin11.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "bucketmapjoin11.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "bucketmapjoin11.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_bucketmapjoin12() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "bucketmapjoin12.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/bucketmapjoin12.q");

      if (qt.shouldBeSkipped("bucketmapjoin12.q")) {
        return;
      }

      qt.cliInit("bucketmapjoin12.q", false);
      int ecode = qt.executeClient("bucketmapjoin12.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("bucketmapjoin12.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "bucketmapjoin12.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "bucketmapjoin12.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_bucketmapjoin13() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "bucketmapjoin13.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/bucketmapjoin13.q");

      if (qt.shouldBeSkipped("bucketmapjoin13.q")) {
        return;
      }

      qt.cliInit("bucketmapjoin13.q", false);
      int ecode = qt.executeClient("bucketmapjoin13.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("bucketmapjoin13.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "bucketmapjoin13.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "bucketmapjoin13.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_bucketmapjoin2() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "bucketmapjoin2.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/bucketmapjoin2.q");

      if (qt.shouldBeSkipped("bucketmapjoin2.q")) {
        return;
      }

      qt.cliInit("bucketmapjoin2.q", false);
      int ecode = qt.executeClient("bucketmapjoin2.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("bucketmapjoin2.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "bucketmapjoin2.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "bucketmapjoin2.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_bucketmapjoin3() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "bucketmapjoin3.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/bucketmapjoin3.q");

      if (qt.shouldBeSkipped("bucketmapjoin3.q")) {
        return;
      }

      qt.cliInit("bucketmapjoin3.q", false);
      int ecode = qt.executeClient("bucketmapjoin3.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("bucketmapjoin3.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "bucketmapjoin3.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "bucketmapjoin3.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_bucketmapjoin4() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "bucketmapjoin4.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/bucketmapjoin4.q");

      if (qt.shouldBeSkipped("bucketmapjoin4.q")) {
        return;
      }

      qt.cliInit("bucketmapjoin4.q", false);
      int ecode = qt.executeClient("bucketmapjoin4.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("bucketmapjoin4.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "bucketmapjoin4.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "bucketmapjoin4.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_bucketmapjoin5() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "bucketmapjoin5.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/bucketmapjoin5.q");

      if (qt.shouldBeSkipped("bucketmapjoin5.q")) {
        return;
      }

      qt.cliInit("bucketmapjoin5.q", false);
      int ecode = qt.executeClient("bucketmapjoin5.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("bucketmapjoin5.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "bucketmapjoin5.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "bucketmapjoin5.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_bucketmapjoin8() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "bucketmapjoin8.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/bucketmapjoin8.q");

      if (qt.shouldBeSkipped("bucketmapjoin8.q")) {
        return;
      }

      qt.cliInit("bucketmapjoin8.q", false);
      int ecode = qt.executeClient("bucketmapjoin8.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("bucketmapjoin8.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "bucketmapjoin8.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "bucketmapjoin8.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_bucketmapjoin9() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "bucketmapjoin9.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/bucketmapjoin9.q");

      if (qt.shouldBeSkipped("bucketmapjoin9.q")) {
        return;
      }

      qt.cliInit("bucketmapjoin9.q", false);
      int ecode = qt.executeClient("bucketmapjoin9.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("bucketmapjoin9.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "bucketmapjoin9.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "bucketmapjoin9.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_bucketmapjoin_negative() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "bucketmapjoin_negative.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/bucketmapjoin_negative.q");

      if (qt.shouldBeSkipped("bucketmapjoin_negative.q")) {
        return;
      }

      qt.cliInit("bucketmapjoin_negative.q", false);
      int ecode = qt.executeClient("bucketmapjoin_negative.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("bucketmapjoin_negative.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "bucketmapjoin_negative.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "bucketmapjoin_negative.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_bucketmapjoin_negative2() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "bucketmapjoin_negative2.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/bucketmapjoin_negative2.q");

      if (qt.shouldBeSkipped("bucketmapjoin_negative2.q")) {
        return;
      }

      qt.cliInit("bucketmapjoin_negative2.q", false);
      int ecode = qt.executeClient("bucketmapjoin_negative2.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("bucketmapjoin_negative2.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "bucketmapjoin_negative2.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "bucketmapjoin_negative2.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_bucketmapjoin_negative3() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "bucketmapjoin_negative3.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/bucketmapjoin_negative3.q");

      if (qt.shouldBeSkipped("bucketmapjoin_negative3.q")) {
        return;
      }

      qt.cliInit("bucketmapjoin_negative3.q", false);
      int ecode = qt.executeClient("bucketmapjoin_negative3.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("bucketmapjoin_negative3.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "bucketmapjoin_negative3.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "bucketmapjoin_negative3.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_case_sensitivity() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "case_sensitivity.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/case_sensitivity.q");

      if (qt.shouldBeSkipped("case_sensitivity.q")) {
        return;
      }

      qt.cliInit("case_sensitivity.q", false);
      int ecode = qt.executeClient("case_sensitivity.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("case_sensitivity.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "case_sensitivity.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "case_sensitivity.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_cast1() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "cast1.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/cast1.q");

      if (qt.shouldBeSkipped("cast1.q")) {
        return;
      }

      qt.cliInit("cast1.q", false);
      int ecode = qt.executeClient("cast1.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("cast1.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "cast1.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "cast1.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_cluster() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "cluster.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/cluster.q");

      if (qt.shouldBeSkipped("cluster.q")) {
        return;
      }

      qt.cliInit("cluster.q", false);
      int ecode = qt.executeClient("cluster.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("cluster.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "cluster.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "cluster.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_columnarserde_create_shortcut() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "columnarserde_create_shortcut.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/columnarserde_create_shortcut.q");

      if (qt.shouldBeSkipped("columnarserde_create_shortcut.q")) {
        return;
      }

      qt.cliInit("columnarserde_create_shortcut.q", false);
      int ecode = qt.executeClient("columnarserde_create_shortcut.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("columnarserde_create_shortcut.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "columnarserde_create_shortcut.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "columnarserde_create_shortcut.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_columnstats_partlvl() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "columnstats_partlvl.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/columnstats_partlvl.q");

      if (qt.shouldBeSkipped("columnstats_partlvl.q")) {
        return;
      }

      qt.cliInit("columnstats_partlvl.q", false);
      int ecode = qt.executeClient("columnstats_partlvl.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("columnstats_partlvl.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "columnstats_partlvl.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "columnstats_partlvl.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_columnstats_tbllvl() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "columnstats_tbllvl.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/columnstats_tbllvl.q");

      if (qt.shouldBeSkipped("columnstats_tbllvl.q")) {
        return;
      }

      qt.cliInit("columnstats_tbllvl.q", false);
      int ecode = qt.executeClient("columnstats_tbllvl.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("columnstats_tbllvl.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "columnstats_tbllvl.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "columnstats_tbllvl.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_combine1() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "combine1.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/combine1.q");

      if (qt.shouldBeSkipped("combine1.q")) {
        return;
      }

      qt.cliInit("combine1.q", false);
      int ecode = qt.executeClient("combine1.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("combine1.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "combine1.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "combine1.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_combine2() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "combine2.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/combine2.q");

      if (qt.shouldBeSkipped("combine2.q")) {
        return;
      }

      qt.cliInit("combine2.q", false);
      int ecode = qt.executeClient("combine2.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("combine2.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "combine2.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "combine2.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_combine2_hadoop20() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "combine2_hadoop20.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/combine2_hadoop20.q");

      if (qt.shouldBeSkipped("combine2_hadoop20.q")) {
        return;
      }

      qt.cliInit("combine2_hadoop20.q", false);
      int ecode = qt.executeClient("combine2_hadoop20.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("combine2_hadoop20.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "combine2_hadoop20.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "combine2_hadoop20.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_combine2_win() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "combine2_win.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/combine2_win.q");

      if (qt.shouldBeSkipped("combine2_win.q")) {
        return;
      }

      qt.cliInit("combine2_win.q", false);
      int ecode = qt.executeClient("combine2_win.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("combine2_win.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "combine2_win.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "combine2_win.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_combine3() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "combine3.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/combine3.q");

      if (qt.shouldBeSkipped("combine3.q")) {
        return;
      }

      qt.cliInit("combine3.q", false);
      int ecode = qt.executeClient("combine3.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("combine3.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "combine3.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "combine3.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_compute_stats_binary() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "compute_stats_binary.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/compute_stats_binary.q");

      if (qt.shouldBeSkipped("compute_stats_binary.q")) {
        return;
      }

      qt.cliInit("compute_stats_binary.q", false);
      int ecode = qt.executeClient("compute_stats_binary.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("compute_stats_binary.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "compute_stats_binary.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "compute_stats_binary.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_compute_stats_boolean() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "compute_stats_boolean.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/compute_stats_boolean.q");

      if (qt.shouldBeSkipped("compute_stats_boolean.q")) {
        return;
      }

      qt.cliInit("compute_stats_boolean.q", false);
      int ecode = qt.executeClient("compute_stats_boolean.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("compute_stats_boolean.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "compute_stats_boolean.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "compute_stats_boolean.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_compute_stats_double() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "compute_stats_double.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/compute_stats_double.q");

      if (qt.shouldBeSkipped("compute_stats_double.q")) {
        return;
      }

      qt.cliInit("compute_stats_double.q", false);
      int ecode = qt.executeClient("compute_stats_double.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("compute_stats_double.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "compute_stats_double.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "compute_stats_double.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_compute_stats_long() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "compute_stats_long.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/compute_stats_long.q");

      if (qt.shouldBeSkipped("compute_stats_long.q")) {
        return;
      }

      qt.cliInit("compute_stats_long.q", false);
      int ecode = qt.executeClient("compute_stats_long.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("compute_stats_long.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "compute_stats_long.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "compute_stats_long.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_compute_stats_string() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "compute_stats_string.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/compute_stats_string.q");

      if (qt.shouldBeSkipped("compute_stats_string.q")) {
        return;
      }

      qt.cliInit("compute_stats_string.q", false);
      int ecode = qt.executeClient("compute_stats_string.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("compute_stats_string.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "compute_stats_string.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "compute_stats_string.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_concatenate_inherit_table_location() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "concatenate_inherit_table_location.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/concatenate_inherit_table_location.q");

      if (qt.shouldBeSkipped("concatenate_inherit_table_location.q")) {
        return;
      }

      qt.cliInit("concatenate_inherit_table_location.q", false);
      int ecode = qt.executeClient("concatenate_inherit_table_location.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("concatenate_inherit_table_location.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "concatenate_inherit_table_location.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "concatenate_inherit_table_location.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_constant_prop() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "constant_prop.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/constant_prop.q");

      if (qt.shouldBeSkipped("constant_prop.q")) {
        return;
      }

      qt.cliInit("constant_prop.q", false);
      int ecode = qt.executeClient("constant_prop.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("constant_prop.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "constant_prop.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "constant_prop.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_convert_enum_to_string() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "convert_enum_to_string.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/convert_enum_to_string.q");

      if (qt.shouldBeSkipped("convert_enum_to_string.q")) {
        return;
      }

      qt.cliInit("convert_enum_to_string.q", false);
      int ecode = qt.executeClient("convert_enum_to_string.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("convert_enum_to_string.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "convert_enum_to_string.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "convert_enum_to_string.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_count() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "count.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/count.q");

      if (qt.shouldBeSkipped("count.q")) {
        return;
      }

      qt.cliInit("count.q", false);
      int ecode = qt.executeClient("count.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("count.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "count.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "count.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_cp_mj_rc() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "cp_mj_rc.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/cp_mj_rc.q");

      if (qt.shouldBeSkipped("cp_mj_rc.q")) {
        return;
      }

      qt.cliInit("cp_mj_rc.q", false);
      int ecode = qt.executeClient("cp_mj_rc.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("cp_mj_rc.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "cp_mj_rc.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "cp_mj_rc.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_create_1() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "create_1.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/create_1.q");

      if (qt.shouldBeSkipped("create_1.q")) {
        return;
      }

      qt.cliInit("create_1.q", false);
      int ecode = qt.executeClient("create_1.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("create_1.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "create_1.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "create_1.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_create_alter_list_bucketing_table1() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "create_alter_list_bucketing_table1.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/create_alter_list_bucketing_table1.q");

      if (qt.shouldBeSkipped("create_alter_list_bucketing_table1.q")) {
        return;
      }

      qt.cliInit("create_alter_list_bucketing_table1.q", false);
      int ecode = qt.executeClient("create_alter_list_bucketing_table1.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("create_alter_list_bucketing_table1.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "create_alter_list_bucketing_table1.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "create_alter_list_bucketing_table1.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_create_big_view() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "create_big_view.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/create_big_view.q");

      if (qt.shouldBeSkipped("create_big_view.q")) {
        return;
      }

      qt.cliInit("create_big_view.q", false);
      int ecode = qt.executeClient("create_big_view.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("create_big_view.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "create_big_view.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "create_big_view.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_create_default_prop() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "create_default_prop.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/create_default_prop.q");

      if (qt.shouldBeSkipped("create_default_prop.q")) {
        return;
      }

      qt.cliInit("create_default_prop.q", false);
      int ecode = qt.executeClient("create_default_prop.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("create_default_prop.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "create_default_prop.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "create_default_prop.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_create_escape() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "create_escape.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/create_escape.q");

      if (qt.shouldBeSkipped("create_escape.q")) {
        return;
      }

      qt.cliInit("create_escape.q", false);
      int ecode = qt.executeClient("create_escape.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("create_escape.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "create_escape.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "create_escape.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_create_genericudaf() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "create_genericudaf.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/create_genericudaf.q");

      if (qt.shouldBeSkipped("create_genericudaf.q")) {
        return;
      }

      qt.cliInit("create_genericudaf.q", false);
      int ecode = qt.executeClient("create_genericudaf.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("create_genericudaf.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "create_genericudaf.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "create_genericudaf.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_create_genericudf() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "create_genericudf.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/create_genericudf.q");

      if (qt.shouldBeSkipped("create_genericudf.q")) {
        return;
      }

      qt.cliInit("create_genericudf.q", false);
      int ecode = qt.executeClient("create_genericudf.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("create_genericudf.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "create_genericudf.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "create_genericudf.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_create_insert_outputformat() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "create_insert_outputformat.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/create_insert_outputformat.q");

      if (qt.shouldBeSkipped("create_insert_outputformat.q")) {
        return;
      }

      qt.cliInit("create_insert_outputformat.q", false);
      int ecode = qt.executeClient("create_insert_outputformat.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("create_insert_outputformat.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "create_insert_outputformat.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "create_insert_outputformat.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_create_like() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "create_like.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/create_like.q");

      if (qt.shouldBeSkipped("create_like.q")) {
        return;
      }

      qt.cliInit("create_like.q", false);
      int ecode = qt.executeClient("create_like.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("create_like.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "create_like.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "create_like.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_create_like2() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "create_like2.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/create_like2.q");

      if (qt.shouldBeSkipped("create_like2.q")) {
        return;
      }

      qt.cliInit("create_like2.q", false);
      int ecode = qt.executeClient("create_like2.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("create_like2.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "create_like2.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "create_like2.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_create_like_view() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "create_like_view.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/create_like_view.q");

      if (qt.shouldBeSkipped("create_like_view.q")) {
        return;
      }

      qt.cliInit("create_like_view.q", false);
      int ecode = qt.executeClient("create_like_view.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("create_like_view.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "create_like_view.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "create_like_view.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_create_merge_compressed() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "create_merge_compressed.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/create_merge_compressed.q");

      if (qt.shouldBeSkipped("create_merge_compressed.q")) {
        return;
      }

      qt.cliInit("create_merge_compressed.q", false);
      int ecode = qt.executeClient("create_merge_compressed.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("create_merge_compressed.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "create_merge_compressed.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "create_merge_compressed.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_create_nested_type() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "create_nested_type.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/create_nested_type.q");

      if (qt.shouldBeSkipped("create_nested_type.q")) {
        return;
      }

      qt.cliInit("create_nested_type.q", false);
      int ecode = qt.executeClient("create_nested_type.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("create_nested_type.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "create_nested_type.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "create_nested_type.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_create_or_replace_view() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "create_or_replace_view.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/create_or_replace_view.q");

      if (qt.shouldBeSkipped("create_or_replace_view.q")) {
        return;
      }

      qt.cliInit("create_or_replace_view.q", false);
      int ecode = qt.executeClient("create_or_replace_view.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("create_or_replace_view.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "create_or_replace_view.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "create_or_replace_view.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_create_skewed_table1() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "create_skewed_table1.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/create_skewed_table1.q");

      if (qt.shouldBeSkipped("create_skewed_table1.q")) {
        return;
      }

      qt.cliInit("create_skewed_table1.q", false);
      int ecode = qt.executeClient("create_skewed_table1.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("create_skewed_table1.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "create_skewed_table1.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "create_skewed_table1.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_create_struct_table() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "create_struct_table.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/create_struct_table.q");

      if (qt.shouldBeSkipped("create_struct_table.q")) {
        return;
      }

      qt.cliInit("create_struct_table.q", false);
      int ecode = qt.executeClient("create_struct_table.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("create_struct_table.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "create_struct_table.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "create_struct_table.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_create_udaf() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "create_udaf.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/create_udaf.q");

      if (qt.shouldBeSkipped("create_udaf.q")) {
        return;
      }

      qt.cliInit("create_udaf.q", false);
      int ecode = qt.executeClient("create_udaf.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("create_udaf.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "create_udaf.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "create_udaf.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_create_union_table() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "create_union_table.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/create_union_table.q");

      if (qt.shouldBeSkipped("create_union_table.q")) {
        return;
      }

      qt.cliInit("create_union_table.q", false);
      int ecode = qt.executeClient("create_union_table.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("create_union_table.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "create_union_table.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "create_union_table.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_create_view() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "create_view.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/create_view.q");

      if (qt.shouldBeSkipped("create_view.q")) {
        return;
      }

      qt.cliInit("create_view.q", false);
      int ecode = qt.executeClient("create_view.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("create_view.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "create_view.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "create_view.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_create_view_partitioned() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "create_view_partitioned.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/create_view_partitioned.q");

      if (qt.shouldBeSkipped("create_view_partitioned.q")) {
        return;
      }

      qt.cliInit("create_view_partitioned.q", false);
      int ecode = qt.executeClient("create_view_partitioned.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("create_view_partitioned.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "create_view_partitioned.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "create_view_partitioned.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_cross_join() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "cross_join.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/cross_join.q");

      if (qt.shouldBeSkipped("cross_join.q")) {
        return;
      }

      qt.cliInit("cross_join.q", false);
      int ecode = qt.executeClient("cross_join.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("cross_join.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "cross_join.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "cross_join.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_ct_case_insensitive() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "ct_case_insensitive.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/ct_case_insensitive.q");

      if (qt.shouldBeSkipped("ct_case_insensitive.q")) {
        return;
      }

      qt.cliInit("ct_case_insensitive.q", false);
      int ecode = qt.executeClient("ct_case_insensitive.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("ct_case_insensitive.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "ct_case_insensitive.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "ct_case_insensitive.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_ctas() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "ctas.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/ctas.q");

      if (qt.shouldBeSkipped("ctas.q")) {
        return;
      }

      qt.cliInit("ctas.q", false);
      int ecode = qt.executeClient("ctas.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("ctas.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "ctas.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "ctas.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_ctas_hadoop20() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "ctas_hadoop20.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/ctas_hadoop20.q");

      if (qt.shouldBeSkipped("ctas_hadoop20.q")) {
        return;
      }

      qt.cliInit("ctas_hadoop20.q", false);
      int ecode = qt.executeClient("ctas_hadoop20.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("ctas_hadoop20.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "ctas_hadoop20.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "ctas_hadoop20.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_ctas_uses_database_location() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "ctas_uses_database_location.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/ctas_uses_database_location.q");

      if (qt.shouldBeSkipped("ctas_uses_database_location.q")) {
        return;
      }

      qt.cliInit("ctas_uses_database_location.q", false);
      int ecode = qt.executeClient("ctas_uses_database_location.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("ctas_uses_database_location.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "ctas_uses_database_location.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "ctas_uses_database_location.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_custom_input_output_format() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "custom_input_output_format.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/custom_input_output_format.q");

      if (qt.shouldBeSkipped("custom_input_output_format.q")) {
        return;
      }

      qt.cliInit("custom_input_output_format.q", false);
      int ecode = qt.executeClient("custom_input_output_format.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("custom_input_output_format.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "custom_input_output_format.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "custom_input_output_format.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_database() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "database.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/database.q");

      if (qt.shouldBeSkipped("database.q")) {
        return;
      }

      qt.cliInit("database.q", false);
      int ecode = qt.executeClient("database.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("database.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "database.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "database.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_database_drop() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "database_drop.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/database_drop.q");

      if (qt.shouldBeSkipped("database_drop.q")) {
        return;
      }

      qt.cliInit("database_drop.q", false);
      int ecode = qt.executeClient("database_drop.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("database_drop.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "database_drop.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "database_drop.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_database_location() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "database_location.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/database_location.q");

      if (qt.shouldBeSkipped("database_location.q")) {
        return;
      }

      qt.cliInit("database_location.q", false);
      int ecode = qt.executeClient("database_location.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("database_location.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "database_location.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "database_location.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_database_properties() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "database_properties.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/database_properties.q");

      if (qt.shouldBeSkipped("database_properties.q")) {
        return;
      }

      qt.cliInit("database_properties.q", false);
      int ecode = qt.executeClient("database_properties.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("database_properties.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "database_properties.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "database_properties.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_ddltime() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "ddltime.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/ddltime.q");

      if (qt.shouldBeSkipped("ddltime.q")) {
        return;
      }

      qt.cliInit("ddltime.q", false);
      int ecode = qt.executeClient("ddltime.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("ddltime.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "ddltime.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "ddltime.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_decimal_1() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "decimal_1.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/decimal_1.q");

      if (qt.shouldBeSkipped("decimal_1.q")) {
        return;
      }

      qt.cliInit("decimal_1.q", false);
      int ecode = qt.executeClient("decimal_1.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("decimal_1.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "decimal_1.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "decimal_1.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_decimal_2() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "decimal_2.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/decimal_2.q");

      if (qt.shouldBeSkipped("decimal_2.q")) {
        return;
      }

      qt.cliInit("decimal_2.q", false);
      int ecode = qt.executeClient("decimal_2.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("decimal_2.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "decimal_2.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "decimal_2.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_decimal_3() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "decimal_3.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/decimal_3.q");

      if (qt.shouldBeSkipped("decimal_3.q")) {
        return;
      }

      qt.cliInit("decimal_3.q", false);
      int ecode = qt.executeClient("decimal_3.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("decimal_3.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "decimal_3.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "decimal_3.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_decimal_serde() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "decimal_serde.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/decimal_serde.q");

      if (qt.shouldBeSkipped("decimal_serde.q")) {
        return;
      }

      qt.cliInit("decimal_serde.q", false);
      int ecode = qt.executeClient("decimal_serde.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("decimal_serde.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "decimal_serde.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "decimal_serde.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_decimal_udf() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "decimal_udf.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/decimal_udf.q");

      if (qt.shouldBeSkipped("decimal_udf.q")) {
        return;
      }

      qt.cliInit("decimal_udf.q", false);
      int ecode = qt.executeClient("decimal_udf.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("decimal_udf.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "decimal_udf.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "decimal_udf.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_default_partition_name() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "default_partition_name.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/default_partition_name.q");

      if (qt.shouldBeSkipped("default_partition_name.q")) {
        return;
      }

      qt.cliInit("default_partition_name.q", false);
      int ecode = qt.executeClient("default_partition_name.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("default_partition_name.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "default_partition_name.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "default_partition_name.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_delimiter() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "delimiter.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/delimiter.q");

      if (qt.shouldBeSkipped("delimiter.q")) {
        return;
      }

      qt.cliInit("delimiter.q", false);
      int ecode = qt.executeClient("delimiter.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("delimiter.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "delimiter.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "delimiter.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_desc_non_existent_tbl() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "desc_non_existent_tbl.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/desc_non_existent_tbl.q");

      if (qt.shouldBeSkipped("desc_non_existent_tbl.q")) {
        return;
      }

      qt.cliInit("desc_non_existent_tbl.q", false);
      int ecode = qt.executeClient("desc_non_existent_tbl.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("desc_non_existent_tbl.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "desc_non_existent_tbl.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "desc_non_existent_tbl.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_describe_database_json() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "describe_database_json.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/describe_database_json.q");

      if (qt.shouldBeSkipped("describe_database_json.q")) {
        return;
      }

      qt.cliInit("describe_database_json.q", false);
      int ecode = qt.executeClient("describe_database_json.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("describe_database_json.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "describe_database_json.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "describe_database_json.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_describe_formatted_view_partitioned() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "describe_formatted_view_partitioned.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/describe_formatted_view_partitioned.q");

      if (qt.shouldBeSkipped("describe_formatted_view_partitioned.q")) {
        return;
      }

      qt.cliInit("describe_formatted_view_partitioned.q", false);
      int ecode = qt.executeClient("describe_formatted_view_partitioned.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("describe_formatted_view_partitioned.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "describe_formatted_view_partitioned.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "describe_formatted_view_partitioned.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_describe_formatted_view_partitioned_json() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "describe_formatted_view_partitioned_json.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/describe_formatted_view_partitioned_json.q");

      if (qt.shouldBeSkipped("describe_formatted_view_partitioned_json.q")) {
        return;
      }

      qt.cliInit("describe_formatted_view_partitioned_json.q", false);
      int ecode = qt.executeClient("describe_formatted_view_partitioned_json.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("describe_formatted_view_partitioned_json.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "describe_formatted_view_partitioned_json.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "describe_formatted_view_partitioned_json.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_describe_syntax() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "describe_syntax.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/describe_syntax.q");

      if (qt.shouldBeSkipped("describe_syntax.q")) {
        return;
      }

      qt.cliInit("describe_syntax.q", false);
      int ecode = qt.executeClient("describe_syntax.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("describe_syntax.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "describe_syntax.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "describe_syntax.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_describe_table() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "describe_table.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/describe_table.q");

      if (qt.shouldBeSkipped("describe_table.q")) {
        return;
      }

      qt.cliInit("describe_table.q", false);
      int ecode = qt.executeClient("describe_table.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("describe_table.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "describe_table.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "describe_table.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_describe_table_json() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "describe_table_json.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/describe_table_json.q");

      if (qt.shouldBeSkipped("describe_table_json.q")) {
        return;
      }

      qt.cliInit("describe_table_json.q", false);
      int ecode = qt.executeClient("describe_table_json.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("describe_table_json.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "describe_table_json.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "describe_table_json.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_describe_xpath() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "describe_xpath.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/describe_xpath.q");

      if (qt.shouldBeSkipped("describe_xpath.q")) {
        return;
      }

      qt.cliInit("describe_xpath.q", false);
      int ecode = qt.executeClient("describe_xpath.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("describe_xpath.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "describe_xpath.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "describe_xpath.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_diff_part_input_formats() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "diff_part_input_formats.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/diff_part_input_formats.q");

      if (qt.shouldBeSkipped("diff_part_input_formats.q")) {
        return;
      }

      qt.cliInit("diff_part_input_formats.q", false);
      int ecode = qt.executeClient("diff_part_input_formats.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("diff_part_input_formats.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "diff_part_input_formats.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "diff_part_input_formats.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_disable_file_format_check() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "disable_file_format_check.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/disable_file_format_check.q");

      if (qt.shouldBeSkipped("disable_file_format_check.q")) {
        return;
      }

      qt.cliInit("disable_file_format_check.q", false);
      int ecode = qt.executeClient("disable_file_format_check.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("disable_file_format_check.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "disable_file_format_check.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "disable_file_format_check.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_driverhook() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "driverhook.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/driverhook.q");

      if (qt.shouldBeSkipped("driverhook.q")) {
        return;
      }

      qt.cliInit("driverhook.q", false);
      int ecode = qt.executeClient("driverhook.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("driverhook.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "driverhook.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "driverhook.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_drop_database_removes_partition_dirs() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "drop_database_removes_partition_dirs.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/drop_database_removes_partition_dirs.q");

      if (qt.shouldBeSkipped("drop_database_removes_partition_dirs.q")) {
        return;
      }

      qt.cliInit("drop_database_removes_partition_dirs.q", false);
      int ecode = qt.executeClient("drop_database_removes_partition_dirs.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("drop_database_removes_partition_dirs.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "drop_database_removes_partition_dirs.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "drop_database_removes_partition_dirs.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_drop_function() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "drop_function.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/drop_function.q");

      if (qt.shouldBeSkipped("drop_function.q")) {
        return;
      }

      qt.cliInit("drop_function.q", false);
      int ecode = qt.executeClient("drop_function.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("drop_function.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "drop_function.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "drop_function.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_drop_index() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "drop_index.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/drop_index.q");

      if (qt.shouldBeSkipped("drop_index.q")) {
        return;
      }

      qt.cliInit("drop_index.q", false);
      int ecode = qt.executeClient("drop_index.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("drop_index.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "drop_index.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "drop_index.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_drop_index_removes_partition_dirs() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "drop_index_removes_partition_dirs.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/drop_index_removes_partition_dirs.q");

      if (qt.shouldBeSkipped("drop_index_removes_partition_dirs.q")) {
        return;
      }

      qt.cliInit("drop_index_removes_partition_dirs.q", false);
      int ecode = qt.executeClient("drop_index_removes_partition_dirs.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("drop_index_removes_partition_dirs.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "drop_index_removes_partition_dirs.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "drop_index_removes_partition_dirs.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_drop_multi_partitions() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "drop_multi_partitions.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/drop_multi_partitions.q");

      if (qt.shouldBeSkipped("drop_multi_partitions.q")) {
        return;
      }

      qt.cliInit("drop_multi_partitions.q", false);
      int ecode = qt.executeClient("drop_multi_partitions.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("drop_multi_partitions.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "drop_multi_partitions.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "drop_multi_partitions.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_drop_partitions_filter() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "drop_partitions_filter.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/drop_partitions_filter.q");

      if (qt.shouldBeSkipped("drop_partitions_filter.q")) {
        return;
      }

      qt.cliInit("drop_partitions_filter.q", false);
      int ecode = qt.executeClient("drop_partitions_filter.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("drop_partitions_filter.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "drop_partitions_filter.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "drop_partitions_filter.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_drop_partitions_filter2() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "drop_partitions_filter2.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/drop_partitions_filter2.q");

      if (qt.shouldBeSkipped("drop_partitions_filter2.q")) {
        return;
      }

      qt.cliInit("drop_partitions_filter2.q", false);
      int ecode = qt.executeClient("drop_partitions_filter2.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("drop_partitions_filter2.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "drop_partitions_filter2.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "drop_partitions_filter2.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_drop_partitions_filter3() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "drop_partitions_filter3.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/drop_partitions_filter3.q");

      if (qt.shouldBeSkipped("drop_partitions_filter3.q")) {
        return;
      }

      qt.cliInit("drop_partitions_filter3.q", false);
      int ecode = qt.executeClient("drop_partitions_filter3.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("drop_partitions_filter3.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "drop_partitions_filter3.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "drop_partitions_filter3.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_drop_table() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "drop_table.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/drop_table.q");

      if (qt.shouldBeSkipped("drop_table.q")) {
        return;
      }

      qt.cliInit("drop_table.q", false);
      int ecode = qt.executeClient("drop_table.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("drop_table.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "drop_table.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "drop_table.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_drop_table2() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "drop_table2.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/drop_table2.q");

      if (qt.shouldBeSkipped("drop_table2.q")) {
        return;
      }

      qt.cliInit("drop_table2.q", false);
      int ecode = qt.executeClient("drop_table2.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("drop_table2.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "drop_table2.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "drop_table2.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_drop_table_removes_partition_dirs() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "drop_table_removes_partition_dirs.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/drop_table_removes_partition_dirs.q");

      if (qt.shouldBeSkipped("drop_table_removes_partition_dirs.q")) {
        return;
      }

      qt.cliInit("drop_table_removes_partition_dirs.q", false);
      int ecode = qt.executeClient("drop_table_removes_partition_dirs.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("drop_table_removes_partition_dirs.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "drop_table_removes_partition_dirs.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "drop_table_removes_partition_dirs.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_drop_udf() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "drop_udf.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/drop_udf.q");

      if (qt.shouldBeSkipped("drop_udf.q")) {
        return;
      }

      qt.cliInit("drop_udf.q", false);
      int ecode = qt.executeClient("drop_udf.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("drop_udf.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "drop_udf.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "drop_udf.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_drop_view() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "drop_view.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/drop_view.q");

      if (qt.shouldBeSkipped("drop_view.q")) {
        return;
      }

      qt.cliInit("drop_view.q", false);
      int ecode = qt.executeClient("drop_view.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("drop_view.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "drop_view.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "drop_view.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_enforce_order() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "enforce_order.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/enforce_order.q");

      if (qt.shouldBeSkipped("enforce_order.q")) {
        return;
      }

      qt.cliInit("enforce_order.q", false);
      int ecode = qt.executeClient("enforce_order.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("enforce_order.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "enforce_order.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "enforce_order.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_escape1() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "escape1.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/escape1.q");

      if (qt.shouldBeSkipped("escape1.q")) {
        return;
      }

      qt.cliInit("escape1.q", false);
      int ecode = qt.executeClient("escape1.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("escape1.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "escape1.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "escape1.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_escape2() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "escape2.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/escape2.q");

      if (qt.shouldBeSkipped("escape2.q")) {
        return;
      }

      qt.cliInit("escape2.q", false);
      int ecode = qt.executeClient("escape2.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("escape2.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "escape2.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "escape2.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_escape_clusterby1() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "escape_clusterby1.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/escape_clusterby1.q");

      if (qt.shouldBeSkipped("escape_clusterby1.q")) {
        return;
      }

      qt.cliInit("escape_clusterby1.q", false);
      int ecode = qt.executeClient("escape_clusterby1.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("escape_clusterby1.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "escape_clusterby1.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "escape_clusterby1.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_escape_distributeby1() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "escape_distributeby1.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/escape_distributeby1.q");

      if (qt.shouldBeSkipped("escape_distributeby1.q")) {
        return;
      }

      qt.cliInit("escape_distributeby1.q", false);
      int ecode = qt.executeClient("escape_distributeby1.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("escape_distributeby1.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "escape_distributeby1.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "escape_distributeby1.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_escape_orderby1() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "escape_orderby1.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/escape_orderby1.q");

      if (qt.shouldBeSkipped("escape_orderby1.q")) {
        return;
      }

      qt.cliInit("escape_orderby1.q", false);
      int ecode = qt.executeClient("escape_orderby1.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("escape_orderby1.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "escape_orderby1.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "escape_orderby1.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_escape_sortby1() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "escape_sortby1.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/escape_sortby1.q");

      if (qt.shouldBeSkipped("escape_sortby1.q")) {
        return;
      }

      qt.cliInit("escape_sortby1.q", false);
      int ecode = qt.executeClient("escape_sortby1.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("escape_sortby1.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "escape_sortby1.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "escape_sortby1.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_exim_00_nonpart_empty() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "exim_00_nonpart_empty.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/exim_00_nonpart_empty.q");

      if (qt.shouldBeSkipped("exim_00_nonpart_empty.q")) {
        return;
      }

      qt.cliInit("exim_00_nonpart_empty.q", false);
      int ecode = qt.executeClient("exim_00_nonpart_empty.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("exim_00_nonpart_empty.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "exim_00_nonpart_empty.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "exim_00_nonpart_empty.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_exim_01_nonpart() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "exim_01_nonpart.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/exim_01_nonpart.q");

      if (qt.shouldBeSkipped("exim_01_nonpart.q")) {
        return;
      }

      qt.cliInit("exim_01_nonpart.q", false);
      int ecode = qt.executeClient("exim_01_nonpart.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("exim_01_nonpart.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "exim_01_nonpart.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "exim_01_nonpart.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_exim_02_00_part_empty() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "exim_02_00_part_empty.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/exim_02_00_part_empty.q");

      if (qt.shouldBeSkipped("exim_02_00_part_empty.q")) {
        return;
      }

      qt.cliInit("exim_02_00_part_empty.q", false);
      int ecode = qt.executeClient("exim_02_00_part_empty.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("exim_02_00_part_empty.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "exim_02_00_part_empty.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "exim_02_00_part_empty.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_exim_02_part() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "exim_02_part.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/exim_02_part.q");

      if (qt.shouldBeSkipped("exim_02_part.q")) {
        return;
      }

      qt.cliInit("exim_02_part.q", false);
      int ecode = qt.executeClient("exim_02_part.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("exim_02_part.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "exim_02_part.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "exim_02_part.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_exim_03_nonpart_over_compat() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "exim_03_nonpart_over_compat.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/exim_03_nonpart_over_compat.q");

      if (qt.shouldBeSkipped("exim_03_nonpart_over_compat.q")) {
        return;
      }

      qt.cliInit("exim_03_nonpart_over_compat.q", false);
      int ecode = qt.executeClient("exim_03_nonpart_over_compat.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("exim_03_nonpart_over_compat.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "exim_03_nonpart_over_compat.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "exim_03_nonpart_over_compat.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_exim_04_all_part() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "exim_04_all_part.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/exim_04_all_part.q");

      if (qt.shouldBeSkipped("exim_04_all_part.q")) {
        return;
      }

      qt.cliInit("exim_04_all_part.q", false);
      int ecode = qt.executeClient("exim_04_all_part.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("exim_04_all_part.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "exim_04_all_part.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "exim_04_all_part.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_exim_04_evolved_parts() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "exim_04_evolved_parts.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/exim_04_evolved_parts.q");

      if (qt.shouldBeSkipped("exim_04_evolved_parts.q")) {
        return;
      }

      qt.cliInit("exim_04_evolved_parts.q", false);
      int ecode = qt.executeClient("exim_04_evolved_parts.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("exim_04_evolved_parts.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "exim_04_evolved_parts.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "exim_04_evolved_parts.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_exim_05_some_part() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "exim_05_some_part.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/exim_05_some_part.q");

      if (qt.shouldBeSkipped("exim_05_some_part.q")) {
        return;
      }

      qt.cliInit("exim_05_some_part.q", false);
      int ecode = qt.executeClient("exim_05_some_part.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("exim_05_some_part.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "exim_05_some_part.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "exim_05_some_part.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_exim_06_one_part() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "exim_06_one_part.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/exim_06_one_part.q");

      if (qt.shouldBeSkipped("exim_06_one_part.q")) {
        return;
      }

      qt.cliInit("exim_06_one_part.q", false);
      int ecode = qt.executeClient("exim_06_one_part.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("exim_06_one_part.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "exim_06_one_part.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "exim_06_one_part.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_exim_07_all_part_over_nonoverlap() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "exim_07_all_part_over_nonoverlap.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/exim_07_all_part_over_nonoverlap.q");

      if (qt.shouldBeSkipped("exim_07_all_part_over_nonoverlap.q")) {
        return;
      }

      qt.cliInit("exim_07_all_part_over_nonoverlap.q", false);
      int ecode = qt.executeClient("exim_07_all_part_over_nonoverlap.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("exim_07_all_part_over_nonoverlap.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "exim_07_all_part_over_nonoverlap.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "exim_07_all_part_over_nonoverlap.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_exim_08_nonpart_rename() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "exim_08_nonpart_rename.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/exim_08_nonpart_rename.q");

      if (qt.shouldBeSkipped("exim_08_nonpart_rename.q")) {
        return;
      }

      qt.cliInit("exim_08_nonpart_rename.q", false);
      int ecode = qt.executeClient("exim_08_nonpart_rename.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("exim_08_nonpart_rename.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "exim_08_nonpart_rename.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "exim_08_nonpart_rename.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_exim_09_part_spec_nonoverlap() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "exim_09_part_spec_nonoverlap.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/exim_09_part_spec_nonoverlap.q");

      if (qt.shouldBeSkipped("exim_09_part_spec_nonoverlap.q")) {
        return;
      }

      qt.cliInit("exim_09_part_spec_nonoverlap.q", false);
      int ecode = qt.executeClient("exim_09_part_spec_nonoverlap.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("exim_09_part_spec_nonoverlap.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "exim_09_part_spec_nonoverlap.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "exim_09_part_spec_nonoverlap.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_exim_10_external_managed() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "exim_10_external_managed.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/exim_10_external_managed.q");

      if (qt.shouldBeSkipped("exim_10_external_managed.q")) {
        return;
      }

      qt.cliInit("exim_10_external_managed.q", false);
      int ecode = qt.executeClient("exim_10_external_managed.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("exim_10_external_managed.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "exim_10_external_managed.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "exim_10_external_managed.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_exim_11_managed_external() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "exim_11_managed_external.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/exim_11_managed_external.q");

      if (qt.shouldBeSkipped("exim_11_managed_external.q")) {
        return;
      }

      qt.cliInit("exim_11_managed_external.q", false);
      int ecode = qt.executeClient("exim_11_managed_external.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("exim_11_managed_external.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "exim_11_managed_external.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "exim_11_managed_external.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_exim_12_external_location() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "exim_12_external_location.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/exim_12_external_location.q");

      if (qt.shouldBeSkipped("exim_12_external_location.q")) {
        return;
      }

      qt.cliInit("exim_12_external_location.q", false);
      int ecode = qt.executeClient("exim_12_external_location.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("exim_12_external_location.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "exim_12_external_location.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "exim_12_external_location.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_exim_13_managed_location() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "exim_13_managed_location.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/exim_13_managed_location.q");

      if (qt.shouldBeSkipped("exim_13_managed_location.q")) {
        return;
      }

      qt.cliInit("exim_13_managed_location.q", false);
      int ecode = qt.executeClient("exim_13_managed_location.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("exim_13_managed_location.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "exim_13_managed_location.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "exim_13_managed_location.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_exim_14_managed_location_over_existing() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "exim_14_managed_location_over_existing.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/exim_14_managed_location_over_existing.q");

      if (qt.shouldBeSkipped("exim_14_managed_location_over_existing.q")) {
        return;
      }

      qt.cliInit("exim_14_managed_location_over_existing.q", false);
      int ecode = qt.executeClient("exim_14_managed_location_over_existing.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("exim_14_managed_location_over_existing.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "exim_14_managed_location_over_existing.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "exim_14_managed_location_over_existing.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_exim_15_external_part() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "exim_15_external_part.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/exim_15_external_part.q");

      if (qt.shouldBeSkipped("exim_15_external_part.q")) {
        return;
      }

      qt.cliInit("exim_15_external_part.q", false);
      int ecode = qt.executeClient("exim_15_external_part.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("exim_15_external_part.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "exim_15_external_part.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "exim_15_external_part.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_exim_16_part_external() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "exim_16_part_external.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/exim_16_part_external.q");

      if (qt.shouldBeSkipped("exim_16_part_external.q")) {
        return;
      }

      qt.cliInit("exim_16_part_external.q", false);
      int ecode = qt.executeClient("exim_16_part_external.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("exim_16_part_external.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "exim_16_part_external.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "exim_16_part_external.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_exim_17_part_managed() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "exim_17_part_managed.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/exim_17_part_managed.q");

      if (qt.shouldBeSkipped("exim_17_part_managed.q")) {
        return;
      }

      qt.cliInit("exim_17_part_managed.q", false);
      int ecode = qt.executeClient("exim_17_part_managed.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("exim_17_part_managed.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "exim_17_part_managed.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "exim_17_part_managed.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_exim_18_part_external() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "exim_18_part_external.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/exim_18_part_external.q");

      if (qt.shouldBeSkipped("exim_18_part_external.q")) {
        return;
      }

      qt.cliInit("exim_18_part_external.q", false);
      int ecode = qt.executeClient("exim_18_part_external.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("exim_18_part_external.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "exim_18_part_external.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "exim_18_part_external.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_exim_19_00_part_external_location() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "exim_19_00_part_external_location.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/exim_19_00_part_external_location.q");

      if (qt.shouldBeSkipped("exim_19_00_part_external_location.q")) {
        return;
      }

      qt.cliInit("exim_19_00_part_external_location.q", false);
      int ecode = qt.executeClient("exim_19_00_part_external_location.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("exim_19_00_part_external_location.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "exim_19_00_part_external_location.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "exim_19_00_part_external_location.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_exim_19_part_external_location() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "exim_19_part_external_location.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/exim_19_part_external_location.q");

      if (qt.shouldBeSkipped("exim_19_part_external_location.q")) {
        return;
      }

      qt.cliInit("exim_19_part_external_location.q", false);
      int ecode = qt.executeClient("exim_19_part_external_location.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("exim_19_part_external_location.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "exim_19_part_external_location.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "exim_19_part_external_location.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_exim_20_part_managed_location() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "exim_20_part_managed_location.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/exim_20_part_managed_location.q");

      if (qt.shouldBeSkipped("exim_20_part_managed_location.q")) {
        return;
      }

      qt.cliInit("exim_20_part_managed_location.q", false);
      int ecode = qt.executeClient("exim_20_part_managed_location.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("exim_20_part_managed_location.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "exim_20_part_managed_location.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "exim_20_part_managed_location.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_exim_21_export_authsuccess() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "exim_21_export_authsuccess.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/exim_21_export_authsuccess.q");

      if (qt.shouldBeSkipped("exim_21_export_authsuccess.q")) {
        return;
      }

      qt.cliInit("exim_21_export_authsuccess.q", false);
      int ecode = qt.executeClient("exim_21_export_authsuccess.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("exim_21_export_authsuccess.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "exim_21_export_authsuccess.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "exim_21_export_authsuccess.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_exim_22_import_exist_authsuccess() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "exim_22_import_exist_authsuccess.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/exim_22_import_exist_authsuccess.q");

      if (qt.shouldBeSkipped("exim_22_import_exist_authsuccess.q")) {
        return;
      }

      qt.cliInit("exim_22_import_exist_authsuccess.q", false);
      int ecode = qt.executeClient("exim_22_import_exist_authsuccess.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("exim_22_import_exist_authsuccess.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "exim_22_import_exist_authsuccess.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "exim_22_import_exist_authsuccess.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_exim_23_import_part_authsuccess() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "exim_23_import_part_authsuccess.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/exim_23_import_part_authsuccess.q");

      if (qt.shouldBeSkipped("exim_23_import_part_authsuccess.q")) {
        return;
      }

      qt.cliInit("exim_23_import_part_authsuccess.q", false);
      int ecode = qt.executeClient("exim_23_import_part_authsuccess.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("exim_23_import_part_authsuccess.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "exim_23_import_part_authsuccess.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "exim_23_import_part_authsuccess.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_exim_24_import_nonexist_authsuccess() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "exim_24_import_nonexist_authsuccess.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/exim_24_import_nonexist_authsuccess.q");

      if (qt.shouldBeSkipped("exim_24_import_nonexist_authsuccess.q")) {
        return;
      }

      qt.cliInit("exim_24_import_nonexist_authsuccess.q", false);
      int ecode = qt.executeClient("exim_24_import_nonexist_authsuccess.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("exim_24_import_nonexist_authsuccess.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "exim_24_import_nonexist_authsuccess.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "exim_24_import_nonexist_authsuccess.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_explain_dependency() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "explain_dependency.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/explain_dependency.q");

      if (qt.shouldBeSkipped("explain_dependency.q")) {
        return;
      }

      qt.cliInit("explain_dependency.q", false);
      int ecode = qt.executeClient("explain_dependency.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("explain_dependency.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "explain_dependency.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "explain_dependency.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_explode_null() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "explode_null.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/explode_null.q");

      if (qt.shouldBeSkipped("explode_null.q")) {
        return;
      }

      qt.cliInit("explode_null.q", false);
      int ecode = qt.executeClient("explode_null.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("explode_null.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "explode_null.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "explode_null.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_fileformat_mix() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "fileformat_mix.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/fileformat_mix.q");

      if (qt.shouldBeSkipped("fileformat_mix.q")) {
        return;
      }

      qt.cliInit("fileformat_mix.q", false);
      int ecode = qt.executeClient("fileformat_mix.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("fileformat_mix.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "fileformat_mix.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "fileformat_mix.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_fileformat_sequencefile() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "fileformat_sequencefile.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/fileformat_sequencefile.q");

      if (qt.shouldBeSkipped("fileformat_sequencefile.q")) {
        return;
      }

      qt.cliInit("fileformat_sequencefile.q", false);
      int ecode = qt.executeClient("fileformat_sequencefile.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("fileformat_sequencefile.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "fileformat_sequencefile.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "fileformat_sequencefile.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_fileformat_text() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "fileformat_text.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/fileformat_text.q");

      if (qt.shouldBeSkipped("fileformat_text.q")) {
        return;
      }

      qt.cliInit("fileformat_text.q", false);
      int ecode = qt.executeClient("fileformat_text.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("fileformat_text.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "fileformat_text.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "fileformat_text.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_filter_join_breaktask() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "filter_join_breaktask.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/filter_join_breaktask.q");

      if (qt.shouldBeSkipped("filter_join_breaktask.q")) {
        return;
      }

      qt.cliInit("filter_join_breaktask.q", false);
      int ecode = qt.executeClient("filter_join_breaktask.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("filter_join_breaktask.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "filter_join_breaktask.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "filter_join_breaktask.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_filter_join_breaktask2() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "filter_join_breaktask2.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/filter_join_breaktask2.q");

      if (qt.shouldBeSkipped("filter_join_breaktask2.q")) {
        return;
      }

      qt.cliInit("filter_join_breaktask2.q", false);
      int ecode = qt.executeClient("filter_join_breaktask2.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("filter_join_breaktask2.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "filter_join_breaktask2.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "filter_join_breaktask2.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_global_limit() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "global_limit.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/global_limit.q");

      if (qt.shouldBeSkipped("global_limit.q")) {
        return;
      }

      qt.cliInit("global_limit.q", false);
      int ecode = qt.executeClient("global_limit.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("global_limit.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "global_limit.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "global_limit.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_groupby1() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "groupby1.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/groupby1.q");

      if (qt.shouldBeSkipped("groupby1.q")) {
        return;
      }

      qt.cliInit("groupby1.q", false);
      int ecode = qt.executeClient("groupby1.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("groupby1.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "groupby1.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "groupby1.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_groupby10() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "groupby10.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/groupby10.q");

      if (qt.shouldBeSkipped("groupby10.q")) {
        return;
      }

      qt.cliInit("groupby10.q", false);
      int ecode = qt.executeClient("groupby10.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("groupby10.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "groupby10.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "groupby10.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_groupby11() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "groupby11.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/groupby11.q");

      if (qt.shouldBeSkipped("groupby11.q")) {
        return;
      }

      qt.cliInit("groupby11.q", false);
      int ecode = qt.executeClient("groupby11.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("groupby11.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "groupby11.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "groupby11.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_groupby1_limit() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "groupby1_limit.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/groupby1_limit.q");

      if (qt.shouldBeSkipped("groupby1_limit.q")) {
        return;
      }

      qt.cliInit("groupby1_limit.q", false);
      int ecode = qt.executeClient("groupby1_limit.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("groupby1_limit.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "groupby1_limit.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "groupby1_limit.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_groupby1_map() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "groupby1_map.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/groupby1_map.q");

      if (qt.shouldBeSkipped("groupby1_map.q")) {
        return;
      }

      qt.cliInit("groupby1_map.q", false);
      int ecode = qt.executeClient("groupby1_map.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("groupby1_map.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "groupby1_map.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "groupby1_map.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_groupby1_map_nomap() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "groupby1_map_nomap.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/groupby1_map_nomap.q");

      if (qt.shouldBeSkipped("groupby1_map_nomap.q")) {
        return;
      }

      qt.cliInit("groupby1_map_nomap.q", false);
      int ecode = qt.executeClient("groupby1_map_nomap.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("groupby1_map_nomap.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "groupby1_map_nomap.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "groupby1_map_nomap.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_groupby1_map_skew() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "groupby1_map_skew.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/groupby1_map_skew.q");

      if (qt.shouldBeSkipped("groupby1_map_skew.q")) {
        return;
      }

      qt.cliInit("groupby1_map_skew.q", false);
      int ecode = qt.executeClient("groupby1_map_skew.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("groupby1_map_skew.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "groupby1_map_skew.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "groupby1_map_skew.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_groupby1_noskew() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "groupby1_noskew.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/groupby1_noskew.q");

      if (qt.shouldBeSkipped("groupby1_noskew.q")) {
        return;
      }

      qt.cliInit("groupby1_noskew.q", false);
      int ecode = qt.executeClient("groupby1_noskew.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("groupby1_noskew.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "groupby1_noskew.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "groupby1_noskew.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_groupby2_limit() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "groupby2_limit.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/groupby2_limit.q");

      if (qt.shouldBeSkipped("groupby2_limit.q")) {
        return;
      }

      qt.cliInit("groupby2_limit.q", false);
      int ecode = qt.executeClient("groupby2_limit.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("groupby2_limit.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "groupby2_limit.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "groupby2_limit.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_groupby2_map() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "groupby2_map.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/groupby2_map.q");

      if (qt.shouldBeSkipped("groupby2_map.q")) {
        return;
      }

      qt.cliInit("groupby2_map.q", false);
      int ecode = qt.executeClient("groupby2_map.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("groupby2_map.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "groupby2_map.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "groupby2_map.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_groupby2_map_multi_distinct() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "groupby2_map_multi_distinct.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/groupby2_map_multi_distinct.q");

      if (qt.shouldBeSkipped("groupby2_map_multi_distinct.q")) {
        return;
      }

      qt.cliInit("groupby2_map_multi_distinct.q", false);
      int ecode = qt.executeClient("groupby2_map_multi_distinct.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("groupby2_map_multi_distinct.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "groupby2_map_multi_distinct.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "groupby2_map_multi_distinct.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_groupby2_map_skew() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "groupby2_map_skew.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/groupby2_map_skew.q");

      if (qt.shouldBeSkipped("groupby2_map_skew.q")) {
        return;
      }

      qt.cliInit("groupby2_map_skew.q", false);
      int ecode = qt.executeClient("groupby2_map_skew.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("groupby2_map_skew.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "groupby2_map_skew.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "groupby2_map_skew.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_groupby2_noskew() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "groupby2_noskew.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/groupby2_noskew.q");

      if (qt.shouldBeSkipped("groupby2_noskew.q")) {
        return;
      }

      qt.cliInit("groupby2_noskew.q", false);
      int ecode = qt.executeClient("groupby2_noskew.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("groupby2_noskew.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "groupby2_noskew.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "groupby2_noskew.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_groupby2_noskew_multi_distinct() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "groupby2_noskew_multi_distinct.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/groupby2_noskew_multi_distinct.q");

      if (qt.shouldBeSkipped("groupby2_noskew_multi_distinct.q")) {
        return;
      }

      qt.cliInit("groupby2_noskew_multi_distinct.q", false);
      int ecode = qt.executeClient("groupby2_noskew_multi_distinct.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("groupby2_noskew_multi_distinct.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "groupby2_noskew_multi_distinct.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "groupby2_noskew_multi_distinct.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_groupby3() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "groupby3.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/groupby3.q");

      if (qt.shouldBeSkipped("groupby3.q")) {
        return;
      }

      qt.cliInit("groupby3.q", false);
      int ecode = qt.executeClient("groupby3.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("groupby3.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "groupby3.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "groupby3.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_groupby3_map() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "groupby3_map.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/groupby3_map.q");

      if (qt.shouldBeSkipped("groupby3_map.q")) {
        return;
      }

      qt.cliInit("groupby3_map.q", false);
      int ecode = qt.executeClient("groupby3_map.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("groupby3_map.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "groupby3_map.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "groupby3_map.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_groupby3_map_multi_distinct() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "groupby3_map_multi_distinct.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/groupby3_map_multi_distinct.q");

      if (qt.shouldBeSkipped("groupby3_map_multi_distinct.q")) {
        return;
      }

      qt.cliInit("groupby3_map_multi_distinct.q", false);
      int ecode = qt.executeClient("groupby3_map_multi_distinct.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("groupby3_map_multi_distinct.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "groupby3_map_multi_distinct.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "groupby3_map_multi_distinct.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_groupby3_map_skew() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "groupby3_map_skew.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/groupby3_map_skew.q");

      if (qt.shouldBeSkipped("groupby3_map_skew.q")) {
        return;
      }

      qt.cliInit("groupby3_map_skew.q", false);
      int ecode = qt.executeClient("groupby3_map_skew.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("groupby3_map_skew.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "groupby3_map_skew.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "groupby3_map_skew.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_groupby3_noskew() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "groupby3_noskew.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/groupby3_noskew.q");

      if (qt.shouldBeSkipped("groupby3_noskew.q")) {
        return;
      }

      qt.cliInit("groupby3_noskew.q", false);
      int ecode = qt.executeClient("groupby3_noskew.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("groupby3_noskew.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "groupby3_noskew.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "groupby3_noskew.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_groupby3_noskew_multi_distinct() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "groupby3_noskew_multi_distinct.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/groupby3_noskew_multi_distinct.q");

      if (qt.shouldBeSkipped("groupby3_noskew_multi_distinct.q")) {
        return;
      }

      qt.cliInit("groupby3_noskew_multi_distinct.q", false);
      int ecode = qt.executeClient("groupby3_noskew_multi_distinct.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("groupby3_noskew_multi_distinct.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "groupby3_noskew_multi_distinct.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "groupby3_noskew_multi_distinct.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_groupby4() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "groupby4.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/groupby4.q");

      if (qt.shouldBeSkipped("groupby4.q")) {
        return;
      }

      qt.cliInit("groupby4.q", false);
      int ecode = qt.executeClient("groupby4.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("groupby4.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "groupby4.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "groupby4.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_groupby4_map() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "groupby4_map.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/groupby4_map.q");

      if (qt.shouldBeSkipped("groupby4_map.q")) {
        return;
      }

      qt.cliInit("groupby4_map.q", false);
      int ecode = qt.executeClient("groupby4_map.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("groupby4_map.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "groupby4_map.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "groupby4_map.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_groupby4_map_skew() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "groupby4_map_skew.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/groupby4_map_skew.q");

      if (qt.shouldBeSkipped("groupby4_map_skew.q")) {
        return;
      }

      qt.cliInit("groupby4_map_skew.q", false);
      int ecode = qt.executeClient("groupby4_map_skew.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("groupby4_map_skew.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "groupby4_map_skew.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "groupby4_map_skew.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_groupby4_noskew() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "groupby4_noskew.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/groupby4_noskew.q");

      if (qt.shouldBeSkipped("groupby4_noskew.q")) {
        return;
      }

      qt.cliInit("groupby4_noskew.q", false);
      int ecode = qt.executeClient("groupby4_noskew.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("groupby4_noskew.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "groupby4_noskew.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "groupby4_noskew.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_groupby5() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "groupby5.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/groupby5.q");

      if (qt.shouldBeSkipped("groupby5.q")) {
        return;
      }

      qt.cliInit("groupby5.q", false);
      int ecode = qt.executeClient("groupby5.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("groupby5.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "groupby5.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "groupby5.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_groupby5_map() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "groupby5_map.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/groupby5_map.q");

      if (qt.shouldBeSkipped("groupby5_map.q")) {
        return;
      }

      qt.cliInit("groupby5_map.q", false);
      int ecode = qt.executeClient("groupby5_map.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("groupby5_map.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "groupby5_map.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "groupby5_map.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_groupby5_map_skew() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "groupby5_map_skew.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/groupby5_map_skew.q");

      if (qt.shouldBeSkipped("groupby5_map_skew.q")) {
        return;
      }

      qt.cliInit("groupby5_map_skew.q", false);
      int ecode = qt.executeClient("groupby5_map_skew.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("groupby5_map_skew.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "groupby5_map_skew.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "groupby5_map_skew.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_groupby5_noskew() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "groupby5_noskew.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/groupby5_noskew.q");

      if (qt.shouldBeSkipped("groupby5_noskew.q")) {
        return;
      }

      qt.cliInit("groupby5_noskew.q", false);
      int ecode = qt.executeClient("groupby5_noskew.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("groupby5_noskew.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "groupby5_noskew.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "groupby5_noskew.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_groupby6() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "groupby6.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/groupby6.q");

      if (qt.shouldBeSkipped("groupby6.q")) {
        return;
      }

      qt.cliInit("groupby6.q", false);
      int ecode = qt.executeClient("groupby6.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("groupby6.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "groupby6.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "groupby6.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_groupby6_map() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "groupby6_map.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/groupby6_map.q");

      if (qt.shouldBeSkipped("groupby6_map.q")) {
        return;
      }

      qt.cliInit("groupby6_map.q", false);
      int ecode = qt.executeClient("groupby6_map.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("groupby6_map.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "groupby6_map.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "groupby6_map.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_groupby6_map_skew() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "groupby6_map_skew.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/groupby6_map_skew.q");

      if (qt.shouldBeSkipped("groupby6_map_skew.q")) {
        return;
      }

      qt.cliInit("groupby6_map_skew.q", false);
      int ecode = qt.executeClient("groupby6_map_skew.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("groupby6_map_skew.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "groupby6_map_skew.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "groupby6_map_skew.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_groupby6_noskew() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "groupby6_noskew.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/groupby6_noskew.q");

      if (qt.shouldBeSkipped("groupby6_noskew.q")) {
        return;
      }

      qt.cliInit("groupby6_noskew.q", false);
      int ecode = qt.executeClient("groupby6_noskew.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("groupby6_noskew.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "groupby6_noskew.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "groupby6_noskew.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_groupby7() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "groupby7.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/groupby7.q");

      if (qt.shouldBeSkipped("groupby7.q")) {
        return;
      }

      qt.cliInit("groupby7.q", false);
      int ecode = qt.executeClient("groupby7.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("groupby7.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "groupby7.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "groupby7.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_groupby7_map() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "groupby7_map.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/groupby7_map.q");

      if (qt.shouldBeSkipped("groupby7_map.q")) {
        return;
      }

      qt.cliInit("groupby7_map.q", false);
      int ecode = qt.executeClient("groupby7_map.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("groupby7_map.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "groupby7_map.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "groupby7_map.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_groupby7_map_multi_single_reducer() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "groupby7_map_multi_single_reducer.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/groupby7_map_multi_single_reducer.q");

      if (qt.shouldBeSkipped("groupby7_map_multi_single_reducer.q")) {
        return;
      }

      qt.cliInit("groupby7_map_multi_single_reducer.q", false);
      int ecode = qt.executeClient("groupby7_map_multi_single_reducer.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("groupby7_map_multi_single_reducer.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "groupby7_map_multi_single_reducer.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "groupby7_map_multi_single_reducer.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_groupby7_map_skew() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "groupby7_map_skew.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/groupby7_map_skew.q");

      if (qt.shouldBeSkipped("groupby7_map_skew.q")) {
        return;
      }

      qt.cliInit("groupby7_map_skew.q", false);
      int ecode = qt.executeClient("groupby7_map_skew.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("groupby7_map_skew.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "groupby7_map_skew.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "groupby7_map_skew.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_groupby7_noskew() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "groupby7_noskew.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/groupby7_noskew.q");

      if (qt.shouldBeSkipped("groupby7_noskew.q")) {
        return;
      }

      qt.cliInit("groupby7_noskew.q", false);
      int ecode = qt.executeClient("groupby7_noskew.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("groupby7_noskew.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "groupby7_noskew.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "groupby7_noskew.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_groupby7_noskew_multi_single_reducer() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "groupby7_noskew_multi_single_reducer.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/groupby7_noskew_multi_single_reducer.q");

      if (qt.shouldBeSkipped("groupby7_noskew_multi_single_reducer.q")) {
        return;
      }

      qt.cliInit("groupby7_noskew_multi_single_reducer.q", false);
      int ecode = qt.executeClient("groupby7_noskew_multi_single_reducer.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("groupby7_noskew_multi_single_reducer.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "groupby7_noskew_multi_single_reducer.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "groupby7_noskew_multi_single_reducer.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_groupby8() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "groupby8.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/groupby8.q");

      if (qt.shouldBeSkipped("groupby8.q")) {
        return;
      }

      qt.cliInit("groupby8.q", false);
      int ecode = qt.executeClient("groupby8.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("groupby8.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "groupby8.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "groupby8.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_groupby8_map() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "groupby8_map.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/groupby8_map.q");

      if (qt.shouldBeSkipped("groupby8_map.q")) {
        return;
      }

      qt.cliInit("groupby8_map.q", false);
      int ecode = qt.executeClient("groupby8_map.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("groupby8_map.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "groupby8_map.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "groupby8_map.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_groupby8_map_skew() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "groupby8_map_skew.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/groupby8_map_skew.q");

      if (qt.shouldBeSkipped("groupby8_map_skew.q")) {
        return;
      }

      qt.cliInit("groupby8_map_skew.q", false);
      int ecode = qt.executeClient("groupby8_map_skew.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("groupby8_map_skew.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "groupby8_map_skew.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "groupby8_map_skew.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_groupby8_noskew() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "groupby8_noskew.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/groupby8_noskew.q");

      if (qt.shouldBeSkipped("groupby8_noskew.q")) {
        return;
      }

      qt.cliInit("groupby8_noskew.q", false);
      int ecode = qt.executeClient("groupby8_noskew.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("groupby8_noskew.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "groupby8_noskew.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "groupby8_noskew.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_groupby9() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "groupby9.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/groupby9.q");

      if (qt.shouldBeSkipped("groupby9.q")) {
        return;
      }

      qt.cliInit("groupby9.q", false);
      int ecode = qt.executeClient("groupby9.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("groupby9.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "groupby9.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "groupby9.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_groupby_bigdata() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "groupby_bigdata.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/groupby_bigdata.q");

      if (qt.shouldBeSkipped("groupby_bigdata.q")) {
        return;
      }

      qt.cliInit("groupby_bigdata.q", false);
      int ecode = qt.executeClient("groupby_bigdata.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("groupby_bigdata.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "groupby_bigdata.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "groupby_bigdata.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_groupby_complex_types() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "groupby_complex_types.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/groupby_complex_types.q");

      if (qt.shouldBeSkipped("groupby_complex_types.q")) {
        return;
      }

      qt.cliInit("groupby_complex_types.q", false);
      int ecode = qt.executeClient("groupby_complex_types.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("groupby_complex_types.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "groupby_complex_types.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "groupby_complex_types.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_groupby_complex_types_multi_single_reducer() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "groupby_complex_types_multi_single_reducer.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/groupby_complex_types_multi_single_reducer.q");

      if (qt.shouldBeSkipped("groupby_complex_types_multi_single_reducer.q")) {
        return;
      }

      qt.cliInit("groupby_complex_types_multi_single_reducer.q", false);
      int ecode = qt.executeClient("groupby_complex_types_multi_single_reducer.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("groupby_complex_types_multi_single_reducer.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "groupby_complex_types_multi_single_reducer.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "groupby_complex_types_multi_single_reducer.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_groupby_cube1() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "groupby_cube1.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/groupby_cube1.q");

      if (qt.shouldBeSkipped("groupby_cube1.q")) {
        return;
      }

      qt.cliInit("groupby_cube1.q", false);
      int ecode = qt.executeClient("groupby_cube1.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("groupby_cube1.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "groupby_cube1.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "groupby_cube1.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_groupby_grouping_id1() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "groupby_grouping_id1.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/groupby_grouping_id1.q");

      if (qt.shouldBeSkipped("groupby_grouping_id1.q")) {
        return;
      }

      qt.cliInit("groupby_grouping_id1.q", false);
      int ecode = qt.executeClient("groupby_grouping_id1.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("groupby_grouping_id1.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "groupby_grouping_id1.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "groupby_grouping_id1.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_groupby_grouping_id2() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "groupby_grouping_id2.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/groupby_grouping_id2.q");

      if (qt.shouldBeSkipped("groupby_grouping_id2.q")) {
        return;
      }

      qt.cliInit("groupby_grouping_id2.q", false);
      int ecode = qt.executeClient("groupby_grouping_id2.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("groupby_grouping_id2.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "groupby_grouping_id2.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "groupby_grouping_id2.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_groupby_grouping_sets1() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "groupby_grouping_sets1.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/groupby_grouping_sets1.q");

      if (qt.shouldBeSkipped("groupby_grouping_sets1.q")) {
        return;
      }

      qt.cliInit("groupby_grouping_sets1.q", false);
      int ecode = qt.executeClient("groupby_grouping_sets1.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("groupby_grouping_sets1.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "groupby_grouping_sets1.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "groupby_grouping_sets1.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_groupby_map_ppr() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "groupby_map_ppr.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/groupby_map_ppr.q");

      if (qt.shouldBeSkipped("groupby_map_ppr.q")) {
        return;
      }

      qt.cliInit("groupby_map_ppr.q", false);
      int ecode = qt.executeClient("groupby_map_ppr.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("groupby_map_ppr.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "groupby_map_ppr.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "groupby_map_ppr.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_groupby_map_ppr_multi_distinct() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "groupby_map_ppr_multi_distinct.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/groupby_map_ppr_multi_distinct.q");

      if (qt.shouldBeSkipped("groupby_map_ppr_multi_distinct.q")) {
        return;
      }

      qt.cliInit("groupby_map_ppr_multi_distinct.q", false);
      int ecode = qt.executeClient("groupby_map_ppr_multi_distinct.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("groupby_map_ppr_multi_distinct.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "groupby_map_ppr_multi_distinct.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "groupby_map_ppr_multi_distinct.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_groupby_multi_single_reducer() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "groupby_multi_single_reducer.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/groupby_multi_single_reducer.q");

      if (qt.shouldBeSkipped("groupby_multi_single_reducer.q")) {
        return;
      }

      qt.cliInit("groupby_multi_single_reducer.q", false);
      int ecode = qt.executeClient("groupby_multi_single_reducer.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("groupby_multi_single_reducer.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "groupby_multi_single_reducer.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "groupby_multi_single_reducer.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_groupby_multi_single_reducer2() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "groupby_multi_single_reducer2.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/groupby_multi_single_reducer2.q");

      if (qt.shouldBeSkipped("groupby_multi_single_reducer2.q")) {
        return;
      }

      qt.cliInit("groupby_multi_single_reducer2.q", false);
      int ecode = qt.executeClient("groupby_multi_single_reducer2.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("groupby_multi_single_reducer2.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "groupby_multi_single_reducer2.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "groupby_multi_single_reducer2.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_groupby_neg_float() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "groupby_neg_float.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/groupby_neg_float.q");

      if (qt.shouldBeSkipped("groupby_neg_float.q")) {
        return;
      }

      qt.cliInit("groupby_neg_float.q", false);
      int ecode = qt.executeClient("groupby_neg_float.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("groupby_neg_float.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "groupby_neg_float.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "groupby_neg_float.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_groupby_ppd() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "groupby_ppd.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/groupby_ppd.q");

      if (qt.shouldBeSkipped("groupby_ppd.q")) {
        return;
      }

      qt.cliInit("groupby_ppd.q", false);
      int ecode = qt.executeClient("groupby_ppd.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("groupby_ppd.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "groupby_ppd.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "groupby_ppd.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_groupby_ppr() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "groupby_ppr.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/groupby_ppr.q");

      if (qt.shouldBeSkipped("groupby_ppr.q")) {
        return;
      }

      qt.cliInit("groupby_ppr.q", false);
      int ecode = qt.executeClient("groupby_ppr.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("groupby_ppr.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "groupby_ppr.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "groupby_ppr.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_groupby_ppr_multi_distinct() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "groupby_ppr_multi_distinct.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/groupby_ppr_multi_distinct.q");

      if (qt.shouldBeSkipped("groupby_ppr_multi_distinct.q")) {
        return;
      }

      qt.cliInit("groupby_ppr_multi_distinct.q", false);
      int ecode = qt.executeClient("groupby_ppr_multi_distinct.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("groupby_ppr_multi_distinct.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "groupby_ppr_multi_distinct.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "groupby_ppr_multi_distinct.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_groupby_rollup1() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "groupby_rollup1.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/groupby_rollup1.q");

      if (qt.shouldBeSkipped("groupby_rollup1.q")) {
        return;
      }

      qt.cliInit("groupby_rollup1.q", false);
      int ecode = qt.executeClient("groupby_rollup1.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("groupby_rollup1.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "groupby_rollup1.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "groupby_rollup1.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_groupby_sort_1() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "groupby_sort_1.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/groupby_sort_1.q");

      if (qt.shouldBeSkipped("groupby_sort_1.q")) {
        return;
      }

      qt.cliInit("groupby_sort_1.q", false);
      int ecode = qt.executeClient("groupby_sort_1.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("groupby_sort_1.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "groupby_sort_1.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "groupby_sort_1.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_groupby_sort_2() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "groupby_sort_2.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/groupby_sort_2.q");

      if (qt.shouldBeSkipped("groupby_sort_2.q")) {
        return;
      }

      qt.cliInit("groupby_sort_2.q", false);
      int ecode = qt.executeClient("groupby_sort_2.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("groupby_sort_2.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "groupby_sort_2.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "groupby_sort_2.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_groupby_sort_3() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "groupby_sort_3.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/groupby_sort_3.q");

      if (qt.shouldBeSkipped("groupby_sort_3.q")) {
        return;
      }

      qt.cliInit("groupby_sort_3.q", false);
      int ecode = qt.executeClient("groupby_sort_3.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("groupby_sort_3.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "groupby_sort_3.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "groupby_sort_3.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_groupby_sort_4() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "groupby_sort_4.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/groupby_sort_4.q");

      if (qt.shouldBeSkipped("groupby_sort_4.q")) {
        return;
      }

      qt.cliInit("groupby_sort_4.q", false);
      int ecode = qt.executeClient("groupby_sort_4.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("groupby_sort_4.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "groupby_sort_4.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "groupby_sort_4.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_groupby_sort_5() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "groupby_sort_5.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/groupby_sort_5.q");

      if (qt.shouldBeSkipped("groupby_sort_5.q")) {
        return;
      }

      qt.cliInit("groupby_sort_5.q", false);
      int ecode = qt.executeClient("groupby_sort_5.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("groupby_sort_5.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "groupby_sort_5.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "groupby_sort_5.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_groupby_sort_skew_1() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "groupby_sort_skew_1.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/groupby_sort_skew_1.q");

      if (qt.shouldBeSkipped("groupby_sort_skew_1.q")) {
        return;
      }

      qt.cliInit("groupby_sort_skew_1.q", false);
      int ecode = qt.executeClient("groupby_sort_skew_1.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("groupby_sort_skew_1.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "groupby_sort_skew_1.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "groupby_sort_skew_1.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_having() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "having.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/having.q");

      if (qt.shouldBeSkipped("having.q")) {
        return;
      }

      qt.cliInit("having.q", false);
      int ecode = qt.executeClient("having.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("having.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "having.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "having.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_hook_context_cs() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "hook_context_cs.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/hook_context_cs.q");

      if (qt.shouldBeSkipped("hook_context_cs.q")) {
        return;
      }

      qt.cliInit("hook_context_cs.q", false);
      int ecode = qt.executeClient("hook_context_cs.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("hook_context_cs.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "hook_context_cs.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "hook_context_cs.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_hook_order() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "hook_order.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/hook_order.q");

      if (qt.shouldBeSkipped("hook_order.q")) {
        return;
      }

      qt.cliInit("hook_order.q", false);
      int ecode = qt.executeClient("hook_order.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("hook_order.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "hook_order.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "hook_order.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_implicit_cast1() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "implicit_cast1.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/implicit_cast1.q");

      if (qt.shouldBeSkipped("implicit_cast1.q")) {
        return;
      }

      qt.cliInit("implicit_cast1.q", false);
      int ecode = qt.executeClient("implicit_cast1.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("implicit_cast1.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "implicit_cast1.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "implicit_cast1.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_index_auth() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "index_auth.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/index_auth.q");

      if (qt.shouldBeSkipped("index_auth.q")) {
        return;
      }

      qt.cliInit("index_auth.q", false);
      int ecode = qt.executeClient("index_auth.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("index_auth.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "index_auth.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "index_auth.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_index_auto() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "index_auto.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/index_auto.q");

      if (qt.shouldBeSkipped("index_auto.q")) {
        return;
      }

      qt.cliInit("index_auto.q", false);
      int ecode = qt.executeClient("index_auto.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("index_auto.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "index_auto.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "index_auto.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_index_auto_empty() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "index_auto_empty.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/index_auto_empty.q");

      if (qt.shouldBeSkipped("index_auto_empty.q")) {
        return;
      }

      qt.cliInit("index_auto_empty.q", false);
      int ecode = qt.executeClient("index_auto_empty.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("index_auto_empty.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "index_auto_empty.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "index_auto_empty.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_index_auto_file_format() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "index_auto_file_format.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/index_auto_file_format.q");

      if (qt.shouldBeSkipped("index_auto_file_format.q")) {
        return;
      }

      qt.cliInit("index_auto_file_format.q", false);
      int ecode = qt.executeClient("index_auto_file_format.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("index_auto_file_format.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "index_auto_file_format.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "index_auto_file_format.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_index_auto_mult_tables() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "index_auto_mult_tables.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/index_auto_mult_tables.q");

      if (qt.shouldBeSkipped("index_auto_mult_tables.q")) {
        return;
      }

      qt.cliInit("index_auto_mult_tables.q", false);
      int ecode = qt.executeClient("index_auto_mult_tables.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("index_auto_mult_tables.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "index_auto_mult_tables.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "index_auto_mult_tables.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_index_auto_mult_tables_compact() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "index_auto_mult_tables_compact.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/index_auto_mult_tables_compact.q");

      if (qt.shouldBeSkipped("index_auto_mult_tables_compact.q")) {
        return;
      }

      qt.cliInit("index_auto_mult_tables_compact.q", false);
      int ecode = qt.executeClient("index_auto_mult_tables_compact.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("index_auto_mult_tables_compact.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "index_auto_mult_tables_compact.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "index_auto_mult_tables_compact.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_index_auto_multiple() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "index_auto_multiple.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/index_auto_multiple.q");

      if (qt.shouldBeSkipped("index_auto_multiple.q")) {
        return;
      }

      qt.cliInit("index_auto_multiple.q", false);
      int ecode = qt.executeClient("index_auto_multiple.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("index_auto_multiple.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "index_auto_multiple.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "index_auto_multiple.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_index_auto_partitioned() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "index_auto_partitioned.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/index_auto_partitioned.q");

      if (qt.shouldBeSkipped("index_auto_partitioned.q")) {
        return;
      }

      qt.cliInit("index_auto_partitioned.q", false);
      int ecode = qt.executeClient("index_auto_partitioned.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("index_auto_partitioned.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "index_auto_partitioned.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "index_auto_partitioned.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_index_auto_self_join() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "index_auto_self_join.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/index_auto_self_join.q");

      if (qt.shouldBeSkipped("index_auto_self_join.q")) {
        return;
      }

      qt.cliInit("index_auto_self_join.q", false);
      int ecode = qt.executeClient("index_auto_self_join.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("index_auto_self_join.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "index_auto_self_join.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "index_auto_self_join.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_index_auto_unused() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "index_auto_unused.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/index_auto_unused.q");

      if (qt.shouldBeSkipped("index_auto_unused.q")) {
        return;
      }

      qt.cliInit("index_auto_unused.q", false);
      int ecode = qt.executeClient("index_auto_unused.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("index_auto_unused.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "index_auto_unused.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "index_auto_unused.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_index_auto_update() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "index_auto_update.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/index_auto_update.q");

      if (qt.shouldBeSkipped("index_auto_update.q")) {
        return;
      }

      qt.cliInit("index_auto_update.q", false);
      int ecode = qt.executeClient("index_auto_update.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("index_auto_update.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "index_auto_update.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "index_auto_update.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_index_bitmap() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "index_bitmap.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/index_bitmap.q");

      if (qt.shouldBeSkipped("index_bitmap.q")) {
        return;
      }

      qt.cliInit("index_bitmap.q", false);
      int ecode = qt.executeClient("index_bitmap.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("index_bitmap.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "index_bitmap.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "index_bitmap.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_index_bitmap1() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "index_bitmap1.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/index_bitmap1.q");

      if (qt.shouldBeSkipped("index_bitmap1.q")) {
        return;
      }

      qt.cliInit("index_bitmap1.q", false);
      int ecode = qt.executeClient("index_bitmap1.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("index_bitmap1.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "index_bitmap1.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "index_bitmap1.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_index_bitmap2() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "index_bitmap2.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/index_bitmap2.q");

      if (qt.shouldBeSkipped("index_bitmap2.q")) {
        return;
      }

      qt.cliInit("index_bitmap2.q", false);
      int ecode = qt.executeClient("index_bitmap2.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("index_bitmap2.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "index_bitmap2.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "index_bitmap2.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_index_bitmap3() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "index_bitmap3.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/index_bitmap3.q");

      if (qt.shouldBeSkipped("index_bitmap3.q")) {
        return;
      }

      qt.cliInit("index_bitmap3.q", false);
      int ecode = qt.executeClient("index_bitmap3.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("index_bitmap3.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "index_bitmap3.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "index_bitmap3.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_index_bitmap_auto() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "index_bitmap_auto.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/index_bitmap_auto.q");

      if (qt.shouldBeSkipped("index_bitmap_auto.q")) {
        return;
      }

      qt.cliInit("index_bitmap_auto.q", false);
      int ecode = qt.executeClient("index_bitmap_auto.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("index_bitmap_auto.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "index_bitmap_auto.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "index_bitmap_auto.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_index_bitmap_auto_partitioned() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "index_bitmap_auto_partitioned.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/index_bitmap_auto_partitioned.q");

      if (qt.shouldBeSkipped("index_bitmap_auto_partitioned.q")) {
        return;
      }

      qt.cliInit("index_bitmap_auto_partitioned.q", false);
      int ecode = qt.executeClient("index_bitmap_auto_partitioned.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("index_bitmap_auto_partitioned.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "index_bitmap_auto_partitioned.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "index_bitmap_auto_partitioned.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_index_bitmap_compression() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "index_bitmap_compression.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/index_bitmap_compression.q");

      if (qt.shouldBeSkipped("index_bitmap_compression.q")) {
        return;
      }

      qt.cliInit("index_bitmap_compression.q", false);
      int ecode = qt.executeClient("index_bitmap_compression.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("index_bitmap_compression.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "index_bitmap_compression.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "index_bitmap_compression.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_index_bitmap_rc() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "index_bitmap_rc.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/index_bitmap_rc.q");

      if (qt.shouldBeSkipped("index_bitmap_rc.q")) {
        return;
      }

      qt.cliInit("index_bitmap_rc.q", false);
      int ecode = qt.executeClient("index_bitmap_rc.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("index_bitmap_rc.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "index_bitmap_rc.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "index_bitmap_rc.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_index_compact() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "index_compact.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/index_compact.q");

      if (qt.shouldBeSkipped("index_compact.q")) {
        return;
      }

      qt.cliInit("index_compact.q", false);
      int ecode = qt.executeClient("index_compact.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("index_compact.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "index_compact.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "index_compact.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_index_compact_1() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "index_compact_1.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/index_compact_1.q");

      if (qt.shouldBeSkipped("index_compact_1.q")) {
        return;
      }

      qt.cliInit("index_compact_1.q", false);
      int ecode = qt.executeClient("index_compact_1.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("index_compact_1.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "index_compact_1.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "index_compact_1.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_index_compact_2() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "index_compact_2.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/index_compact_2.q");

      if (qt.shouldBeSkipped("index_compact_2.q")) {
        return;
      }

      qt.cliInit("index_compact_2.q", false);
      int ecode = qt.executeClient("index_compact_2.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("index_compact_2.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "index_compact_2.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "index_compact_2.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_index_compact_3() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "index_compact_3.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/index_compact_3.q");

      if (qt.shouldBeSkipped("index_compact_3.q")) {
        return;
      }

      qt.cliInit("index_compact_3.q", false);
      int ecode = qt.executeClient("index_compact_3.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("index_compact_3.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "index_compact_3.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "index_compact_3.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_index_compact_binary_search() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "index_compact_binary_search.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/index_compact_binary_search.q");

      if (qt.shouldBeSkipped("index_compact_binary_search.q")) {
        return;
      }

      qt.cliInit("index_compact_binary_search.q", false);
      int ecode = qt.executeClient("index_compact_binary_search.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("index_compact_binary_search.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "index_compact_binary_search.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "index_compact_binary_search.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_index_compression() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "index_compression.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/index_compression.q");

      if (qt.shouldBeSkipped("index_compression.q")) {
        return;
      }

      qt.cliInit("index_compression.q", false);
      int ecode = qt.executeClient("index_compression.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("index_compression.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "index_compression.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "index_compression.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_index_creation() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "index_creation.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/index_creation.q");

      if (qt.shouldBeSkipped("index_creation.q")) {
        return;
      }

      qt.cliInit("index_creation.q", false);
      int ecode = qt.executeClient("index_creation.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("index_creation.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "index_creation.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "index_creation.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_index_stale() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "index_stale.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/index_stale.q");

      if (qt.shouldBeSkipped("index_stale.q")) {
        return;
      }

      qt.cliInit("index_stale.q", false);
      int ecode = qt.executeClient("index_stale.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("index_stale.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "index_stale.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "index_stale.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_index_stale_partitioned() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "index_stale_partitioned.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/index_stale_partitioned.q");

      if (qt.shouldBeSkipped("index_stale_partitioned.q")) {
        return;
      }

      qt.cliInit("index_stale_partitioned.q", false);
      int ecode = qt.executeClient("index_stale_partitioned.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("index_stale_partitioned.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "index_stale_partitioned.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "index_stale_partitioned.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_infer_const_type() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "infer_const_type.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/infer_const_type.q");

      if (qt.shouldBeSkipped("infer_const_type.q")) {
        return;
      }

      qt.cliInit("infer_const_type.q", false);
      int ecode = qt.executeClient("infer_const_type.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("infer_const_type.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "infer_const_type.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "infer_const_type.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_init_file() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "init_file.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/init_file.q");

      if (qt.shouldBeSkipped("init_file.q")) {
        return;
      }

      qt.cliInit("init_file.q", false);
      int ecode = qt.executeClient("init_file.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("init_file.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "init_file.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "init_file.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_innerjoin() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "innerjoin.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/innerjoin.q");

      if (qt.shouldBeSkipped("innerjoin.q")) {
        return;
      }

      qt.cliInit("innerjoin.q", false);
      int ecode = qt.executeClient("innerjoin.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("innerjoin.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "innerjoin.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "innerjoin.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_inoutdriver() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "inoutdriver.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/inoutdriver.q");

      if (qt.shouldBeSkipped("inoutdriver.q")) {
        return;
      }

      qt.cliInit("inoutdriver.q", false);
      int ecode = qt.executeClient("inoutdriver.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("inoutdriver.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "inoutdriver.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "inoutdriver.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_input() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "input.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/input.q");

      if (qt.shouldBeSkipped("input.q")) {
        return;
      }

      qt.cliInit("input.q", false);
      int ecode = qt.executeClient("input.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("input.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "input.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "input.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_input0() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "input0.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/input0.q");

      if (qt.shouldBeSkipped("input0.q")) {
        return;
      }

      qt.cliInit("input0.q", false);
      int ecode = qt.executeClient("input0.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("input0.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "input0.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "input0.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_input1() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "input1.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/input1.q");

      if (qt.shouldBeSkipped("input1.q")) {
        return;
      }

      qt.cliInit("input1.q", false);
      int ecode = qt.executeClient("input1.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("input1.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "input1.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "input1.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_input10() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "input10.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/input10.q");

      if (qt.shouldBeSkipped("input10.q")) {
        return;
      }

      qt.cliInit("input10.q", false);
      int ecode = qt.executeClient("input10.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("input10.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "input10.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "input10.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_input11() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "input11.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/input11.q");

      if (qt.shouldBeSkipped("input11.q")) {
        return;
      }

      qt.cliInit("input11.q", false);
      int ecode = qt.executeClient("input11.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("input11.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "input11.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "input11.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_input11_limit() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "input11_limit.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/input11_limit.q");

      if (qt.shouldBeSkipped("input11_limit.q")) {
        return;
      }

      qt.cliInit("input11_limit.q", false);
      int ecode = qt.executeClient("input11_limit.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("input11_limit.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "input11_limit.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "input11_limit.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_input12() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "input12.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/input12.q");

      if (qt.shouldBeSkipped("input12.q")) {
        return;
      }

      qt.cliInit("input12.q", false);
      int ecode = qt.executeClient("input12.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("input12.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "input12.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "input12.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_input12_hadoop20() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "input12_hadoop20.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/input12_hadoop20.q");

      if (qt.shouldBeSkipped("input12_hadoop20.q")) {
        return;
      }

      qt.cliInit("input12_hadoop20.q", false);
      int ecode = qt.executeClient("input12_hadoop20.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("input12_hadoop20.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "input12_hadoop20.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "input12_hadoop20.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_input13() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "input13.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/input13.q");

      if (qt.shouldBeSkipped("input13.q")) {
        return;
      }

      qt.cliInit("input13.q", false);
      int ecode = qt.executeClient("input13.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("input13.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "input13.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "input13.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_input14() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "input14.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/input14.q");

      if (qt.shouldBeSkipped("input14.q")) {
        return;
      }

      qt.cliInit("input14.q", false);
      int ecode = qt.executeClient("input14.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("input14.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "input14.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "input14.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_input14_limit() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "input14_limit.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/input14_limit.q");

      if (qt.shouldBeSkipped("input14_limit.q")) {
        return;
      }

      qt.cliInit("input14_limit.q", false);
      int ecode = qt.executeClient("input14_limit.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("input14_limit.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "input14_limit.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "input14_limit.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_input15() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "input15.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/input15.q");

      if (qt.shouldBeSkipped("input15.q")) {
        return;
      }

      qt.cliInit("input15.q", false);
      int ecode = qt.executeClient("input15.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("input15.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "input15.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "input15.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_input16() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "input16.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/input16.q");

      if (qt.shouldBeSkipped("input16.q")) {
        return;
      }

      qt.cliInit("input16.q", false);
      int ecode = qt.executeClient("input16.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("input16.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "input16.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "input16.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_input17() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "input17.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/input17.q");

      if (qt.shouldBeSkipped("input17.q")) {
        return;
      }

      qt.cliInit("input17.q", false);
      int ecode = qt.executeClient("input17.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("input17.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "input17.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "input17.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_input18() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "input18.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/input18.q");

      if (qt.shouldBeSkipped("input18.q")) {
        return;
      }

      qt.cliInit("input18.q", false);
      int ecode = qt.executeClient("input18.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("input18.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "input18.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "input18.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_input19() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "input19.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/input19.q");

      if (qt.shouldBeSkipped("input19.q")) {
        return;
      }

      qt.cliInit("input19.q", false);
      int ecode = qt.executeClient("input19.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("input19.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "input19.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "input19.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_input1_limit() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "input1_limit.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/input1_limit.q");

      if (qt.shouldBeSkipped("input1_limit.q")) {
        return;
      }

      qt.cliInit("input1_limit.q", false);
      int ecode = qt.executeClient("input1_limit.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("input1_limit.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "input1_limit.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "input1_limit.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_input2() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "input2.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/input2.q");

      if (qt.shouldBeSkipped("input2.q")) {
        return;
      }

      qt.cliInit("input2.q", false);
      int ecode = qt.executeClient("input2.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("input2.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "input2.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "input2.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_input20() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "input20.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/input20.q");

      if (qt.shouldBeSkipped("input20.q")) {
        return;
      }

      qt.cliInit("input20.q", false);
      int ecode = qt.executeClient("input20.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("input20.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "input20.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "input20.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_input21() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "input21.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/input21.q");

      if (qt.shouldBeSkipped("input21.q")) {
        return;
      }

      qt.cliInit("input21.q", false);
      int ecode = qt.executeClient("input21.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("input21.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "input21.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "input21.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_input22() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "input22.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/input22.q");

      if (qt.shouldBeSkipped("input22.q")) {
        return;
      }

      qt.cliInit("input22.q", false);
      int ecode = qt.executeClient("input22.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("input22.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "input22.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "input22.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_input23() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "input23.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/input23.q");

      if (qt.shouldBeSkipped("input23.q")) {
        return;
      }

      qt.cliInit("input23.q", false);
      int ecode = qt.executeClient("input23.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("input23.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "input23.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "input23.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_input24() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "input24.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/input24.q");

      if (qt.shouldBeSkipped("input24.q")) {
        return;
      }

      qt.cliInit("input24.q", false);
      int ecode = qt.executeClient("input24.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("input24.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "input24.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "input24.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_input25() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "input25.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/input25.q");

      if (qt.shouldBeSkipped("input25.q")) {
        return;
      }

      qt.cliInit("input25.q", false);
      int ecode = qt.executeClient("input25.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("input25.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "input25.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "input25.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_input26() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "input26.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/input26.q");

      if (qt.shouldBeSkipped("input26.q")) {
        return;
      }

      qt.cliInit("input26.q", false);
      int ecode = qt.executeClient("input26.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("input26.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "input26.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "input26.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_input28() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "input28.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/input28.q");

      if (qt.shouldBeSkipped("input28.q")) {
        return;
      }

      qt.cliInit("input28.q", false);
      int ecode = qt.executeClient("input28.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("input28.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "input28.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "input28.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_input2_limit() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "input2_limit.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/input2_limit.q");

      if (qt.shouldBeSkipped("input2_limit.q")) {
        return;
      }

      qt.cliInit("input2_limit.q", false);
      int ecode = qt.executeClient("input2_limit.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("input2_limit.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "input2_limit.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "input2_limit.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_input3() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "input3.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/input3.q");

      if (qt.shouldBeSkipped("input3.q")) {
        return;
      }

      qt.cliInit("input3.q", false);
      int ecode = qt.executeClient("input3.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("input3.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "input3.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "input3.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_input30() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "input30.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/input30.q");

      if (qt.shouldBeSkipped("input30.q")) {
        return;
      }

      qt.cliInit("input30.q", false);
      int ecode = qt.executeClient("input30.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("input30.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "input30.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "input30.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_input31() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "input31.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/input31.q");

      if (qt.shouldBeSkipped("input31.q")) {
        return;
      }

      qt.cliInit("input31.q", false);
      int ecode = qt.executeClient("input31.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("input31.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "input31.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "input31.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_input32() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "input32.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/input32.q");

      if (qt.shouldBeSkipped("input32.q")) {
        return;
      }

      qt.cliInit("input32.q", false);
      int ecode = qt.executeClient("input32.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("input32.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "input32.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "input32.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_input33() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "input33.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/input33.q");

      if (qt.shouldBeSkipped("input33.q")) {
        return;
      }

      qt.cliInit("input33.q", false);
      int ecode = qt.executeClient("input33.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("input33.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "input33.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "input33.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_input34() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "input34.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/input34.q");

      if (qt.shouldBeSkipped("input34.q")) {
        return;
      }

      qt.cliInit("input34.q", false);
      int ecode = qt.executeClient("input34.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("input34.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "input34.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "input34.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_input35() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "input35.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/input35.q");

      if (qt.shouldBeSkipped("input35.q")) {
        return;
      }

      qt.cliInit("input35.q", false);
      int ecode = qt.executeClient("input35.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("input35.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "input35.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "input35.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_input36() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "input36.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/input36.q");

      if (qt.shouldBeSkipped("input36.q")) {
        return;
      }

      qt.cliInit("input36.q", false);
      int ecode = qt.executeClient("input36.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("input36.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "input36.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "input36.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_input37() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "input37.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/input37.q");

      if (qt.shouldBeSkipped("input37.q")) {
        return;
      }

      qt.cliInit("input37.q", false);
      int ecode = qt.executeClient("input37.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("input37.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "input37.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "input37.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_input38() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "input38.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/input38.q");

      if (qt.shouldBeSkipped("input38.q")) {
        return;
      }

      qt.cliInit("input38.q", false);
      int ecode = qt.executeClient("input38.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("input38.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "input38.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "input38.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_input39() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "input39.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/input39.q");

      if (qt.shouldBeSkipped("input39.q")) {
        return;
      }

      qt.cliInit("input39.q", false);
      int ecode = qt.executeClient("input39.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("input39.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "input39.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "input39.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_input39_hadoop20() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "input39_hadoop20.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/input39_hadoop20.q");

      if (qt.shouldBeSkipped("input39_hadoop20.q")) {
        return;
      }

      qt.cliInit("input39_hadoop20.q", false);
      int ecode = qt.executeClient("input39_hadoop20.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("input39_hadoop20.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "input39_hadoop20.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "input39_hadoop20.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_input3_limit() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "input3_limit.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/input3_limit.q");

      if (qt.shouldBeSkipped("input3_limit.q")) {
        return;
      }

      qt.cliInit("input3_limit.q", false);
      int ecode = qt.executeClient("input3_limit.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("input3_limit.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "input3_limit.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "input3_limit.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_input4() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "input4.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/input4.q");

      if (qt.shouldBeSkipped("input4.q")) {
        return;
      }

      qt.cliInit("input4.q", false);
      int ecode = qt.executeClient("input4.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("input4.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "input4.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "input4.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_input40() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "input40.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/input40.q");

      if (qt.shouldBeSkipped("input40.q")) {
        return;
      }

      qt.cliInit("input40.q", false);
      int ecode = qt.executeClient("input40.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("input40.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "input40.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "input40.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_input41() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "input41.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/input41.q");

      if (qt.shouldBeSkipped("input41.q")) {
        return;
      }

      qt.cliInit("input41.q", false);
      int ecode = qt.executeClient("input41.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("input41.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "input41.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "input41.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_input42() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "input42.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/input42.q");

      if (qt.shouldBeSkipped("input42.q")) {
        return;
      }

      qt.cliInit("input42.q", false);
      int ecode = qt.executeClient("input42.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("input42.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "input42.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "input42.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_input43() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "input43.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/input43.q");

      if (qt.shouldBeSkipped("input43.q")) {
        return;
      }

      qt.cliInit("input43.q", false);
      int ecode = qt.executeClient("input43.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("input43.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "input43.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "input43.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_input44() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "input44.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/input44.q");

      if (qt.shouldBeSkipped("input44.q")) {
        return;
      }

      qt.cliInit("input44.q", false);
      int ecode = qt.executeClient("input44.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("input44.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "input44.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "input44.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_input45() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "input45.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/input45.q");

      if (qt.shouldBeSkipped("input45.q")) {
        return;
      }

      qt.cliInit("input45.q", false);
      int ecode = qt.executeClient("input45.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("input45.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "input45.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "input45.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_input46() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "input46.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/input46.q");

      if (qt.shouldBeSkipped("input46.q")) {
        return;
      }

      qt.cliInit("input46.q", false);
      int ecode = qt.executeClient("input46.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("input46.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "input46.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "input46.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_input49() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "input49.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/input49.q");

      if (qt.shouldBeSkipped("input49.q")) {
        return;
      }

      qt.cliInit("input49.q", false);
      int ecode = qt.executeClient("input49.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("input49.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "input49.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "input49.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_input4_cb_delim() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "input4_cb_delim.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/input4_cb_delim.q");

      if (qt.shouldBeSkipped("input4_cb_delim.q")) {
        return;
      }

      qt.cliInit("input4_cb_delim.q", false);
      int ecode = qt.executeClient("input4_cb_delim.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("input4_cb_delim.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "input4_cb_delim.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "input4_cb_delim.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_input4_limit() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "input4_limit.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/input4_limit.q");

      if (qt.shouldBeSkipped("input4_limit.q")) {
        return;
      }

      qt.cliInit("input4_limit.q", false);
      int ecode = qt.executeClient("input4_limit.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("input4_limit.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "input4_limit.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "input4_limit.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_input5() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "input5.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/input5.q");

      if (qt.shouldBeSkipped("input5.q")) {
        return;
      }

      qt.cliInit("input5.q", false);
      int ecode = qt.executeClient("input5.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("input5.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "input5.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "input5.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_input6() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "input6.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/input6.q");

      if (qt.shouldBeSkipped("input6.q")) {
        return;
      }

      qt.cliInit("input6.q", false);
      int ecode = qt.executeClient("input6.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("input6.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "input6.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "input6.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_input7() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "input7.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/input7.q");

      if (qt.shouldBeSkipped("input7.q")) {
        return;
      }

      qt.cliInit("input7.q", false);
      int ecode = qt.executeClient("input7.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("input7.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "input7.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "input7.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_input8() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "input8.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/input8.q");

      if (qt.shouldBeSkipped("input8.q")) {
        return;
      }

      qt.cliInit("input8.q", false);
      int ecode = qt.executeClient("input8.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("input8.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "input8.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "input8.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_input9() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "input9.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/input9.q");

      if (qt.shouldBeSkipped("input9.q")) {
        return;
      }

      qt.cliInit("input9.q", false);
      int ecode = qt.executeClient("input9.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("input9.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "input9.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "input9.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_input_columnarserde() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "input_columnarserde.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/input_columnarserde.q");

      if (qt.shouldBeSkipped("input_columnarserde.q")) {
        return;
      }

      qt.cliInit("input_columnarserde.q", false);
      int ecode = qt.executeClient("input_columnarserde.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("input_columnarserde.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "input_columnarserde.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "input_columnarserde.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_input_dfs() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "input_dfs.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/input_dfs.q");

      if (qt.shouldBeSkipped("input_dfs.q")) {
        return;
      }

      qt.cliInit("input_dfs.q", false);
      int ecode = qt.executeClient("input_dfs.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("input_dfs.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "input_dfs.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "input_dfs.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_input_dynamicserde() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "input_dynamicserde.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/input_dynamicserde.q");

      if (qt.shouldBeSkipped("input_dynamicserde.q")) {
        return;
      }

      qt.cliInit("input_dynamicserde.q", false);
      int ecode = qt.executeClient("input_dynamicserde.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("input_dynamicserde.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "input_dynamicserde.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "input_dynamicserde.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_input_lazyserde() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "input_lazyserde.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/input_lazyserde.q");

      if (qt.shouldBeSkipped("input_lazyserde.q")) {
        return;
      }

      qt.cliInit("input_lazyserde.q", false);
      int ecode = qt.executeClient("input_lazyserde.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("input_lazyserde.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "input_lazyserde.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "input_lazyserde.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_input_limit() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "input_limit.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/input_limit.q");

      if (qt.shouldBeSkipped("input_limit.q")) {
        return;
      }

      qt.cliInit("input_limit.q", false);
      int ecode = qt.executeClient("input_limit.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("input_limit.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "input_limit.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "input_limit.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_input_part0() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "input_part0.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/input_part0.q");

      if (qt.shouldBeSkipped("input_part0.q")) {
        return;
      }

      qt.cliInit("input_part0.q", false);
      int ecode = qt.executeClient("input_part0.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("input_part0.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "input_part0.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "input_part0.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_input_part1() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "input_part1.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/input_part1.q");

      if (qt.shouldBeSkipped("input_part1.q")) {
        return;
      }

      qt.cliInit("input_part1.q", false);
      int ecode = qt.executeClient("input_part1.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("input_part1.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "input_part1.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "input_part1.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_input_part10() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "input_part10.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/input_part10.q");

      if (qt.shouldBeSkipped("input_part10.q")) {
        return;
      }

      qt.cliInit("input_part10.q", false);
      int ecode = qt.executeClient("input_part10.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("input_part10.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "input_part10.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "input_part10.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_input_part10_win() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "input_part10_win.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/input_part10_win.q");

      if (qt.shouldBeSkipped("input_part10_win.q")) {
        return;
      }

      qt.cliInit("input_part10_win.q", false);
      int ecode = qt.executeClient("input_part10_win.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("input_part10_win.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "input_part10_win.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "input_part10_win.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_input_part2() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "input_part2.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/input_part2.q");

      if (qt.shouldBeSkipped("input_part2.q")) {
        return;
      }

      qt.cliInit("input_part2.q", false);
      int ecode = qt.executeClient("input_part2.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("input_part2.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "input_part2.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "input_part2.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_input_part3() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "input_part3.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/input_part3.q");

      if (qt.shouldBeSkipped("input_part3.q")) {
        return;
      }

      qt.cliInit("input_part3.q", false);
      int ecode = qt.executeClient("input_part3.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("input_part3.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "input_part3.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "input_part3.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_input_part4() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "input_part4.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/input_part4.q");

      if (qt.shouldBeSkipped("input_part4.q")) {
        return;
      }

      qt.cliInit("input_part4.q", false);
      int ecode = qt.executeClient("input_part4.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("input_part4.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "input_part4.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "input_part4.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_input_part5() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "input_part5.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/input_part5.q");

      if (qt.shouldBeSkipped("input_part5.q")) {
        return;
      }

      qt.cliInit("input_part5.q", false);
      int ecode = qt.executeClient("input_part5.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("input_part5.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "input_part5.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "input_part5.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_input_part6() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "input_part6.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/input_part6.q");

      if (qt.shouldBeSkipped("input_part6.q")) {
        return;
      }

      qt.cliInit("input_part6.q", false);
      int ecode = qt.executeClient("input_part6.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("input_part6.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "input_part6.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "input_part6.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_input_part7() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "input_part7.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/input_part7.q");

      if (qt.shouldBeSkipped("input_part7.q")) {
        return;
      }

      qt.cliInit("input_part7.q", false);
      int ecode = qt.executeClient("input_part7.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("input_part7.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "input_part7.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "input_part7.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_input_part8() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "input_part8.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/input_part8.q");

      if (qt.shouldBeSkipped("input_part8.q")) {
        return;
      }

      qt.cliInit("input_part8.q", false);
      int ecode = qt.executeClient("input_part8.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("input_part8.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "input_part8.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "input_part8.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_input_part9() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "input_part9.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/input_part9.q");

      if (qt.shouldBeSkipped("input_part9.q")) {
        return;
      }

      qt.cliInit("input_part9.q", false);
      int ecode = qt.executeClient("input_part9.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("input_part9.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "input_part9.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "input_part9.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_input_testsequencefile() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "input_testsequencefile.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/input_testsequencefile.q");

      if (qt.shouldBeSkipped("input_testsequencefile.q")) {
        return;
      }

      qt.cliInit("input_testsequencefile.q", false);
      int ecode = qt.executeClient("input_testsequencefile.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("input_testsequencefile.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "input_testsequencefile.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "input_testsequencefile.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_input_testxpath() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "input_testxpath.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/input_testxpath.q");

      if (qt.shouldBeSkipped("input_testxpath.q")) {
        return;
      }

      qt.cliInit("input_testxpath.q", false);
      int ecode = qt.executeClient("input_testxpath.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("input_testxpath.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "input_testxpath.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "input_testxpath.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_input_testxpath2() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "input_testxpath2.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/input_testxpath2.q");

      if (qt.shouldBeSkipped("input_testxpath2.q")) {
        return;
      }

      qt.cliInit("input_testxpath2.q", false);
      int ecode = qt.executeClient("input_testxpath2.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("input_testxpath2.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "input_testxpath2.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "input_testxpath2.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_input_testxpath3() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "input_testxpath3.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/input_testxpath3.q");

      if (qt.shouldBeSkipped("input_testxpath3.q")) {
        return;
      }

      qt.cliInit("input_testxpath3.q", false);
      int ecode = qt.executeClient("input_testxpath3.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("input_testxpath3.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "input_testxpath3.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "input_testxpath3.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_input_testxpath4() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "input_testxpath4.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/input_testxpath4.q");

      if (qt.shouldBeSkipped("input_testxpath4.q")) {
        return;
      }

      qt.cliInit("input_testxpath4.q", false);
      int ecode = qt.executeClient("input_testxpath4.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("input_testxpath4.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "input_testxpath4.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "input_testxpath4.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_inputddl1() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "inputddl1.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/inputddl1.q");

      if (qt.shouldBeSkipped("inputddl1.q")) {
        return;
      }

      qt.cliInit("inputddl1.q", false);
      int ecode = qt.executeClient("inputddl1.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("inputddl1.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "inputddl1.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "inputddl1.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_inputddl2() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "inputddl2.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/inputddl2.q");

      if (qt.shouldBeSkipped("inputddl2.q")) {
        return;
      }

      qt.cliInit("inputddl2.q", false);
      int ecode = qt.executeClient("inputddl2.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("inputddl2.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "inputddl2.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "inputddl2.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_inputddl3() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "inputddl3.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/inputddl3.q");

      if (qt.shouldBeSkipped("inputddl3.q")) {
        return;
      }

      qt.cliInit("inputddl3.q", false);
      int ecode = qt.executeClient("inputddl3.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("inputddl3.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "inputddl3.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "inputddl3.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_inputddl4() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "inputddl4.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/inputddl4.q");

      if (qt.shouldBeSkipped("inputddl4.q")) {
        return;
      }

      qt.cliInit("inputddl4.q", false);
      int ecode = qt.executeClient("inputddl4.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("inputddl4.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "inputddl4.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "inputddl4.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_inputddl5() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "inputddl5.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/inputddl5.q");

      if (qt.shouldBeSkipped("inputddl5.q")) {
        return;
      }

      qt.cliInit("inputddl5.q", false);
      int ecode = qt.executeClient("inputddl5.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("inputddl5.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "inputddl5.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "inputddl5.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_inputddl6() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "inputddl6.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/inputddl6.q");

      if (qt.shouldBeSkipped("inputddl6.q")) {
        return;
      }

      qt.cliInit("inputddl6.q", false);
      int ecode = qt.executeClient("inputddl6.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("inputddl6.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "inputddl6.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "inputddl6.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_inputddl7() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "inputddl7.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/inputddl7.q");

      if (qt.shouldBeSkipped("inputddl7.q")) {
        return;
      }

      qt.cliInit("inputddl7.q", false);
      int ecode = qt.executeClient("inputddl7.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("inputddl7.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "inputddl7.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "inputddl7.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_inputddl8() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "inputddl8.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/inputddl8.q");

      if (qt.shouldBeSkipped("inputddl8.q")) {
        return;
      }

      qt.cliInit("inputddl8.q", false);
      int ecode = qt.executeClient("inputddl8.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("inputddl8.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "inputddl8.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "inputddl8.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_insert1() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "insert1.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/insert1.q");

      if (qt.shouldBeSkipped("insert1.q")) {
        return;
      }

      qt.cliInit("insert1.q", false);
      int ecode = qt.executeClient("insert1.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("insert1.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "insert1.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "insert1.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_insert1_overwrite_partitions() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "insert1_overwrite_partitions.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/insert1_overwrite_partitions.q");

      if (qt.shouldBeSkipped("insert1_overwrite_partitions.q")) {
        return;
      }

      qt.cliInit("insert1_overwrite_partitions.q", false);
      int ecode = qt.executeClient("insert1_overwrite_partitions.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("insert1_overwrite_partitions.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "insert1_overwrite_partitions.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "insert1_overwrite_partitions.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_insert2_overwrite_partitions() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "insert2_overwrite_partitions.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/insert2_overwrite_partitions.q");

      if (qt.shouldBeSkipped("insert2_overwrite_partitions.q")) {
        return;
      }

      qt.cliInit("insert2_overwrite_partitions.q", false);
      int ecode = qt.executeClient("insert2_overwrite_partitions.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("insert2_overwrite_partitions.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "insert2_overwrite_partitions.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "insert2_overwrite_partitions.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_insert_compressed() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "insert_compressed.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/insert_compressed.q");

      if (qt.shouldBeSkipped("insert_compressed.q")) {
        return;
      }

      qt.cliInit("insert_compressed.q", false);
      int ecode = qt.executeClient("insert_compressed.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("insert_compressed.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "insert_compressed.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "insert_compressed.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_insert_into1() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "insert_into1.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/insert_into1.q");

      if (qt.shouldBeSkipped("insert_into1.q")) {
        return;
      }

      qt.cliInit("insert_into1.q", false);
      int ecode = qt.executeClient("insert_into1.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("insert_into1.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "insert_into1.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "insert_into1.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_insert_into2() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "insert_into2.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/insert_into2.q");

      if (qt.shouldBeSkipped("insert_into2.q")) {
        return;
      }

      qt.cliInit("insert_into2.q", false);
      int ecode = qt.executeClient("insert_into2.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("insert_into2.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "insert_into2.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "insert_into2.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_insert_into3() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "insert_into3.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/insert_into3.q");

      if (qt.shouldBeSkipped("insert_into3.q")) {
        return;
      }

      qt.cliInit("insert_into3.q", false);
      int ecode = qt.executeClient("insert_into3.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("insert_into3.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "insert_into3.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "insert_into3.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_insert_into4() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "insert_into4.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/insert_into4.q");

      if (qt.shouldBeSkipped("insert_into4.q")) {
        return;
      }

      qt.cliInit("insert_into4.q", false);
      int ecode = qt.executeClient("insert_into4.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("insert_into4.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "insert_into4.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "insert_into4.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_insert_into5() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "insert_into5.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/insert_into5.q");

      if (qt.shouldBeSkipped("insert_into5.q")) {
        return;
      }

      qt.cliInit("insert_into5.q", false);
      int ecode = qt.executeClient("insert_into5.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("insert_into5.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "insert_into5.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "insert_into5.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_insert_into6() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "insert_into6.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/insert_into6.q");

      if (qt.shouldBeSkipped("insert_into6.q")) {
        return;
      }

      qt.cliInit("insert_into6.q", false);
      int ecode = qt.executeClient("insert_into6.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("insert_into6.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "insert_into6.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "insert_into6.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_insertexternal1() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "insertexternal1.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/insertexternal1.q");

      if (qt.shouldBeSkipped("insertexternal1.q")) {
        return;
      }

      qt.cliInit("insertexternal1.q", false);
      int ecode = qt.executeClient("insertexternal1.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("insertexternal1.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "insertexternal1.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "insertexternal1.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_join0() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "join0.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/join0.q");

      if (qt.shouldBeSkipped("join0.q")) {
        return;
      }

      qt.cliInit("join0.q", false);
      int ecode = qt.executeClient("join0.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("join0.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "join0.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "join0.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_join10() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "join10.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/join10.q");

      if (qt.shouldBeSkipped("join10.q")) {
        return;
      }

      qt.cliInit("join10.q", false);
      int ecode = qt.executeClient("join10.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("join10.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "join10.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "join10.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_join11() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "join11.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/join11.q");

      if (qt.shouldBeSkipped("join11.q")) {
        return;
      }

      qt.cliInit("join11.q", false);
      int ecode = qt.executeClient("join11.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("join11.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "join11.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "join11.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_join12() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "join12.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/join12.q");

      if (qt.shouldBeSkipped("join12.q")) {
        return;
      }

      qt.cliInit("join12.q", false);
      int ecode = qt.executeClient("join12.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("join12.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "join12.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "join12.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_join13() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "join13.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/join13.q");

      if (qt.shouldBeSkipped("join13.q")) {
        return;
      }

      qt.cliInit("join13.q", false);
      int ecode = qt.executeClient("join13.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("join13.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "join13.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "join13.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_join14() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "join14.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/join14.q");

      if (qt.shouldBeSkipped("join14.q")) {
        return;
      }

      qt.cliInit("join14.q", false);
      int ecode = qt.executeClient("join14.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("join14.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "join14.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "join14.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_join14_hadoop20() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "join14_hadoop20.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/join14_hadoop20.q");

      if (qt.shouldBeSkipped("join14_hadoop20.q")) {
        return;
      }

      qt.cliInit("join14_hadoop20.q", false);
      int ecode = qt.executeClient("join14_hadoop20.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("join14_hadoop20.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "join14_hadoop20.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "join14_hadoop20.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_join15() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "join15.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/join15.q");

      if (qt.shouldBeSkipped("join15.q")) {
        return;
      }

      qt.cliInit("join15.q", false);
      int ecode = qt.executeClient("join15.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("join15.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "join15.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "join15.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_join16() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "join16.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/join16.q");

      if (qt.shouldBeSkipped("join16.q")) {
        return;
      }

      qt.cliInit("join16.q", false);
      int ecode = qt.executeClient("join16.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("join16.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "join16.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "join16.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_join17() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "join17.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/join17.q");

      if (qt.shouldBeSkipped("join17.q")) {
        return;
      }

      qt.cliInit("join17.q", false);
      int ecode = qt.executeClient("join17.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("join17.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "join17.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "join17.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_join18() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "join18.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/join18.q");

      if (qt.shouldBeSkipped("join18.q")) {
        return;
      }

      qt.cliInit("join18.q", false);
      int ecode = qt.executeClient("join18.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("join18.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "join18.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "join18.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_join18_multi_distinct() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "join18_multi_distinct.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/join18_multi_distinct.q");

      if (qt.shouldBeSkipped("join18_multi_distinct.q")) {
        return;
      }

      qt.cliInit("join18_multi_distinct.q", false);
      int ecode = qt.executeClient("join18_multi_distinct.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("join18_multi_distinct.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "join18_multi_distinct.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "join18_multi_distinct.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_join19() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "join19.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/join19.q");

      if (qt.shouldBeSkipped("join19.q")) {
        return;
      }

      qt.cliInit("join19.q", false);
      int ecode = qt.executeClient("join19.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("join19.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "join19.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "join19.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_join2() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "join2.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/join2.q");

      if (qt.shouldBeSkipped("join2.q")) {
        return;
      }

      qt.cliInit("join2.q", false);
      int ecode = qt.executeClient("join2.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("join2.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "join2.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "join2.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_join20() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "join20.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/join20.q");

      if (qt.shouldBeSkipped("join20.q")) {
        return;
      }

      qt.cliInit("join20.q", false);
      int ecode = qt.executeClient("join20.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("join20.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "join20.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "join20.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_join21() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "join21.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/join21.q");

      if (qt.shouldBeSkipped("join21.q")) {
        return;
      }

      qt.cliInit("join21.q", false);
      int ecode = qt.executeClient("join21.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("join21.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "join21.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "join21.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_join22() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "join22.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/join22.q");

      if (qt.shouldBeSkipped("join22.q")) {
        return;
      }

      qt.cliInit("join22.q", false);
      int ecode = qt.executeClient("join22.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("join22.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "join22.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "join22.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_join23() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "join23.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/join23.q");

      if (qt.shouldBeSkipped("join23.q")) {
        return;
      }

      qt.cliInit("join23.q", false);
      int ecode = qt.executeClient("join23.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("join23.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "join23.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "join23.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_join24() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "join24.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/join24.q");

      if (qt.shouldBeSkipped("join24.q")) {
        return;
      }

      qt.cliInit("join24.q", false);
      int ecode = qt.executeClient("join24.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("join24.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "join24.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "join24.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_join25() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "join25.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/join25.q");

      if (qt.shouldBeSkipped("join25.q")) {
        return;
      }

      qt.cliInit("join25.q", false);
      int ecode = qt.executeClient("join25.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("join25.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "join25.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "join25.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_join26() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "join26.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/join26.q");

      if (qt.shouldBeSkipped("join26.q")) {
        return;
      }

      qt.cliInit("join26.q", false);
      int ecode = qt.executeClient("join26.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("join26.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "join26.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "join26.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_join27() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "join27.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/join27.q");

      if (qt.shouldBeSkipped("join27.q")) {
        return;
      }

      qt.cliInit("join27.q", false);
      int ecode = qt.executeClient("join27.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("join27.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "join27.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "join27.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_join28() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "join28.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/join28.q");

      if (qt.shouldBeSkipped("join28.q")) {
        return;
      }

      qt.cliInit("join28.q", false);
      int ecode = qt.executeClient("join28.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("join28.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "join28.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "join28.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_join29() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "join29.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/join29.q");

      if (qt.shouldBeSkipped("join29.q")) {
        return;
      }

      qt.cliInit("join29.q", false);
      int ecode = qt.executeClient("join29.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("join29.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "join29.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "join29.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_join3() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "join3.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/join3.q");

      if (qt.shouldBeSkipped("join3.q")) {
        return;
      }

      qt.cliInit("join3.q", false);
      int ecode = qt.executeClient("join3.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("join3.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "join3.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "join3.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_join30() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "join30.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/join30.q");

      if (qt.shouldBeSkipped("join30.q")) {
        return;
      }

      qt.cliInit("join30.q", false);
      int ecode = qt.executeClient("join30.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("join30.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "join30.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "join30.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_join31() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "join31.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/join31.q");

      if (qt.shouldBeSkipped("join31.q")) {
        return;
      }

      qt.cliInit("join31.q", false);
      int ecode = qt.executeClient("join31.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("join31.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "join31.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "join31.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_join32() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "join32.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/join32.q");

      if (qt.shouldBeSkipped("join32.q")) {
        return;
      }

      qt.cliInit("join32.q", false);
      int ecode = qt.executeClient("join32.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("join32.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "join32.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "join32.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_join33() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "join33.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/join33.q");

      if (qt.shouldBeSkipped("join33.q")) {
        return;
      }

      qt.cliInit("join33.q", false);
      int ecode = qt.executeClient("join33.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("join33.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "join33.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "join33.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_join34() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "join34.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/join34.q");

      if (qt.shouldBeSkipped("join34.q")) {
        return;
      }

      qt.cliInit("join34.q", false);
      int ecode = qt.executeClient("join34.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("join34.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "join34.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "join34.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_join35() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "join35.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/join35.q");

      if (qt.shouldBeSkipped("join35.q")) {
        return;
      }

      qt.cliInit("join35.q", false);
      int ecode = qt.executeClient("join35.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("join35.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "join35.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "join35.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_join36() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "join36.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/join36.q");

      if (qt.shouldBeSkipped("join36.q")) {
        return;
      }

      qt.cliInit("join36.q", false);
      int ecode = qt.executeClient("join36.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("join36.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "join36.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "join36.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_join37() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "join37.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/join37.q");

      if (qt.shouldBeSkipped("join37.q")) {
        return;
      }

      qt.cliInit("join37.q", false);
      int ecode = qt.executeClient("join37.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("join37.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "join37.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "join37.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_join38() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "join38.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/join38.q");

      if (qt.shouldBeSkipped("join38.q")) {
        return;
      }

      qt.cliInit("join38.q", false);
      int ecode = qt.executeClient("join38.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("join38.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "join38.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "join38.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_join39() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "join39.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/join39.q");

      if (qt.shouldBeSkipped("join39.q")) {
        return;
      }

      qt.cliInit("join39.q", false);
      int ecode = qt.executeClient("join39.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("join39.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "join39.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "join39.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_join4() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "join4.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/join4.q");

      if (qt.shouldBeSkipped("join4.q")) {
        return;
      }

      qt.cliInit("join4.q", false);
      int ecode = qt.executeClient("join4.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("join4.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "join4.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "join4.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_join40() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "join40.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/join40.q");

      if (qt.shouldBeSkipped("join40.q")) {
        return;
      }

      qt.cliInit("join40.q", false);
      int ecode = qt.executeClient("join40.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("join40.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "join40.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "join40.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_join5() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "join5.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/join5.q");

      if (qt.shouldBeSkipped("join5.q")) {
        return;
      }

      qt.cliInit("join5.q", false);
      int ecode = qt.executeClient("join5.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("join5.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "join5.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "join5.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_join6() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "join6.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/join6.q");

      if (qt.shouldBeSkipped("join6.q")) {
        return;
      }

      qt.cliInit("join6.q", false);
      int ecode = qt.executeClient("join6.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("join6.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "join6.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "join6.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_join7() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "join7.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/join7.q");

      if (qt.shouldBeSkipped("join7.q")) {
        return;
      }

      qt.cliInit("join7.q", false);
      int ecode = qt.executeClient("join7.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("join7.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "join7.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "join7.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_join8() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "join8.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/join8.q");

      if (qt.shouldBeSkipped("join8.q")) {
        return;
      }

      qt.cliInit("join8.q", false);
      int ecode = qt.executeClient("join8.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("join8.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "join8.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "join8.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_join9() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "join9.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/join9.q");

      if (qt.shouldBeSkipped("join9.q")) {
        return;
      }

      qt.cliInit("join9.q", false);
      int ecode = qt.executeClient("join9.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("join9.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "join9.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "join9.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_join_1to1() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "join_1to1.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/join_1to1.q");

      if (qt.shouldBeSkipped("join_1to1.q")) {
        return;
      }

      qt.cliInit("join_1to1.q", false);
      int ecode = qt.executeClient("join_1to1.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("join_1to1.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "join_1to1.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "join_1to1.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_join_casesensitive() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "join_casesensitive.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/join_casesensitive.q");

      if (qt.shouldBeSkipped("join_casesensitive.q")) {
        return;
      }

      qt.cliInit("join_casesensitive.q", false);
      int ecode = qt.executeClient("join_casesensitive.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("join_casesensitive.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "join_casesensitive.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "join_casesensitive.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_join_empty() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "join_empty.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/join_empty.q");

      if (qt.shouldBeSkipped("join_empty.q")) {
        return;
      }

      qt.cliInit("join_empty.q", false);
      int ecode = qt.executeClient("join_empty.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("join_empty.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "join_empty.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "join_empty.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_join_filters() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "join_filters.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/join_filters.q");

      if (qt.shouldBeSkipped("join_filters.q")) {
        return;
      }

      qt.cliInit("join_filters.q", false);
      int ecode = qt.executeClient("join_filters.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("join_filters.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "join_filters.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "join_filters.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_join_filters_overlap() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "join_filters_overlap.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/join_filters_overlap.q");

      if (qt.shouldBeSkipped("join_filters_overlap.q")) {
        return;
      }

      qt.cliInit("join_filters_overlap.q", false);
      int ecode = qt.executeClient("join_filters_overlap.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("join_filters_overlap.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "join_filters_overlap.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "join_filters_overlap.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_join_hive_626() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "join_hive_626.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/join_hive_626.q");

      if (qt.shouldBeSkipped("join_hive_626.q")) {
        return;
      }

      qt.cliInit("join_hive_626.q", false);
      int ecode = qt.executeClient("join_hive_626.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("join_hive_626.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "join_hive_626.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "join_hive_626.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_join_map_ppr() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "join_map_ppr.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/join_map_ppr.q");

      if (qt.shouldBeSkipped("join_map_ppr.q")) {
        return;
      }

      qt.cliInit("join_map_ppr.q", false);
      int ecode = qt.executeClient("join_map_ppr.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("join_map_ppr.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "join_map_ppr.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "join_map_ppr.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_join_nulls() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "join_nulls.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/join_nulls.q");

      if (qt.shouldBeSkipped("join_nulls.q")) {
        return;
      }

      qt.cliInit("join_nulls.q", false);
      int ecode = qt.executeClient("join_nulls.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("join_nulls.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "join_nulls.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "join_nulls.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_join_nullsafe() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "join_nullsafe.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/join_nullsafe.q");

      if (qt.shouldBeSkipped("join_nullsafe.q")) {
        return;
      }

      qt.cliInit("join_nullsafe.q", false);
      int ecode = qt.executeClient("join_nullsafe.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("join_nullsafe.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "join_nullsafe.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "join_nullsafe.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_join_rc() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "join_rc.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/join_rc.q");

      if (qt.shouldBeSkipped("join_rc.q")) {
        return;
      }

      qt.cliInit("join_rc.q", false);
      int ecode = qt.executeClient("join_rc.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("join_rc.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "join_rc.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "join_rc.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_join_reorder() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "join_reorder.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/join_reorder.q");

      if (qt.shouldBeSkipped("join_reorder.q")) {
        return;
      }

      qt.cliInit("join_reorder.q", false);
      int ecode = qt.executeClient("join_reorder.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("join_reorder.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "join_reorder.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "join_reorder.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_join_reorder2() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "join_reorder2.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/join_reorder2.q");

      if (qt.shouldBeSkipped("join_reorder2.q")) {
        return;
      }

      qt.cliInit("join_reorder2.q", false);
      int ecode = qt.executeClient("join_reorder2.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("join_reorder2.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "join_reorder2.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "join_reorder2.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_join_reorder3() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "join_reorder3.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/join_reorder3.q");

      if (qt.shouldBeSkipped("join_reorder3.q")) {
        return;
      }

      qt.cliInit("join_reorder3.q", false);
      int ecode = qt.executeClient("join_reorder3.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("join_reorder3.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "join_reorder3.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "join_reorder3.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_join_thrift() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "join_thrift.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/join_thrift.q");

      if (qt.shouldBeSkipped("join_thrift.q")) {
        return;
      }

      qt.cliInit("join_thrift.q", false);
      int ecode = qt.executeClient("join_thrift.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("join_thrift.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "join_thrift.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "join_thrift.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_join_view() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "join_view.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/join_view.q");

      if (qt.shouldBeSkipped("join_view.q")) {
        return;
      }

      qt.cliInit("join_view.q", false);
      int ecode = qt.executeClient("join_view.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("join_view.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "join_view.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "join_view.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_keyword_1() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "keyword_1.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/keyword_1.q");

      if (qt.shouldBeSkipped("keyword_1.q")) {
        return;
      }

      qt.cliInit("keyword_1.q", false);
      int ecode = qt.executeClient("keyword_1.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("keyword_1.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "keyword_1.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "keyword_1.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_lateral_view() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "lateral_view.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/lateral_view.q");

      if (qt.shouldBeSkipped("lateral_view.q")) {
        return;
      }

      qt.cliInit("lateral_view.q", false);
      int ecode = qt.executeClient("lateral_view.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("lateral_view.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "lateral_view.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "lateral_view.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_lateral_view_cp() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "lateral_view_cp.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/lateral_view_cp.q");

      if (qt.shouldBeSkipped("lateral_view_cp.q")) {
        return;
      }

      qt.cliInit("lateral_view_cp.q", false);
      int ecode = qt.executeClient("lateral_view_cp.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("lateral_view_cp.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "lateral_view_cp.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "lateral_view_cp.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_lateral_view_ppd() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "lateral_view_ppd.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/lateral_view_ppd.q");

      if (qt.shouldBeSkipped("lateral_view_ppd.q")) {
        return;
      }

      qt.cliInit("lateral_view_ppd.q", false);
      int ecode = qt.executeClient("lateral_view_ppd.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("lateral_view_ppd.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "lateral_view_ppd.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "lateral_view_ppd.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_leftsemijoin() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "leftsemijoin.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/leftsemijoin.q");

      if (qt.shouldBeSkipped("leftsemijoin.q")) {
        return;
      }

      qt.cliInit("leftsemijoin.q", false);
      int ecode = qt.executeClient("leftsemijoin.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("leftsemijoin.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "leftsemijoin.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "leftsemijoin.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_lineage1() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "lineage1.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/lineage1.q");

      if (qt.shouldBeSkipped("lineage1.q")) {
        return;
      }

      qt.cliInit("lineage1.q", false);
      int ecode = qt.executeClient("lineage1.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("lineage1.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "lineage1.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "lineage1.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_list_bucket_query_multiskew_1() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "list_bucket_query_multiskew_1.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/list_bucket_query_multiskew_1.q");

      if (qt.shouldBeSkipped("list_bucket_query_multiskew_1.q")) {
        return;
      }

      qt.cliInit("list_bucket_query_multiskew_1.q", false);
      int ecode = qt.executeClient("list_bucket_query_multiskew_1.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("list_bucket_query_multiskew_1.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "list_bucket_query_multiskew_1.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "list_bucket_query_multiskew_1.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_list_bucket_query_multiskew_2() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "list_bucket_query_multiskew_2.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/list_bucket_query_multiskew_2.q");

      if (qt.shouldBeSkipped("list_bucket_query_multiskew_2.q")) {
        return;
      }

      qt.cliInit("list_bucket_query_multiskew_2.q", false);
      int ecode = qt.executeClient("list_bucket_query_multiskew_2.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("list_bucket_query_multiskew_2.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "list_bucket_query_multiskew_2.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "list_bucket_query_multiskew_2.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_list_bucket_query_multiskew_3() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "list_bucket_query_multiskew_3.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/list_bucket_query_multiskew_3.q");

      if (qt.shouldBeSkipped("list_bucket_query_multiskew_3.q")) {
        return;
      }

      qt.cliInit("list_bucket_query_multiskew_3.q", false);
      int ecode = qt.executeClient("list_bucket_query_multiskew_3.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("list_bucket_query_multiskew_3.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "list_bucket_query_multiskew_3.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "list_bucket_query_multiskew_3.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_list_bucket_query_oneskew_1() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "list_bucket_query_oneskew_1.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/list_bucket_query_oneskew_1.q");

      if (qt.shouldBeSkipped("list_bucket_query_oneskew_1.q")) {
        return;
      }

      qt.cliInit("list_bucket_query_oneskew_1.q", false);
      int ecode = qt.executeClient("list_bucket_query_oneskew_1.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("list_bucket_query_oneskew_1.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "list_bucket_query_oneskew_1.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "list_bucket_query_oneskew_1.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_list_bucket_query_oneskew_2() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "list_bucket_query_oneskew_2.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/list_bucket_query_oneskew_2.q");

      if (qt.shouldBeSkipped("list_bucket_query_oneskew_2.q")) {
        return;
      }

      qt.cliInit("list_bucket_query_oneskew_2.q", false);
      int ecode = qt.executeClient("list_bucket_query_oneskew_2.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("list_bucket_query_oneskew_2.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "list_bucket_query_oneskew_2.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "list_bucket_query_oneskew_2.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_list_bucket_query_oneskew_3() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "list_bucket_query_oneskew_3.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/list_bucket_query_oneskew_3.q");

      if (qt.shouldBeSkipped("list_bucket_query_oneskew_3.q")) {
        return;
      }

      qt.cliInit("list_bucket_query_oneskew_3.q", false);
      int ecode = qt.executeClient("list_bucket_query_oneskew_3.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("list_bucket_query_oneskew_3.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "list_bucket_query_oneskew_3.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "list_bucket_query_oneskew_3.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_literal_double() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "literal_double.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/literal_double.q");

      if (qt.shouldBeSkipped("literal_double.q")) {
        return;
      }

      qt.cliInit("literal_double.q", false);
      int ecode = qt.executeClient("literal_double.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("literal_double.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "literal_double.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "literal_double.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_literal_ints() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "literal_ints.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/literal_ints.q");

      if (qt.shouldBeSkipped("literal_ints.q")) {
        return;
      }

      qt.cliInit("literal_ints.q", false);
      int ecode = qt.executeClient("literal_ints.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("literal_ints.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "literal_ints.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "literal_ints.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_literal_string() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "literal_string.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/literal_string.q");

      if (qt.shouldBeSkipped("literal_string.q")) {
        return;
      }

      qt.cliInit("literal_string.q", false);
      int ecode = qt.executeClient("literal_string.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("literal_string.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "literal_string.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "literal_string.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_load_binary_data() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "load_binary_data.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/load_binary_data.q");

      if (qt.shouldBeSkipped("load_binary_data.q")) {
        return;
      }

      qt.cliInit("load_binary_data.q", false);
      int ecode = qt.executeClient("load_binary_data.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("load_binary_data.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "load_binary_data.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "load_binary_data.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_load_dyn_part1() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "load_dyn_part1.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/load_dyn_part1.q");

      if (qt.shouldBeSkipped("load_dyn_part1.q")) {
        return;
      }

      qt.cliInit("load_dyn_part1.q", false);
      int ecode = qt.executeClient("load_dyn_part1.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("load_dyn_part1.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "load_dyn_part1.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "load_dyn_part1.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_load_dyn_part10() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "load_dyn_part10.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/load_dyn_part10.q");

      if (qt.shouldBeSkipped("load_dyn_part10.q")) {
        return;
      }

      qt.cliInit("load_dyn_part10.q", false);
      int ecode = qt.executeClient("load_dyn_part10.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("load_dyn_part10.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "load_dyn_part10.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "load_dyn_part10.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_load_dyn_part11() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "load_dyn_part11.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/load_dyn_part11.q");

      if (qt.shouldBeSkipped("load_dyn_part11.q")) {
        return;
      }

      qt.cliInit("load_dyn_part11.q", false);
      int ecode = qt.executeClient("load_dyn_part11.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("load_dyn_part11.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "load_dyn_part11.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "load_dyn_part11.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_load_dyn_part12() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "load_dyn_part12.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/load_dyn_part12.q");

      if (qt.shouldBeSkipped("load_dyn_part12.q")) {
        return;
      }

      qt.cliInit("load_dyn_part12.q", false);
      int ecode = qt.executeClient("load_dyn_part12.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("load_dyn_part12.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "load_dyn_part12.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "load_dyn_part12.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_load_dyn_part13() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "load_dyn_part13.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/load_dyn_part13.q");

      if (qt.shouldBeSkipped("load_dyn_part13.q")) {
        return;
      }

      qt.cliInit("load_dyn_part13.q", false);
      int ecode = qt.executeClient("load_dyn_part13.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("load_dyn_part13.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "load_dyn_part13.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "load_dyn_part13.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_load_dyn_part14() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "load_dyn_part14.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/load_dyn_part14.q");

      if (qt.shouldBeSkipped("load_dyn_part14.q")) {
        return;
      }

      qt.cliInit("load_dyn_part14.q", false);
      int ecode = qt.executeClient("load_dyn_part14.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("load_dyn_part14.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "load_dyn_part14.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "load_dyn_part14.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_load_dyn_part14_win() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "load_dyn_part14_win.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/load_dyn_part14_win.q");

      if (qt.shouldBeSkipped("load_dyn_part14_win.q")) {
        return;
      }

      qt.cliInit("load_dyn_part14_win.q", false);
      int ecode = qt.executeClient("load_dyn_part14_win.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("load_dyn_part14_win.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "load_dyn_part14_win.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "load_dyn_part14_win.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_load_dyn_part15() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "load_dyn_part15.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/load_dyn_part15.q");

      if (qt.shouldBeSkipped("load_dyn_part15.q")) {
        return;
      }

      qt.cliInit("load_dyn_part15.q", false);
      int ecode = qt.executeClient("load_dyn_part15.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("load_dyn_part15.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "load_dyn_part15.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "load_dyn_part15.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_load_dyn_part2() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "load_dyn_part2.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/load_dyn_part2.q");

      if (qt.shouldBeSkipped("load_dyn_part2.q")) {
        return;
      }

      qt.cliInit("load_dyn_part2.q", false);
      int ecode = qt.executeClient("load_dyn_part2.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("load_dyn_part2.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "load_dyn_part2.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "load_dyn_part2.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_load_dyn_part3() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "load_dyn_part3.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/load_dyn_part3.q");

      if (qt.shouldBeSkipped("load_dyn_part3.q")) {
        return;
      }

      qt.cliInit("load_dyn_part3.q", false);
      int ecode = qt.executeClient("load_dyn_part3.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("load_dyn_part3.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "load_dyn_part3.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "load_dyn_part3.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_load_dyn_part4() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "load_dyn_part4.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/load_dyn_part4.q");

      if (qt.shouldBeSkipped("load_dyn_part4.q")) {
        return;
      }

      qt.cliInit("load_dyn_part4.q", false);
      int ecode = qt.executeClient("load_dyn_part4.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("load_dyn_part4.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "load_dyn_part4.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "load_dyn_part4.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_load_dyn_part5() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "load_dyn_part5.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/load_dyn_part5.q");

      if (qt.shouldBeSkipped("load_dyn_part5.q")) {
        return;
      }

      qt.cliInit("load_dyn_part5.q", false);
      int ecode = qt.executeClient("load_dyn_part5.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("load_dyn_part5.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "load_dyn_part5.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "load_dyn_part5.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_load_dyn_part6() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "load_dyn_part6.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/load_dyn_part6.q");

      if (qt.shouldBeSkipped("load_dyn_part6.q")) {
        return;
      }

      qt.cliInit("load_dyn_part6.q", false);
      int ecode = qt.executeClient("load_dyn_part6.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("load_dyn_part6.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "load_dyn_part6.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "load_dyn_part6.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_load_dyn_part7() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "load_dyn_part7.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/load_dyn_part7.q");

      if (qt.shouldBeSkipped("load_dyn_part7.q")) {
        return;
      }

      qt.cliInit("load_dyn_part7.q", false);
      int ecode = qt.executeClient("load_dyn_part7.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("load_dyn_part7.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "load_dyn_part7.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "load_dyn_part7.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_load_dyn_part8() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "load_dyn_part8.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/load_dyn_part8.q");

      if (qt.shouldBeSkipped("load_dyn_part8.q")) {
        return;
      }

      qt.cliInit("load_dyn_part8.q", false);
      int ecode = qt.executeClient("load_dyn_part8.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("load_dyn_part8.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "load_dyn_part8.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "load_dyn_part8.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_load_dyn_part9() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "load_dyn_part9.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/load_dyn_part9.q");

      if (qt.shouldBeSkipped("load_dyn_part9.q")) {
        return;
      }

      qt.cliInit("load_dyn_part9.q", false);
      int ecode = qt.executeClient("load_dyn_part9.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("load_dyn_part9.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "load_dyn_part9.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "load_dyn_part9.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_load_exist_part_authsuccess() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "load_exist_part_authsuccess.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/load_exist_part_authsuccess.q");

      if (qt.shouldBeSkipped("load_exist_part_authsuccess.q")) {
        return;
      }

      qt.cliInit("load_exist_part_authsuccess.q", false);
      int ecode = qt.executeClient("load_exist_part_authsuccess.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("load_exist_part_authsuccess.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "load_exist_part_authsuccess.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "load_exist_part_authsuccess.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_load_fs() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "load_fs.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/load_fs.q");

      if (qt.shouldBeSkipped("load_fs.q")) {
        return;
      }

      qt.cliInit("load_fs.q", false);
      int ecode = qt.executeClient("load_fs.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("load_fs.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "load_fs.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "load_fs.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_load_nonpart_authsuccess() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "load_nonpart_authsuccess.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/load_nonpart_authsuccess.q");

      if (qt.shouldBeSkipped("load_nonpart_authsuccess.q")) {
        return;
      }

      qt.cliInit("load_nonpart_authsuccess.q", false);
      int ecode = qt.executeClient("load_nonpart_authsuccess.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("load_nonpart_authsuccess.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "load_nonpart_authsuccess.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "load_nonpart_authsuccess.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_load_overwrite() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "load_overwrite.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/load_overwrite.q");

      if (qt.shouldBeSkipped("load_overwrite.q")) {
        return;
      }

      qt.cliInit("load_overwrite.q", false);
      int ecode = qt.executeClient("load_overwrite.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("load_overwrite.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "load_overwrite.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "load_overwrite.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_load_part_authsuccess() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "load_part_authsuccess.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/load_part_authsuccess.q");

      if (qt.shouldBeSkipped("load_part_authsuccess.q")) {
        return;
      }

      qt.cliInit("load_part_authsuccess.q", false);
      int ecode = qt.executeClient("load_part_authsuccess.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("load_part_authsuccess.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "load_part_authsuccess.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "load_part_authsuccess.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_loadpart1() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "loadpart1.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/loadpart1.q");

      if (qt.shouldBeSkipped("loadpart1.q")) {
        return;
      }

      qt.cliInit("loadpart1.q", false);
      int ecode = qt.executeClient("loadpart1.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("loadpart1.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "loadpart1.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "loadpart1.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_loadpart_err() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "loadpart_err.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/loadpart_err.q");

      if (qt.shouldBeSkipped("loadpart_err.q")) {
        return;
      }

      qt.cliInit("loadpart_err.q", false);
      int ecode = qt.executeClient("loadpart_err.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("loadpart_err.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "loadpart_err.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "loadpart_err.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_lock1() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "lock1.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/lock1.q");

      if (qt.shouldBeSkipped("lock1.q")) {
        return;
      }

      qt.cliInit("lock1.q", false);
      int ecode = qt.executeClient("lock1.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("lock1.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "lock1.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "lock1.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_lock2() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "lock2.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/lock2.q");

      if (qt.shouldBeSkipped("lock2.q")) {
        return;
      }

      qt.cliInit("lock2.q", false);
      int ecode = qt.executeClient("lock2.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("lock2.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "lock2.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "lock2.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_lock3() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "lock3.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/lock3.q");

      if (qt.shouldBeSkipped("lock3.q")) {
        return;
      }

      qt.cliInit("lock3.q", false);
      int ecode = qt.executeClient("lock3.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("lock3.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "lock3.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "lock3.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_lock4() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "lock4.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/lock4.q");

      if (qt.shouldBeSkipped("lock4.q")) {
        return;
      }

      qt.cliInit("lock4.q", false);
      int ecode = qt.executeClient("lock4.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("lock4.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "lock4.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "lock4.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_louter_join_ppr() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "louter_join_ppr.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/louter_join_ppr.q");

      if (qt.shouldBeSkipped("louter_join_ppr.q")) {
        return;
      }

      qt.cliInit("louter_join_ppr.q", false);
      int ecode = qt.executeClient("louter_join_ppr.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("louter_join_ppr.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "louter_join_ppr.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "louter_join_ppr.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_mapjoin1() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "mapjoin1.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/mapjoin1.q");

      if (qt.shouldBeSkipped("mapjoin1.q")) {
        return;
      }

      qt.cliInit("mapjoin1.q", false);
      int ecode = qt.executeClient("mapjoin1.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("mapjoin1.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "mapjoin1.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "mapjoin1.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_mapjoin_distinct() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "mapjoin_distinct.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/mapjoin_distinct.q");

      if (qt.shouldBeSkipped("mapjoin_distinct.q")) {
        return;
      }

      qt.cliInit("mapjoin_distinct.q", false);
      int ecode = qt.executeClient("mapjoin_distinct.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("mapjoin_distinct.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "mapjoin_distinct.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "mapjoin_distinct.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_mapjoin_filter_on_outerjoin() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "mapjoin_filter_on_outerjoin.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/mapjoin_filter_on_outerjoin.q");

      if (qt.shouldBeSkipped("mapjoin_filter_on_outerjoin.q")) {
        return;
      }

      qt.cliInit("mapjoin_filter_on_outerjoin.q", false);
      int ecode = qt.executeClient("mapjoin_filter_on_outerjoin.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("mapjoin_filter_on_outerjoin.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "mapjoin_filter_on_outerjoin.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "mapjoin_filter_on_outerjoin.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_mapjoin_hook() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "mapjoin_hook.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/mapjoin_hook.q");

      if (qt.shouldBeSkipped("mapjoin_hook.q")) {
        return;
      }

      qt.cliInit("mapjoin_hook.q", false);
      int ecode = qt.executeClient("mapjoin_hook.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("mapjoin_hook.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "mapjoin_hook.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "mapjoin_hook.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_mapjoin_mapjoin() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "mapjoin_mapjoin.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/mapjoin_mapjoin.q");

      if (qt.shouldBeSkipped("mapjoin_mapjoin.q")) {
        return;
      }

      qt.cliInit("mapjoin_mapjoin.q", false);
      int ecode = qt.executeClient("mapjoin_mapjoin.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("mapjoin_mapjoin.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "mapjoin_mapjoin.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "mapjoin_mapjoin.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_mapjoin_subquery() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "mapjoin_subquery.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/mapjoin_subquery.q");

      if (qt.shouldBeSkipped("mapjoin_subquery.q")) {
        return;
      }

      qt.cliInit("mapjoin_subquery.q", false);
      int ecode = qt.executeClient("mapjoin_subquery.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("mapjoin_subquery.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "mapjoin_subquery.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "mapjoin_subquery.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_mapjoin_subquery2() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "mapjoin_subquery2.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/mapjoin_subquery2.q");

      if (qt.shouldBeSkipped("mapjoin_subquery2.q")) {
        return;
      }

      qt.cliInit("mapjoin_subquery2.q", false);
      int ecode = qt.executeClient("mapjoin_subquery2.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("mapjoin_subquery2.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "mapjoin_subquery2.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "mapjoin_subquery2.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_mapreduce1() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "mapreduce1.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/mapreduce1.q");

      if (qt.shouldBeSkipped("mapreduce1.q")) {
        return;
      }

      qt.cliInit("mapreduce1.q", false);
      int ecode = qt.executeClient("mapreduce1.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("mapreduce1.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "mapreduce1.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "mapreduce1.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_mapreduce2() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "mapreduce2.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/mapreduce2.q");

      if (qt.shouldBeSkipped("mapreduce2.q")) {
        return;
      }

      qt.cliInit("mapreduce2.q", false);
      int ecode = qt.executeClient("mapreduce2.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("mapreduce2.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "mapreduce2.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "mapreduce2.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_mapreduce3() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "mapreduce3.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/mapreduce3.q");

      if (qt.shouldBeSkipped("mapreduce3.q")) {
        return;
      }

      qt.cliInit("mapreduce3.q", false);
      int ecode = qt.executeClient("mapreduce3.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("mapreduce3.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "mapreduce3.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "mapreduce3.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_mapreduce4() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "mapreduce4.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/mapreduce4.q");

      if (qt.shouldBeSkipped("mapreduce4.q")) {
        return;
      }

      qt.cliInit("mapreduce4.q", false);
      int ecode = qt.executeClient("mapreduce4.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("mapreduce4.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "mapreduce4.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "mapreduce4.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_mapreduce5() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "mapreduce5.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/mapreduce5.q");

      if (qt.shouldBeSkipped("mapreduce5.q")) {
        return;
      }

      qt.cliInit("mapreduce5.q", false);
      int ecode = qt.executeClient("mapreduce5.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("mapreduce5.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "mapreduce5.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "mapreduce5.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_mapreduce6() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "mapreduce6.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/mapreduce6.q");

      if (qt.shouldBeSkipped("mapreduce6.q")) {
        return;
      }

      qt.cliInit("mapreduce6.q", false);
      int ecode = qt.executeClient("mapreduce6.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("mapreduce6.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "mapreduce6.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "mapreduce6.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_mapreduce7() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "mapreduce7.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/mapreduce7.q");

      if (qt.shouldBeSkipped("mapreduce7.q")) {
        return;
      }

      qt.cliInit("mapreduce7.q", false);
      int ecode = qt.executeClient("mapreduce7.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("mapreduce7.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "mapreduce7.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "mapreduce7.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_mapreduce8() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "mapreduce8.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/mapreduce8.q");

      if (qt.shouldBeSkipped("mapreduce8.q")) {
        return;
      }

      qt.cliInit("mapreduce8.q", false);
      int ecode = qt.executeClient("mapreduce8.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("mapreduce8.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "mapreduce8.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "mapreduce8.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_merge1() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "merge1.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/merge1.q");

      if (qt.shouldBeSkipped("merge1.q")) {
        return;
      }

      qt.cliInit("merge1.q", false);
      int ecode = qt.executeClient("merge1.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("merge1.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "merge1.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "merge1.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_merge2() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "merge2.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/merge2.q");

      if (qt.shouldBeSkipped("merge2.q")) {
        return;
      }

      qt.cliInit("merge2.q", false);
      int ecode = qt.executeClient("merge2.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("merge2.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "merge2.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "merge2.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_merge3() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "merge3.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/merge3.q");

      if (qt.shouldBeSkipped("merge3.q")) {
        return;
      }

      qt.cliInit("merge3.q", false);
      int ecode = qt.executeClient("merge3.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("merge3.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "merge3.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "merge3.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_merge4() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "merge4.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/merge4.q");

      if (qt.shouldBeSkipped("merge4.q")) {
        return;
      }

      qt.cliInit("merge4.q", false);
      int ecode = qt.executeClient("merge4.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("merge4.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "merge4.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "merge4.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_merge_dynamic_partition() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "merge_dynamic_partition.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/merge_dynamic_partition.q");

      if (qt.shouldBeSkipped("merge_dynamic_partition.q")) {
        return;
      }

      qt.cliInit("merge_dynamic_partition.q", false);
      int ecode = qt.executeClient("merge_dynamic_partition.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("merge_dynamic_partition.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "merge_dynamic_partition.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "merge_dynamic_partition.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_merge_dynamic_partition2() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "merge_dynamic_partition2.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/merge_dynamic_partition2.q");

      if (qt.shouldBeSkipped("merge_dynamic_partition2.q")) {
        return;
      }

      qt.cliInit("merge_dynamic_partition2.q", false);
      int ecode = qt.executeClient("merge_dynamic_partition2.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("merge_dynamic_partition2.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "merge_dynamic_partition2.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "merge_dynamic_partition2.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_merge_dynamic_partition3() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "merge_dynamic_partition3.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/merge_dynamic_partition3.q");

      if (qt.shouldBeSkipped("merge_dynamic_partition3.q")) {
        return;
      }

      qt.cliInit("merge_dynamic_partition3.q", false);
      int ecode = qt.executeClient("merge_dynamic_partition3.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("merge_dynamic_partition3.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "merge_dynamic_partition3.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "merge_dynamic_partition3.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_merge_dynamic_partition4() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "merge_dynamic_partition4.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/merge_dynamic_partition4.q");

      if (qt.shouldBeSkipped("merge_dynamic_partition4.q")) {
        return;
      }

      qt.cliInit("merge_dynamic_partition4.q", false);
      int ecode = qt.executeClient("merge_dynamic_partition4.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("merge_dynamic_partition4.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "merge_dynamic_partition4.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "merge_dynamic_partition4.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_merge_dynamic_partition5() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "merge_dynamic_partition5.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/merge_dynamic_partition5.q");

      if (qt.shouldBeSkipped("merge_dynamic_partition5.q")) {
        return;
      }

      qt.cliInit("merge_dynamic_partition5.q", false);
      int ecode = qt.executeClient("merge_dynamic_partition5.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("merge_dynamic_partition5.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "merge_dynamic_partition5.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "merge_dynamic_partition5.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_mergejoins() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "mergejoins.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/mergejoins.q");

      if (qt.shouldBeSkipped("mergejoins.q")) {
        return;
      }

      qt.cliInit("mergejoins.q", false);
      int ecode = qt.executeClient("mergejoins.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("mergejoins.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "mergejoins.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "mergejoins.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_metadata_export_drop() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "metadata_export_drop.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/metadata_export_drop.q");

      if (qt.shouldBeSkipped("metadata_export_drop.q")) {
        return;
      }

      qt.cliInit("metadata_export_drop.q", false);
      int ecode = qt.executeClient("metadata_export_drop.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("metadata_export_drop.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "metadata_export_drop.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "metadata_export_drop.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_metadataonly1() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "metadataonly1.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/metadataonly1.q");

      if (qt.shouldBeSkipped("metadataonly1.q")) {
        return;
      }

      qt.cliInit("metadataonly1.q", false);
      int ecode = qt.executeClient("metadataonly1.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("metadataonly1.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "metadataonly1.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "metadataonly1.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_mi() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "mi.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/mi.q");

      if (qt.shouldBeSkipped("mi.q")) {
        return;
      }

      qt.cliInit("mi.q", false);
      int ecode = qt.executeClient("mi.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("mi.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "mi.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "mi.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_misc_json() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "misc_json.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/misc_json.q");

      if (qt.shouldBeSkipped("misc_json.q")) {
        return;
      }

      qt.cliInit("misc_json.q", false);
      int ecode = qt.executeClient("misc_json.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("misc_json.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "misc_json.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "misc_json.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_multi_insert() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "multi_insert.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/multi_insert.q");

      if (qt.shouldBeSkipped("multi_insert.q")) {
        return;
      }

      qt.cliInit("multi_insert.q", false);
      int ecode = qt.executeClient("multi_insert.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("multi_insert.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "multi_insert.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "multi_insert.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_multi_insert_gby() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "multi_insert_gby.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/multi_insert_gby.q");

      if (qt.shouldBeSkipped("multi_insert_gby.q")) {
        return;
      }

      qt.cliInit("multi_insert_gby.q", false);
      int ecode = qt.executeClient("multi_insert_gby.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("multi_insert_gby.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "multi_insert_gby.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "multi_insert_gby.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_multi_insert_move_tasks_share_dependencies() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "multi_insert_move_tasks_share_dependencies.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/multi_insert_move_tasks_share_dependencies.q");

      if (qt.shouldBeSkipped("multi_insert_move_tasks_share_dependencies.q")) {
        return;
      }

      qt.cliInit("multi_insert_move_tasks_share_dependencies.q", false);
      int ecode = qt.executeClient("multi_insert_move_tasks_share_dependencies.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("multi_insert_move_tasks_share_dependencies.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "multi_insert_move_tasks_share_dependencies.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "multi_insert_move_tasks_share_dependencies.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_multi_join_union() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "multi_join_union.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/multi_join_union.q");

      if (qt.shouldBeSkipped("multi_join_union.q")) {
        return;
      }

      qt.cliInit("multi_join_union.q", false);
      int ecode = qt.executeClient("multi_join_union.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("multi_join_union.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "multi_join_union.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "multi_join_union.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_multi_sahooks() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "multi_sahooks.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/multi_sahooks.q");

      if (qt.shouldBeSkipped("multi_sahooks.q")) {
        return;
      }

      qt.cliInit("multi_sahooks.q", false);
      int ecode = qt.executeClient("multi_sahooks.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("multi_sahooks.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "multi_sahooks.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "multi_sahooks.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_multigroupby_singlemr() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "multigroupby_singlemr.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/multigroupby_singlemr.q");

      if (qt.shouldBeSkipped("multigroupby_singlemr.q")) {
        return;
      }

      qt.cliInit("multigroupby_singlemr.q", false);
      int ecode = qt.executeClient("multigroupby_singlemr.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("multigroupby_singlemr.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "multigroupby_singlemr.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "multigroupby_singlemr.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_nestedvirtual() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "nestedvirtual.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/nestedvirtual.q");

      if (qt.shouldBeSkipped("nestedvirtual.q")) {
        return;
      }

      qt.cliInit("nestedvirtual.q", false);
      int ecode = qt.executeClient("nestedvirtual.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("nestedvirtual.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "nestedvirtual.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "nestedvirtual.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_newline() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "newline.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/newline.q");

      if (qt.shouldBeSkipped("newline.q")) {
        return;
      }

      qt.cliInit("newline.q", false);
      int ecode = qt.executeClient("newline.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("newline.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "newline.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "newline.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_no_hooks() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "no_hooks.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/no_hooks.q");

      if (qt.shouldBeSkipped("no_hooks.q")) {
        return;
      }

      qt.cliInit("no_hooks.q", false);
      int ecode = qt.executeClient("no_hooks.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("no_hooks.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "no_hooks.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "no_hooks.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_noalias_subq1() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "noalias_subq1.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/noalias_subq1.q");

      if (qt.shouldBeSkipped("noalias_subq1.q")) {
        return;
      }

      qt.cliInit("noalias_subq1.q", false);
      int ecode = qt.executeClient("noalias_subq1.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("noalias_subq1.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "noalias_subq1.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "noalias_subq1.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_nomore_ambiguous_table_col() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "nomore_ambiguous_table_col.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/nomore_ambiguous_table_col.q");

      if (qt.shouldBeSkipped("nomore_ambiguous_table_col.q")) {
        return;
      }

      qt.cliInit("nomore_ambiguous_table_col.q", false);
      int ecode = qt.executeClient("nomore_ambiguous_table_col.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("nomore_ambiguous_table_col.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "nomore_ambiguous_table_col.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "nomore_ambiguous_table_col.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_nonmr_fetch() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "nonmr_fetch.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/nonmr_fetch.q");

      if (qt.shouldBeSkipped("nonmr_fetch.q")) {
        return;
      }

      qt.cliInit("nonmr_fetch.q", false);
      int ecode = qt.executeClient("nonmr_fetch.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("nonmr_fetch.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "nonmr_fetch.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "nonmr_fetch.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_notable_alias1() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "notable_alias1.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/notable_alias1.q");

      if (qt.shouldBeSkipped("notable_alias1.q")) {
        return;
      }

      qt.cliInit("notable_alias1.q", false);
      int ecode = qt.executeClient("notable_alias1.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("notable_alias1.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "notable_alias1.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "notable_alias1.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_notable_alias2() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "notable_alias2.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/notable_alias2.q");

      if (qt.shouldBeSkipped("notable_alias2.q")) {
        return;
      }

      qt.cliInit("notable_alias2.q", false);
      int ecode = qt.executeClient("notable_alias2.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("notable_alias2.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "notable_alias2.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "notable_alias2.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_null_column() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "null_column.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/null_column.q");

      if (qt.shouldBeSkipped("null_column.q")) {
        return;
      }

      qt.cliInit("null_column.q", false);
      int ecode = qt.executeClient("null_column.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("null_column.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "null_column.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "null_column.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_nullgroup() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "nullgroup.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/nullgroup.q");

      if (qt.shouldBeSkipped("nullgroup.q")) {
        return;
      }

      qt.cliInit("nullgroup.q", false);
      int ecode = qt.executeClient("nullgroup.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("nullgroup.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "nullgroup.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "nullgroup.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_nullgroup2() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "nullgroup2.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/nullgroup2.q");

      if (qt.shouldBeSkipped("nullgroup2.q")) {
        return;
      }

      qt.cliInit("nullgroup2.q", false);
      int ecode = qt.executeClient("nullgroup2.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("nullgroup2.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "nullgroup2.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "nullgroup2.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_nullgroup3() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "nullgroup3.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/nullgroup3.q");

      if (qt.shouldBeSkipped("nullgroup3.q")) {
        return;
      }

      qt.cliInit("nullgroup3.q", false);
      int ecode = qt.executeClient("nullgroup3.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("nullgroup3.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "nullgroup3.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "nullgroup3.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_nullgroup4() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "nullgroup4.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/nullgroup4.q");

      if (qt.shouldBeSkipped("nullgroup4.q")) {
        return;
      }

      qt.cliInit("nullgroup4.q", false);
      int ecode = qt.executeClient("nullgroup4.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("nullgroup4.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "nullgroup4.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "nullgroup4.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_nullgroup4_multi_distinct() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "nullgroup4_multi_distinct.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/nullgroup4_multi_distinct.q");

      if (qt.shouldBeSkipped("nullgroup4_multi_distinct.q")) {
        return;
      }

      qt.cliInit("nullgroup4_multi_distinct.q", false);
      int ecode = qt.executeClient("nullgroup4_multi_distinct.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("nullgroup4_multi_distinct.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "nullgroup4_multi_distinct.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "nullgroup4_multi_distinct.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_nullgroup5() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "nullgroup5.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/nullgroup5.q");

      if (qt.shouldBeSkipped("nullgroup5.q")) {
        return;
      }

      qt.cliInit("nullgroup5.q", false);
      int ecode = qt.executeClient("nullgroup5.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("nullgroup5.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "nullgroup5.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "nullgroup5.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_nullinput() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "nullinput.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/nullinput.q");

      if (qt.shouldBeSkipped("nullinput.q")) {
        return;
      }

      qt.cliInit("nullinput.q", false);
      int ecode = qt.executeClient("nullinput.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("nullinput.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "nullinput.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "nullinput.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_nullinput2() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "nullinput2.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/nullinput2.q");

      if (qt.shouldBeSkipped("nullinput2.q")) {
        return;
      }

      qt.cliInit("nullinput2.q", false);
      int ecode = qt.executeClient("nullinput2.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("nullinput2.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "nullinput2.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "nullinput2.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_nullscript() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "nullscript.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/nullscript.q");

      if (qt.shouldBeSkipped("nullscript.q")) {
        return;
      }

      qt.cliInit("nullscript.q", false);
      int ecode = qt.executeClient("nullscript.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("nullscript.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "nullscript.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "nullscript.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_num_op_type_conv() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "num_op_type_conv.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/num_op_type_conv.q");

      if (qt.shouldBeSkipped("num_op_type_conv.q")) {
        return;
      }

      qt.cliInit("num_op_type_conv.q", false);
      int ecode = qt.executeClient("num_op_type_conv.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("num_op_type_conv.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "num_op_type_conv.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "num_op_type_conv.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_ops_comparison() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "ops_comparison.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/ops_comparison.q");

      if (qt.shouldBeSkipped("ops_comparison.q")) {
        return;
      }

      qt.cliInit("ops_comparison.q", false);
      int ecode = qt.executeClient("ops_comparison.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("ops_comparison.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "ops_comparison.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "ops_comparison.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_order() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "order.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/order.q");

      if (qt.shouldBeSkipped("order.q")) {
        return;
      }

      qt.cliInit("order.q", false);
      int ecode = qt.executeClient("order.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("order.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "order.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "order.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_order2() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "order2.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/order2.q");

      if (qt.shouldBeSkipped("order2.q")) {
        return;
      }

      qt.cliInit("order2.q", false);
      int ecode = qt.executeClient("order2.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("order2.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "order2.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "order2.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_outer_join_ppr() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "outer_join_ppr.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/outer_join_ppr.q");

      if (qt.shouldBeSkipped("outer_join_ppr.q")) {
        return;
      }

      qt.cliInit("outer_join_ppr.q", false);
      int ecode = qt.executeClient("outer_join_ppr.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("outer_join_ppr.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "outer_join_ppr.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "outer_join_ppr.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_overridden_confs() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "overridden_confs.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/overridden_confs.q");

      if (qt.shouldBeSkipped("overridden_confs.q")) {
        return;
      }

      qt.cliInit("overridden_confs.q", false);
      int ecode = qt.executeClient("overridden_confs.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("overridden_confs.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "overridden_confs.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "overridden_confs.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_parallel() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "parallel.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/parallel.q");

      if (qt.shouldBeSkipped("parallel.q")) {
        return;
      }

      qt.cliInit("parallel.q", false);
      int ecode = qt.executeClient("parallel.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("parallel.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "parallel.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "parallel.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_parenthesis_star_by() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "parenthesis_star_by.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/parenthesis_star_by.q");

      if (qt.shouldBeSkipped("parenthesis_star_by.q")) {
        return;
      }

      qt.cliInit("parenthesis_star_by.q", false);
      int ecode = qt.executeClient("parenthesis_star_by.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("parenthesis_star_by.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "parenthesis_star_by.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "parenthesis_star_by.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_part_inherit_tbl_props() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "part_inherit_tbl_props.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/part_inherit_tbl_props.q");

      if (qt.shouldBeSkipped("part_inherit_tbl_props.q")) {
        return;
      }

      qt.cliInit("part_inherit_tbl_props.q", false);
      int ecode = qt.executeClient("part_inherit_tbl_props.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("part_inherit_tbl_props.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "part_inherit_tbl_props.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "part_inherit_tbl_props.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_part_inherit_tbl_props_empty() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "part_inherit_tbl_props_empty.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/part_inherit_tbl_props_empty.q");

      if (qt.shouldBeSkipped("part_inherit_tbl_props_empty.q")) {
        return;
      }

      qt.cliInit("part_inherit_tbl_props_empty.q", false);
      int ecode = qt.executeClient("part_inherit_tbl_props_empty.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("part_inherit_tbl_props_empty.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "part_inherit_tbl_props_empty.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "part_inherit_tbl_props_empty.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_part_inherit_tbl_props_with_star() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "part_inherit_tbl_props_with_star.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/part_inherit_tbl_props_with_star.q");

      if (qt.shouldBeSkipped("part_inherit_tbl_props_with_star.q")) {
        return;
      }

      qt.cliInit("part_inherit_tbl_props_with_star.q", false);
      int ecode = qt.executeClient("part_inherit_tbl_props_with_star.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("part_inherit_tbl_props_with_star.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "part_inherit_tbl_props_with_star.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "part_inherit_tbl_props_with_star.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_partcols1() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "partcols1.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/partcols1.q");

      if (qt.shouldBeSkipped("partcols1.q")) {
        return;
      }

      qt.cliInit("partcols1.q", false);
      int ecode = qt.executeClient("partcols1.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("partcols1.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "partcols1.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "partcols1.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_partition_schema1() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "partition_schema1.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/partition_schema1.q");

      if (qt.shouldBeSkipped("partition_schema1.q")) {
        return;
      }

      qt.cliInit("partition_schema1.q", false);
      int ecode = qt.executeClient("partition_schema1.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("partition_schema1.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "partition_schema1.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "partition_schema1.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_partition_serde_format() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "partition_serde_format.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/partition_serde_format.q");

      if (qt.shouldBeSkipped("partition_serde_format.q")) {
        return;
      }

      qt.cliInit("partition_serde_format.q", false);
      int ecode = qt.executeClient("partition_serde_format.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("partition_serde_format.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "partition_serde_format.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "partition_serde_format.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_partition_special_char() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "partition_special_char.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/partition_special_char.q");

      if (qt.shouldBeSkipped("partition_special_char.q")) {
        return;
      }

      qt.cliInit("partition_special_char.q", false);
      int ecode = qt.executeClient("partition_special_char.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("partition_special_char.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "partition_special_char.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "partition_special_char.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_partition_vs_table_metadata() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "partition_vs_table_metadata.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/partition_vs_table_metadata.q");

      if (qt.shouldBeSkipped("partition_vs_table_metadata.q")) {
        return;
      }

      qt.cliInit("partition_vs_table_metadata.q", false);
      int ecode = qt.executeClient("partition_vs_table_metadata.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("partition_vs_table_metadata.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "partition_vs_table_metadata.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "partition_vs_table_metadata.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_partition_wise_fileformat() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "partition_wise_fileformat.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/partition_wise_fileformat.q");

      if (qt.shouldBeSkipped("partition_wise_fileformat.q")) {
        return;
      }

      qt.cliInit("partition_wise_fileformat.q", false);
      int ecode = qt.executeClient("partition_wise_fileformat.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("partition_wise_fileformat.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "partition_wise_fileformat.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "partition_wise_fileformat.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_partition_wise_fileformat2() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "partition_wise_fileformat2.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/partition_wise_fileformat2.q");

      if (qt.shouldBeSkipped("partition_wise_fileformat2.q")) {
        return;
      }

      qt.cliInit("partition_wise_fileformat2.q", false);
      int ecode = qt.executeClient("partition_wise_fileformat2.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("partition_wise_fileformat2.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "partition_wise_fileformat2.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "partition_wise_fileformat2.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_partition_wise_fileformat3() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "partition_wise_fileformat3.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/partition_wise_fileformat3.q");

      if (qt.shouldBeSkipped("partition_wise_fileformat3.q")) {
        return;
      }

      qt.cliInit("partition_wise_fileformat3.q", false);
      int ecode = qt.executeClient("partition_wise_fileformat3.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("partition_wise_fileformat3.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "partition_wise_fileformat3.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "partition_wise_fileformat3.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_partition_wise_fileformat4() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "partition_wise_fileformat4.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/partition_wise_fileformat4.q");

      if (qt.shouldBeSkipped("partition_wise_fileformat4.q")) {
        return;
      }

      qt.cliInit("partition_wise_fileformat4.q", false);
      int ecode = qt.executeClient("partition_wise_fileformat4.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("partition_wise_fileformat4.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "partition_wise_fileformat4.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "partition_wise_fileformat4.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_partition_wise_fileformat5() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "partition_wise_fileformat5.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/partition_wise_fileformat5.q");

      if (qt.shouldBeSkipped("partition_wise_fileformat5.q")) {
        return;
      }

      qt.cliInit("partition_wise_fileformat5.q", false);
      int ecode = qt.executeClient("partition_wise_fileformat5.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("partition_wise_fileformat5.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "partition_wise_fileformat5.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "partition_wise_fileformat5.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_partition_wise_fileformat6() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "partition_wise_fileformat6.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/partition_wise_fileformat6.q");

      if (qt.shouldBeSkipped("partition_wise_fileformat6.q")) {
        return;
      }

      qt.cliInit("partition_wise_fileformat6.q", false);
      int ecode = qt.executeClient("partition_wise_fileformat6.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("partition_wise_fileformat6.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "partition_wise_fileformat6.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "partition_wise_fileformat6.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_partition_wise_fileformat7() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "partition_wise_fileformat7.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/partition_wise_fileformat7.q");

      if (qt.shouldBeSkipped("partition_wise_fileformat7.q")) {
        return;
      }

      qt.cliInit("partition_wise_fileformat7.q", false);
      int ecode = qt.executeClient("partition_wise_fileformat7.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("partition_wise_fileformat7.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "partition_wise_fileformat7.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "partition_wise_fileformat7.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_partitions_json() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "partitions_json.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/partitions_json.q");

      if (qt.shouldBeSkipped("partitions_json.q")) {
        return;
      }

      qt.cliInit("partitions_json.q", false);
      int ecode = qt.executeClient("partitions_json.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("partitions_json.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "partitions_json.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "partitions_json.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_pcr() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "pcr.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/pcr.q");

      if (qt.shouldBeSkipped("pcr.q")) {
        return;
      }

      qt.cliInit("pcr.q", false);
      int ecode = qt.executeClient("pcr.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("pcr.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "pcr.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "pcr.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_ppd1() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "ppd1.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/ppd1.q");

      if (qt.shouldBeSkipped("ppd1.q")) {
        return;
      }

      qt.cliInit("ppd1.q", false);
      int ecode = qt.executeClient("ppd1.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("ppd1.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "ppd1.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "ppd1.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_ppd2() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "ppd2.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/ppd2.q");

      if (qt.shouldBeSkipped("ppd2.q")) {
        return;
      }

      qt.cliInit("ppd2.q", false);
      int ecode = qt.executeClient("ppd2.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("ppd2.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "ppd2.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "ppd2.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_ppd_clusterby() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "ppd_clusterby.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/ppd_clusterby.q");

      if (qt.shouldBeSkipped("ppd_clusterby.q")) {
        return;
      }

      qt.cliInit("ppd_clusterby.q", false);
      int ecode = qt.executeClient("ppd_clusterby.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("ppd_clusterby.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "ppd_clusterby.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "ppd_clusterby.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_ppd_constant_expr() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "ppd_constant_expr.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/ppd_constant_expr.q");

      if (qt.shouldBeSkipped("ppd_constant_expr.q")) {
        return;
      }

      qt.cliInit("ppd_constant_expr.q", false);
      int ecode = qt.executeClient("ppd_constant_expr.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("ppd_constant_expr.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "ppd_constant_expr.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "ppd_constant_expr.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_ppd_gby() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "ppd_gby.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/ppd_gby.q");

      if (qt.shouldBeSkipped("ppd_gby.q")) {
        return;
      }

      qt.cliInit("ppd_gby.q", false);
      int ecode = qt.executeClient("ppd_gby.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("ppd_gby.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "ppd_gby.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "ppd_gby.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_ppd_gby2() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "ppd_gby2.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/ppd_gby2.q");

      if (qt.shouldBeSkipped("ppd_gby2.q")) {
        return;
      }

      qt.cliInit("ppd_gby2.q", false);
      int ecode = qt.executeClient("ppd_gby2.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("ppd_gby2.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "ppd_gby2.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "ppd_gby2.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_ppd_gby_join() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "ppd_gby_join.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/ppd_gby_join.q");

      if (qt.shouldBeSkipped("ppd_gby_join.q")) {
        return;
      }

      qt.cliInit("ppd_gby_join.q", false);
      int ecode = qt.executeClient("ppd_gby_join.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("ppd_gby_join.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "ppd_gby_join.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "ppd_gby_join.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_ppd_join() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "ppd_join.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/ppd_join.q");

      if (qt.shouldBeSkipped("ppd_join.q")) {
        return;
      }

      qt.cliInit("ppd_join.q", false);
      int ecode = qt.executeClient("ppd_join.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("ppd_join.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "ppd_join.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "ppd_join.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_ppd_join2() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "ppd_join2.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/ppd_join2.q");

      if (qt.shouldBeSkipped("ppd_join2.q")) {
        return;
      }

      qt.cliInit("ppd_join2.q", false);
      int ecode = qt.executeClient("ppd_join2.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("ppd_join2.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "ppd_join2.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "ppd_join2.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_ppd_join3() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "ppd_join3.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/ppd_join3.q");

      if (qt.shouldBeSkipped("ppd_join3.q")) {
        return;
      }

      qt.cliInit("ppd_join3.q", false);
      int ecode = qt.executeClient("ppd_join3.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("ppd_join3.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "ppd_join3.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "ppd_join3.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_ppd_join_filter() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "ppd_join_filter.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/ppd_join_filter.q");

      if (qt.shouldBeSkipped("ppd_join_filter.q")) {
        return;
      }

      qt.cliInit("ppd_join_filter.q", false);
      int ecode = qt.executeClient("ppd_join_filter.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("ppd_join_filter.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "ppd_join_filter.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "ppd_join_filter.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_ppd_multi_insert() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "ppd_multi_insert.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/ppd_multi_insert.q");

      if (qt.shouldBeSkipped("ppd_multi_insert.q")) {
        return;
      }

      qt.cliInit("ppd_multi_insert.q", false);
      int ecode = qt.executeClient("ppd_multi_insert.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("ppd_multi_insert.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "ppd_multi_insert.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "ppd_multi_insert.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_ppd_outer_join1() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "ppd_outer_join1.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/ppd_outer_join1.q");

      if (qt.shouldBeSkipped("ppd_outer_join1.q")) {
        return;
      }

      qt.cliInit("ppd_outer_join1.q", false);
      int ecode = qt.executeClient("ppd_outer_join1.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("ppd_outer_join1.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "ppd_outer_join1.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "ppd_outer_join1.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_ppd_outer_join2() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "ppd_outer_join2.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/ppd_outer_join2.q");

      if (qt.shouldBeSkipped("ppd_outer_join2.q")) {
        return;
      }

      qt.cliInit("ppd_outer_join2.q", false);
      int ecode = qt.executeClient("ppd_outer_join2.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("ppd_outer_join2.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "ppd_outer_join2.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "ppd_outer_join2.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_ppd_outer_join3() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "ppd_outer_join3.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/ppd_outer_join3.q");

      if (qt.shouldBeSkipped("ppd_outer_join3.q")) {
        return;
      }

      qt.cliInit("ppd_outer_join3.q", false);
      int ecode = qt.executeClient("ppd_outer_join3.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("ppd_outer_join3.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "ppd_outer_join3.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "ppd_outer_join3.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_ppd_outer_join4() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "ppd_outer_join4.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/ppd_outer_join4.q");

      if (qt.shouldBeSkipped("ppd_outer_join4.q")) {
        return;
      }

      qt.cliInit("ppd_outer_join4.q", false);
      int ecode = qt.executeClient("ppd_outer_join4.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("ppd_outer_join4.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "ppd_outer_join4.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "ppd_outer_join4.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_ppd_outer_join5() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "ppd_outer_join5.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/ppd_outer_join5.q");

      if (qt.shouldBeSkipped("ppd_outer_join5.q")) {
        return;
      }

      qt.cliInit("ppd_outer_join5.q", false);
      int ecode = qt.executeClient("ppd_outer_join5.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("ppd_outer_join5.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "ppd_outer_join5.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "ppd_outer_join5.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_ppd_random() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "ppd_random.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/ppd_random.q");

      if (qt.shouldBeSkipped("ppd_random.q")) {
        return;
      }

      qt.cliInit("ppd_random.q", false);
      int ecode = qt.executeClient("ppd_random.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("ppd_random.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "ppd_random.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "ppd_random.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_ppd_repeated_alias() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "ppd_repeated_alias.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/ppd_repeated_alias.q");

      if (qt.shouldBeSkipped("ppd_repeated_alias.q")) {
        return;
      }

      qt.cliInit("ppd_repeated_alias.q", false);
      int ecode = qt.executeClient("ppd_repeated_alias.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("ppd_repeated_alias.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "ppd_repeated_alias.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "ppd_repeated_alias.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_ppd_transform() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "ppd_transform.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/ppd_transform.q");

      if (qt.shouldBeSkipped("ppd_transform.q")) {
        return;
      }

      qt.cliInit("ppd_transform.q", false);
      int ecode = qt.executeClient("ppd_transform.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("ppd_transform.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "ppd_transform.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "ppd_transform.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_ppd_udf_case() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "ppd_udf_case.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/ppd_udf_case.q");

      if (qt.shouldBeSkipped("ppd_udf_case.q")) {
        return;
      }

      qt.cliInit("ppd_udf_case.q", false);
      int ecode = qt.executeClient("ppd_udf_case.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("ppd_udf_case.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "ppd_udf_case.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "ppd_udf_case.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_ppd_udf_col() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "ppd_udf_col.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/ppd_udf_col.q");

      if (qt.shouldBeSkipped("ppd_udf_col.q")) {
        return;
      }

      qt.cliInit("ppd_udf_col.q", false);
      int ecode = qt.executeClient("ppd_udf_col.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("ppd_udf_col.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "ppd_udf_col.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "ppd_udf_col.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_ppd_union() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "ppd_union.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/ppd_union.q");

      if (qt.shouldBeSkipped("ppd_union.q")) {
        return;
      }

      qt.cliInit("ppd_union.q", false);
      int ecode = qt.executeClient("ppd_union.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("ppd_union.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "ppd_union.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "ppd_union.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_ppd_union_view() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "ppd_union_view.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/ppd_union_view.q");

      if (qt.shouldBeSkipped("ppd_union_view.q")) {
        return;
      }

      qt.cliInit("ppd_union_view.q", false);
      int ecode = qt.executeClient("ppd_union_view.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("ppd_union_view.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "ppd_union_view.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "ppd_union_view.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_ppr_allchildsarenull() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "ppr_allchildsarenull.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/ppr_allchildsarenull.q");

      if (qt.shouldBeSkipped("ppr_allchildsarenull.q")) {
        return;
      }

      qt.cliInit("ppr_allchildsarenull.q", false);
      int ecode = qt.executeClient("ppr_allchildsarenull.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("ppr_allchildsarenull.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "ppr_allchildsarenull.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "ppr_allchildsarenull.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_ppr_pushdown() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "ppr_pushdown.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/ppr_pushdown.q");

      if (qt.shouldBeSkipped("ppr_pushdown.q")) {
        return;
      }

      qt.cliInit("ppr_pushdown.q", false);
      int ecode = qt.executeClient("ppr_pushdown.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("ppr_pushdown.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "ppr_pushdown.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "ppr_pushdown.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_ppr_pushdown2() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "ppr_pushdown2.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/ppr_pushdown2.q");

      if (qt.shouldBeSkipped("ppr_pushdown2.q")) {
        return;
      }

      qt.cliInit("ppr_pushdown2.q", false);
      int ecode = qt.executeClient("ppr_pushdown2.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("ppr_pushdown2.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "ppr_pushdown2.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "ppr_pushdown2.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_ppr_pushdown3() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "ppr_pushdown3.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/ppr_pushdown3.q");

      if (qt.shouldBeSkipped("ppr_pushdown3.q")) {
        return;
      }

      qt.cliInit("ppr_pushdown3.q", false);
      int ecode = qt.executeClient("ppr_pushdown3.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("ppr_pushdown3.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "ppr_pushdown3.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "ppr_pushdown3.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_print_header() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "print_header.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/print_header.q");

      if (qt.shouldBeSkipped("print_header.q")) {
        return;
      }

      qt.cliInit("print_header.q", false);
      int ecode = qt.executeClient("print_header.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("print_header.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "print_header.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "print_header.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_progress_1() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "progress_1.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/progress_1.q");

      if (qt.shouldBeSkipped("progress_1.q")) {
        return;
      }

      qt.cliInit("progress_1.q", false);
      int ecode = qt.executeClient("progress_1.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("progress_1.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "progress_1.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "progress_1.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_protectmode() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "protectmode.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/protectmode.q");

      if (qt.shouldBeSkipped("protectmode.q")) {
        return;
      }

      qt.cliInit("protectmode.q", false);
      int ecode = qt.executeClient("protectmode.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("protectmode.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "protectmode.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "protectmode.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_protectmode2() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "protectmode2.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/protectmode2.q");

      if (qt.shouldBeSkipped("protectmode2.q")) {
        return;
      }

      qt.cliInit("protectmode2.q", false);
      int ecode = qt.executeClient("protectmode2.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("protectmode2.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "protectmode2.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "protectmode2.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_ql_rewrite_gbtoidx() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "ql_rewrite_gbtoidx.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/ql_rewrite_gbtoidx.q");

      if (qt.shouldBeSkipped("ql_rewrite_gbtoidx.q")) {
        return;
      }

      qt.cliInit("ql_rewrite_gbtoidx.q", false);
      int ecode = qt.executeClient("ql_rewrite_gbtoidx.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("ql_rewrite_gbtoidx.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "ql_rewrite_gbtoidx.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "ql_rewrite_gbtoidx.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_query_properties() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "query_properties.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/query_properties.q");

      if (qt.shouldBeSkipped("query_properties.q")) {
        return;
      }

      qt.cliInit("query_properties.q", false);
      int ecode = qt.executeClient("query_properties.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("query_properties.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "query_properties.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "query_properties.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_query_result_fileformat() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "query_result_fileformat.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/query_result_fileformat.q");

      if (qt.shouldBeSkipped("query_result_fileformat.q")) {
        return;
      }

      qt.cliInit("query_result_fileformat.q", false);
      int ecode = qt.executeClient("query_result_fileformat.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("query_result_fileformat.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "query_result_fileformat.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "query_result_fileformat.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_query_with_semi() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "query_with_semi.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/query_with_semi.q");

      if (qt.shouldBeSkipped("query_with_semi.q")) {
        return;
      }

      qt.cliInit("query_with_semi.q", false);
      int ecode = qt.executeClient("query_with_semi.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("query_with_semi.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "query_with_semi.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "query_with_semi.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_quote1() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "quote1.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/quote1.q");

      if (qt.shouldBeSkipped("quote1.q")) {
        return;
      }

      qt.cliInit("quote1.q", false);
      int ecode = qt.executeClient("quote1.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("quote1.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "quote1.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "quote1.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_quote2() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "quote2.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/quote2.q");

      if (qt.shouldBeSkipped("quote2.q")) {
        return;
      }

      qt.cliInit("quote2.q", false);
      int ecode = qt.executeClient("quote2.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("quote2.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "quote2.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "quote2.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_rand_partitionpruner1() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "rand_partitionpruner1.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/rand_partitionpruner1.q");

      if (qt.shouldBeSkipped("rand_partitionpruner1.q")) {
        return;
      }

      qt.cliInit("rand_partitionpruner1.q", false);
      int ecode = qt.executeClient("rand_partitionpruner1.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("rand_partitionpruner1.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "rand_partitionpruner1.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "rand_partitionpruner1.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_rand_partitionpruner2() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "rand_partitionpruner2.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/rand_partitionpruner2.q");

      if (qt.shouldBeSkipped("rand_partitionpruner2.q")) {
        return;
      }

      qt.cliInit("rand_partitionpruner2.q", false);
      int ecode = qt.executeClient("rand_partitionpruner2.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("rand_partitionpruner2.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "rand_partitionpruner2.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "rand_partitionpruner2.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_rand_partitionpruner3() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "rand_partitionpruner3.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/rand_partitionpruner3.q");

      if (qt.shouldBeSkipped("rand_partitionpruner3.q")) {
        return;
      }

      qt.cliInit("rand_partitionpruner3.q", false);
      int ecode = qt.executeClient("rand_partitionpruner3.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("rand_partitionpruner3.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "rand_partitionpruner3.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "rand_partitionpruner3.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_rcfile_bigdata() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "rcfile_bigdata.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/rcfile_bigdata.q");

      if (qt.shouldBeSkipped("rcfile_bigdata.q")) {
        return;
      }

      qt.cliInit("rcfile_bigdata.q", false);
      int ecode = qt.executeClient("rcfile_bigdata.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("rcfile_bigdata.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "rcfile_bigdata.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "rcfile_bigdata.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_rcfile_columnar() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "rcfile_columnar.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/rcfile_columnar.q");

      if (qt.shouldBeSkipped("rcfile_columnar.q")) {
        return;
      }

      qt.cliInit("rcfile_columnar.q", false);
      int ecode = qt.executeClient("rcfile_columnar.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("rcfile_columnar.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "rcfile_columnar.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "rcfile_columnar.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_rcfile_createas1() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "rcfile_createas1.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/rcfile_createas1.q");

      if (qt.shouldBeSkipped("rcfile_createas1.q")) {
        return;
      }

      qt.cliInit("rcfile_createas1.q", false);
      int ecode = qt.executeClient("rcfile_createas1.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("rcfile_createas1.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "rcfile_createas1.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "rcfile_createas1.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_rcfile_default_format() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "rcfile_default_format.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/rcfile_default_format.q");

      if (qt.shouldBeSkipped("rcfile_default_format.q")) {
        return;
      }

      qt.cliInit("rcfile_default_format.q", false);
      int ecode = qt.executeClient("rcfile_default_format.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("rcfile_default_format.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "rcfile_default_format.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "rcfile_default_format.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_rcfile_lazydecompress() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "rcfile_lazydecompress.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/rcfile_lazydecompress.q");

      if (qt.shouldBeSkipped("rcfile_lazydecompress.q")) {
        return;
      }

      qt.cliInit("rcfile_lazydecompress.q", false);
      int ecode = qt.executeClient("rcfile_lazydecompress.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("rcfile_lazydecompress.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "rcfile_lazydecompress.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "rcfile_lazydecompress.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_rcfile_merge1() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "rcfile_merge1.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/rcfile_merge1.q");

      if (qt.shouldBeSkipped("rcfile_merge1.q")) {
        return;
      }

      qt.cliInit("rcfile_merge1.q", false);
      int ecode = qt.executeClient("rcfile_merge1.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("rcfile_merge1.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "rcfile_merge1.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "rcfile_merge1.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_rcfile_merge2() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "rcfile_merge2.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/rcfile_merge2.q");

      if (qt.shouldBeSkipped("rcfile_merge2.q")) {
        return;
      }

      qt.cliInit("rcfile_merge2.q", false);
      int ecode = qt.executeClient("rcfile_merge2.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("rcfile_merge2.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "rcfile_merge2.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "rcfile_merge2.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_rcfile_merge3() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "rcfile_merge3.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/rcfile_merge3.q");

      if (qt.shouldBeSkipped("rcfile_merge3.q")) {
        return;
      }

      qt.cliInit("rcfile_merge3.q", false);
      int ecode = qt.executeClient("rcfile_merge3.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("rcfile_merge3.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "rcfile_merge3.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "rcfile_merge3.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_rcfile_merge4() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "rcfile_merge4.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/rcfile_merge4.q");

      if (qt.shouldBeSkipped("rcfile_merge4.q")) {
        return;
      }

      qt.cliInit("rcfile_merge4.q", false);
      int ecode = qt.executeClient("rcfile_merge4.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("rcfile_merge4.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "rcfile_merge4.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "rcfile_merge4.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_rcfile_null_value() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "rcfile_null_value.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/rcfile_null_value.q");

      if (qt.shouldBeSkipped("rcfile_null_value.q")) {
        return;
      }

      qt.cliInit("rcfile_null_value.q", false);
      int ecode = qt.executeClient("rcfile_null_value.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("rcfile_null_value.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "rcfile_null_value.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "rcfile_null_value.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_rcfile_toleratecorruptions() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "rcfile_toleratecorruptions.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/rcfile_toleratecorruptions.q");

      if (qt.shouldBeSkipped("rcfile_toleratecorruptions.q")) {
        return;
      }

      qt.cliInit("rcfile_toleratecorruptions.q", false);
      int ecode = qt.executeClient("rcfile_toleratecorruptions.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("rcfile_toleratecorruptions.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "rcfile_toleratecorruptions.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "rcfile_toleratecorruptions.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_rcfile_union() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "rcfile_union.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/rcfile_union.q");

      if (qt.shouldBeSkipped("rcfile_union.q")) {
        return;
      }

      qt.cliInit("rcfile_union.q", false);
      int ecode = qt.executeClient("rcfile_union.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("rcfile_union.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "rcfile_union.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "rcfile_union.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_recursive_dir() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "recursive_dir.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/recursive_dir.q");

      if (qt.shouldBeSkipped("recursive_dir.q")) {
        return;
      }

      qt.cliInit("recursive_dir.q", false);
      int ecode = qt.executeClient("recursive_dir.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("recursive_dir.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "recursive_dir.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "recursive_dir.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_reduce_deduplicate_exclude_gby() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "reduce_deduplicate_exclude_gby.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/reduce_deduplicate_exclude_gby.q");

      if (qt.shouldBeSkipped("reduce_deduplicate_exclude_gby.q")) {
        return;
      }

      qt.cliInit("reduce_deduplicate_exclude_gby.q", false);
      int ecode = qt.executeClient("reduce_deduplicate_exclude_gby.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("reduce_deduplicate_exclude_gby.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "reduce_deduplicate_exclude_gby.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "reduce_deduplicate_exclude_gby.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_reduce_deduplicate_exclude_join() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "reduce_deduplicate_exclude_join.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/reduce_deduplicate_exclude_join.q");

      if (qt.shouldBeSkipped("reduce_deduplicate_exclude_join.q")) {
        return;
      }

      qt.cliInit("reduce_deduplicate_exclude_join.q", false);
      int ecode = qt.executeClient("reduce_deduplicate_exclude_join.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("reduce_deduplicate_exclude_join.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "reduce_deduplicate_exclude_join.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "reduce_deduplicate_exclude_join.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_regex_col() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "regex_col.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/regex_col.q");

      if (qt.shouldBeSkipped("regex_col.q")) {
        return;
      }

      qt.cliInit("regex_col.q", false);
      int ecode = qt.executeClient("regex_col.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("regex_col.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "regex_col.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "regex_col.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_regexp_extract() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "regexp_extract.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/regexp_extract.q");

      if (qt.shouldBeSkipped("regexp_extract.q")) {
        return;
      }

      qt.cliInit("regexp_extract.q", false);
      int ecode = qt.executeClient("regexp_extract.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("regexp_extract.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "regexp_extract.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "regexp_extract.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_rename_column() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "rename_column.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/rename_column.q");

      if (qt.shouldBeSkipped("rename_column.q")) {
        return;
      }

      qt.cliInit("rename_column.q", false);
      int ecode = qt.executeClient("rename_column.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("rename_column.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "rename_column.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "rename_column.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_rename_external_partition_location() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "rename_external_partition_location.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/rename_external_partition_location.q");

      if (qt.shouldBeSkipped("rename_external_partition_location.q")) {
        return;
      }

      qt.cliInit("rename_external_partition_location.q", false);
      int ecode = qt.executeClient("rename_external_partition_location.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("rename_external_partition_location.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "rename_external_partition_location.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "rename_external_partition_location.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_rename_partition_location() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "rename_partition_location.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/rename_partition_location.q");

      if (qt.shouldBeSkipped("rename_partition_location.q")) {
        return;
      }

      qt.cliInit("rename_partition_location.q", false);
      int ecode = qt.executeClient("rename_partition_location.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("rename_partition_location.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "rename_partition_location.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "rename_partition_location.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_repair() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "repair.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/repair.q");

      if (qt.shouldBeSkipped("repair.q")) {
        return;
      }

      qt.cliInit("repair.q", false);
      int ecode = qt.executeClient("repair.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("repair.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "repair.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "repair.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_repair_hadoop23() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "repair_hadoop23.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/repair_hadoop23.q");

      if (qt.shouldBeSkipped("repair_hadoop23.q")) {
        return;
      }

      qt.cliInit("repair_hadoop23.q", false);
      int ecode = qt.executeClient("repair_hadoop23.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("repair_hadoop23.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "repair_hadoop23.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "repair_hadoop23.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_reset_conf() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "reset_conf.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/reset_conf.q");

      if (qt.shouldBeSkipped("reset_conf.q")) {
        return;
      }

      qt.cliInit("reset_conf.q", false);
      int ecode = qt.executeClient("reset_conf.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("reset_conf.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "reset_conf.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "reset_conf.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_router_join_ppr() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "router_join_ppr.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/router_join_ppr.q");

      if (qt.shouldBeSkipped("router_join_ppr.q")) {
        return;
      }

      qt.cliInit("router_join_ppr.q", false);
      int ecode = qt.executeClient("router_join_ppr.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("router_join_ppr.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "router_join_ppr.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "router_join_ppr.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_sample1() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "sample1.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/sample1.q");

      if (qt.shouldBeSkipped("sample1.q")) {
        return;
      }

      qt.cliInit("sample1.q", false);
      int ecode = qt.executeClient("sample1.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("sample1.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "sample1.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "sample1.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_sample10() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "sample10.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/sample10.q");

      if (qt.shouldBeSkipped("sample10.q")) {
        return;
      }

      qt.cliInit("sample10.q", false);
      int ecode = qt.executeClient("sample10.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("sample10.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "sample10.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "sample10.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_sample2() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "sample2.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/sample2.q");

      if (qt.shouldBeSkipped("sample2.q")) {
        return;
      }

      qt.cliInit("sample2.q", false);
      int ecode = qt.executeClient("sample2.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("sample2.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "sample2.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "sample2.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_sample3() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "sample3.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/sample3.q");

      if (qt.shouldBeSkipped("sample3.q")) {
        return;
      }

      qt.cliInit("sample3.q", false);
      int ecode = qt.executeClient("sample3.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("sample3.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "sample3.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "sample3.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_sample4() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "sample4.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/sample4.q");

      if (qt.shouldBeSkipped("sample4.q")) {
        return;
      }

      qt.cliInit("sample4.q", false);
      int ecode = qt.executeClient("sample4.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("sample4.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "sample4.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "sample4.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_sample5() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "sample5.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/sample5.q");

      if (qt.shouldBeSkipped("sample5.q")) {
        return;
      }

      qt.cliInit("sample5.q", false);
      int ecode = qt.executeClient("sample5.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("sample5.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "sample5.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "sample5.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_sample6() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "sample6.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/sample6.q");

      if (qt.shouldBeSkipped("sample6.q")) {
        return;
      }

      qt.cliInit("sample6.q", false);
      int ecode = qt.executeClient("sample6.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("sample6.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "sample6.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "sample6.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_sample7() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "sample7.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/sample7.q");

      if (qt.shouldBeSkipped("sample7.q")) {
        return;
      }

      qt.cliInit("sample7.q", false);
      int ecode = qt.executeClient("sample7.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("sample7.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "sample7.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "sample7.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_sample8() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "sample8.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/sample8.q");

      if (qt.shouldBeSkipped("sample8.q")) {
        return;
      }

      qt.cliInit("sample8.q", false);
      int ecode = qt.executeClient("sample8.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("sample8.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "sample8.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "sample8.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_sample9() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "sample9.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/sample9.q");

      if (qt.shouldBeSkipped("sample9.q")) {
        return;
      }

      qt.cliInit("sample9.q", false);
      int ecode = qt.executeClient("sample9.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("sample9.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "sample9.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "sample9.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_sample_islocalmode_hook() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "sample_islocalmode_hook.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/sample_islocalmode_hook.q");

      if (qt.shouldBeSkipped("sample_islocalmode_hook.q")) {
        return;
      }

      qt.cliInit("sample_islocalmode_hook.q", false);
      int ecode = qt.executeClient("sample_islocalmode_hook.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("sample_islocalmode_hook.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "sample_islocalmode_hook.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "sample_islocalmode_hook.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_sample_islocalmode_hook_hadoop20() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "sample_islocalmode_hook_hadoop20.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/sample_islocalmode_hook_hadoop20.q");

      if (qt.shouldBeSkipped("sample_islocalmode_hook_hadoop20.q")) {
        return;
      }

      qt.cliInit("sample_islocalmode_hook_hadoop20.q", false);
      int ecode = qt.executeClient("sample_islocalmode_hook_hadoop20.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("sample_islocalmode_hook_hadoop20.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "sample_islocalmode_hook_hadoop20.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "sample_islocalmode_hook_hadoop20.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_script_env_var1() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "script_env_var1.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/script_env_var1.q");

      if (qt.shouldBeSkipped("script_env_var1.q")) {
        return;
      }

      qt.cliInit("script_env_var1.q", false);
      int ecode = qt.executeClient("script_env_var1.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("script_env_var1.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "script_env_var1.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "script_env_var1.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_script_env_var2() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "script_env_var2.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/script_env_var2.q");

      if (qt.shouldBeSkipped("script_env_var2.q")) {
        return;
      }

      qt.cliInit("script_env_var2.q", false);
      int ecode = qt.executeClient("script_env_var2.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("script_env_var2.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "script_env_var2.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "script_env_var2.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_script_pipe() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "script_pipe.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/script_pipe.q");

      if (qt.shouldBeSkipped("script_pipe.q")) {
        return;
      }

      qt.cliInit("script_pipe.q", false);
      int ecode = qt.executeClient("script_pipe.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("script_pipe.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "script_pipe.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "script_pipe.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_select_as_omitted() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "select_as_omitted.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/select_as_omitted.q");

      if (qt.shouldBeSkipped("select_as_omitted.q")) {
        return;
      }

      qt.cliInit("select_as_omitted.q", false);
      int ecode = qt.executeClient("select_as_omitted.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("select_as_omitted.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "select_as_omitted.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "select_as_omitted.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_select_transform_hint() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "select_transform_hint.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/select_transform_hint.q");

      if (qt.shouldBeSkipped("select_transform_hint.q")) {
        return;
      }

      qt.cliInit("select_transform_hint.q", false);
      int ecode = qt.executeClient("select_transform_hint.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("select_transform_hint.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "select_transform_hint.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "select_transform_hint.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_semijoin() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "semijoin.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/semijoin.q");

      if (qt.shouldBeSkipped("semijoin.q")) {
        return;
      }

      qt.cliInit("semijoin.q", false);
      int ecode = qt.executeClient("semijoin.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("semijoin.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "semijoin.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "semijoin.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_serde_regex() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "serde_regex.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/serde_regex.q");

      if (qt.shouldBeSkipped("serde_regex.q")) {
        return;
      }

      qt.cliInit("serde_regex.q", false);
      int ecode = qt.executeClient("serde_regex.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("serde_regex.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "serde_regex.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "serde_regex.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_serde_reported_schema() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "serde_reported_schema.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/serde_reported_schema.q");

      if (qt.shouldBeSkipped("serde_reported_schema.q")) {
        return;
      }

      qt.cliInit("serde_reported_schema.q", false);
      int ecode = qt.executeClient("serde_reported_schema.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("serde_reported_schema.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "serde_reported_schema.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "serde_reported_schema.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_set_processor_namespaces() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "set_processor_namespaces.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/set_processor_namespaces.q");

      if (qt.shouldBeSkipped("set_processor_namespaces.q")) {
        return;
      }

      qt.cliInit("set_processor_namespaces.q", false);
      int ecode = qt.executeClient("set_processor_namespaces.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("set_processor_namespaces.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "set_processor_namespaces.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "set_processor_namespaces.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_set_variable_sub() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "set_variable_sub.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/set_variable_sub.q");

      if (qt.shouldBeSkipped("set_variable_sub.q")) {
        return;
      }

      qt.cliInit("set_variable_sub.q", false);
      int ecode = qt.executeClient("set_variable_sub.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("set_variable_sub.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "set_variable_sub.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "set_variable_sub.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_show_columns() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "show_columns.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/show_columns.q");

      if (qt.shouldBeSkipped("show_columns.q")) {
        return;
      }

      qt.cliInit("show_columns.q", false);
      int ecode = qt.executeClient("show_columns.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("show_columns.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "show_columns.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "show_columns.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_show_create_table_alter() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "show_create_table_alter.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/show_create_table_alter.q");

      if (qt.shouldBeSkipped("show_create_table_alter.q")) {
        return;
      }

      qt.cliInit("show_create_table_alter.q", false);
      int ecode = qt.executeClient("show_create_table_alter.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("show_create_table_alter.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "show_create_table_alter.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "show_create_table_alter.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_show_create_table_db_table() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "show_create_table_db_table.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/show_create_table_db_table.q");

      if (qt.shouldBeSkipped("show_create_table_db_table.q")) {
        return;
      }

      qt.cliInit("show_create_table_db_table.q", false);
      int ecode = qt.executeClient("show_create_table_db_table.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("show_create_table_db_table.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "show_create_table_db_table.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "show_create_table_db_table.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_show_create_table_delimited() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "show_create_table_delimited.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/show_create_table_delimited.q");

      if (qt.shouldBeSkipped("show_create_table_delimited.q")) {
        return;
      }

      qt.cliInit("show_create_table_delimited.q", false);
      int ecode = qt.executeClient("show_create_table_delimited.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("show_create_table_delimited.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "show_create_table_delimited.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "show_create_table_delimited.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_show_create_table_partitioned() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "show_create_table_partitioned.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/show_create_table_partitioned.q");

      if (qt.shouldBeSkipped("show_create_table_partitioned.q")) {
        return;
      }

      qt.cliInit("show_create_table_partitioned.q", false);
      int ecode = qt.executeClient("show_create_table_partitioned.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("show_create_table_partitioned.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "show_create_table_partitioned.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "show_create_table_partitioned.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_show_create_table_serde() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "show_create_table_serde.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/show_create_table_serde.q");

      if (qt.shouldBeSkipped("show_create_table_serde.q")) {
        return;
      }

      qt.cliInit("show_create_table_serde.q", false);
      int ecode = qt.executeClient("show_create_table_serde.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("show_create_table_serde.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "show_create_table_serde.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "show_create_table_serde.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_show_create_table_view() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "show_create_table_view.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/show_create_table_view.q");

      if (qt.shouldBeSkipped("show_create_table_view.q")) {
        return;
      }

      qt.cliInit("show_create_table_view.q", false);
      int ecode = qt.executeClient("show_create_table_view.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("show_create_table_view.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "show_create_table_view.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "show_create_table_view.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_show_describe_func_quotes() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "show_describe_func_quotes.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/show_describe_func_quotes.q");

      if (qt.shouldBeSkipped("show_describe_func_quotes.q")) {
        return;
      }

      qt.cliInit("show_describe_func_quotes.q", false);
      int ecode = qt.executeClient("show_describe_func_quotes.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("show_describe_func_quotes.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "show_describe_func_quotes.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "show_describe_func_quotes.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_show_functions() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "show_functions.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/show_functions.q");

      if (qt.shouldBeSkipped("show_functions.q")) {
        return;
      }

      qt.cliInit("show_functions.q", false);
      int ecode = qt.executeClient("show_functions.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("show_functions.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "show_functions.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "show_functions.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_show_indexes_edge_cases() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "show_indexes_edge_cases.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/show_indexes_edge_cases.q");

      if (qt.shouldBeSkipped("show_indexes_edge_cases.q")) {
        return;
      }

      qt.cliInit("show_indexes_edge_cases.q", false);
      int ecode = qt.executeClient("show_indexes_edge_cases.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("show_indexes_edge_cases.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "show_indexes_edge_cases.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "show_indexes_edge_cases.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_show_indexes_syntax() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "show_indexes_syntax.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/show_indexes_syntax.q");

      if (qt.shouldBeSkipped("show_indexes_syntax.q")) {
        return;
      }

      qt.cliInit("show_indexes_syntax.q", false);
      int ecode = qt.executeClient("show_indexes_syntax.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("show_indexes_syntax.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "show_indexes_syntax.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "show_indexes_syntax.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_show_partitions() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "show_partitions.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/show_partitions.q");

      if (qt.shouldBeSkipped("show_partitions.q")) {
        return;
      }

      qt.cliInit("show_partitions.q", false);
      int ecode = qt.executeClient("show_partitions.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("show_partitions.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "show_partitions.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "show_partitions.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_show_tables() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "show_tables.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/show_tables.q");

      if (qt.shouldBeSkipped("show_tables.q")) {
        return;
      }

      qt.cliInit("show_tables.q", false);
      int ecode = qt.executeClient("show_tables.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("show_tables.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "show_tables.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "show_tables.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_show_tablestatus() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "show_tablestatus.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/show_tablestatus.q");

      if (qt.shouldBeSkipped("show_tablestatus.q")) {
        return;
      }

      qt.cliInit("show_tablestatus.q", false);
      int ecode = qt.executeClient("show_tablestatus.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("show_tablestatus.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "show_tablestatus.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "show_tablestatus.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_show_tblproperties() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "show_tblproperties.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/show_tblproperties.q");

      if (qt.shouldBeSkipped("show_tblproperties.q")) {
        return;
      }

      qt.cliInit("show_tblproperties.q", false);
      int ecode = qt.executeClient("show_tblproperties.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("show_tblproperties.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "show_tblproperties.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "show_tblproperties.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_showparts() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "showparts.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/showparts.q");

      if (qt.shouldBeSkipped("showparts.q")) {
        return;
      }

      qt.cliInit("showparts.q", false);
      int ecode = qt.executeClient("showparts.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("showparts.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "showparts.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "showparts.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_skewjoin() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "skewjoin.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/skewjoin.q");

      if (qt.shouldBeSkipped("skewjoin.q")) {
        return;
      }

      qt.cliInit("skewjoin.q", false);
      int ecode = qt.executeClient("skewjoin.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("skewjoin.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "skewjoin.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "skewjoin.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_skewjoin_union_remove_1() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "skewjoin_union_remove_1.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/skewjoin_union_remove_1.q");

      if (qt.shouldBeSkipped("skewjoin_union_remove_1.q")) {
        return;
      }

      qt.cliInit("skewjoin_union_remove_1.q", false);
      int ecode = qt.executeClient("skewjoin_union_remove_1.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("skewjoin_union_remove_1.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "skewjoin_union_remove_1.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "skewjoin_union_remove_1.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_skewjoin_union_remove_2() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "skewjoin_union_remove_2.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/skewjoin_union_remove_2.q");

      if (qt.shouldBeSkipped("skewjoin_union_remove_2.q")) {
        return;
      }

      qt.cliInit("skewjoin_union_remove_2.q", false);
      int ecode = qt.executeClient("skewjoin_union_remove_2.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("skewjoin_union_remove_2.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "skewjoin_union_remove_2.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "skewjoin_union_remove_2.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_skewjoinopt1() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "skewjoinopt1.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/skewjoinopt1.q");

      if (qt.shouldBeSkipped("skewjoinopt1.q")) {
        return;
      }

      qt.cliInit("skewjoinopt1.q", false);
      int ecode = qt.executeClient("skewjoinopt1.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("skewjoinopt1.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "skewjoinopt1.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "skewjoinopt1.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_skewjoinopt10() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "skewjoinopt10.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/skewjoinopt10.q");

      if (qt.shouldBeSkipped("skewjoinopt10.q")) {
        return;
      }

      qt.cliInit("skewjoinopt10.q", false);
      int ecode = qt.executeClient("skewjoinopt10.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("skewjoinopt10.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "skewjoinopt10.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "skewjoinopt10.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_skewjoinopt11() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "skewjoinopt11.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/skewjoinopt11.q");

      if (qt.shouldBeSkipped("skewjoinopt11.q")) {
        return;
      }

      qt.cliInit("skewjoinopt11.q", false);
      int ecode = qt.executeClient("skewjoinopt11.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("skewjoinopt11.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "skewjoinopt11.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "skewjoinopt11.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_skewjoinopt12() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "skewjoinopt12.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/skewjoinopt12.q");

      if (qt.shouldBeSkipped("skewjoinopt12.q")) {
        return;
      }

      qt.cliInit("skewjoinopt12.q", false);
      int ecode = qt.executeClient("skewjoinopt12.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("skewjoinopt12.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "skewjoinopt12.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "skewjoinopt12.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_skewjoinopt13() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "skewjoinopt13.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/skewjoinopt13.q");

      if (qt.shouldBeSkipped("skewjoinopt13.q")) {
        return;
      }

      qt.cliInit("skewjoinopt13.q", false);
      int ecode = qt.executeClient("skewjoinopt13.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("skewjoinopt13.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "skewjoinopt13.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "skewjoinopt13.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_skewjoinopt14() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "skewjoinopt14.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/skewjoinopt14.q");

      if (qt.shouldBeSkipped("skewjoinopt14.q")) {
        return;
      }

      qt.cliInit("skewjoinopt14.q", false);
      int ecode = qt.executeClient("skewjoinopt14.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("skewjoinopt14.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "skewjoinopt14.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "skewjoinopt14.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_skewjoinopt15() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "skewjoinopt15.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/skewjoinopt15.q");

      if (qt.shouldBeSkipped("skewjoinopt15.q")) {
        return;
      }

      qt.cliInit("skewjoinopt15.q", false);
      int ecode = qt.executeClient("skewjoinopt15.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("skewjoinopt15.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "skewjoinopt15.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "skewjoinopt15.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_skewjoinopt16() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "skewjoinopt16.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/skewjoinopt16.q");

      if (qt.shouldBeSkipped("skewjoinopt16.q")) {
        return;
      }

      qt.cliInit("skewjoinopt16.q", false);
      int ecode = qt.executeClient("skewjoinopt16.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("skewjoinopt16.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "skewjoinopt16.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "skewjoinopt16.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_skewjoinopt17() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "skewjoinopt17.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/skewjoinopt17.q");

      if (qt.shouldBeSkipped("skewjoinopt17.q")) {
        return;
      }

      qt.cliInit("skewjoinopt17.q", false);
      int ecode = qt.executeClient("skewjoinopt17.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("skewjoinopt17.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "skewjoinopt17.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "skewjoinopt17.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_skewjoinopt18() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "skewjoinopt18.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/skewjoinopt18.q");

      if (qt.shouldBeSkipped("skewjoinopt18.q")) {
        return;
      }

      qt.cliInit("skewjoinopt18.q", false);
      int ecode = qt.executeClient("skewjoinopt18.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("skewjoinopt18.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "skewjoinopt18.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "skewjoinopt18.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_skewjoinopt19() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "skewjoinopt19.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/skewjoinopt19.q");

      if (qt.shouldBeSkipped("skewjoinopt19.q")) {
        return;
      }

      qt.cliInit("skewjoinopt19.q", false);
      int ecode = qt.executeClient("skewjoinopt19.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("skewjoinopt19.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "skewjoinopt19.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "skewjoinopt19.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_skewjoinopt2() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "skewjoinopt2.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/skewjoinopt2.q");

      if (qt.shouldBeSkipped("skewjoinopt2.q")) {
        return;
      }

      qt.cliInit("skewjoinopt2.q", false);
      int ecode = qt.executeClient("skewjoinopt2.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("skewjoinopt2.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "skewjoinopt2.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "skewjoinopt2.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_skewjoinopt20() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "skewjoinopt20.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/skewjoinopt20.q");

      if (qt.shouldBeSkipped("skewjoinopt20.q")) {
        return;
      }

      qt.cliInit("skewjoinopt20.q", false);
      int ecode = qt.executeClient("skewjoinopt20.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("skewjoinopt20.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "skewjoinopt20.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "skewjoinopt20.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_skewjoinopt3() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "skewjoinopt3.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/skewjoinopt3.q");

      if (qt.shouldBeSkipped("skewjoinopt3.q")) {
        return;
      }

      qt.cliInit("skewjoinopt3.q", false);
      int ecode = qt.executeClient("skewjoinopt3.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("skewjoinopt3.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "skewjoinopt3.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "skewjoinopt3.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_skewjoinopt4() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "skewjoinopt4.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/skewjoinopt4.q");

      if (qt.shouldBeSkipped("skewjoinopt4.q")) {
        return;
      }

      qt.cliInit("skewjoinopt4.q", false);
      int ecode = qt.executeClient("skewjoinopt4.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("skewjoinopt4.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "skewjoinopt4.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "skewjoinopt4.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_skewjoinopt5() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "skewjoinopt5.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/skewjoinopt5.q");

      if (qt.shouldBeSkipped("skewjoinopt5.q")) {
        return;
      }

      qt.cliInit("skewjoinopt5.q", false);
      int ecode = qt.executeClient("skewjoinopt5.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("skewjoinopt5.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "skewjoinopt5.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "skewjoinopt5.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_skewjoinopt6() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "skewjoinopt6.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/skewjoinopt6.q");

      if (qt.shouldBeSkipped("skewjoinopt6.q")) {
        return;
      }

      qt.cliInit("skewjoinopt6.q", false);
      int ecode = qt.executeClient("skewjoinopt6.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("skewjoinopt6.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "skewjoinopt6.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "skewjoinopt6.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_skewjoinopt7() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "skewjoinopt7.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/skewjoinopt7.q");

      if (qt.shouldBeSkipped("skewjoinopt7.q")) {
        return;
      }

      qt.cliInit("skewjoinopt7.q", false);
      int ecode = qt.executeClient("skewjoinopt7.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("skewjoinopt7.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "skewjoinopt7.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "skewjoinopt7.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_skewjoinopt8() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "skewjoinopt8.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/skewjoinopt8.q");

      if (qt.shouldBeSkipped("skewjoinopt8.q")) {
        return;
      }

      qt.cliInit("skewjoinopt8.q", false);
      int ecode = qt.executeClient("skewjoinopt8.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("skewjoinopt8.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "skewjoinopt8.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "skewjoinopt8.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_skewjoinopt9() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "skewjoinopt9.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/skewjoinopt9.q");

      if (qt.shouldBeSkipped("skewjoinopt9.q")) {
        return;
      }

      qt.cliInit("skewjoinopt9.q", false);
      int ecode = qt.executeClient("skewjoinopt9.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("skewjoinopt9.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "skewjoinopt9.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "skewjoinopt9.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_smb_mapjoin9() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "smb_mapjoin9.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/smb_mapjoin9.q");

      if (qt.shouldBeSkipped("smb_mapjoin9.q")) {
        return;
      }

      qt.cliInit("smb_mapjoin9.q", false);
      int ecode = qt.executeClient("smb_mapjoin9.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("smb_mapjoin9.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "smb_mapjoin9.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "smb_mapjoin9.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_smb_mapjoin_1() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "smb_mapjoin_1.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/smb_mapjoin_1.q");

      if (qt.shouldBeSkipped("smb_mapjoin_1.q")) {
        return;
      }

      qt.cliInit("smb_mapjoin_1.q", false);
      int ecode = qt.executeClient("smb_mapjoin_1.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("smb_mapjoin_1.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "smb_mapjoin_1.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "smb_mapjoin_1.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_smb_mapjoin_10() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "smb_mapjoin_10.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/smb_mapjoin_10.q");

      if (qt.shouldBeSkipped("smb_mapjoin_10.q")) {
        return;
      }

      qt.cliInit("smb_mapjoin_10.q", false);
      int ecode = qt.executeClient("smb_mapjoin_10.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("smb_mapjoin_10.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "smb_mapjoin_10.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "smb_mapjoin_10.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_smb_mapjoin_11() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "smb_mapjoin_11.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/smb_mapjoin_11.q");

      if (qt.shouldBeSkipped("smb_mapjoin_11.q")) {
        return;
      }

      qt.cliInit("smb_mapjoin_11.q", false);
      int ecode = qt.executeClient("smb_mapjoin_11.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("smb_mapjoin_11.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "smb_mapjoin_11.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "smb_mapjoin_11.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_smb_mapjoin_12() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "smb_mapjoin_12.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/smb_mapjoin_12.q");

      if (qt.shouldBeSkipped("smb_mapjoin_12.q")) {
        return;
      }

      qt.cliInit("smb_mapjoin_12.q", false);
      int ecode = qt.executeClient("smb_mapjoin_12.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("smb_mapjoin_12.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "smb_mapjoin_12.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "smb_mapjoin_12.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_smb_mapjoin_13() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "smb_mapjoin_13.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/smb_mapjoin_13.q");

      if (qt.shouldBeSkipped("smb_mapjoin_13.q")) {
        return;
      }

      qt.cliInit("smb_mapjoin_13.q", false);
      int ecode = qt.executeClient("smb_mapjoin_13.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("smb_mapjoin_13.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "smb_mapjoin_13.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "smb_mapjoin_13.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_smb_mapjoin_2() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "smb_mapjoin_2.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/smb_mapjoin_2.q");

      if (qt.shouldBeSkipped("smb_mapjoin_2.q")) {
        return;
      }

      qt.cliInit("smb_mapjoin_2.q", false);
      int ecode = qt.executeClient("smb_mapjoin_2.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("smb_mapjoin_2.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "smb_mapjoin_2.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "smb_mapjoin_2.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_smb_mapjoin_3() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "smb_mapjoin_3.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/smb_mapjoin_3.q");

      if (qt.shouldBeSkipped("smb_mapjoin_3.q")) {
        return;
      }

      qt.cliInit("smb_mapjoin_3.q", false);
      int ecode = qt.executeClient("smb_mapjoin_3.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("smb_mapjoin_3.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "smb_mapjoin_3.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "smb_mapjoin_3.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_smb_mapjoin_4() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "smb_mapjoin_4.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/smb_mapjoin_4.q");

      if (qt.shouldBeSkipped("smb_mapjoin_4.q")) {
        return;
      }

      qt.cliInit("smb_mapjoin_4.q", false);
      int ecode = qt.executeClient("smb_mapjoin_4.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("smb_mapjoin_4.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "smb_mapjoin_4.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "smb_mapjoin_4.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_smb_mapjoin_5() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "smb_mapjoin_5.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/smb_mapjoin_5.q");

      if (qt.shouldBeSkipped("smb_mapjoin_5.q")) {
        return;
      }

      qt.cliInit("smb_mapjoin_5.q", false);
      int ecode = qt.executeClient("smb_mapjoin_5.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("smb_mapjoin_5.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "smb_mapjoin_5.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "smb_mapjoin_5.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_smb_mapjoin_6() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "smb_mapjoin_6.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/smb_mapjoin_6.q");

      if (qt.shouldBeSkipped("smb_mapjoin_6.q")) {
        return;
      }

      qt.cliInit("smb_mapjoin_6.q", false);
      int ecode = qt.executeClient("smb_mapjoin_6.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("smb_mapjoin_6.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "smb_mapjoin_6.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "smb_mapjoin_6.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_smb_mapjoin_7() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "smb_mapjoin_7.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/smb_mapjoin_7.q");

      if (qt.shouldBeSkipped("smb_mapjoin_7.q")) {
        return;
      }

      qt.cliInit("smb_mapjoin_7.q", false);
      int ecode = qt.executeClient("smb_mapjoin_7.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("smb_mapjoin_7.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "smb_mapjoin_7.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "smb_mapjoin_7.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_sort() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "sort.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/sort.q");

      if (qt.shouldBeSkipped("sort.q")) {
        return;
      }

      qt.cliInit("sort.q", false);
      int ecode = qt.executeClient("sort.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("sort.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "sort.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "sort.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_sort_merge_join_desc_1() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "sort_merge_join_desc_1.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/sort_merge_join_desc_1.q");

      if (qt.shouldBeSkipped("sort_merge_join_desc_1.q")) {
        return;
      }

      qt.cliInit("sort_merge_join_desc_1.q", false);
      int ecode = qt.executeClient("sort_merge_join_desc_1.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("sort_merge_join_desc_1.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "sort_merge_join_desc_1.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "sort_merge_join_desc_1.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_sort_merge_join_desc_2() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "sort_merge_join_desc_2.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/sort_merge_join_desc_2.q");

      if (qt.shouldBeSkipped("sort_merge_join_desc_2.q")) {
        return;
      }

      qt.cliInit("sort_merge_join_desc_2.q", false);
      int ecode = qt.executeClient("sort_merge_join_desc_2.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("sort_merge_join_desc_2.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "sort_merge_join_desc_2.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "sort_merge_join_desc_2.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_sort_merge_join_desc_3() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "sort_merge_join_desc_3.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/sort_merge_join_desc_3.q");

      if (qt.shouldBeSkipped("sort_merge_join_desc_3.q")) {
        return;
      }

      qt.cliInit("sort_merge_join_desc_3.q", false);
      int ecode = qt.executeClient("sort_merge_join_desc_3.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("sort_merge_join_desc_3.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "sort_merge_join_desc_3.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "sort_merge_join_desc_3.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_sort_merge_join_desc_4() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "sort_merge_join_desc_4.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/sort_merge_join_desc_4.q");

      if (qt.shouldBeSkipped("sort_merge_join_desc_4.q")) {
        return;
      }

      qt.cliInit("sort_merge_join_desc_4.q", false);
      int ecode = qt.executeClient("sort_merge_join_desc_4.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("sort_merge_join_desc_4.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "sort_merge_join_desc_4.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "sort_merge_join_desc_4.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_sort_merge_join_desc_5() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "sort_merge_join_desc_5.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/sort_merge_join_desc_5.q");

      if (qt.shouldBeSkipped("sort_merge_join_desc_5.q")) {
        return;
      }

      qt.cliInit("sort_merge_join_desc_5.q", false);
      int ecode = qt.executeClient("sort_merge_join_desc_5.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("sort_merge_join_desc_5.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "sort_merge_join_desc_5.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "sort_merge_join_desc_5.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_sort_merge_join_desc_6() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "sort_merge_join_desc_6.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/sort_merge_join_desc_6.q");

      if (qt.shouldBeSkipped("sort_merge_join_desc_6.q")) {
        return;
      }

      qt.cliInit("sort_merge_join_desc_6.q", false);
      int ecode = qt.executeClient("sort_merge_join_desc_6.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("sort_merge_join_desc_6.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "sort_merge_join_desc_6.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "sort_merge_join_desc_6.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_sort_merge_join_desc_7() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "sort_merge_join_desc_7.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/sort_merge_join_desc_7.q");

      if (qt.shouldBeSkipped("sort_merge_join_desc_7.q")) {
        return;
      }

      qt.cliInit("sort_merge_join_desc_7.q", false);
      int ecode = qt.executeClient("sort_merge_join_desc_7.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("sort_merge_join_desc_7.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "sort_merge_join_desc_7.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "sort_merge_join_desc_7.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_source() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "source.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/source.q");

      if (qt.shouldBeSkipped("source.q")) {
        return;
      }

      qt.cliInit("source.q", false);
      int ecode = qt.executeClient("source.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("source.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "source.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "source.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_split_sample() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "split_sample.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/split_sample.q");

      if (qt.shouldBeSkipped("split_sample.q")) {
        return;
      }

      qt.cliInit("split_sample.q", false);
      int ecode = qt.executeClient("split_sample.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("split_sample.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "split_sample.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "split_sample.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_stats0() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "stats0.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/stats0.q");

      if (qt.shouldBeSkipped("stats0.q")) {
        return;
      }

      qt.cliInit("stats0.q", false);
      int ecode = qt.executeClient("stats0.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("stats0.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "stats0.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "stats0.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_stats1() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "stats1.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/stats1.q");

      if (qt.shouldBeSkipped("stats1.q")) {
        return;
      }

      qt.cliInit("stats1.q", false);
      int ecode = qt.executeClient("stats1.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("stats1.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "stats1.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "stats1.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_stats10() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "stats10.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/stats10.q");

      if (qt.shouldBeSkipped("stats10.q")) {
        return;
      }

      qt.cliInit("stats10.q", false);
      int ecode = qt.executeClient("stats10.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("stats10.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "stats10.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "stats10.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_stats11() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "stats11.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/stats11.q");

      if (qt.shouldBeSkipped("stats11.q")) {
        return;
      }

      qt.cliInit("stats11.q", false);
      int ecode = qt.executeClient("stats11.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("stats11.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "stats11.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "stats11.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_stats12() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "stats12.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/stats12.q");

      if (qt.shouldBeSkipped("stats12.q")) {
        return;
      }

      qt.cliInit("stats12.q", false);
      int ecode = qt.executeClient("stats12.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("stats12.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "stats12.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "stats12.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_stats13() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "stats13.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/stats13.q");

      if (qt.shouldBeSkipped("stats13.q")) {
        return;
      }

      qt.cliInit("stats13.q", false);
      int ecode = qt.executeClient("stats13.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("stats13.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "stats13.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "stats13.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_stats14() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "stats14.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/stats14.q");

      if (qt.shouldBeSkipped("stats14.q")) {
        return;
      }

      qt.cliInit("stats14.q", false);
      int ecode = qt.executeClient("stats14.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("stats14.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "stats14.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "stats14.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_stats15() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "stats15.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/stats15.q");

      if (qt.shouldBeSkipped("stats15.q")) {
        return;
      }

      qt.cliInit("stats15.q", false);
      int ecode = qt.executeClient("stats15.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("stats15.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "stats15.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "stats15.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_stats16() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "stats16.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/stats16.q");

      if (qt.shouldBeSkipped("stats16.q")) {
        return;
      }

      qt.cliInit("stats16.q", false);
      int ecode = qt.executeClient("stats16.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("stats16.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "stats16.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "stats16.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_stats18() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "stats18.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/stats18.q");

      if (qt.shouldBeSkipped("stats18.q")) {
        return;
      }

      qt.cliInit("stats18.q", false);
      int ecode = qt.executeClient("stats18.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("stats18.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "stats18.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "stats18.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_stats2() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "stats2.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/stats2.q");

      if (qt.shouldBeSkipped("stats2.q")) {
        return;
      }

      qt.cliInit("stats2.q", false);
      int ecode = qt.executeClient("stats2.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("stats2.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "stats2.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "stats2.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_stats3() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "stats3.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/stats3.q");

      if (qt.shouldBeSkipped("stats3.q")) {
        return;
      }

      qt.cliInit("stats3.q", false);
      int ecode = qt.executeClient("stats3.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("stats3.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "stats3.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "stats3.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_stats4() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "stats4.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/stats4.q");

      if (qt.shouldBeSkipped("stats4.q")) {
        return;
      }

      qt.cliInit("stats4.q", false);
      int ecode = qt.executeClient("stats4.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("stats4.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "stats4.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "stats4.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_stats5() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "stats5.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/stats5.q");

      if (qt.shouldBeSkipped("stats5.q")) {
        return;
      }

      qt.cliInit("stats5.q", false);
      int ecode = qt.executeClient("stats5.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("stats5.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "stats5.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "stats5.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_stats6() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "stats6.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/stats6.q");

      if (qt.shouldBeSkipped("stats6.q")) {
        return;
      }

      qt.cliInit("stats6.q", false);
      int ecode = qt.executeClient("stats6.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("stats6.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "stats6.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "stats6.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_stats7() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "stats7.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/stats7.q");

      if (qt.shouldBeSkipped("stats7.q")) {
        return;
      }

      qt.cliInit("stats7.q", false);
      int ecode = qt.executeClient("stats7.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("stats7.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "stats7.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "stats7.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_stats8() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "stats8.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/stats8.q");

      if (qt.shouldBeSkipped("stats8.q")) {
        return;
      }

      qt.cliInit("stats8.q", false);
      int ecode = qt.executeClient("stats8.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("stats8.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "stats8.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "stats8.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_stats9() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "stats9.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/stats9.q");

      if (qt.shouldBeSkipped("stats9.q")) {
        return;
      }

      qt.cliInit("stats9.q", false);
      int ecode = qt.executeClient("stats9.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("stats9.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "stats9.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "stats9.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_stats_aggregator_error_1() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "stats_aggregator_error_1.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/stats_aggregator_error_1.q");

      if (qt.shouldBeSkipped("stats_aggregator_error_1.q")) {
        return;
      }

      qt.cliInit("stats_aggregator_error_1.q", false);
      int ecode = qt.executeClient("stats_aggregator_error_1.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("stats_aggregator_error_1.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "stats_aggregator_error_1.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "stats_aggregator_error_1.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_stats_empty_dyn_part() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "stats_empty_dyn_part.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/stats_empty_dyn_part.q");

      if (qt.shouldBeSkipped("stats_empty_dyn_part.q")) {
        return;
      }

      qt.cliInit("stats_empty_dyn_part.q", false);
      int ecode = qt.executeClient("stats_empty_dyn_part.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("stats_empty_dyn_part.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "stats_empty_dyn_part.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "stats_empty_dyn_part.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_stats_empty_partition() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "stats_empty_partition.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/stats_empty_partition.q");

      if (qt.shouldBeSkipped("stats_empty_partition.q")) {
        return;
      }

      qt.cliInit("stats_empty_partition.q", false);
      int ecode = qt.executeClient("stats_empty_partition.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("stats_empty_partition.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "stats_empty_partition.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "stats_empty_partition.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_stats_publisher_error_1() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "stats_publisher_error_1.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/stats_publisher_error_1.q");

      if (qt.shouldBeSkipped("stats_publisher_error_1.q")) {
        return;
      }

      qt.cliInit("stats_publisher_error_1.q", false);
      int ecode = qt.executeClient("stats_publisher_error_1.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("stats_publisher_error_1.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "stats_publisher_error_1.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "stats_publisher_error_1.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_str_to_map() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "str_to_map.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/str_to_map.q");

      if (qt.shouldBeSkipped("str_to_map.q")) {
        return;
      }

      qt.cliInit("str_to_map.q", false);
      int ecode = qt.executeClient("str_to_map.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("str_to_map.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "str_to_map.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "str_to_map.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_subq() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "subq.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/subq.q");

      if (qt.shouldBeSkipped("subq.q")) {
        return;
      }

      qt.cliInit("subq.q", false);
      int ecode = qt.executeClient("subq.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("subq.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "subq.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "subq.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_subq2() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "subq2.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/subq2.q");

      if (qt.shouldBeSkipped("subq2.q")) {
        return;
      }

      qt.cliInit("subq2.q", false);
      int ecode = qt.executeClient("subq2.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("subq2.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "subq2.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "subq2.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_symlink_text_input_format() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "symlink_text_input_format.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/symlink_text_input_format.q");

      if (qt.shouldBeSkipped("symlink_text_input_format.q")) {
        return;
      }

      qt.cliInit("symlink_text_input_format.q", false);
      int ecode = qt.executeClient("symlink_text_input_format.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("symlink_text_input_format.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "symlink_text_input_format.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "symlink_text_input_format.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_table_access_keys_stats() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "table_access_keys_stats.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/table_access_keys_stats.q");

      if (qt.shouldBeSkipped("table_access_keys_stats.q")) {
        return;
      }

      qt.cliInit("table_access_keys_stats.q", false);
      int ecode = qt.executeClient("table_access_keys_stats.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("table_access_keys_stats.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "table_access_keys_stats.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "table_access_keys_stats.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_tablename_with_select() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "tablename_with_select.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/tablename_with_select.q");

      if (qt.shouldBeSkipped("tablename_with_select.q")) {
        return;
      }

      qt.cliInit("tablename_with_select.q", false);
      int ecode = qt.executeClient("tablename_with_select.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("tablename_with_select.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "tablename_with_select.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "tablename_with_select.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_timestamp_1() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "timestamp_1.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/timestamp_1.q");

      if (qt.shouldBeSkipped("timestamp_1.q")) {
        return;
      }

      qt.cliInit("timestamp_1.q", false);
      int ecode = qt.executeClient("timestamp_1.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("timestamp_1.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "timestamp_1.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "timestamp_1.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_timestamp_2() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "timestamp_2.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/timestamp_2.q");

      if (qt.shouldBeSkipped("timestamp_2.q")) {
        return;
      }

      qt.cliInit("timestamp_2.q", false);
      int ecode = qt.executeClient("timestamp_2.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("timestamp_2.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "timestamp_2.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "timestamp_2.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_timestamp_3() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "timestamp_3.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/timestamp_3.q");

      if (qt.shouldBeSkipped("timestamp_3.q")) {
        return;
      }

      qt.cliInit("timestamp_3.q", false);
      int ecode = qt.executeClient("timestamp_3.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("timestamp_3.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "timestamp_3.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "timestamp_3.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_timestamp_comparison() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "timestamp_comparison.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/timestamp_comparison.q");

      if (qt.shouldBeSkipped("timestamp_comparison.q")) {
        return;
      }

      qt.cliInit("timestamp_comparison.q", false);
      int ecode = qt.executeClient("timestamp_comparison.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("timestamp_comparison.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "timestamp_comparison.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "timestamp_comparison.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_timestamp_lazy() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "timestamp_lazy.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/timestamp_lazy.q");

      if (qt.shouldBeSkipped("timestamp_lazy.q")) {
        return;
      }

      qt.cliInit("timestamp_lazy.q", false);
      int ecode = qt.executeClient("timestamp_lazy.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("timestamp_lazy.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "timestamp_lazy.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "timestamp_lazy.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_timestamp_udf() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "timestamp_udf.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/timestamp_udf.q");

      if (qt.shouldBeSkipped("timestamp_udf.q")) {
        return;
      }

      qt.cliInit("timestamp_udf.q", false);
      int ecode = qt.executeClient("timestamp_udf.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("timestamp_udf.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "timestamp_udf.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "timestamp_udf.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_touch() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "touch.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/touch.q");

      if (qt.shouldBeSkipped("touch.q")) {
        return;
      }

      qt.cliInit("touch.q", false);
      int ecode = qt.executeClient("touch.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("touch.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "touch.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "touch.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_transform1() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "transform1.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/transform1.q");

      if (qt.shouldBeSkipped("transform1.q")) {
        return;
      }

      qt.cliInit("transform1.q", false);
      int ecode = qt.executeClient("transform1.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("transform1.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "transform1.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "transform1.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_transform2() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "transform2.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/transform2.q");

      if (qt.shouldBeSkipped("transform2.q")) {
        return;
      }

      qt.cliInit("transform2.q", false);
      int ecode = qt.executeClient("transform2.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("transform2.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "transform2.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "transform2.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_transform_ppr1() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "transform_ppr1.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/transform_ppr1.q");

      if (qt.shouldBeSkipped("transform_ppr1.q")) {
        return;
      }

      qt.cliInit("transform_ppr1.q", false);
      int ecode = qt.executeClient("transform_ppr1.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("transform_ppr1.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "transform_ppr1.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "transform_ppr1.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_transform_ppr2() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "transform_ppr2.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/transform_ppr2.q");

      if (qt.shouldBeSkipped("transform_ppr2.q")) {
        return;
      }

      qt.cliInit("transform_ppr2.q", false);
      int ecode = qt.executeClient("transform_ppr2.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("transform_ppr2.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "transform_ppr2.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "transform_ppr2.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_type_cast_1() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "type_cast_1.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/type_cast_1.q");

      if (qt.shouldBeSkipped("type_cast_1.q")) {
        return;
      }

      qt.cliInit("type_cast_1.q", false);
      int ecode = qt.executeClient("type_cast_1.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("type_cast_1.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "type_cast_1.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "type_cast_1.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_type_widening() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "type_widening.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/type_widening.q");

      if (qt.shouldBeSkipped("type_widening.q")) {
        return;
      }

      qt.cliInit("type_widening.q", false);
      int ecode = qt.executeClient("type_widening.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("type_widening.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "type_widening.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "type_widening.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udaf_collect_set() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udaf_collect_set.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udaf_collect_set.q");

      if (qt.shouldBeSkipped("udaf_collect_set.q")) {
        return;
      }

      qt.cliInit("udaf_collect_set.q", false);
      int ecode = qt.executeClient("udaf_collect_set.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udaf_collect_set.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udaf_collect_set.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udaf_collect_set.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udaf_context_ngrams() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udaf_context_ngrams.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udaf_context_ngrams.q");

      if (qt.shouldBeSkipped("udaf_context_ngrams.q")) {
        return;
      }

      qt.cliInit("udaf_context_ngrams.q", false);
      int ecode = qt.executeClient("udaf_context_ngrams.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udaf_context_ngrams.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udaf_context_ngrams.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udaf_context_ngrams.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udaf_corr() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udaf_corr.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udaf_corr.q");

      if (qt.shouldBeSkipped("udaf_corr.q")) {
        return;
      }

      qt.cliInit("udaf_corr.q", false);
      int ecode = qt.executeClient("udaf_corr.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udaf_corr.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udaf_corr.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udaf_corr.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udaf_covar_pop() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udaf_covar_pop.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udaf_covar_pop.q");

      if (qt.shouldBeSkipped("udaf_covar_pop.q")) {
        return;
      }

      qt.cliInit("udaf_covar_pop.q", false);
      int ecode = qt.executeClient("udaf_covar_pop.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udaf_covar_pop.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udaf_covar_pop.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udaf_covar_pop.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udaf_covar_samp() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udaf_covar_samp.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udaf_covar_samp.q");

      if (qt.shouldBeSkipped("udaf_covar_samp.q")) {
        return;
      }

      qt.cliInit("udaf_covar_samp.q", false);
      int ecode = qt.executeClient("udaf_covar_samp.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udaf_covar_samp.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udaf_covar_samp.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udaf_covar_samp.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udaf_histogram_numeric() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udaf_histogram_numeric.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udaf_histogram_numeric.q");

      if (qt.shouldBeSkipped("udaf_histogram_numeric.q")) {
        return;
      }

      qt.cliInit("udaf_histogram_numeric.q", false);
      int ecode = qt.executeClient("udaf_histogram_numeric.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udaf_histogram_numeric.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udaf_histogram_numeric.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udaf_histogram_numeric.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udaf_ngrams() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udaf_ngrams.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udaf_ngrams.q");

      if (qt.shouldBeSkipped("udaf_ngrams.q")) {
        return;
      }

      qt.cliInit("udaf_ngrams.q", false);
      int ecode = qt.executeClient("udaf_ngrams.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udaf_ngrams.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udaf_ngrams.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udaf_ngrams.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udaf_number_format() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udaf_number_format.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udaf_number_format.q");

      if (qt.shouldBeSkipped("udaf_number_format.q")) {
        return;
      }

      qt.cliInit("udaf_number_format.q", false);
      int ecode = qt.executeClient("udaf_number_format.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udaf_number_format.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udaf_number_format.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udaf_number_format.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udaf_percentile_approx() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udaf_percentile_approx.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udaf_percentile_approx.q");

      if (qt.shouldBeSkipped("udaf_percentile_approx.q")) {
        return;
      }

      qt.cliInit("udaf_percentile_approx.q", false);
      int ecode = qt.executeClient("udaf_percentile_approx.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udaf_percentile_approx.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udaf_percentile_approx.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udaf_percentile_approx.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf1() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf1.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf1.q");

      if (qt.shouldBeSkipped("udf1.q")) {
        return;
      }

      qt.cliInit("udf1.q", false);
      int ecode = qt.executeClient("udf1.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf1.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf1.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf1.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf2() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf2.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf2.q");

      if (qt.shouldBeSkipped("udf2.q")) {
        return;
      }

      qt.cliInit("udf2.q", false);
      int ecode = qt.executeClient("udf2.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf2.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf2.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf2.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf3() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf3.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf3.q");

      if (qt.shouldBeSkipped("udf3.q")) {
        return;
      }

      qt.cliInit("udf3.q", false);
      int ecode = qt.executeClient("udf3.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf3.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf3.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf3.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf4() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf4.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf4.q");

      if (qt.shouldBeSkipped("udf4.q")) {
        return;
      }

      qt.cliInit("udf4.q", false);
      int ecode = qt.executeClient("udf4.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf4.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf4.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf4.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf5() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf5.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf5.q");

      if (qt.shouldBeSkipped("udf5.q")) {
        return;
      }

      qt.cliInit("udf5.q", false);
      int ecode = qt.executeClient("udf5.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf5.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf5.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf5.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf6() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf6.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf6.q");

      if (qt.shouldBeSkipped("udf6.q")) {
        return;
      }

      qt.cliInit("udf6.q", false);
      int ecode = qt.executeClient("udf6.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf6.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf6.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf6.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf7() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf7.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf7.q");

      if (qt.shouldBeSkipped("udf7.q")) {
        return;
      }

      qt.cliInit("udf7.q", false);
      int ecode = qt.executeClient("udf7.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf7.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf7.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf7.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf8() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf8.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf8.q");

      if (qt.shouldBeSkipped("udf8.q")) {
        return;
      }

      qt.cliInit("udf8.q", false);
      int ecode = qt.executeClient("udf8.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf8.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf8.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf8.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf9() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf9.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf9.q");

      if (qt.shouldBeSkipped("udf9.q")) {
        return;
      }

      qt.cliInit("udf9.q", false);
      int ecode = qt.executeClient("udf9.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf9.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf9.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf9.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_10_trims() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_10_trims.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_10_trims.q");

      if (qt.shouldBeSkipped("udf_10_trims.q")) {
        return;
      }

      qt.cliInit("udf_10_trims.q", false);
      int ecode = qt.executeClient("udf_10_trims.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_10_trims.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_10_trims.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_10_trims.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_E() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_E.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_E.q");

      if (qt.shouldBeSkipped("udf_E.q")) {
        return;
      }

      qt.cliInit("udf_E.q", false);
      int ecode = qt.executeClient("udf_E.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_E.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_E.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_E.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_PI() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_PI.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_PI.q");

      if (qt.shouldBeSkipped("udf_PI.q")) {
        return;
      }

      qt.cliInit("udf_PI.q", false);
      int ecode = qt.executeClient("udf_PI.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_PI.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_PI.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_PI.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_abs() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_abs.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_abs.q");

      if (qt.shouldBeSkipped("udf_abs.q")) {
        return;
      }

      qt.cliInit("udf_abs.q", false);
      int ecode = qt.executeClient("udf_abs.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_abs.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_abs.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_abs.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_acos() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_acos.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_acos.q");

      if (qt.shouldBeSkipped("udf_acos.q")) {
        return;
      }

      qt.cliInit("udf_acos.q", false);
      int ecode = qt.executeClient("udf_acos.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_acos.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_acos.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_acos.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_add() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_add.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_add.q");

      if (qt.shouldBeSkipped("udf_add.q")) {
        return;
      }

      qt.cliInit("udf_add.q", false);
      int ecode = qt.executeClient("udf_add.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_add.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_add.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_add.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_array() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_array.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_array.q");

      if (qt.shouldBeSkipped("udf_array.q")) {
        return;
      }

      qt.cliInit("udf_array.q", false);
      int ecode = qt.executeClient("udf_array.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_array.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_array.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_array.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_array_contains() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_array_contains.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_array_contains.q");

      if (qt.shouldBeSkipped("udf_array_contains.q")) {
        return;
      }

      qt.cliInit("udf_array_contains.q", false);
      int ecode = qt.executeClient("udf_array_contains.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_array_contains.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_array_contains.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_array_contains.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_ascii() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_ascii.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_ascii.q");

      if (qt.shouldBeSkipped("udf_ascii.q")) {
        return;
      }

      qt.cliInit("udf_ascii.q", false);
      int ecode = qt.executeClient("udf_ascii.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_ascii.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_ascii.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_ascii.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_asin() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_asin.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_asin.q");

      if (qt.shouldBeSkipped("udf_asin.q")) {
        return;
      }

      qt.cliInit("udf_asin.q", false);
      int ecode = qt.executeClient("udf_asin.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_asin.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_asin.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_asin.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_atan() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_atan.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_atan.q");

      if (qt.shouldBeSkipped("udf_atan.q")) {
        return;
      }

      qt.cliInit("udf_atan.q", false);
      int ecode = qt.executeClient("udf_atan.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_atan.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_atan.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_atan.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_avg() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_avg.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_avg.q");

      if (qt.shouldBeSkipped("udf_avg.q")) {
        return;
      }

      qt.cliInit("udf_avg.q", false);
      int ecode = qt.executeClient("udf_avg.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_avg.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_avg.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_avg.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_between() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_between.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_between.q");

      if (qt.shouldBeSkipped("udf_between.q")) {
        return;
      }

      qt.cliInit("udf_between.q", false);
      int ecode = qt.executeClient("udf_between.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_between.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_between.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_between.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_bigint() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_bigint.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_bigint.q");

      if (qt.shouldBeSkipped("udf_bigint.q")) {
        return;
      }

      qt.cliInit("udf_bigint.q", false);
      int ecode = qt.executeClient("udf_bigint.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_bigint.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_bigint.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_bigint.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_bin() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_bin.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_bin.q");

      if (qt.shouldBeSkipped("udf_bin.q")) {
        return;
      }

      qt.cliInit("udf_bin.q", false);
      int ecode = qt.executeClient("udf_bin.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_bin.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_bin.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_bin.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_bitmap_and() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_bitmap_and.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_bitmap_and.q");

      if (qt.shouldBeSkipped("udf_bitmap_and.q")) {
        return;
      }

      qt.cliInit("udf_bitmap_and.q", false);
      int ecode = qt.executeClient("udf_bitmap_and.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_bitmap_and.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_bitmap_and.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_bitmap_and.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_bitmap_empty() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_bitmap_empty.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_bitmap_empty.q");

      if (qt.shouldBeSkipped("udf_bitmap_empty.q")) {
        return;
      }

      qt.cliInit("udf_bitmap_empty.q", false);
      int ecode = qt.executeClient("udf_bitmap_empty.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_bitmap_empty.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_bitmap_empty.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_bitmap_empty.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_bitmap_or() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_bitmap_or.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_bitmap_or.q");

      if (qt.shouldBeSkipped("udf_bitmap_or.q")) {
        return;
      }

      qt.cliInit("udf_bitmap_or.q", false);
      int ecode = qt.executeClient("udf_bitmap_or.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_bitmap_or.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_bitmap_or.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_bitmap_or.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_bitwise_and() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_bitwise_and.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_bitwise_and.q");

      if (qt.shouldBeSkipped("udf_bitwise_and.q")) {
        return;
      }

      qt.cliInit("udf_bitwise_and.q", false);
      int ecode = qt.executeClient("udf_bitwise_and.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_bitwise_and.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_bitwise_and.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_bitwise_and.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_bitwise_not() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_bitwise_not.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_bitwise_not.q");

      if (qt.shouldBeSkipped("udf_bitwise_not.q")) {
        return;
      }

      qt.cliInit("udf_bitwise_not.q", false);
      int ecode = qt.executeClient("udf_bitwise_not.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_bitwise_not.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_bitwise_not.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_bitwise_not.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_bitwise_or() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_bitwise_or.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_bitwise_or.q");

      if (qt.shouldBeSkipped("udf_bitwise_or.q")) {
        return;
      }

      qt.cliInit("udf_bitwise_or.q", false);
      int ecode = qt.executeClient("udf_bitwise_or.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_bitwise_or.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_bitwise_or.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_bitwise_or.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_bitwise_xor() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_bitwise_xor.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_bitwise_xor.q");

      if (qt.shouldBeSkipped("udf_bitwise_xor.q")) {
        return;
      }

      qt.cliInit("udf_bitwise_xor.q", false);
      int ecode = qt.executeClient("udf_bitwise_xor.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_bitwise_xor.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_bitwise_xor.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_bitwise_xor.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_boolean() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_boolean.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_boolean.q");

      if (qt.shouldBeSkipped("udf_boolean.q")) {
        return;
      }

      qt.cliInit("udf_boolean.q", false);
      int ecode = qt.executeClient("udf_boolean.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_boolean.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_boolean.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_boolean.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_case() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_case.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_case.q");

      if (qt.shouldBeSkipped("udf_case.q")) {
        return;
      }

      qt.cliInit("udf_case.q", false);
      int ecode = qt.executeClient("udf_case.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_case.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_case.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_case.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_case_column_pruning() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_case_column_pruning.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_case_column_pruning.q");

      if (qt.shouldBeSkipped("udf_case_column_pruning.q")) {
        return;
      }

      qt.cliInit("udf_case_column_pruning.q", false);
      int ecode = qt.executeClient("udf_case_column_pruning.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_case_column_pruning.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_case_column_pruning.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_case_column_pruning.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_case_thrift() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_case_thrift.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_case_thrift.q");

      if (qt.shouldBeSkipped("udf_case_thrift.q")) {
        return;
      }

      qt.cliInit("udf_case_thrift.q", false);
      int ecode = qt.executeClient("udf_case_thrift.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_case_thrift.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_case_thrift.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_case_thrift.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_ceil() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_ceil.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_ceil.q");

      if (qt.shouldBeSkipped("udf_ceil.q")) {
        return;
      }

      qt.cliInit("udf_ceil.q", false);
      int ecode = qt.executeClient("udf_ceil.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_ceil.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_ceil.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_ceil.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_ceiling() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_ceiling.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_ceiling.q");

      if (qt.shouldBeSkipped("udf_ceiling.q")) {
        return;
      }

      qt.cliInit("udf_ceiling.q", false);
      int ecode = qt.executeClient("udf_ceiling.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_ceiling.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_ceiling.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_ceiling.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_coalesce() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_coalesce.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_coalesce.q");

      if (qt.shouldBeSkipped("udf_coalesce.q")) {
        return;
      }

      qt.cliInit("udf_coalesce.q", false);
      int ecode = qt.executeClient("udf_coalesce.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_coalesce.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_coalesce.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_coalesce.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_compare_java_string() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_compare_java_string.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_compare_java_string.q");

      if (qt.shouldBeSkipped("udf_compare_java_string.q")) {
        return;
      }

      qt.cliInit("udf_compare_java_string.q", false);
      int ecode = qt.executeClient("udf_compare_java_string.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_compare_java_string.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_compare_java_string.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_compare_java_string.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_concat() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_concat.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_concat.q");

      if (qt.shouldBeSkipped("udf_concat.q")) {
        return;
      }

      qt.cliInit("udf_concat.q", false);
      int ecode = qt.executeClient("udf_concat.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_concat.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_concat.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_concat.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_concat_insert1() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_concat_insert1.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_concat_insert1.q");

      if (qt.shouldBeSkipped("udf_concat_insert1.q")) {
        return;
      }

      qt.cliInit("udf_concat_insert1.q", false);
      int ecode = qt.executeClient("udf_concat_insert1.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_concat_insert1.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_concat_insert1.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_concat_insert1.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_concat_insert2() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_concat_insert2.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_concat_insert2.q");

      if (qt.shouldBeSkipped("udf_concat_insert2.q")) {
        return;
      }

      qt.cliInit("udf_concat_insert2.q", false);
      int ecode = qt.executeClient("udf_concat_insert2.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_concat_insert2.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_concat_insert2.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_concat_insert2.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_concat_ws() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_concat_ws.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_concat_ws.q");

      if (qt.shouldBeSkipped("udf_concat_ws.q")) {
        return;
      }

      qt.cliInit("udf_concat_ws.q", false);
      int ecode = qt.executeClient("udf_concat_ws.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_concat_ws.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_concat_ws.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_concat_ws.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_conv() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_conv.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_conv.q");

      if (qt.shouldBeSkipped("udf_conv.q")) {
        return;
      }

      qt.cliInit("udf_conv.q", false);
      int ecode = qt.executeClient("udf_conv.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_conv.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_conv.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_conv.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_cos() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_cos.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_cos.q");

      if (qt.shouldBeSkipped("udf_cos.q")) {
        return;
      }

      qt.cliInit("udf_cos.q", false);
      int ecode = qt.executeClient("udf_cos.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_cos.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_cos.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_cos.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_count() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_count.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_count.q");

      if (qt.shouldBeSkipped("udf_count.q")) {
        return;
      }

      qt.cliInit("udf_count.q", false);
      int ecode = qt.executeClient("udf_count.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_count.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_count.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_count.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_date_add() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_date_add.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_date_add.q");

      if (qt.shouldBeSkipped("udf_date_add.q")) {
        return;
      }

      qt.cliInit("udf_date_add.q", false);
      int ecode = qt.executeClient("udf_date_add.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_date_add.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_date_add.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_date_add.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_date_sub() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_date_sub.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_date_sub.q");

      if (qt.shouldBeSkipped("udf_date_sub.q")) {
        return;
      }

      qt.cliInit("udf_date_sub.q", false);
      int ecode = qt.executeClient("udf_date_sub.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_date_sub.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_date_sub.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_date_sub.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_datediff() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_datediff.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_datediff.q");

      if (qt.shouldBeSkipped("udf_datediff.q")) {
        return;
      }

      qt.cliInit("udf_datediff.q", false);
      int ecode = qt.executeClient("udf_datediff.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_datediff.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_datediff.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_datediff.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_day() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_day.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_day.q");

      if (qt.shouldBeSkipped("udf_day.q")) {
        return;
      }

      qt.cliInit("udf_day.q", false);
      int ecode = qt.executeClient("udf_day.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_day.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_day.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_day.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_dayofmonth() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_dayofmonth.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_dayofmonth.q");

      if (qt.shouldBeSkipped("udf_dayofmonth.q")) {
        return;
      }

      qt.cliInit("udf_dayofmonth.q", false);
      int ecode = qt.executeClient("udf_dayofmonth.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_dayofmonth.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_dayofmonth.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_dayofmonth.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_degrees() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_degrees.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_degrees.q");

      if (qt.shouldBeSkipped("udf_degrees.q")) {
        return;
      }

      qt.cliInit("udf_degrees.q", false);
      int ecode = qt.executeClient("udf_degrees.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_degrees.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_degrees.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_degrees.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_div() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_div.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_div.q");

      if (qt.shouldBeSkipped("udf_div.q")) {
        return;
      }

      qt.cliInit("udf_div.q", false);
      int ecode = qt.executeClient("udf_div.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_div.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_div.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_div.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_divide() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_divide.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_divide.q");

      if (qt.shouldBeSkipped("udf_divide.q")) {
        return;
      }

      qt.cliInit("udf_divide.q", false);
      int ecode = qt.executeClient("udf_divide.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_divide.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_divide.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_divide.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_double() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_double.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_double.q");

      if (qt.shouldBeSkipped("udf_double.q")) {
        return;
      }

      qt.cliInit("udf_double.q", false);
      int ecode = qt.executeClient("udf_double.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_double.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_double.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_double.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_elt() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_elt.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_elt.q");

      if (qt.shouldBeSkipped("udf_elt.q")) {
        return;
      }

      qt.cliInit("udf_elt.q", false);
      int ecode = qt.executeClient("udf_elt.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_elt.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_elt.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_elt.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_equal() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_equal.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_equal.q");

      if (qt.shouldBeSkipped("udf_equal.q")) {
        return;
      }

      qt.cliInit("udf_equal.q", false);
      int ecode = qt.executeClient("udf_equal.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_equal.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_equal.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_equal.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_exp() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_exp.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_exp.q");

      if (qt.shouldBeSkipped("udf_exp.q")) {
        return;
      }

      qt.cliInit("udf_exp.q", false);
      int ecode = qt.executeClient("udf_exp.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_exp.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_exp.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_exp.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_explode() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_explode.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_explode.q");

      if (qt.shouldBeSkipped("udf_explode.q")) {
        return;
      }

      qt.cliInit("udf_explode.q", false);
      int ecode = qt.executeClient("udf_explode.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_explode.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_explode.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_explode.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_field() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_field.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_field.q");

      if (qt.shouldBeSkipped("udf_field.q")) {
        return;
      }

      qt.cliInit("udf_field.q", false);
      int ecode = qt.executeClient("udf_field.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_field.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_field.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_field.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_find_in_set() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_find_in_set.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_find_in_set.q");

      if (qt.shouldBeSkipped("udf_find_in_set.q")) {
        return;
      }

      qt.cliInit("udf_find_in_set.q", false);
      int ecode = qt.executeClient("udf_find_in_set.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_find_in_set.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_find_in_set.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_find_in_set.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_float() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_float.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_float.q");

      if (qt.shouldBeSkipped("udf_float.q")) {
        return;
      }

      qt.cliInit("udf_float.q", false);
      int ecode = qt.executeClient("udf_float.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_float.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_float.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_float.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_floor() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_floor.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_floor.q");

      if (qt.shouldBeSkipped("udf_floor.q")) {
        return;
      }

      qt.cliInit("udf_floor.q", false);
      int ecode = qt.executeClient("udf_floor.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_floor.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_floor.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_floor.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_format_number() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_format_number.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_format_number.q");

      if (qt.shouldBeSkipped("udf_format_number.q")) {
        return;
      }

      qt.cliInit("udf_format_number.q", false);
      int ecode = qt.executeClient("udf_format_number.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_format_number.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_format_number.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_format_number.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_from_unixtime() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_from_unixtime.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_from_unixtime.q");

      if (qt.shouldBeSkipped("udf_from_unixtime.q")) {
        return;
      }

      qt.cliInit("udf_from_unixtime.q", false);
      int ecode = qt.executeClient("udf_from_unixtime.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_from_unixtime.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_from_unixtime.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_from_unixtime.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_get_json_object() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_get_json_object.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_get_json_object.q");

      if (qt.shouldBeSkipped("udf_get_json_object.q")) {
        return;
      }

      qt.cliInit("udf_get_json_object.q", false);
      int ecode = qt.executeClient("udf_get_json_object.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_get_json_object.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_get_json_object.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_get_json_object.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_greaterthan() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_greaterthan.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_greaterthan.q");

      if (qt.shouldBeSkipped("udf_greaterthan.q")) {
        return;
      }

      qt.cliInit("udf_greaterthan.q", false);
      int ecode = qt.executeClient("udf_greaterthan.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_greaterthan.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_greaterthan.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_greaterthan.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_greaterthanorequal() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_greaterthanorequal.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_greaterthanorequal.q");

      if (qt.shouldBeSkipped("udf_greaterthanorequal.q")) {
        return;
      }

      qt.cliInit("udf_greaterthanorequal.q", false);
      int ecode = qt.executeClient("udf_greaterthanorequal.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_greaterthanorequal.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_greaterthanorequal.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_greaterthanorequal.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_hash() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_hash.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_hash.q");

      if (qt.shouldBeSkipped("udf_hash.q")) {
        return;
      }

      qt.cliInit("udf_hash.q", false);
      int ecode = qt.executeClient("udf_hash.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_hash.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_hash.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_hash.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_hex() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_hex.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_hex.q");

      if (qt.shouldBeSkipped("udf_hex.q")) {
        return;
      }

      qt.cliInit("udf_hex.q", false);
      int ecode = qt.executeClient("udf_hex.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_hex.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_hex.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_hex.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_hour() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_hour.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_hour.q");

      if (qt.shouldBeSkipped("udf_hour.q")) {
        return;
      }

      qt.cliInit("udf_hour.q", false);
      int ecode = qt.executeClient("udf_hour.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_hour.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_hour.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_hour.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_if() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_if.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_if.q");

      if (qt.shouldBeSkipped("udf_if.q")) {
        return;
      }

      qt.cliInit("udf_if.q", false);
      int ecode = qt.executeClient("udf_if.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_if.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_if.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_if.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_in() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_in.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_in.q");

      if (qt.shouldBeSkipped("udf_in.q")) {
        return;
      }

      qt.cliInit("udf_in.q", false);
      int ecode = qt.executeClient("udf_in.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_in.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_in.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_in.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_in_file() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_in_file.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_in_file.q");

      if (qt.shouldBeSkipped("udf_in_file.q")) {
        return;
      }

      qt.cliInit("udf_in_file.q", false);
      int ecode = qt.executeClient("udf_in_file.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_in_file.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_in_file.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_in_file.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_index() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_index.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_index.q");

      if (qt.shouldBeSkipped("udf_index.q")) {
        return;
      }

      qt.cliInit("udf_index.q", false);
      int ecode = qt.executeClient("udf_index.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_index.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_index.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_index.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_inline() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_inline.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_inline.q");

      if (qt.shouldBeSkipped("udf_inline.q")) {
        return;
      }

      qt.cliInit("udf_inline.q", false);
      int ecode = qt.executeClient("udf_inline.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_inline.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_inline.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_inline.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_instr() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_instr.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_instr.q");

      if (qt.shouldBeSkipped("udf_instr.q")) {
        return;
      }

      qt.cliInit("udf_instr.q", false);
      int ecode = qt.executeClient("udf_instr.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_instr.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_instr.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_instr.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_int() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_int.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_int.q");

      if (qt.shouldBeSkipped("udf_int.q")) {
        return;
      }

      qt.cliInit("udf_int.q", false);
      int ecode = qt.executeClient("udf_int.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_int.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_int.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_int.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_isnotnull() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_isnotnull.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_isnotnull.q");

      if (qt.shouldBeSkipped("udf_isnotnull.q")) {
        return;
      }

      qt.cliInit("udf_isnotnull.q", false);
      int ecode = qt.executeClient("udf_isnotnull.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_isnotnull.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_isnotnull.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_isnotnull.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_isnull() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_isnull.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_isnull.q");

      if (qt.shouldBeSkipped("udf_isnull.q")) {
        return;
      }

      qt.cliInit("udf_isnull.q", false);
      int ecode = qt.executeClient("udf_isnull.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_isnull.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_isnull.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_isnull.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_isnull_isnotnull() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_isnull_isnotnull.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_isnull_isnotnull.q");

      if (qt.shouldBeSkipped("udf_isnull_isnotnull.q")) {
        return;
      }

      qt.cliInit("udf_isnull_isnotnull.q", false);
      int ecode = qt.executeClient("udf_isnull_isnotnull.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_isnull_isnotnull.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_isnull_isnotnull.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_isnull_isnotnull.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_java_method() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_java_method.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_java_method.q");

      if (qt.shouldBeSkipped("udf_java_method.q")) {
        return;
      }

      qt.cliInit("udf_java_method.q", false);
      int ecode = qt.executeClient("udf_java_method.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_java_method.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_java_method.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_java_method.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_lcase() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_lcase.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_lcase.q");

      if (qt.shouldBeSkipped("udf_lcase.q")) {
        return;
      }

      qt.cliInit("udf_lcase.q", false);
      int ecode = qt.executeClient("udf_lcase.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_lcase.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_lcase.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_lcase.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_length() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_length.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_length.q");

      if (qt.shouldBeSkipped("udf_length.q")) {
        return;
      }

      qt.cliInit("udf_length.q", false);
      int ecode = qt.executeClient("udf_length.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_length.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_length.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_length.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_lessthan() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_lessthan.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_lessthan.q");

      if (qt.shouldBeSkipped("udf_lessthan.q")) {
        return;
      }

      qt.cliInit("udf_lessthan.q", false);
      int ecode = qt.executeClient("udf_lessthan.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_lessthan.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_lessthan.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_lessthan.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_lessthanorequal() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_lessthanorequal.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_lessthanorequal.q");

      if (qt.shouldBeSkipped("udf_lessthanorequal.q")) {
        return;
      }

      qt.cliInit("udf_lessthanorequal.q", false);
      int ecode = qt.executeClient("udf_lessthanorequal.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_lessthanorequal.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_lessthanorequal.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_lessthanorequal.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_like() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_like.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_like.q");

      if (qt.shouldBeSkipped("udf_like.q")) {
        return;
      }

      qt.cliInit("udf_like.q", false);
      int ecode = qt.executeClient("udf_like.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_like.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_like.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_like.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_ln() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_ln.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_ln.q");

      if (qt.shouldBeSkipped("udf_ln.q")) {
        return;
      }

      qt.cliInit("udf_ln.q", false);
      int ecode = qt.executeClient("udf_ln.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_ln.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_ln.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_ln.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_locate() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_locate.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_locate.q");

      if (qt.shouldBeSkipped("udf_locate.q")) {
        return;
      }

      qt.cliInit("udf_locate.q", false);
      int ecode = qt.executeClient("udf_locate.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_locate.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_locate.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_locate.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_log() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_log.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_log.q");

      if (qt.shouldBeSkipped("udf_log.q")) {
        return;
      }

      qt.cliInit("udf_log.q", false);
      int ecode = qt.executeClient("udf_log.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_log.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_log.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_log.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_log10() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_log10.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_log10.q");

      if (qt.shouldBeSkipped("udf_log10.q")) {
        return;
      }

      qt.cliInit("udf_log10.q", false);
      int ecode = qt.executeClient("udf_log10.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_log10.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_log10.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_log10.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_log2() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_log2.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_log2.q");

      if (qt.shouldBeSkipped("udf_log2.q")) {
        return;
      }

      qt.cliInit("udf_log2.q", false);
      int ecode = qt.executeClient("udf_log2.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_log2.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_log2.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_log2.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_logic_java_boolean() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_logic_java_boolean.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_logic_java_boolean.q");

      if (qt.shouldBeSkipped("udf_logic_java_boolean.q")) {
        return;
      }

      qt.cliInit("udf_logic_java_boolean.q", false);
      int ecode = qt.executeClient("udf_logic_java_boolean.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_logic_java_boolean.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_logic_java_boolean.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_logic_java_boolean.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_lower() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_lower.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_lower.q");

      if (qt.shouldBeSkipped("udf_lower.q")) {
        return;
      }

      qt.cliInit("udf_lower.q", false);
      int ecode = qt.executeClient("udf_lower.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_lower.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_lower.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_lower.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_lpad() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_lpad.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_lpad.q");

      if (qt.shouldBeSkipped("udf_lpad.q")) {
        return;
      }

      qt.cliInit("udf_lpad.q", false);
      int ecode = qt.executeClient("udf_lpad.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_lpad.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_lpad.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_lpad.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_ltrim() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_ltrim.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_ltrim.q");

      if (qt.shouldBeSkipped("udf_ltrim.q")) {
        return;
      }

      qt.cliInit("udf_ltrim.q", false);
      int ecode = qt.executeClient("udf_ltrim.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_ltrim.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_ltrim.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_ltrim.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_map() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_map.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_map.q");

      if (qt.shouldBeSkipped("udf_map.q")) {
        return;
      }

      qt.cliInit("udf_map.q", false);
      int ecode = qt.executeClient("udf_map.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_map.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_map.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_map.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_map_keys() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_map_keys.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_map_keys.q");

      if (qt.shouldBeSkipped("udf_map_keys.q")) {
        return;
      }

      qt.cliInit("udf_map_keys.q", false);
      int ecode = qt.executeClient("udf_map_keys.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_map_keys.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_map_keys.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_map_keys.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_map_values() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_map_values.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_map_values.q");

      if (qt.shouldBeSkipped("udf_map_values.q")) {
        return;
      }

      qt.cliInit("udf_map_values.q", false);
      int ecode = qt.executeClient("udf_map_values.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_map_values.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_map_values.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_map_values.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_max() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_max.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_max.q");

      if (qt.shouldBeSkipped("udf_max.q")) {
        return;
      }

      qt.cliInit("udf_max.q", false);
      int ecode = qt.executeClient("udf_max.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_max.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_max.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_max.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_min() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_min.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_min.q");

      if (qt.shouldBeSkipped("udf_min.q")) {
        return;
      }

      qt.cliInit("udf_min.q", false);
      int ecode = qt.executeClient("udf_min.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_min.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_min.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_min.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_minute() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_minute.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_minute.q");

      if (qt.shouldBeSkipped("udf_minute.q")) {
        return;
      }

      qt.cliInit("udf_minute.q", false);
      int ecode = qt.executeClient("udf_minute.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_minute.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_minute.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_minute.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_modulo() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_modulo.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_modulo.q");

      if (qt.shouldBeSkipped("udf_modulo.q")) {
        return;
      }

      qt.cliInit("udf_modulo.q", false);
      int ecode = qt.executeClient("udf_modulo.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_modulo.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_modulo.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_modulo.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_month() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_month.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_month.q");

      if (qt.shouldBeSkipped("udf_month.q")) {
        return;
      }

      qt.cliInit("udf_month.q", false);
      int ecode = qt.executeClient("udf_month.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_month.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_month.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_month.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_named_struct() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_named_struct.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_named_struct.q");

      if (qt.shouldBeSkipped("udf_named_struct.q")) {
        return;
      }

      qt.cliInit("udf_named_struct.q", false);
      int ecode = qt.executeClient("udf_named_struct.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_named_struct.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_named_struct.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_named_struct.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_negative() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_negative.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_negative.q");

      if (qt.shouldBeSkipped("udf_negative.q")) {
        return;
      }

      qt.cliInit("udf_negative.q", false);
      int ecode = qt.executeClient("udf_negative.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_negative.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_negative.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_negative.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_not() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_not.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_not.q");

      if (qt.shouldBeSkipped("udf_not.q")) {
        return;
      }

      qt.cliInit("udf_not.q", false);
      int ecode = qt.executeClient("udf_not.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_not.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_not.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_not.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_notequal() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_notequal.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_notequal.q");

      if (qt.shouldBeSkipped("udf_notequal.q")) {
        return;
      }

      qt.cliInit("udf_notequal.q", false);
      int ecode = qt.executeClient("udf_notequal.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_notequal.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_notequal.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_notequal.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_notop() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_notop.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_notop.q");

      if (qt.shouldBeSkipped("udf_notop.q")) {
        return;
      }

      qt.cliInit("udf_notop.q", false);
      int ecode = qt.executeClient("udf_notop.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_notop.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_notop.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_notop.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_or() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_or.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_or.q");

      if (qt.shouldBeSkipped("udf_or.q")) {
        return;
      }

      qt.cliInit("udf_or.q", false);
      int ecode = qt.executeClient("udf_or.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_or.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_or.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_or.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_parse_url() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_parse_url.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_parse_url.q");

      if (qt.shouldBeSkipped("udf_parse_url.q")) {
        return;
      }

      qt.cliInit("udf_parse_url.q", false);
      int ecode = qt.executeClient("udf_parse_url.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_parse_url.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_parse_url.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_parse_url.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_percentile() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_percentile.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_percentile.q");

      if (qt.shouldBeSkipped("udf_percentile.q")) {
        return;
      }

      qt.cliInit("udf_percentile.q", false);
      int ecode = qt.executeClient("udf_percentile.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_percentile.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_percentile.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_percentile.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_pmod() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_pmod.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_pmod.q");

      if (qt.shouldBeSkipped("udf_pmod.q")) {
        return;
      }

      qt.cliInit("udf_pmod.q", false);
      int ecode = qt.executeClient("udf_pmod.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_pmod.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_pmod.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_pmod.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_positive() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_positive.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_positive.q");

      if (qt.shouldBeSkipped("udf_positive.q")) {
        return;
      }

      qt.cliInit("udf_positive.q", false);
      int ecode = qt.executeClient("udf_positive.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_positive.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_positive.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_positive.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_pow() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_pow.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_pow.q");

      if (qt.shouldBeSkipped("udf_pow.q")) {
        return;
      }

      qt.cliInit("udf_pow.q", false);
      int ecode = qt.executeClient("udf_pow.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_pow.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_pow.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_pow.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_power() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_power.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_power.q");

      if (qt.shouldBeSkipped("udf_power.q")) {
        return;
      }

      qt.cliInit("udf_power.q", false);
      int ecode = qt.executeClient("udf_power.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_power.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_power.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_power.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_printf() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_printf.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_printf.q");

      if (qt.shouldBeSkipped("udf_printf.q")) {
        return;
      }

      qt.cliInit("udf_printf.q", false);
      int ecode = qt.executeClient("udf_printf.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_printf.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_printf.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_printf.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_radians() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_radians.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_radians.q");

      if (qt.shouldBeSkipped("udf_radians.q")) {
        return;
      }

      qt.cliInit("udf_radians.q", false);
      int ecode = qt.executeClient("udf_radians.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_radians.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_radians.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_radians.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_rand() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_rand.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_rand.q");

      if (qt.shouldBeSkipped("udf_rand.q")) {
        return;
      }

      qt.cliInit("udf_rand.q", false);
      int ecode = qt.executeClient("udf_rand.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_rand.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_rand.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_rand.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_reflect() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_reflect.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_reflect.q");

      if (qt.shouldBeSkipped("udf_reflect.q")) {
        return;
      }

      qt.cliInit("udf_reflect.q", false);
      int ecode = qt.executeClient("udf_reflect.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_reflect.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_reflect.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_reflect.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_regexp() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_regexp.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_regexp.q");

      if (qt.shouldBeSkipped("udf_regexp.q")) {
        return;
      }

      qt.cliInit("udf_regexp.q", false);
      int ecode = qt.executeClient("udf_regexp.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_regexp.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_regexp.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_regexp.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_regexp_extract() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_regexp_extract.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_regexp_extract.q");

      if (qt.shouldBeSkipped("udf_regexp_extract.q")) {
        return;
      }

      qt.cliInit("udf_regexp_extract.q", false);
      int ecode = qt.executeClient("udf_regexp_extract.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_regexp_extract.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_regexp_extract.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_regexp_extract.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_regexp_replace() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_regexp_replace.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_regexp_replace.q");

      if (qt.shouldBeSkipped("udf_regexp_replace.q")) {
        return;
      }

      qt.cliInit("udf_regexp_replace.q", false);
      int ecode = qt.executeClient("udf_regexp_replace.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_regexp_replace.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_regexp_replace.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_regexp_replace.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_repeat() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_repeat.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_repeat.q");

      if (qt.shouldBeSkipped("udf_repeat.q")) {
        return;
      }

      qt.cliInit("udf_repeat.q", false);
      int ecode = qt.executeClient("udf_repeat.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_repeat.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_repeat.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_repeat.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_reverse() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_reverse.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_reverse.q");

      if (qt.shouldBeSkipped("udf_reverse.q")) {
        return;
      }

      qt.cliInit("udf_reverse.q", false);
      int ecode = qt.executeClient("udf_reverse.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_reverse.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_reverse.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_reverse.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_rlike() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_rlike.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_rlike.q");

      if (qt.shouldBeSkipped("udf_rlike.q")) {
        return;
      }

      qt.cliInit("udf_rlike.q", false);
      int ecode = qt.executeClient("udf_rlike.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_rlike.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_rlike.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_rlike.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_round() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_round.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_round.q");

      if (qt.shouldBeSkipped("udf_round.q")) {
        return;
      }

      qt.cliInit("udf_round.q", false);
      int ecode = qt.executeClient("udf_round.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_round.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_round.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_round.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_round_2() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_round_2.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_round_2.q");

      if (qt.shouldBeSkipped("udf_round_2.q")) {
        return;
      }

      qt.cliInit("udf_round_2.q", false);
      int ecode = qt.executeClient("udf_round_2.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_round_2.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_round_2.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_round_2.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_rpad() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_rpad.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_rpad.q");

      if (qt.shouldBeSkipped("udf_rpad.q")) {
        return;
      }

      qt.cliInit("udf_rpad.q", false);
      int ecode = qt.executeClient("udf_rpad.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_rpad.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_rpad.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_rpad.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_rtrim() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_rtrim.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_rtrim.q");

      if (qt.shouldBeSkipped("udf_rtrim.q")) {
        return;
      }

      qt.cliInit("udf_rtrim.q", false);
      int ecode = qt.executeClient("udf_rtrim.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_rtrim.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_rtrim.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_rtrim.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_second() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_second.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_second.q");

      if (qt.shouldBeSkipped("udf_second.q")) {
        return;
      }

      qt.cliInit("udf_second.q", false);
      int ecode = qt.executeClient("udf_second.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_second.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_second.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_second.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_sentences() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_sentences.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_sentences.q");

      if (qt.shouldBeSkipped("udf_sentences.q")) {
        return;
      }

      qt.cliInit("udf_sentences.q", false);
      int ecode = qt.executeClient("udf_sentences.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_sentences.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_sentences.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_sentences.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_sign() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_sign.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_sign.q");

      if (qt.shouldBeSkipped("udf_sign.q")) {
        return;
      }

      qt.cliInit("udf_sign.q", false);
      int ecode = qt.executeClient("udf_sign.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_sign.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_sign.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_sign.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_sin() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_sin.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_sin.q");

      if (qt.shouldBeSkipped("udf_sin.q")) {
        return;
      }

      qt.cliInit("udf_sin.q", false);
      int ecode = qt.executeClient("udf_sin.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_sin.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_sin.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_sin.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_size() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_size.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_size.q");

      if (qt.shouldBeSkipped("udf_size.q")) {
        return;
      }

      qt.cliInit("udf_size.q", false);
      int ecode = qt.executeClient("udf_size.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_size.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_size.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_size.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_smallint() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_smallint.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_smallint.q");

      if (qt.shouldBeSkipped("udf_smallint.q")) {
        return;
      }

      qt.cliInit("udf_smallint.q", false);
      int ecode = qt.executeClient("udf_smallint.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_smallint.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_smallint.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_smallint.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_sort_array() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_sort_array.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_sort_array.q");

      if (qt.shouldBeSkipped("udf_sort_array.q")) {
        return;
      }

      qt.cliInit("udf_sort_array.q", false);
      int ecode = qt.executeClient("udf_sort_array.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_sort_array.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_sort_array.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_sort_array.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_space() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_space.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_space.q");

      if (qt.shouldBeSkipped("udf_space.q")) {
        return;
      }

      qt.cliInit("udf_space.q", false);
      int ecode = qt.executeClient("udf_space.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_space.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_space.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_space.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_split() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_split.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_split.q");

      if (qt.shouldBeSkipped("udf_split.q")) {
        return;
      }

      qt.cliInit("udf_split.q", false);
      int ecode = qt.executeClient("udf_split.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_split.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_split.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_split.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_sqrt() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_sqrt.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_sqrt.q");

      if (qt.shouldBeSkipped("udf_sqrt.q")) {
        return;
      }

      qt.cliInit("udf_sqrt.q", false);
      int ecode = qt.executeClient("udf_sqrt.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_sqrt.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_sqrt.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_sqrt.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_std() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_std.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_std.q");

      if (qt.shouldBeSkipped("udf_std.q")) {
        return;
      }

      qt.cliInit("udf_std.q", false);
      int ecode = qt.executeClient("udf_std.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_std.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_std.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_std.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_stddev() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_stddev.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_stddev.q");

      if (qt.shouldBeSkipped("udf_stddev.q")) {
        return;
      }

      qt.cliInit("udf_stddev.q", false);
      int ecode = qt.executeClient("udf_stddev.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_stddev.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_stddev.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_stddev.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_stddev_pop() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_stddev_pop.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_stddev_pop.q");

      if (qt.shouldBeSkipped("udf_stddev_pop.q")) {
        return;
      }

      qt.cliInit("udf_stddev_pop.q", false);
      int ecode = qt.executeClient("udf_stddev_pop.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_stddev_pop.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_stddev_pop.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_stddev_pop.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_stddev_samp() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_stddev_samp.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_stddev_samp.q");

      if (qt.shouldBeSkipped("udf_stddev_samp.q")) {
        return;
      }

      qt.cliInit("udf_stddev_samp.q", false);
      int ecode = qt.executeClient("udf_stddev_samp.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_stddev_samp.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_stddev_samp.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_stddev_samp.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_string() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_string.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_string.q");

      if (qt.shouldBeSkipped("udf_string.q")) {
        return;
      }

      qt.cliInit("udf_string.q", false);
      int ecode = qt.executeClient("udf_string.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_string.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_string.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_string.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_struct() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_struct.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_struct.q");

      if (qt.shouldBeSkipped("udf_struct.q")) {
        return;
      }

      qt.cliInit("udf_struct.q", false);
      int ecode = qt.executeClient("udf_struct.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_struct.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_struct.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_struct.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_substr() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_substr.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_substr.q");

      if (qt.shouldBeSkipped("udf_substr.q")) {
        return;
      }

      qt.cliInit("udf_substr.q", false);
      int ecode = qt.executeClient("udf_substr.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_substr.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_substr.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_substr.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_substring() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_substring.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_substring.q");

      if (qt.shouldBeSkipped("udf_substring.q")) {
        return;
      }

      qt.cliInit("udf_substring.q", false);
      int ecode = qt.executeClient("udf_substring.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_substring.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_substring.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_substring.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_subtract() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_subtract.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_subtract.q");

      if (qt.shouldBeSkipped("udf_subtract.q")) {
        return;
      }

      qt.cliInit("udf_subtract.q", false);
      int ecode = qt.executeClient("udf_subtract.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_subtract.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_subtract.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_subtract.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_sum() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_sum.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_sum.q");

      if (qt.shouldBeSkipped("udf_sum.q")) {
        return;
      }

      qt.cliInit("udf_sum.q", false);
      int ecode = qt.executeClient("udf_sum.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_sum.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_sum.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_sum.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_tan() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_tan.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_tan.q");

      if (qt.shouldBeSkipped("udf_tan.q")) {
        return;
      }

      qt.cliInit("udf_tan.q", false);
      int ecode = qt.executeClient("udf_tan.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_tan.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_tan.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_tan.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_testlength() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_testlength.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_testlength.q");

      if (qt.shouldBeSkipped("udf_testlength.q")) {
        return;
      }

      qt.cliInit("udf_testlength.q", false);
      int ecode = qt.executeClient("udf_testlength.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_testlength.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_testlength.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_testlength.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_testlength2() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_testlength2.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_testlength2.q");

      if (qt.shouldBeSkipped("udf_testlength2.q")) {
        return;
      }

      qt.cliInit("udf_testlength2.q", false);
      int ecode = qt.executeClient("udf_testlength2.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_testlength2.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_testlength2.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_testlength2.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_tinyint() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_tinyint.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_tinyint.q");

      if (qt.shouldBeSkipped("udf_tinyint.q")) {
        return;
      }

      qt.cliInit("udf_tinyint.q", false);
      int ecode = qt.executeClient("udf_tinyint.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_tinyint.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_tinyint.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_tinyint.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_to_date() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_to_date.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_to_date.q");

      if (qt.shouldBeSkipped("udf_to_date.q")) {
        return;
      }

      qt.cliInit("udf_to_date.q", false);
      int ecode = qt.executeClient("udf_to_date.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_to_date.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_to_date.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_to_date.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_translate() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_translate.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_translate.q");

      if (qt.shouldBeSkipped("udf_translate.q")) {
        return;
      }

      qt.cliInit("udf_translate.q", false);
      int ecode = qt.executeClient("udf_translate.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_translate.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_translate.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_translate.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_trim() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_trim.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_trim.q");

      if (qt.shouldBeSkipped("udf_trim.q")) {
        return;
      }

      qt.cliInit("udf_trim.q", false);
      int ecode = qt.executeClient("udf_trim.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_trim.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_trim.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_trim.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_ucase() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_ucase.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_ucase.q");

      if (qt.shouldBeSkipped("udf_ucase.q")) {
        return;
      }

      qt.cliInit("udf_ucase.q", false);
      int ecode = qt.executeClient("udf_ucase.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_ucase.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_ucase.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_ucase.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_unhex() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_unhex.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_unhex.q");

      if (qt.shouldBeSkipped("udf_unhex.q")) {
        return;
      }

      qt.cliInit("udf_unhex.q", false);
      int ecode = qt.executeClient("udf_unhex.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_unhex.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_unhex.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_unhex.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_union() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_union.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_union.q");

      if (qt.shouldBeSkipped("udf_union.q")) {
        return;
      }

      qt.cliInit("udf_union.q", false);
      int ecode = qt.executeClient("udf_union.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_union.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_union.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_union.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_unix_timestamp() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_unix_timestamp.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_unix_timestamp.q");

      if (qt.shouldBeSkipped("udf_unix_timestamp.q")) {
        return;
      }

      qt.cliInit("udf_unix_timestamp.q", false);
      int ecode = qt.executeClient("udf_unix_timestamp.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_unix_timestamp.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_unix_timestamp.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_unix_timestamp.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_upper() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_upper.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_upper.q");

      if (qt.shouldBeSkipped("udf_upper.q")) {
        return;
      }

      qt.cliInit("udf_upper.q", false);
      int ecode = qt.executeClient("udf_upper.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_upper.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_upper.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_upper.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_var_pop() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_var_pop.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_var_pop.q");

      if (qt.shouldBeSkipped("udf_var_pop.q")) {
        return;
      }

      qt.cliInit("udf_var_pop.q", false);
      int ecode = qt.executeClient("udf_var_pop.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_var_pop.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_var_pop.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_var_pop.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_var_samp() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_var_samp.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_var_samp.q");

      if (qt.shouldBeSkipped("udf_var_samp.q")) {
        return;
      }

      qt.cliInit("udf_var_samp.q", false);
      int ecode = qt.executeClient("udf_var_samp.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_var_samp.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_var_samp.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_var_samp.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_variance() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_variance.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_variance.q");

      if (qt.shouldBeSkipped("udf_variance.q")) {
        return;
      }

      qt.cliInit("udf_variance.q", false);
      int ecode = qt.executeClient("udf_variance.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_variance.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_variance.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_variance.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_weekofyear() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_weekofyear.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_weekofyear.q");

      if (qt.shouldBeSkipped("udf_weekofyear.q")) {
        return;
      }

      qt.cliInit("udf_weekofyear.q", false);
      int ecode = qt.executeClient("udf_weekofyear.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_weekofyear.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_weekofyear.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_weekofyear.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_when() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_when.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_when.q");

      if (qt.shouldBeSkipped("udf_when.q")) {
        return;
      }

      qt.cliInit("udf_when.q", false);
      int ecode = qt.executeClient("udf_when.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_when.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_when.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_when.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_xpath() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_xpath.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_xpath.q");

      if (qt.shouldBeSkipped("udf_xpath.q")) {
        return;
      }

      qt.cliInit("udf_xpath.q", false);
      int ecode = qt.executeClient("udf_xpath.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_xpath.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_xpath.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_xpath.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_xpath_boolean() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_xpath_boolean.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_xpath_boolean.q");

      if (qt.shouldBeSkipped("udf_xpath_boolean.q")) {
        return;
      }

      qt.cliInit("udf_xpath_boolean.q", false);
      int ecode = qt.executeClient("udf_xpath_boolean.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_xpath_boolean.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_xpath_boolean.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_xpath_boolean.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_xpath_double() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_xpath_double.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_xpath_double.q");

      if (qt.shouldBeSkipped("udf_xpath_double.q")) {
        return;
      }

      qt.cliInit("udf_xpath_double.q", false);
      int ecode = qt.executeClient("udf_xpath_double.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_xpath_double.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_xpath_double.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_xpath_double.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_xpath_float() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_xpath_float.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_xpath_float.q");

      if (qt.shouldBeSkipped("udf_xpath_float.q")) {
        return;
      }

      qt.cliInit("udf_xpath_float.q", false);
      int ecode = qt.executeClient("udf_xpath_float.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_xpath_float.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_xpath_float.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_xpath_float.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_xpath_int() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_xpath_int.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_xpath_int.q");

      if (qt.shouldBeSkipped("udf_xpath_int.q")) {
        return;
      }

      qt.cliInit("udf_xpath_int.q", false);
      int ecode = qt.executeClient("udf_xpath_int.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_xpath_int.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_xpath_int.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_xpath_int.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_xpath_long() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_xpath_long.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_xpath_long.q");

      if (qt.shouldBeSkipped("udf_xpath_long.q")) {
        return;
      }

      qt.cliInit("udf_xpath_long.q", false);
      int ecode = qt.executeClient("udf_xpath_long.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_xpath_long.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_xpath_long.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_xpath_long.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_xpath_short() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_xpath_short.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_xpath_short.q");

      if (qt.shouldBeSkipped("udf_xpath_short.q")) {
        return;
      }

      qt.cliInit("udf_xpath_short.q", false);
      int ecode = qt.executeClient("udf_xpath_short.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_xpath_short.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_xpath_short.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_xpath_short.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udf_xpath_string() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udf_xpath_string.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udf_xpath_string.q");

      if (qt.shouldBeSkipped("udf_xpath_string.q")) {
        return;
      }

      qt.cliInit("udf_xpath_string.q", false);
      int ecode = qt.executeClient("udf_xpath_string.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udf_xpath_string.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udf_xpath_string.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udf_xpath_string.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udtf_explode() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udtf_explode.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udtf_explode.q");

      if (qt.shouldBeSkipped("udtf_explode.q")) {
        return;
      }

      qt.cliInit("udtf_explode.q", false);
      int ecode = qt.executeClient("udtf_explode.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udtf_explode.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udtf_explode.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udtf_explode.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udtf_json_tuple() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udtf_json_tuple.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udtf_json_tuple.q");

      if (qt.shouldBeSkipped("udtf_json_tuple.q")) {
        return;
      }

      qt.cliInit("udtf_json_tuple.q", false);
      int ecode = qt.executeClient("udtf_json_tuple.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udtf_json_tuple.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udtf_json_tuple.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udtf_json_tuple.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udtf_parse_url_tuple() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udtf_parse_url_tuple.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udtf_parse_url_tuple.q");

      if (qt.shouldBeSkipped("udtf_parse_url_tuple.q")) {
        return;
      }

      qt.cliInit("udtf_parse_url_tuple.q", false);
      int ecode = qt.executeClient("udtf_parse_url_tuple.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udtf_parse_url_tuple.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udtf_parse_url_tuple.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udtf_parse_url_tuple.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_udtf_stack() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "udtf_stack.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/udtf_stack.q");

      if (qt.shouldBeSkipped("udtf_stack.q")) {
        return;
      }

      qt.cliInit("udtf_stack.q", false);
      int ecode = qt.executeClient("udtf_stack.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("udtf_stack.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "udtf_stack.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "udtf_stack.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_union() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "union.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/union.q");

      if (qt.shouldBeSkipped("union.q")) {
        return;
      }

      qt.cliInit("union.q", false);
      int ecode = qt.executeClient("union.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("union.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "union.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "union.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_union10() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "union10.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/union10.q");

      if (qt.shouldBeSkipped("union10.q")) {
        return;
      }

      qt.cliInit("union10.q", false);
      int ecode = qt.executeClient("union10.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("union10.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "union10.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "union10.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_union11() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "union11.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/union11.q");

      if (qt.shouldBeSkipped("union11.q")) {
        return;
      }

      qt.cliInit("union11.q", false);
      int ecode = qt.executeClient("union11.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("union11.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "union11.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "union11.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_union12() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "union12.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/union12.q");

      if (qt.shouldBeSkipped("union12.q")) {
        return;
      }

      qt.cliInit("union12.q", false);
      int ecode = qt.executeClient("union12.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("union12.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "union12.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "union12.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_union13() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "union13.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/union13.q");

      if (qt.shouldBeSkipped("union13.q")) {
        return;
      }

      qt.cliInit("union13.q", false);
      int ecode = qt.executeClient("union13.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("union13.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "union13.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "union13.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_union14() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "union14.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/union14.q");

      if (qt.shouldBeSkipped("union14.q")) {
        return;
      }

      qt.cliInit("union14.q", false);
      int ecode = qt.executeClient("union14.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("union14.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "union14.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "union14.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_union15() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "union15.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/union15.q");

      if (qt.shouldBeSkipped("union15.q")) {
        return;
      }

      qt.cliInit("union15.q", false);
      int ecode = qt.executeClient("union15.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("union15.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "union15.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "union15.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_union16() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "union16.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/union16.q");

      if (qt.shouldBeSkipped("union16.q")) {
        return;
      }

      qt.cliInit("union16.q", false);
      int ecode = qt.executeClient("union16.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("union16.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "union16.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "union16.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_union17() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "union17.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/union17.q");

      if (qt.shouldBeSkipped("union17.q")) {
        return;
      }

      qt.cliInit("union17.q", false);
      int ecode = qt.executeClient("union17.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("union17.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "union17.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "union17.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_union18() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "union18.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/union18.q");

      if (qt.shouldBeSkipped("union18.q")) {
        return;
      }

      qt.cliInit("union18.q", false);
      int ecode = qt.executeClient("union18.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("union18.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "union18.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "union18.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_union19() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "union19.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/union19.q");

      if (qt.shouldBeSkipped("union19.q")) {
        return;
      }

      qt.cliInit("union19.q", false);
      int ecode = qt.executeClient("union19.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("union19.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "union19.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "union19.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_union2() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "union2.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/union2.q");

      if (qt.shouldBeSkipped("union2.q")) {
        return;
      }

      qt.cliInit("union2.q", false);
      int ecode = qt.executeClient("union2.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("union2.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "union2.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "union2.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_union20() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "union20.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/union20.q");

      if (qt.shouldBeSkipped("union20.q")) {
        return;
      }

      qt.cliInit("union20.q", false);
      int ecode = qt.executeClient("union20.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("union20.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "union20.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "union20.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_union21() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "union21.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/union21.q");

      if (qt.shouldBeSkipped("union21.q")) {
        return;
      }

      qt.cliInit("union21.q", false);
      int ecode = qt.executeClient("union21.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("union21.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "union21.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "union21.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_union22() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "union22.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/union22.q");

      if (qt.shouldBeSkipped("union22.q")) {
        return;
      }

      qt.cliInit("union22.q", false);
      int ecode = qt.executeClient("union22.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("union22.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "union22.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "union22.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_union23() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "union23.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/union23.q");

      if (qt.shouldBeSkipped("union23.q")) {
        return;
      }

      qt.cliInit("union23.q", false);
      int ecode = qt.executeClient("union23.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("union23.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "union23.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "union23.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_union24() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "union24.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/union24.q");

      if (qt.shouldBeSkipped("union24.q")) {
        return;
      }

      qt.cliInit("union24.q", false);
      int ecode = qt.executeClient("union24.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("union24.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "union24.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "union24.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_union25() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "union25.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/union25.q");

      if (qt.shouldBeSkipped("union25.q")) {
        return;
      }

      qt.cliInit("union25.q", false);
      int ecode = qt.executeClient("union25.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("union25.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "union25.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "union25.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_union26() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "union26.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/union26.q");

      if (qt.shouldBeSkipped("union26.q")) {
        return;
      }

      qt.cliInit("union26.q", false);
      int ecode = qt.executeClient("union26.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("union26.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "union26.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "union26.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_union27() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "union27.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/union27.q");

      if (qt.shouldBeSkipped("union27.q")) {
        return;
      }

      qt.cliInit("union27.q", false);
      int ecode = qt.executeClient("union27.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("union27.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "union27.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "union27.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_union28() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "union28.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/union28.q");

      if (qt.shouldBeSkipped("union28.q")) {
        return;
      }

      qt.cliInit("union28.q", false);
      int ecode = qt.executeClient("union28.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("union28.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "union28.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "union28.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_union29() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "union29.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/union29.q");

      if (qt.shouldBeSkipped("union29.q")) {
        return;
      }

      qt.cliInit("union29.q", false);
      int ecode = qt.executeClient("union29.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("union29.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "union29.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "union29.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_union3() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "union3.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/union3.q");

      if (qt.shouldBeSkipped("union3.q")) {
        return;
      }

      qt.cliInit("union3.q", false);
      int ecode = qt.executeClient("union3.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("union3.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "union3.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "union3.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_union30() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "union30.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/union30.q");

      if (qt.shouldBeSkipped("union30.q")) {
        return;
      }

      qt.cliInit("union30.q", false);
      int ecode = qt.executeClient("union30.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("union30.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "union30.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "union30.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_union31() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "union31.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/union31.q");

      if (qt.shouldBeSkipped("union31.q")) {
        return;
      }

      qt.cliInit("union31.q", false);
      int ecode = qt.executeClient("union31.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("union31.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "union31.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "union31.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_union32() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "union32.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/union32.q");

      if (qt.shouldBeSkipped("union32.q")) {
        return;
      }

      qt.cliInit("union32.q", false);
      int ecode = qt.executeClient("union32.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("union32.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "union32.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "union32.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_union4() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "union4.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/union4.q");

      if (qt.shouldBeSkipped("union4.q")) {
        return;
      }

      qt.cliInit("union4.q", false);
      int ecode = qt.executeClient("union4.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("union4.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "union4.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "union4.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_union5() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "union5.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/union5.q");

      if (qt.shouldBeSkipped("union5.q")) {
        return;
      }

      qt.cliInit("union5.q", false);
      int ecode = qt.executeClient("union5.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("union5.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "union5.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "union5.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_union6() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "union6.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/union6.q");

      if (qt.shouldBeSkipped("union6.q")) {
        return;
      }

      qt.cliInit("union6.q", false);
      int ecode = qt.executeClient("union6.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("union6.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "union6.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "union6.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_union7() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "union7.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/union7.q");

      if (qt.shouldBeSkipped("union7.q")) {
        return;
      }

      qt.cliInit("union7.q", false);
      int ecode = qt.executeClient("union7.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("union7.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "union7.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "union7.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_union8() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "union8.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/union8.q");

      if (qt.shouldBeSkipped("union8.q")) {
        return;
      }

      qt.cliInit("union8.q", false);
      int ecode = qt.executeClient("union8.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("union8.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "union8.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "union8.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_union9() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "union9.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/union9.q");

      if (qt.shouldBeSkipped("union9.q")) {
        return;
      }

      qt.cliInit("union9.q", false);
      int ecode = qt.executeClient("union9.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("union9.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "union9.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "union9.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_union_lateralview() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "union_lateralview.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/union_lateralview.q");

      if (qt.shouldBeSkipped("union_lateralview.q")) {
        return;
      }

      qt.cliInit("union_lateralview.q", false);
      int ecode = qt.executeClient("union_lateralview.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("union_lateralview.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "union_lateralview.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "union_lateralview.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_union_null() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "union_null.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/union_null.q");

      if (qt.shouldBeSkipped("union_null.q")) {
        return;
      }

      qt.cliInit("union_null.q", false);
      int ecode = qt.executeClient("union_null.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("union_null.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "union_null.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "union_null.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_union_ppr() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "union_ppr.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/union_ppr.q");

      if (qt.shouldBeSkipped("union_ppr.q")) {
        return;
      }

      qt.cliInit("union_ppr.q", false);
      int ecode = qt.executeClient("union_ppr.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("union_ppr.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "union_ppr.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "union_ppr.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_union_remove_1() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "union_remove_1.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/union_remove_1.q");

      if (qt.shouldBeSkipped("union_remove_1.q")) {
        return;
      }

      qt.cliInit("union_remove_1.q", false);
      int ecode = qt.executeClient("union_remove_1.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("union_remove_1.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "union_remove_1.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "union_remove_1.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_union_remove_10() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "union_remove_10.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/union_remove_10.q");

      if (qt.shouldBeSkipped("union_remove_10.q")) {
        return;
      }

      qt.cliInit("union_remove_10.q", false);
      int ecode = qt.executeClient("union_remove_10.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("union_remove_10.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "union_remove_10.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "union_remove_10.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_union_remove_11() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "union_remove_11.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/union_remove_11.q");

      if (qt.shouldBeSkipped("union_remove_11.q")) {
        return;
      }

      qt.cliInit("union_remove_11.q", false);
      int ecode = qt.executeClient("union_remove_11.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("union_remove_11.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "union_remove_11.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "union_remove_11.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_union_remove_12() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "union_remove_12.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/union_remove_12.q");

      if (qt.shouldBeSkipped("union_remove_12.q")) {
        return;
      }

      qt.cliInit("union_remove_12.q", false);
      int ecode = qt.executeClient("union_remove_12.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("union_remove_12.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "union_remove_12.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "union_remove_12.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_union_remove_13() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "union_remove_13.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/union_remove_13.q");

      if (qt.shouldBeSkipped("union_remove_13.q")) {
        return;
      }

      qt.cliInit("union_remove_13.q", false);
      int ecode = qt.executeClient("union_remove_13.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("union_remove_13.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "union_remove_13.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "union_remove_13.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_union_remove_14() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "union_remove_14.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/union_remove_14.q");

      if (qt.shouldBeSkipped("union_remove_14.q")) {
        return;
      }

      qt.cliInit("union_remove_14.q", false);
      int ecode = qt.executeClient("union_remove_14.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("union_remove_14.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "union_remove_14.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "union_remove_14.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_union_remove_15() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "union_remove_15.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/union_remove_15.q");

      if (qt.shouldBeSkipped("union_remove_15.q")) {
        return;
      }

      qt.cliInit("union_remove_15.q", false);
      int ecode = qt.executeClient("union_remove_15.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("union_remove_15.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "union_remove_15.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "union_remove_15.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_union_remove_16() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "union_remove_16.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/union_remove_16.q");

      if (qt.shouldBeSkipped("union_remove_16.q")) {
        return;
      }

      qt.cliInit("union_remove_16.q", false);
      int ecode = qt.executeClient("union_remove_16.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("union_remove_16.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "union_remove_16.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "union_remove_16.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_union_remove_17() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "union_remove_17.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/union_remove_17.q");

      if (qt.shouldBeSkipped("union_remove_17.q")) {
        return;
      }

      qt.cliInit("union_remove_17.q", false);
      int ecode = qt.executeClient("union_remove_17.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("union_remove_17.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "union_remove_17.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "union_remove_17.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_union_remove_18() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "union_remove_18.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/union_remove_18.q");

      if (qt.shouldBeSkipped("union_remove_18.q")) {
        return;
      }

      qt.cliInit("union_remove_18.q", false);
      int ecode = qt.executeClient("union_remove_18.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("union_remove_18.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "union_remove_18.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "union_remove_18.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_union_remove_19() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "union_remove_19.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/union_remove_19.q");

      if (qt.shouldBeSkipped("union_remove_19.q")) {
        return;
      }

      qt.cliInit("union_remove_19.q", false);
      int ecode = qt.executeClient("union_remove_19.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("union_remove_19.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "union_remove_19.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "union_remove_19.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_union_remove_2() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "union_remove_2.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/union_remove_2.q");

      if (qt.shouldBeSkipped("union_remove_2.q")) {
        return;
      }

      qt.cliInit("union_remove_2.q", false);
      int ecode = qt.executeClient("union_remove_2.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("union_remove_2.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "union_remove_2.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "union_remove_2.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_union_remove_20() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "union_remove_20.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/union_remove_20.q");

      if (qt.shouldBeSkipped("union_remove_20.q")) {
        return;
      }

      qt.cliInit("union_remove_20.q", false);
      int ecode = qt.executeClient("union_remove_20.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("union_remove_20.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "union_remove_20.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "union_remove_20.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_union_remove_21() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "union_remove_21.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/union_remove_21.q");

      if (qt.shouldBeSkipped("union_remove_21.q")) {
        return;
      }

      qt.cliInit("union_remove_21.q", false);
      int ecode = qt.executeClient("union_remove_21.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("union_remove_21.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "union_remove_21.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "union_remove_21.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_union_remove_22() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "union_remove_22.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/union_remove_22.q");

      if (qt.shouldBeSkipped("union_remove_22.q")) {
        return;
      }

      qt.cliInit("union_remove_22.q", false);
      int ecode = qt.executeClient("union_remove_22.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("union_remove_22.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "union_remove_22.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "union_remove_22.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_union_remove_23() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "union_remove_23.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/union_remove_23.q");

      if (qt.shouldBeSkipped("union_remove_23.q")) {
        return;
      }

      qt.cliInit("union_remove_23.q", false);
      int ecode = qt.executeClient("union_remove_23.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("union_remove_23.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "union_remove_23.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "union_remove_23.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_union_remove_24() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "union_remove_24.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/union_remove_24.q");

      if (qt.shouldBeSkipped("union_remove_24.q")) {
        return;
      }

      qt.cliInit("union_remove_24.q", false);
      int ecode = qt.executeClient("union_remove_24.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("union_remove_24.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "union_remove_24.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "union_remove_24.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_union_remove_3() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "union_remove_3.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/union_remove_3.q");

      if (qt.shouldBeSkipped("union_remove_3.q")) {
        return;
      }

      qt.cliInit("union_remove_3.q", false);
      int ecode = qt.executeClient("union_remove_3.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("union_remove_3.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "union_remove_3.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "union_remove_3.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_union_remove_4() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "union_remove_4.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/union_remove_4.q");

      if (qt.shouldBeSkipped("union_remove_4.q")) {
        return;
      }

      qt.cliInit("union_remove_4.q", false);
      int ecode = qt.executeClient("union_remove_4.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("union_remove_4.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "union_remove_4.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "union_remove_4.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_union_remove_5() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "union_remove_5.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/union_remove_5.q");

      if (qt.shouldBeSkipped("union_remove_5.q")) {
        return;
      }

      qt.cliInit("union_remove_5.q", false);
      int ecode = qt.executeClient("union_remove_5.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("union_remove_5.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "union_remove_5.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "union_remove_5.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_union_remove_6() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "union_remove_6.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/union_remove_6.q");

      if (qt.shouldBeSkipped("union_remove_6.q")) {
        return;
      }

      qt.cliInit("union_remove_6.q", false);
      int ecode = qt.executeClient("union_remove_6.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("union_remove_6.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "union_remove_6.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "union_remove_6.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_union_remove_7() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "union_remove_7.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/union_remove_7.q");

      if (qt.shouldBeSkipped("union_remove_7.q")) {
        return;
      }

      qt.cliInit("union_remove_7.q", false);
      int ecode = qt.executeClient("union_remove_7.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("union_remove_7.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "union_remove_7.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "union_remove_7.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_union_remove_8() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "union_remove_8.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/union_remove_8.q");

      if (qt.shouldBeSkipped("union_remove_8.q")) {
        return;
      }

      qt.cliInit("union_remove_8.q", false);
      int ecode = qt.executeClient("union_remove_8.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("union_remove_8.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "union_remove_8.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "union_remove_8.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_union_remove_9() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "union_remove_9.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/union_remove_9.q");

      if (qt.shouldBeSkipped("union_remove_9.q")) {
        return;
      }

      qt.cliInit("union_remove_9.q", false);
      int ecode = qt.executeClient("union_remove_9.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("union_remove_9.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "union_remove_9.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "union_remove_9.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_union_script() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "union_script.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/union_script.q");

      if (qt.shouldBeSkipped("union_script.q")) {
        return;
      }

      qt.cliInit("union_script.q", false);
      int ecode = qt.executeClient("union_script.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("union_script.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "union_script.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "union_script.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_union_view() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "union_view.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/union_view.q");

      if (qt.shouldBeSkipped("union_view.q")) {
        return;
      }

      qt.cliInit("union_view.q", false);
      int ecode = qt.executeClient("union_view.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("union_view.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "union_view.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "union_view.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_uniquejoin() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "uniquejoin.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/uniquejoin.q");

      if (qt.shouldBeSkipped("uniquejoin.q")) {
        return;
      }

      qt.cliInit("uniquejoin.q", false);
      int ecode = qt.executeClient("uniquejoin.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("uniquejoin.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "uniquejoin.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "uniquejoin.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_updateAccessTime() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "updateAccessTime.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/updateAccessTime.q");

      if (qt.shouldBeSkipped("updateAccessTime.q")) {
        return;
      }

      qt.cliInit("updateAccessTime.q", false);
      int ecode = qt.executeClient("updateAccessTime.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("updateAccessTime.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "updateAccessTime.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "updateAccessTime.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_view() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "view.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/view.q");

      if (qt.shouldBeSkipped("view.q")) {
        return;
      }

      qt.cliInit("view.q", false);
      int ecode = qt.executeClient("view.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("view.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "view.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "view.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

  public void testCliDriver_virtual_column() throws Exception {
    long startTime = System.currentTimeMillis();
    try {
      System.out.println("Begin query: " + "virtual_column.q");

      qt.addFile("/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/test/queries/clientpositive/virtual_column.q");

      if (qt.shouldBeSkipped("virtual_column.q")) {
        return;
      }

      qt.cliInit("virtual_column.q", false);
      int ecode = qt.executeClient("virtual_column.q");
      if (ecode != 0) {
        fail("Client Execution failed with error code = " + ecode + debugHint);
      }
      if (SessionState.get() != null) {
        HiveHistoryViewer hv = new HiveHistoryViewer(SessionState.get()
          .getHiveHistory().getHistFileName());
        Map<String, QueryInfo> jobInfoMap = hv.getJobInfoMap();
        Map<String, TaskInfo> taskInfoMap = hv.getTaskInfoMap();

        if(jobInfoMap.size() != 0) {
          String cmd = (String)jobInfoMap.keySet().toArray()[0];
          QueryInfo ji = jobInfoMap.get(cmd);

          if (!ji.hm.get(Keys.QUERY_RET_CODE.name()).equals("0")) {
              fail("Wrong return code in hive history" + debugHint);
          }
        }
      }

      ecode = qt.checkCliDriverResults("virtual_column.q");
      if (ecode != 0) {
        fail("Client execution results failed with error code = " + ecode
            + debugHint);
      }
    }
    catch (Throwable e) {
      System.out.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.out.println("Failed query: " + "virtual_column.q");
      System.out.flush();
      fail("Unexpected exception" + debugHint);
    }

    long elapsedTime = System.currentTimeMillis() - startTime;
    System.out.println("Done query: " + "virtual_column.q" + " elapsedTime=" + elapsedTime/1000 + "s");
    assertTrue("Test passed", true);
  }

}

