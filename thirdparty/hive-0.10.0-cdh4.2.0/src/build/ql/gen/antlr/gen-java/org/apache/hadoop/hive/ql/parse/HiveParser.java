// $ANTLR 3.4 /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g 2014-05-20 11:12:28

package org.apache.hadoop.hive.ql.parse;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;

import org.antlr.runtime.tree.*;


/**
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
@SuppressWarnings({"all", "warnings", "unchecked"})
public class HiveParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "AMPERSAND", "BITWISEOR", "BITWISEXOR", "BigintLiteral", "COLON", "COMMA", "COMMENT", "CharSetLiteral", "CharSetName", "DIV", "DIVIDE", "DOLLAR", "DOT", "Digit", "EQUAL", "EQUAL_NS", "Exponent", "GREATERTHAN", "GREATERTHANOREQUALTO", "HexDigit", "Identifier", "KW_ADD", "KW_AFTER", "KW_ALL", "KW_ALTER", "KW_ANALYZE", "KW_AND", "KW_ARCHIVE", "KW_ARRAY", "KW_AS", "KW_ASC", "KW_BEFORE", "KW_BETWEEN", "KW_BIGINT", "KW_BINARY", "KW_BOOLEAN", "KW_BOTH", "KW_BUCKET", "KW_BUCKETS", "KW_BY", "KW_CASCADE", "KW_CASE", "KW_CAST", "KW_CHANGE", "KW_CLUSTER", "KW_CLUSTERED", "KW_CLUSTERSTATUS", "KW_COLLECTION", "KW_COLUMN", "KW_COLUMNS", "KW_COMMENT", "KW_COMPUTE", "KW_CONCATENATE", "KW_CONTINUE", "KW_CREATE", "KW_CROSS", "KW_CUBE", "KW_CURSOR", "KW_DATA", "KW_DATABASE", "KW_DATABASES", "KW_DATE", "KW_DATETIME", "KW_DBPROPERTIES", "KW_DECIMAL", "KW_DEFERRED", "KW_DELETE", "KW_DELIMITED", "KW_DEPENDENCY", "KW_DESC", "KW_DESCRIBE", "KW_DIRECTORIES", "KW_DIRECTORY", "KW_DISABLE", "KW_DISTINCT", "KW_DISTRIBUTE", "KW_DOUBLE", "KW_DROP", "KW_ELEM_TYPE", "KW_ELSE", "KW_ENABLE", "KW_END", "KW_ESCAPED", "KW_EXCLUSIVE", "KW_EXISTS", "KW_EXPLAIN", "KW_EXPORT", "KW_EXTENDED", "KW_EXTERNAL", "KW_FALSE", "KW_FETCH", "KW_FIELDS", "KW_FILEFORMAT", "KW_FIRST", "KW_FLOAT", "KW_FOR", "KW_FORMAT", "KW_FORMATTED", "KW_FROM", "KW_FULL", "KW_FUNCTION", "KW_FUNCTIONS", "KW_GRANT", "KW_GROUP", "KW_GROUPING", "KW_HAVING", "KW_HOLD_DDLTIME", "KW_IDXPROPERTIES", "KW_IF", "KW_IMPORT", "KW_IN", "KW_INDEX", "KW_INDEXES", "KW_INPATH", "KW_INPUTDRIVER", "KW_INPUTFORMAT", "KW_INSERT", "KW_INT", "KW_INTERSECT", "KW_INTO", "KW_IS", "KW_ITEMS", "KW_JOIN", "KW_KEYS", "KW_KEY_TYPE", "KW_LATERAL", "KW_LEFT", "KW_LIKE", "KW_LIMIT", "KW_LINES", "KW_LOAD", "KW_LOCAL", "KW_LOCATION", "KW_LOCK", "KW_LOCKS", "KW_LONG", "KW_MAP", "KW_MAPJOIN", "KW_MATERIALIZED", "KW_MINUS", "KW_MSCK", "KW_NOT", "KW_NO_DROP", "KW_NULL", "KW_OF", "KW_OFFLINE", "KW_ON", "KW_OPTION", "KW_OR", "KW_ORDER", "KW_OUT", "KW_OUTER", "KW_OUTPUTDRIVER", "KW_OUTPUTFORMAT", "KW_OVERWRITE", "KW_PARTITION", "KW_PARTITIONED", "KW_PARTITIONS", "KW_PERCENT", "KW_PLUS", "KW_PRESERVE", "KW_PROCEDURE", "KW_PURGE", "KW_RANGE", "KW_RCFILE", "KW_READ", "KW_READONLY", "KW_READS", "KW_REBUILD", "KW_RECORDREADER", "KW_RECORDWRITER", "KW_REDUCE", "KW_REGEXP", "KW_RENAME", "KW_REPAIR", "KW_REPLACE", "KW_RESTRICT", "KW_REVOKE", "KW_RIGHT", "KW_RLIKE", "KW_ROLLUP", "KW_ROW", "KW_SCHEMA", "KW_SCHEMAS", "KW_SELECT", "KW_SEMI", "KW_SEQUENCEFILE", "KW_SERDE", "KW_SERDEPROPERTIES", "KW_SET", "KW_SETS", "KW_SHARED", "KW_SHOW", "KW_SHOW_DATABASE", "KW_SKEWED", "KW_SMALLINT", "KW_SORT", "KW_SORTED", "KW_SSL", "KW_STATISTICS", "KW_STORED", "KW_STREAMTABLE", "KW_STRING", "KW_STRUCT", "KW_TABLE", "KW_TABLES", "KW_TABLESAMPLE", "KW_TBLPROPERTIES", "KW_TEMPORARY", "KW_TERMINATED", "KW_TEXTFILE", "KW_THEN", "KW_TIMESTAMP", "KW_TINYINT", "KW_TO", "KW_TOUCH", "KW_TRANSFORM", "KW_TRIGGER", "KW_TRUE", "KW_UNARCHIVE", "KW_UNDO", "KW_UNION", "KW_UNIONTYPE", "KW_UNIQUEJOIN", "KW_UNLOCK", "KW_UNSIGNED", "KW_UPDATE", "KW_USE", "KW_USING", "KW_UTC", "KW_UTCTIMESTAMP", "KW_VALUE_TYPE", "KW_VIEW", "KW_WHEN", "KW_WHERE", "KW_WHILE", "KW_WITH", "LCURLY", "LESSTHAN", "LESSTHANOREQUALTO", "LPAREN", "LSQUARE", "Letter", "MINUS", "MOD", "NOTEQUAL", "Number", "PLUS", "QUESTION", "RCURLY", "RPAREN", "RSQUARE", "RegexComponent", "SEMICOLON", "STAR", "SmallintLiteral", "StringLiteral", "TILDE", "TOK_ALIASLIST", "TOK_ALLCOLREF", "TOK_ALTERDATABASE_PROPERTIES", "TOK_ALTERINDEX_PROPERTIES", "TOK_ALTERINDEX_REBUILD", "TOK_ALTERTABLE_ADDCOLS", "TOK_ALTERTABLE_ADDPARTS", "TOK_ALTERTABLE_ALTERPARTS_MERGEFILES", "TOK_ALTERTABLE_ALTERPARTS_PROTECTMODE", "TOK_ALTERTABLE_ARCHIVE", "TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION", "TOK_ALTERTABLE_CLUSTER_SORT", "TOK_ALTERTABLE_DROPPARTS", "TOK_ALTERTABLE_FILEFORMAT", "TOK_ALTERTABLE_LOCATION", "TOK_ALTERTABLE_PARTITION", "TOK_ALTERTABLE_PROPERTIES", "TOK_ALTERTABLE_RENAME", "TOK_ALTERTABLE_RENAMECOL", "TOK_ALTERTABLE_RENAMEPART", "TOK_ALTERTABLE_REPLACECOLS", "TOK_ALTERTABLE_SERDEPROPERTIES", "TOK_ALTERTABLE_SERIALIZER", "TOK_ALTERTABLE_SKEWED", "TOK_ALTERTABLE_TOUCH", "TOK_ALTERTABLE_UNARCHIVE", "TOK_ALTERTBLPART_SKEWED_LOCATION", "TOK_ALTERVIEW_ADDPARTS", "TOK_ALTERVIEW_DROPPARTS", "TOK_ALTERVIEW_PROPERTIES", "TOK_ALTERVIEW_RENAME", "TOK_ANALYZE", "TOK_BIGINT", "TOK_BINARY", "TOK_BOOLEAN", "TOK_CASCADE", "TOK_CHARSETLITERAL", "TOK_CLUSTERBY", "TOK_COLTYPELIST", "TOK_CREATEDATABASE", "TOK_CREATEFUNCTION", "TOK_CREATEINDEX", "TOK_CREATEINDEX_INDEXTBLNAME", "TOK_CREATEROLE", "TOK_CREATETABLE", "TOK_CREATEVIEW", "TOK_CROSSJOIN", "TOK_CUBE_GROUPBY", "TOK_DATABASECOMMENT", "TOK_DATABASELOCATION", "TOK_DATABASEPROPERTIES", "TOK_DATE", "TOK_DATETIME", "TOK_DBPROPLIST", "TOK_DECIMAL", "TOK_DEFERRED_REBUILDINDEX", "TOK_DESCDATABASE", "TOK_DESCFUNCTION", "TOK_DESCTABLE", "TOK_DESTINATION", "TOK_DIR", "TOK_DISABLE", "TOK_DISTRIBUTEBY", "TOK_DOUBLE", "TOK_DROPDATABASE", "TOK_DROPFUNCTION", "TOK_DROPINDEX", "TOK_DROPROLE", "TOK_DROPTABLE", "TOK_DROPVIEW", "TOK_ENABLE", "TOK_EXPLAIN", "TOK_EXPLIST", "TOK_EXPORT", "TOK_FALSE", "TOK_FILEFORMAT_GENERIC", "TOK_FLOAT", "TOK_FROM", "TOK_FULLOUTERJOIN", "TOK_FUNCTION", "TOK_FUNCTIONDI", "TOK_FUNCTIONSTAR", "TOK_GRANT", "TOK_GRANT_ROLE", "TOK_GRANT_WITH_OPTION", "TOK_GROUP", "TOK_GROUPBY", "TOK_GROUPING_SETS", "TOK_GROUPING_SETS_EXPRESSION", "TOK_HAVING", "TOK_HINT", "TOK_HINTARGLIST", "TOK_HINTLIST", "TOK_HOLD_DDLTIME", "TOK_IFEXISTS", "TOK_IFNOTEXISTS", "TOK_IMPORT", "TOK_INDEXCOMMENT", "TOK_INDEXPROPERTIES", "TOK_INDEXPROPLIST", "TOK_INSERT", "TOK_INSERT_INTO", "TOK_INT", "TOK_ISNOTNULL", "TOK_ISNULL", "TOK_JOIN", "TOK_LATERAL_VIEW", "TOK_LEFTOUTERJOIN", "TOK_LEFTSEMIJOIN", "TOK_LIKETABLE", "TOK_LIMIT", "TOK_LIST", "TOK_LOAD", "TOK_LOCAL_DIR", "TOK_LOCKTABLE", "TOK_MAP", "TOK_MAPJOIN", "TOK_MSCK", "TOK_NO_DROP", "TOK_NULL", "TOK_OFFLINE", "TOK_OP_ADD", "TOK_OP_AND", "TOK_OP_BITAND", "TOK_OP_BITNOT", "TOK_OP_BITOR", "TOK_OP_BITXOR", "TOK_OP_DIV", "TOK_OP_EQ", "TOK_OP_GE", "TOK_OP_GT", "TOK_OP_LE", "TOK_OP_LIKE", "TOK_OP_LT", "TOK_OP_MOD", "TOK_OP_MUL", "TOK_OP_NE", "TOK_OP_NOT", "TOK_OP_OR", "TOK_OP_SUB", "TOK_ORDERBY", "TOK_ORREPLACE", "TOK_PARTITIONLOCATION", "TOK_PARTSPEC", "TOK_PARTVAL", "TOK_PRINCIPAL_NAME", "TOK_PRIVILEGE", "TOK_PRIVILEGE_LIST", "TOK_PRIV_ALL", "TOK_PRIV_ALTER_DATA", "TOK_PRIV_ALTER_METADATA", "TOK_PRIV_CREATE", "TOK_PRIV_DROP", "TOK_PRIV_INDEX", "TOK_PRIV_LOCK", "TOK_PRIV_OBJECT", "TOK_PRIV_OBJECT_COL", "TOK_PRIV_SELECT", "TOK_PRIV_SHOW_DATABASE", "TOK_QUERY", "TOK_READONLY", "TOK_RECORDREADER", "TOK_RECORDWRITER", "TOK_RESTRICT", "TOK_REVOKE", "TOK_REVOKE_ROLE", "TOK_RIGHTOUTERJOIN", "TOK_ROLE", "TOK_ROLLUP_GROUPBY", "TOK_SELECT", "TOK_SELECTDI", "TOK_SELEXPR", "TOK_SERDE", "TOK_SERDENAME", "TOK_SERDEPROPS", "TOK_SHOWCOLUMNS", "TOK_SHOWDATABASES", "TOK_SHOWFUNCTIONS", "TOK_SHOWINDEXES", "TOK_SHOWLOCKS", "TOK_SHOWPARTITIONS", "TOK_SHOWTABLES", "TOK_SHOW_CREATETABLE", "TOK_SHOW_GRANT", "TOK_SHOW_ROLE_GRANT", "TOK_SHOW_TABLESTATUS", "TOK_SHOW_TBLPROPERTIES", "TOK_SKEWED_LOCATIONS", "TOK_SKEWED_LOCATION_LIST", "TOK_SKEWED_LOCATION_MAP", "TOK_SMALLINT", "TOK_SORTBY", "TOK_STORAGEHANDLER", "TOK_STOREDASDIRS", "TOK_STREAMTABLE", "TOK_STRING", "TOK_STRINGLITERALSEQUENCE", "TOK_STRUCT", "TOK_SUBQUERY", "TOK_SWITCHDATABASE", "TOK_TAB", "TOK_TABALIAS", "TOK_TABCOL", "TOK_TABCOLLIST", "TOK_TABCOLNAME", "TOK_TABCOLVALUE", "TOK_TABCOLVALUES", "TOK_TABCOLVALUE_PAIR", "TOK_TABLEBUCKETS", "TOK_TABLEBUCKETSAMPLE", "TOK_TABLECOMMENT", "TOK_TABLEFILEFORMAT", "TOK_TABLELOCATION", "TOK_TABLEPARTCOLS", "TOK_TABLEPROPERTIES", "TOK_TABLEPROPERTY", "TOK_TABLEPROPLIST", "TOK_TABLEROWFORMAT", "TOK_TABLEROWFORMATCOLLITEMS", "TOK_TABLEROWFORMATFIELD", "TOK_TABLEROWFORMATLINES", "TOK_TABLEROWFORMATMAPKEYS", "TOK_TABLESERIALIZER", "TOK_TABLESKEWED", "TOK_TABLESPLITSAMPLE", "TOK_TABLE_OR_COL", "TOK_TABLE_PARTITION", "TOK_TABNAME", "TOK_TABREF", "TOK_TABSORTCOLNAMEASC", "TOK_TABSORTCOLNAMEDESC", "TOK_TABSRC", "TOK_TABTYPE", "TOK_TBLRCFILE", "TOK_TBLSEQUENCEFILE", "TOK_TBLTEXTFILE", "TOK_TIMESTAMP", "TOK_TINYINT", "TOK_TMP_FILE", "TOK_TRANSFORM", "TOK_TRUE", "TOK_UNION", "TOK_UNIONTYPE", "TOK_UNIQUEJOIN", "TOK_UNLOCKTABLE", "TOK_USER", "TOK_USERSCRIPTCOLNAMES", "TOK_USERSCRIPTCOLSCHEMA", "TOK_VIEWPARTCOLS", "TOK_WHERE", "TinyintLiteral", "WS"
    };

    public static final int EOF=-1;
    public static final int AMPERSAND=4;
    public static final int BITWISEOR=5;
    public static final int BITWISEXOR=6;
    public static final int BigintLiteral=7;
    public static final int COLON=8;
    public static final int COMMA=9;
    public static final int COMMENT=10;
    public static final int CharSetLiteral=11;
    public static final int CharSetName=12;
    public static final int DIV=13;
    public static final int DIVIDE=14;
    public static final int DOLLAR=15;
    public static final int DOT=16;
    public static final int Digit=17;
    public static final int EQUAL=18;
    public static final int EQUAL_NS=19;
    public static final int Exponent=20;
    public static final int GREATERTHAN=21;
    public static final int GREATERTHANOREQUALTO=22;
    public static final int HexDigit=23;
    public static final int Identifier=24;
    public static final int KW_ADD=25;
    public static final int KW_AFTER=26;
    public static final int KW_ALL=27;
    public static final int KW_ALTER=28;
    public static final int KW_ANALYZE=29;
    public static final int KW_AND=30;
    public static final int KW_ARCHIVE=31;
    public static final int KW_ARRAY=32;
    public static final int KW_AS=33;
    public static final int KW_ASC=34;
    public static final int KW_BEFORE=35;
    public static final int KW_BETWEEN=36;
    public static final int KW_BIGINT=37;
    public static final int KW_BINARY=38;
    public static final int KW_BOOLEAN=39;
    public static final int KW_BOTH=40;
    public static final int KW_BUCKET=41;
    public static final int KW_BUCKETS=42;
    public static final int KW_BY=43;
    public static final int KW_CASCADE=44;
    public static final int KW_CASE=45;
    public static final int KW_CAST=46;
    public static final int KW_CHANGE=47;
    public static final int KW_CLUSTER=48;
    public static final int KW_CLUSTERED=49;
    public static final int KW_CLUSTERSTATUS=50;
    public static final int KW_COLLECTION=51;
    public static final int KW_COLUMN=52;
    public static final int KW_COLUMNS=53;
    public static final int KW_COMMENT=54;
    public static final int KW_COMPUTE=55;
    public static final int KW_CONCATENATE=56;
    public static final int KW_CONTINUE=57;
    public static final int KW_CREATE=58;
    public static final int KW_CROSS=59;
    public static final int KW_CUBE=60;
    public static final int KW_CURSOR=61;
    public static final int KW_DATA=62;
    public static final int KW_DATABASE=63;
    public static final int KW_DATABASES=64;
    public static final int KW_DATE=65;
    public static final int KW_DATETIME=66;
    public static final int KW_DBPROPERTIES=67;
    public static final int KW_DECIMAL=68;
    public static final int KW_DEFERRED=69;
    public static final int KW_DELETE=70;
    public static final int KW_DELIMITED=71;
    public static final int KW_DEPENDENCY=72;
    public static final int KW_DESC=73;
    public static final int KW_DESCRIBE=74;
    public static final int KW_DIRECTORIES=75;
    public static final int KW_DIRECTORY=76;
    public static final int KW_DISABLE=77;
    public static final int KW_DISTINCT=78;
    public static final int KW_DISTRIBUTE=79;
    public static final int KW_DOUBLE=80;
    public static final int KW_DROP=81;
    public static final int KW_ELEM_TYPE=82;
    public static final int KW_ELSE=83;
    public static final int KW_ENABLE=84;
    public static final int KW_END=85;
    public static final int KW_ESCAPED=86;
    public static final int KW_EXCLUSIVE=87;
    public static final int KW_EXISTS=88;
    public static final int KW_EXPLAIN=89;
    public static final int KW_EXPORT=90;
    public static final int KW_EXTENDED=91;
    public static final int KW_EXTERNAL=92;
    public static final int KW_FALSE=93;
    public static final int KW_FETCH=94;
    public static final int KW_FIELDS=95;
    public static final int KW_FILEFORMAT=96;
    public static final int KW_FIRST=97;
    public static final int KW_FLOAT=98;
    public static final int KW_FOR=99;
    public static final int KW_FORMAT=100;
    public static final int KW_FORMATTED=101;
    public static final int KW_FROM=102;
    public static final int KW_FULL=103;
    public static final int KW_FUNCTION=104;
    public static final int KW_FUNCTIONS=105;
    public static final int KW_GRANT=106;
    public static final int KW_GROUP=107;
    public static final int KW_GROUPING=108;
    public static final int KW_HAVING=109;
    public static final int KW_HOLD_DDLTIME=110;
    public static final int KW_IDXPROPERTIES=111;
    public static final int KW_IF=112;
    public static final int KW_IMPORT=113;
    public static final int KW_IN=114;
    public static final int KW_INDEX=115;
    public static final int KW_INDEXES=116;
    public static final int KW_INPATH=117;
    public static final int KW_INPUTDRIVER=118;
    public static final int KW_INPUTFORMAT=119;
    public static final int KW_INSERT=120;
    public static final int KW_INT=121;
    public static final int KW_INTERSECT=122;
    public static final int KW_INTO=123;
    public static final int KW_IS=124;
    public static final int KW_ITEMS=125;
    public static final int KW_JOIN=126;
    public static final int KW_KEYS=127;
    public static final int KW_KEY_TYPE=128;
    public static final int KW_LATERAL=129;
    public static final int KW_LEFT=130;
    public static final int KW_LIKE=131;
    public static final int KW_LIMIT=132;
    public static final int KW_LINES=133;
    public static final int KW_LOAD=134;
    public static final int KW_LOCAL=135;
    public static final int KW_LOCATION=136;
    public static final int KW_LOCK=137;
    public static final int KW_LOCKS=138;
    public static final int KW_LONG=139;
    public static final int KW_MAP=140;
    public static final int KW_MAPJOIN=141;
    public static final int KW_MATERIALIZED=142;
    public static final int KW_MINUS=143;
    public static final int KW_MSCK=144;
    public static final int KW_NOT=145;
    public static final int KW_NO_DROP=146;
    public static final int KW_NULL=147;
    public static final int KW_OF=148;
    public static final int KW_OFFLINE=149;
    public static final int KW_ON=150;
    public static final int KW_OPTION=151;
    public static final int KW_OR=152;
    public static final int KW_ORDER=153;
    public static final int KW_OUT=154;
    public static final int KW_OUTER=155;
    public static final int KW_OUTPUTDRIVER=156;
    public static final int KW_OUTPUTFORMAT=157;
    public static final int KW_OVERWRITE=158;
    public static final int KW_PARTITION=159;
    public static final int KW_PARTITIONED=160;
    public static final int KW_PARTITIONS=161;
    public static final int KW_PERCENT=162;
    public static final int KW_PLUS=163;
    public static final int KW_PRESERVE=164;
    public static final int KW_PROCEDURE=165;
    public static final int KW_PURGE=166;
    public static final int KW_RANGE=167;
    public static final int KW_RCFILE=168;
    public static final int KW_READ=169;
    public static final int KW_READONLY=170;
    public static final int KW_READS=171;
    public static final int KW_REBUILD=172;
    public static final int KW_RECORDREADER=173;
    public static final int KW_RECORDWRITER=174;
    public static final int KW_REDUCE=175;
    public static final int KW_REGEXP=176;
    public static final int KW_RENAME=177;
    public static final int KW_REPAIR=178;
    public static final int KW_REPLACE=179;
    public static final int KW_RESTRICT=180;
    public static final int KW_REVOKE=181;
    public static final int KW_RIGHT=182;
    public static final int KW_RLIKE=183;
    public static final int KW_ROLLUP=184;
    public static final int KW_ROW=185;
    public static final int KW_SCHEMA=186;
    public static final int KW_SCHEMAS=187;
    public static final int KW_SELECT=188;
    public static final int KW_SEMI=189;
    public static final int KW_SEQUENCEFILE=190;
    public static final int KW_SERDE=191;
    public static final int KW_SERDEPROPERTIES=192;
    public static final int KW_SET=193;
    public static final int KW_SETS=194;
    public static final int KW_SHARED=195;
    public static final int KW_SHOW=196;
    public static final int KW_SHOW_DATABASE=197;
    public static final int KW_SKEWED=198;
    public static final int KW_SMALLINT=199;
    public static final int KW_SORT=200;
    public static final int KW_SORTED=201;
    public static final int KW_SSL=202;
    public static final int KW_STATISTICS=203;
    public static final int KW_STORED=204;
    public static final int KW_STREAMTABLE=205;
    public static final int KW_STRING=206;
    public static final int KW_STRUCT=207;
    public static final int KW_TABLE=208;
    public static final int KW_TABLES=209;
    public static final int KW_TABLESAMPLE=210;
    public static final int KW_TBLPROPERTIES=211;
    public static final int KW_TEMPORARY=212;
    public static final int KW_TERMINATED=213;
    public static final int KW_TEXTFILE=214;
    public static final int KW_THEN=215;
    public static final int KW_TIMESTAMP=216;
    public static final int KW_TINYINT=217;
    public static final int KW_TO=218;
    public static final int KW_TOUCH=219;
    public static final int KW_TRANSFORM=220;
    public static final int KW_TRIGGER=221;
    public static final int KW_TRUE=222;
    public static final int KW_UNARCHIVE=223;
    public static final int KW_UNDO=224;
    public static final int KW_UNION=225;
    public static final int KW_UNIONTYPE=226;
    public static final int KW_UNIQUEJOIN=227;
    public static final int KW_UNLOCK=228;
    public static final int KW_UNSIGNED=229;
    public static final int KW_UPDATE=230;
    public static final int KW_USE=231;
    public static final int KW_USING=232;
    public static final int KW_UTC=233;
    public static final int KW_UTCTIMESTAMP=234;
    public static final int KW_VALUE_TYPE=235;
    public static final int KW_VIEW=236;
    public static final int KW_WHEN=237;
    public static final int KW_WHERE=238;
    public static final int KW_WHILE=239;
    public static final int KW_WITH=240;
    public static final int LCURLY=241;
    public static final int LESSTHAN=242;
    public static final int LESSTHANOREQUALTO=243;
    public static final int LPAREN=244;
    public static final int LSQUARE=245;
    public static final int Letter=246;
    public static final int MINUS=247;
    public static final int MOD=248;
    public static final int NOTEQUAL=249;
    public static final int Number=250;
    public static final int PLUS=251;
    public static final int QUESTION=252;
    public static final int RCURLY=253;
    public static final int RPAREN=254;
    public static final int RSQUARE=255;
    public static final int RegexComponent=256;
    public static final int SEMICOLON=257;
    public static final int STAR=258;
    public static final int SmallintLiteral=259;
    public static final int StringLiteral=260;
    public static final int TILDE=261;
    public static final int TOK_ALIASLIST=262;
    public static final int TOK_ALLCOLREF=263;
    public static final int TOK_ALTERDATABASE_PROPERTIES=264;
    public static final int TOK_ALTERINDEX_PROPERTIES=265;
    public static final int TOK_ALTERINDEX_REBUILD=266;
    public static final int TOK_ALTERTABLE_ADDCOLS=267;
    public static final int TOK_ALTERTABLE_ADDPARTS=268;
    public static final int TOK_ALTERTABLE_ALTERPARTS_MERGEFILES=269;
    public static final int TOK_ALTERTABLE_ALTERPARTS_PROTECTMODE=270;
    public static final int TOK_ALTERTABLE_ARCHIVE=271;
    public static final int TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION=272;
    public static final int TOK_ALTERTABLE_CLUSTER_SORT=273;
    public static final int TOK_ALTERTABLE_DROPPARTS=274;
    public static final int TOK_ALTERTABLE_FILEFORMAT=275;
    public static final int TOK_ALTERTABLE_LOCATION=276;
    public static final int TOK_ALTERTABLE_PARTITION=277;
    public static final int TOK_ALTERTABLE_PROPERTIES=278;
    public static final int TOK_ALTERTABLE_RENAME=279;
    public static final int TOK_ALTERTABLE_RENAMECOL=280;
    public static final int TOK_ALTERTABLE_RENAMEPART=281;
    public static final int TOK_ALTERTABLE_REPLACECOLS=282;
    public static final int TOK_ALTERTABLE_SERDEPROPERTIES=283;
    public static final int TOK_ALTERTABLE_SERIALIZER=284;
    public static final int TOK_ALTERTABLE_SKEWED=285;
    public static final int TOK_ALTERTABLE_TOUCH=286;
    public static final int TOK_ALTERTABLE_UNARCHIVE=287;
    public static final int TOK_ALTERTBLPART_SKEWED_LOCATION=288;
    public static final int TOK_ALTERVIEW_ADDPARTS=289;
    public static final int TOK_ALTERVIEW_DROPPARTS=290;
    public static final int TOK_ALTERVIEW_PROPERTIES=291;
    public static final int TOK_ALTERVIEW_RENAME=292;
    public static final int TOK_ANALYZE=293;
    public static final int TOK_BIGINT=294;
    public static final int TOK_BINARY=295;
    public static final int TOK_BOOLEAN=296;
    public static final int TOK_CASCADE=297;
    public static final int TOK_CHARSETLITERAL=298;
    public static final int TOK_CLUSTERBY=299;
    public static final int TOK_COLTYPELIST=300;
    public static final int TOK_CREATEDATABASE=301;
    public static final int TOK_CREATEFUNCTION=302;
    public static final int TOK_CREATEINDEX=303;
    public static final int TOK_CREATEINDEX_INDEXTBLNAME=304;
    public static final int TOK_CREATEROLE=305;
    public static final int TOK_CREATETABLE=306;
    public static final int TOK_CREATEVIEW=307;
    public static final int TOK_CROSSJOIN=308;
    public static final int TOK_CUBE_GROUPBY=309;
    public static final int TOK_DATABASECOMMENT=310;
    public static final int TOK_DATABASELOCATION=311;
    public static final int TOK_DATABASEPROPERTIES=312;
    public static final int TOK_DATE=313;
    public static final int TOK_DATETIME=314;
    public static final int TOK_DBPROPLIST=315;
    public static final int TOK_DECIMAL=316;
    public static final int TOK_DEFERRED_REBUILDINDEX=317;
    public static final int TOK_DESCDATABASE=318;
    public static final int TOK_DESCFUNCTION=319;
    public static final int TOK_DESCTABLE=320;
    public static final int TOK_DESTINATION=321;
    public static final int TOK_DIR=322;
    public static final int TOK_DISABLE=323;
    public static final int TOK_DISTRIBUTEBY=324;
    public static final int TOK_DOUBLE=325;
    public static final int TOK_DROPDATABASE=326;
    public static final int TOK_DROPFUNCTION=327;
    public static final int TOK_DROPINDEX=328;
    public static final int TOK_DROPROLE=329;
    public static final int TOK_DROPTABLE=330;
    public static final int TOK_DROPVIEW=331;
    public static final int TOK_ENABLE=332;
    public static final int TOK_EXPLAIN=333;
    public static final int TOK_EXPLIST=334;
    public static final int TOK_EXPORT=335;
    public static final int TOK_FALSE=336;
    public static final int TOK_FILEFORMAT_GENERIC=337;
    public static final int TOK_FLOAT=338;
    public static final int TOK_FROM=339;
    public static final int TOK_FULLOUTERJOIN=340;
    public static final int TOK_FUNCTION=341;
    public static final int TOK_FUNCTIONDI=342;
    public static final int TOK_FUNCTIONSTAR=343;
    public static final int TOK_GRANT=344;
    public static final int TOK_GRANT_ROLE=345;
    public static final int TOK_GRANT_WITH_OPTION=346;
    public static final int TOK_GROUP=347;
    public static final int TOK_GROUPBY=348;
    public static final int TOK_GROUPING_SETS=349;
    public static final int TOK_GROUPING_SETS_EXPRESSION=350;
    public static final int TOK_HAVING=351;
    public static final int TOK_HINT=352;
    public static final int TOK_HINTARGLIST=353;
    public static final int TOK_HINTLIST=354;
    public static final int TOK_HOLD_DDLTIME=355;
    public static final int TOK_IFEXISTS=356;
    public static final int TOK_IFNOTEXISTS=357;
    public static final int TOK_IMPORT=358;
    public static final int TOK_INDEXCOMMENT=359;
    public static final int TOK_INDEXPROPERTIES=360;
    public static final int TOK_INDEXPROPLIST=361;
    public static final int TOK_INSERT=362;
    public static final int TOK_INSERT_INTO=363;
    public static final int TOK_INT=364;
    public static final int TOK_ISNOTNULL=365;
    public static final int TOK_ISNULL=366;
    public static final int TOK_JOIN=367;
    public static final int TOK_LATERAL_VIEW=368;
    public static final int TOK_LEFTOUTERJOIN=369;
    public static final int TOK_LEFTSEMIJOIN=370;
    public static final int TOK_LIKETABLE=371;
    public static final int TOK_LIMIT=372;
    public static final int TOK_LIST=373;
    public static final int TOK_LOAD=374;
    public static final int TOK_LOCAL_DIR=375;
    public static final int TOK_LOCKTABLE=376;
    public static final int TOK_MAP=377;
    public static final int TOK_MAPJOIN=378;
    public static final int TOK_MSCK=379;
    public static final int TOK_NO_DROP=380;
    public static final int TOK_NULL=381;
    public static final int TOK_OFFLINE=382;
    public static final int TOK_OP_ADD=383;
    public static final int TOK_OP_AND=384;
    public static final int TOK_OP_BITAND=385;
    public static final int TOK_OP_BITNOT=386;
    public static final int TOK_OP_BITOR=387;
    public static final int TOK_OP_BITXOR=388;
    public static final int TOK_OP_DIV=389;
    public static final int TOK_OP_EQ=390;
    public static final int TOK_OP_GE=391;
    public static final int TOK_OP_GT=392;
    public static final int TOK_OP_LE=393;
    public static final int TOK_OP_LIKE=394;
    public static final int TOK_OP_LT=395;
    public static final int TOK_OP_MOD=396;
    public static final int TOK_OP_MUL=397;
    public static final int TOK_OP_NE=398;
    public static final int TOK_OP_NOT=399;
    public static final int TOK_OP_OR=400;
    public static final int TOK_OP_SUB=401;
    public static final int TOK_ORDERBY=402;
    public static final int TOK_ORREPLACE=403;
    public static final int TOK_PARTITIONLOCATION=404;
    public static final int TOK_PARTSPEC=405;
    public static final int TOK_PARTVAL=406;
    public static final int TOK_PRINCIPAL_NAME=407;
    public static final int TOK_PRIVILEGE=408;
    public static final int TOK_PRIVILEGE_LIST=409;
    public static final int TOK_PRIV_ALL=410;
    public static final int TOK_PRIV_ALTER_DATA=411;
    public static final int TOK_PRIV_ALTER_METADATA=412;
    public static final int TOK_PRIV_CREATE=413;
    public static final int TOK_PRIV_DROP=414;
    public static final int TOK_PRIV_INDEX=415;
    public static final int TOK_PRIV_LOCK=416;
    public static final int TOK_PRIV_OBJECT=417;
    public static final int TOK_PRIV_OBJECT_COL=418;
    public static final int TOK_PRIV_SELECT=419;
    public static final int TOK_PRIV_SHOW_DATABASE=420;
    public static final int TOK_QUERY=421;
    public static final int TOK_READONLY=422;
    public static final int TOK_RECORDREADER=423;
    public static final int TOK_RECORDWRITER=424;
    public static final int TOK_RESTRICT=425;
    public static final int TOK_REVOKE=426;
    public static final int TOK_REVOKE_ROLE=427;
    public static final int TOK_RIGHTOUTERJOIN=428;
    public static final int TOK_ROLE=429;
    public static final int TOK_ROLLUP_GROUPBY=430;
    public static final int TOK_SELECT=431;
    public static final int TOK_SELECTDI=432;
    public static final int TOK_SELEXPR=433;
    public static final int TOK_SERDE=434;
    public static final int TOK_SERDENAME=435;
    public static final int TOK_SERDEPROPS=436;
    public static final int TOK_SHOWCOLUMNS=437;
    public static final int TOK_SHOWDATABASES=438;
    public static final int TOK_SHOWFUNCTIONS=439;
    public static final int TOK_SHOWINDEXES=440;
    public static final int TOK_SHOWLOCKS=441;
    public static final int TOK_SHOWPARTITIONS=442;
    public static final int TOK_SHOWTABLES=443;
    public static final int TOK_SHOW_CREATETABLE=444;
    public static final int TOK_SHOW_GRANT=445;
    public static final int TOK_SHOW_ROLE_GRANT=446;
    public static final int TOK_SHOW_TABLESTATUS=447;
    public static final int TOK_SHOW_TBLPROPERTIES=448;
    public static final int TOK_SKEWED_LOCATIONS=449;
    public static final int TOK_SKEWED_LOCATION_LIST=450;
    public static final int TOK_SKEWED_LOCATION_MAP=451;
    public static final int TOK_SMALLINT=452;
    public static final int TOK_SORTBY=453;
    public static final int TOK_STORAGEHANDLER=454;
    public static final int TOK_STOREDASDIRS=455;
    public static final int TOK_STREAMTABLE=456;
    public static final int TOK_STRING=457;
    public static final int TOK_STRINGLITERALSEQUENCE=458;
    public static final int TOK_STRUCT=459;
    public static final int TOK_SUBQUERY=460;
    public static final int TOK_SWITCHDATABASE=461;
    public static final int TOK_TAB=462;
    public static final int TOK_TABALIAS=463;
    public static final int TOK_TABCOL=464;
    public static final int TOK_TABCOLLIST=465;
    public static final int TOK_TABCOLNAME=466;
    public static final int TOK_TABCOLVALUE=467;
    public static final int TOK_TABCOLVALUES=468;
    public static final int TOK_TABCOLVALUE_PAIR=469;
    public static final int TOK_TABLEBUCKETS=470;
    public static final int TOK_TABLEBUCKETSAMPLE=471;
    public static final int TOK_TABLECOMMENT=472;
    public static final int TOK_TABLEFILEFORMAT=473;
    public static final int TOK_TABLELOCATION=474;
    public static final int TOK_TABLEPARTCOLS=475;
    public static final int TOK_TABLEPROPERTIES=476;
    public static final int TOK_TABLEPROPERTY=477;
    public static final int TOK_TABLEPROPLIST=478;
    public static final int TOK_TABLEROWFORMAT=479;
    public static final int TOK_TABLEROWFORMATCOLLITEMS=480;
    public static final int TOK_TABLEROWFORMATFIELD=481;
    public static final int TOK_TABLEROWFORMATLINES=482;
    public static final int TOK_TABLEROWFORMATMAPKEYS=483;
    public static final int TOK_TABLESERIALIZER=484;
    public static final int TOK_TABLESKEWED=485;
    public static final int TOK_TABLESPLITSAMPLE=486;
    public static final int TOK_TABLE_OR_COL=487;
    public static final int TOK_TABLE_PARTITION=488;
    public static final int TOK_TABNAME=489;
    public static final int TOK_TABREF=490;
    public static final int TOK_TABSORTCOLNAMEASC=491;
    public static final int TOK_TABSORTCOLNAMEDESC=492;
    public static final int TOK_TABSRC=493;
    public static final int TOK_TABTYPE=494;
    public static final int TOK_TBLRCFILE=495;
    public static final int TOK_TBLSEQUENCEFILE=496;
    public static final int TOK_TBLTEXTFILE=497;
    public static final int TOK_TIMESTAMP=498;
    public static final int TOK_TINYINT=499;
    public static final int TOK_TMP_FILE=500;
    public static final int TOK_TRANSFORM=501;
    public static final int TOK_TRUE=502;
    public static final int TOK_UNION=503;
    public static final int TOK_UNIONTYPE=504;
    public static final int TOK_UNIQUEJOIN=505;
    public static final int TOK_UNLOCKTABLE=506;
    public static final int TOK_USER=507;
    public static final int TOK_USERSCRIPTCOLNAMES=508;
    public static final int TOK_USERSCRIPTCOLSCHEMA=509;
    public static final int TOK_VIEWPARTCOLS=510;
    public static final int TOK_WHERE=511;
    public static final int TinyintLiteral=512;
    public static final int WS=513;

    // delegates
    public Parser[] getDelegates() {
        return new Parser[] {};
    }

    // delegators


    public HiveParser(TokenStream input) {
        this(input, new RecognizerSharedState());
    }
    public HiveParser(TokenStream input, RecognizerSharedState state) {
        super(input, state);
    }

protected TreeAdaptor adaptor = new CommonTreeAdaptor();

public void setTreeAdaptor(TreeAdaptor adaptor) {
    this.adaptor = adaptor;
}
public TreeAdaptor getTreeAdaptor() {
    return adaptor;
}
    public String[] getTokenNames() { return HiveParser.tokenNames; }
    public String getGrammarFileName() { return "/home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g"; }


      Stack msgs = new Stack<String>();


    public static class statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "statement"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:300:1: statement : ( explainStatement EOF | execStatement EOF );
    public final HiveParser.statement_return statement() throws RecognitionException {
        HiveParser.statement_return retval = new HiveParser.statement_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token EOF2=null;
        Token EOF4=null;
        HiveParser.explainStatement_return explainStatement1 =null;

        HiveParser.execStatement_return execStatement3 =null;


        CommonTree EOF2_tree=null;
        CommonTree EOF4_tree=null;

        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:301:2: ( explainStatement EOF | execStatement EOF )
            int alt1=2;
            int LA1_0 = input.LA(1);

            if ( (LA1_0==KW_EXPLAIN) ) {
                alt1=1;
            }
            else if ( ((LA1_0 >= KW_ALTER && LA1_0 <= KW_ANALYZE)||LA1_0==KW_CREATE||(LA1_0 >= KW_DESC && LA1_0 <= KW_DESCRIBE)||LA1_0==KW_DROP||LA1_0==KW_EXPORT||LA1_0==KW_FROM||LA1_0==KW_GRANT||LA1_0==KW_IMPORT||LA1_0==KW_INSERT||LA1_0==KW_LOAD||LA1_0==KW_LOCK||LA1_0==KW_MAP||LA1_0==KW_MSCK||LA1_0==KW_REDUCE||LA1_0==KW_REVOKE||LA1_0==KW_SELECT||LA1_0==KW_SHOW||LA1_0==KW_UNLOCK||LA1_0==KW_USE) ) {
                alt1=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 1, 0, input);

                throw nvae;

            }
            switch (alt1) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:301:4: explainStatement EOF
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_explainStatement_in_statement823);
                    explainStatement1=explainStatement();

                    state._fsp--;

                    adaptor.addChild(root_0, explainStatement1.getTree());

                    EOF2=(Token)match(input,EOF,FOLLOW_EOF_in_statement825); 
                    EOF2_tree = 
                    (CommonTree)adaptor.create(EOF2)
                    ;
                    adaptor.addChild(root_0, EOF2_tree);


                    }
                    break;
                case 2 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:302:4: execStatement EOF
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_execStatement_in_statement830);
                    execStatement3=execStatement();

                    state._fsp--;

                    adaptor.addChild(root_0, execStatement3.getTree());

                    EOF4=(Token)match(input,EOF,FOLLOW_EOF_in_statement832); 
                    EOF4_tree = 
                    (CommonTree)adaptor.create(EOF4)
                    ;
                    adaptor.addChild(root_0, EOF4_tree);


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "statement"


    public static class explainStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "explainStatement"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:305:1: explainStatement : KW_EXPLAIN (explainOptions= KW_EXTENDED |explainOptions= KW_FORMATTED |explainOptions= KW_DEPENDENCY )? execStatement -> ^( TOK_EXPLAIN execStatement ( $explainOptions)? ) ;
    public final HiveParser.explainStatement_return explainStatement() throws RecognitionException {
        HiveParser.explainStatement_return retval = new HiveParser.explainStatement_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token explainOptions=null;
        Token KW_EXPLAIN5=null;
        HiveParser.execStatement_return execStatement6 =null;


        CommonTree explainOptions_tree=null;
        CommonTree KW_EXPLAIN5_tree=null;
        RewriteRuleTokenStream stream_KW_FORMATTED=new RewriteRuleTokenStream(adaptor,"token KW_FORMATTED");
        RewriteRuleTokenStream stream_KW_DEPENDENCY=new RewriteRuleTokenStream(adaptor,"token KW_DEPENDENCY");
        RewriteRuleTokenStream stream_KW_EXTENDED=new RewriteRuleTokenStream(adaptor,"token KW_EXTENDED");
        RewriteRuleTokenStream stream_KW_EXPLAIN=new RewriteRuleTokenStream(adaptor,"token KW_EXPLAIN");
        RewriteRuleSubtreeStream stream_execStatement=new RewriteRuleSubtreeStream(adaptor,"rule execStatement");
         msgs.push("explain statement"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:308:2: ( KW_EXPLAIN (explainOptions= KW_EXTENDED |explainOptions= KW_FORMATTED |explainOptions= KW_DEPENDENCY )? execStatement -> ^( TOK_EXPLAIN execStatement ( $explainOptions)? ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:308:4: KW_EXPLAIN (explainOptions= KW_EXTENDED |explainOptions= KW_FORMATTED |explainOptions= KW_DEPENDENCY )? execStatement
            {
            KW_EXPLAIN5=(Token)match(input,KW_EXPLAIN,FOLLOW_KW_EXPLAIN_in_explainStatement853);  
            stream_KW_EXPLAIN.add(KW_EXPLAIN5);


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:308:15: (explainOptions= KW_EXTENDED |explainOptions= KW_FORMATTED |explainOptions= KW_DEPENDENCY )?
            int alt2=4;
            switch ( input.LA(1) ) {
                case KW_EXTENDED:
                    {
                    alt2=1;
                    }
                    break;
                case KW_FORMATTED:
                    {
                    alt2=2;
                    }
                    break;
                case KW_DEPENDENCY:
                    {
                    alt2=3;
                    }
                    break;
            }

            switch (alt2) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:308:16: explainOptions= KW_EXTENDED
                    {
                    explainOptions=(Token)match(input,KW_EXTENDED,FOLLOW_KW_EXTENDED_in_explainStatement858);  
                    stream_KW_EXTENDED.add(explainOptions);


                    }
                    break;
                case 2 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:308:43: explainOptions= KW_FORMATTED
                    {
                    explainOptions=(Token)match(input,KW_FORMATTED,FOLLOW_KW_FORMATTED_in_explainStatement862);  
                    stream_KW_FORMATTED.add(explainOptions);


                    }
                    break;
                case 3 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:308:71: explainOptions= KW_DEPENDENCY
                    {
                    explainOptions=(Token)match(input,KW_DEPENDENCY,FOLLOW_KW_DEPENDENCY_in_explainStatement866);  
                    stream_KW_DEPENDENCY.add(explainOptions);


                    }
                    break;

            }


            pushFollow(FOLLOW_execStatement_in_explainStatement870);
            execStatement6=execStatement();

            state._fsp--;

            stream_execStatement.add(execStatement6.getTree());

            // AST REWRITE
            // elements: execStatement, explainOptions
            // token labels: explainOptions
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_explainOptions=new RewriteRuleTokenStream(adaptor,"token explainOptions",explainOptions);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 309:7: -> ^( TOK_EXPLAIN execStatement ( $explainOptions)? )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:309:10: ^( TOK_EXPLAIN execStatement ( $explainOptions)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_EXPLAIN, "TOK_EXPLAIN")
                , root_1);

                adaptor.addChild(root_1, stream_execStatement.nextTree());

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:309:39: ( $explainOptions)?
                if ( stream_explainOptions.hasNext() ) {
                    adaptor.addChild(root_1, stream_explainOptions.nextNode());

                }
                stream_explainOptions.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "explainStatement"


    public static class execStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "execStatement"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:312:1: execStatement : ( queryStatementExpression | loadStatement | exportStatement | importStatement | ddlStatement );
    public final HiveParser.execStatement_return execStatement() throws RecognitionException {
        HiveParser.execStatement_return retval = new HiveParser.execStatement_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        HiveParser.queryStatementExpression_return queryStatementExpression7 =null;

        HiveParser.loadStatement_return loadStatement8 =null;

        HiveParser.exportStatement_return exportStatement9 =null;

        HiveParser.importStatement_return importStatement10 =null;

        HiveParser.ddlStatement_return ddlStatement11 =null;



         msgs.push("statement"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:315:5: ( queryStatementExpression | loadStatement | exportStatement | importStatement | ddlStatement )
            int alt3=5;
            switch ( input.LA(1) ) {
            case KW_FROM:
            case KW_INSERT:
            case KW_MAP:
            case KW_REDUCE:
            case KW_SELECT:
                {
                alt3=1;
                }
                break;
            case KW_LOAD:
                {
                alt3=2;
                }
                break;
            case KW_EXPORT:
                {
                alt3=3;
                }
                break;
            case KW_IMPORT:
                {
                alt3=4;
                }
                break;
            case KW_ALTER:
            case KW_ANALYZE:
            case KW_CREATE:
            case KW_DESC:
            case KW_DESCRIBE:
            case KW_DROP:
            case KW_GRANT:
            case KW_LOCK:
            case KW_MSCK:
            case KW_REVOKE:
            case KW_SHOW:
            case KW_UNLOCK:
            case KW_USE:
                {
                alt3=5;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 3, 0, input);

                throw nvae;

            }

            switch (alt3) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:315:7: queryStatementExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_queryStatementExpression_in_execStatement912);
                    queryStatementExpression7=queryStatementExpression();

                    state._fsp--;

                    adaptor.addChild(root_0, queryStatementExpression7.getTree());

                    }
                    break;
                case 2 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:316:7: loadStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_loadStatement_in_execStatement920);
                    loadStatement8=loadStatement();

                    state._fsp--;

                    adaptor.addChild(root_0, loadStatement8.getTree());

                    }
                    break;
                case 3 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:317:7: exportStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_exportStatement_in_execStatement928);
                    exportStatement9=exportStatement();

                    state._fsp--;

                    adaptor.addChild(root_0, exportStatement9.getTree());

                    }
                    break;
                case 4 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:318:7: importStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_importStatement_in_execStatement936);
                    importStatement10=importStatement();

                    state._fsp--;

                    adaptor.addChild(root_0, importStatement10.getTree());

                    }
                    break;
                case 5 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:319:7: ddlStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_ddlStatement_in_execStatement944);
                    ddlStatement11=ddlStatement();

                    state._fsp--;

                    adaptor.addChild(root_0, ddlStatement11.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "execStatement"


    public static class loadStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "loadStatement"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:322:1: loadStatement : KW_LOAD KW_DATA (islocal= KW_LOCAL )? KW_INPATH (path= StringLiteral ) (isoverwrite= KW_OVERWRITE )? KW_INTO KW_TABLE (tab= tableOrPartition ) -> ^( TOK_LOAD $path $tab ( $islocal)? ( $isoverwrite)? ) ;
    public final HiveParser.loadStatement_return loadStatement() throws RecognitionException {
        HiveParser.loadStatement_return retval = new HiveParser.loadStatement_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token islocal=null;
        Token path=null;
        Token isoverwrite=null;
        Token KW_LOAD12=null;
        Token KW_DATA13=null;
        Token KW_INPATH14=null;
        Token KW_INTO15=null;
        Token KW_TABLE16=null;
        HiveParser.tableOrPartition_return tab =null;


        CommonTree islocal_tree=null;
        CommonTree path_tree=null;
        CommonTree isoverwrite_tree=null;
        CommonTree KW_LOAD12_tree=null;
        CommonTree KW_DATA13_tree=null;
        CommonTree KW_INPATH14_tree=null;
        CommonTree KW_INTO15_tree=null;
        CommonTree KW_TABLE16_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_INPATH=new RewriteRuleTokenStream(adaptor,"token KW_INPATH");
        RewriteRuleTokenStream stream_KW_INTO=new RewriteRuleTokenStream(adaptor,"token KW_INTO");
        RewriteRuleTokenStream stream_KW_LOCAL=new RewriteRuleTokenStream(adaptor,"token KW_LOCAL");
        RewriteRuleTokenStream stream_KW_OVERWRITE=new RewriteRuleTokenStream(adaptor,"token KW_OVERWRITE");
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleTokenStream stream_KW_LOAD=new RewriteRuleTokenStream(adaptor,"token KW_LOAD");
        RewriteRuleTokenStream stream_KW_DATA=new RewriteRuleTokenStream(adaptor,"token KW_DATA");
        RewriteRuleSubtreeStream stream_tableOrPartition=new RewriteRuleSubtreeStream(adaptor,"rule tableOrPartition");
         msgs.push("load statement"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:325:5: ( KW_LOAD KW_DATA (islocal= KW_LOCAL )? KW_INPATH (path= StringLiteral ) (isoverwrite= KW_OVERWRITE )? KW_INTO KW_TABLE (tab= tableOrPartition ) -> ^( TOK_LOAD $path $tab ( $islocal)? ( $isoverwrite)? ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:325:7: KW_LOAD KW_DATA (islocal= KW_LOCAL )? KW_INPATH (path= StringLiteral ) (isoverwrite= KW_OVERWRITE )? KW_INTO KW_TABLE (tab= tableOrPartition )
            {
            KW_LOAD12=(Token)match(input,KW_LOAD,FOLLOW_KW_LOAD_in_loadStatement971);  
            stream_KW_LOAD.add(KW_LOAD12);


            KW_DATA13=(Token)match(input,KW_DATA,FOLLOW_KW_DATA_in_loadStatement973);  
            stream_KW_DATA.add(KW_DATA13);


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:325:23: (islocal= KW_LOCAL )?
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==KW_LOCAL) ) {
                alt4=1;
            }
            switch (alt4) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:325:24: islocal= KW_LOCAL
                    {
                    islocal=(Token)match(input,KW_LOCAL,FOLLOW_KW_LOCAL_in_loadStatement978);  
                    stream_KW_LOCAL.add(islocal);


                    }
                    break;

            }


            KW_INPATH14=(Token)match(input,KW_INPATH,FOLLOW_KW_INPATH_in_loadStatement982);  
            stream_KW_INPATH.add(KW_INPATH14);


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:325:53: (path= StringLiteral )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:325:54: path= StringLiteral
            {
            path=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_loadStatement987);  
            stream_StringLiteral.add(path);


            }


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:325:74: (isoverwrite= KW_OVERWRITE )?
            int alt5=2;
            int LA5_0 = input.LA(1);

            if ( (LA5_0==KW_OVERWRITE) ) {
                alt5=1;
            }
            switch (alt5) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:325:75: isoverwrite= KW_OVERWRITE
                    {
                    isoverwrite=(Token)match(input,KW_OVERWRITE,FOLLOW_KW_OVERWRITE_in_loadStatement993);  
                    stream_KW_OVERWRITE.add(isoverwrite);


                    }
                    break;

            }


            KW_INTO15=(Token)match(input,KW_INTO,FOLLOW_KW_INTO_in_loadStatement997);  
            stream_KW_INTO.add(KW_INTO15);


            KW_TABLE16=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_loadStatement999);  
            stream_KW_TABLE.add(KW_TABLE16);


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:325:119: (tab= tableOrPartition )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:325:120: tab= tableOrPartition
            {
            pushFollow(FOLLOW_tableOrPartition_in_loadStatement1004);
            tab=tableOrPartition();

            state._fsp--;

            stream_tableOrPartition.add(tab.getTree());

            }


            // AST REWRITE
            // elements: path, tab, islocal, isoverwrite
            // token labels: islocal, isoverwrite, path
            // rule labels: retval, tab
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_islocal=new RewriteRuleTokenStream(adaptor,"token islocal",islocal);
            RewriteRuleTokenStream stream_isoverwrite=new RewriteRuleTokenStream(adaptor,"token isoverwrite",isoverwrite);
            RewriteRuleTokenStream stream_path=new RewriteRuleTokenStream(adaptor,"token path",path);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_tab=new RewriteRuleSubtreeStream(adaptor,"rule tab",tab!=null?tab.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 326:5: -> ^( TOK_LOAD $path $tab ( $islocal)? ( $isoverwrite)? )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:326:8: ^( TOK_LOAD $path $tab ( $islocal)? ( $isoverwrite)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_LOAD, "TOK_LOAD")
                , root_1);

                adaptor.addChild(root_1, stream_path.nextNode());

                adaptor.addChild(root_1, stream_tab.nextTree());

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:326:31: ( $islocal)?
                if ( stream_islocal.hasNext() ) {
                    adaptor.addChild(root_1, stream_islocal.nextNode());

                }
                stream_islocal.reset();

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:326:41: ( $isoverwrite)?
                if ( stream_isoverwrite.hasNext() ) {
                    adaptor.addChild(root_1, stream_isoverwrite.nextNode());

                }
                stream_isoverwrite.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "loadStatement"


    public static class exportStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exportStatement"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:329:1: exportStatement : KW_EXPORT KW_TABLE (tab= tableOrPartition ) KW_TO (path= StringLiteral ) -> ^( TOK_EXPORT $tab $path) ;
    public final HiveParser.exportStatement_return exportStatement() throws RecognitionException {
        HiveParser.exportStatement_return retval = new HiveParser.exportStatement_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token path=null;
        Token KW_EXPORT17=null;
        Token KW_TABLE18=null;
        Token KW_TO19=null;
        HiveParser.tableOrPartition_return tab =null;


        CommonTree path_tree=null;
        CommonTree KW_EXPORT17_tree=null;
        CommonTree KW_TABLE18_tree=null;
        CommonTree KW_TO19_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_EXPORT=new RewriteRuleTokenStream(adaptor,"token KW_EXPORT");
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleTokenStream stream_KW_TO=new RewriteRuleTokenStream(adaptor,"token KW_TO");
        RewriteRuleSubtreeStream stream_tableOrPartition=new RewriteRuleSubtreeStream(adaptor,"rule tableOrPartition");
         msgs.push("export statement"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:332:5: ( KW_EXPORT KW_TABLE (tab= tableOrPartition ) KW_TO (path= StringLiteral ) -> ^( TOK_EXPORT $tab $path) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:332:7: KW_EXPORT KW_TABLE (tab= tableOrPartition ) KW_TO (path= StringLiteral )
            {
            KW_EXPORT17=(Token)match(input,KW_EXPORT,FOLLOW_KW_EXPORT_in_exportStatement1056);  
            stream_KW_EXPORT.add(KW_EXPORT17);


            KW_TABLE18=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_exportStatement1058);  
            stream_KW_TABLE.add(KW_TABLE18);


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:332:26: (tab= tableOrPartition )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:332:27: tab= tableOrPartition
            {
            pushFollow(FOLLOW_tableOrPartition_in_exportStatement1063);
            tab=tableOrPartition();

            state._fsp--;

            stream_tableOrPartition.add(tab.getTree());

            }


            KW_TO19=(Token)match(input,KW_TO,FOLLOW_KW_TO_in_exportStatement1066);  
            stream_KW_TO.add(KW_TO19);


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:332:55: (path= StringLiteral )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:332:56: path= StringLiteral
            {
            path=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_exportStatement1071);  
            stream_StringLiteral.add(path);


            }


            // AST REWRITE
            // elements: tab, path
            // token labels: path
            // rule labels: retval, tab
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_path=new RewriteRuleTokenStream(adaptor,"token path",path);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_tab=new RewriteRuleSubtreeStream(adaptor,"rule tab",tab!=null?tab.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 333:5: -> ^( TOK_EXPORT $tab $path)
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:333:8: ^( TOK_EXPORT $tab $path)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_EXPORT, "TOK_EXPORT")
                , root_1);

                adaptor.addChild(root_1, stream_tab.nextTree());

                adaptor.addChild(root_1, stream_path.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "exportStatement"


    public static class importStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "importStatement"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:336:1: importStatement : KW_IMPORT ( (ext= KW_EXTERNAL )? KW_TABLE (tab= tableOrPartition ) )? KW_FROM (path= StringLiteral ) ( tableLocation )? -> ^( TOK_IMPORT $path ( $tab)? ( $ext)? ( tableLocation )? ) ;
    public final HiveParser.importStatement_return importStatement() throws RecognitionException {
        HiveParser.importStatement_return retval = new HiveParser.importStatement_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token ext=null;
        Token path=null;
        Token KW_IMPORT20=null;
        Token KW_TABLE21=null;
        Token KW_FROM22=null;
        HiveParser.tableOrPartition_return tab =null;

        HiveParser.tableLocation_return tableLocation23 =null;


        CommonTree ext_tree=null;
        CommonTree path_tree=null;
        CommonTree KW_IMPORT20_tree=null;
        CommonTree KW_TABLE21_tree=null;
        CommonTree KW_FROM22_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_IMPORT=new RewriteRuleTokenStream(adaptor,"token KW_IMPORT");
        RewriteRuleTokenStream stream_KW_EXTERNAL=new RewriteRuleTokenStream(adaptor,"token KW_EXTERNAL");
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleTokenStream stream_KW_FROM=new RewriteRuleTokenStream(adaptor,"token KW_FROM");
        RewriteRuleSubtreeStream stream_tableOrPartition=new RewriteRuleSubtreeStream(adaptor,"rule tableOrPartition");
        RewriteRuleSubtreeStream stream_tableLocation=new RewriteRuleSubtreeStream(adaptor,"rule tableLocation");
         msgs.push("import statement"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:339:2: ( KW_IMPORT ( (ext= KW_EXTERNAL )? KW_TABLE (tab= tableOrPartition ) )? KW_FROM (path= StringLiteral ) ( tableLocation )? -> ^( TOK_IMPORT $path ( $tab)? ( $ext)? ( tableLocation )? ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:339:4: KW_IMPORT ( (ext= KW_EXTERNAL )? KW_TABLE (tab= tableOrPartition ) )? KW_FROM (path= StringLiteral ) ( tableLocation )?
            {
            KW_IMPORT20=(Token)match(input,KW_IMPORT,FOLLOW_KW_IMPORT_in_importStatement1112);  
            stream_KW_IMPORT.add(KW_IMPORT20);


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:339:14: ( (ext= KW_EXTERNAL )? KW_TABLE (tab= tableOrPartition ) )?
            int alt7=2;
            int LA7_0 = input.LA(1);

            if ( (LA7_0==KW_EXTERNAL||LA7_0==KW_TABLE) ) {
                alt7=1;
            }
            switch (alt7) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:339:15: (ext= KW_EXTERNAL )? KW_TABLE (tab= tableOrPartition )
                    {
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:339:15: (ext= KW_EXTERNAL )?
                    int alt6=2;
                    int LA6_0 = input.LA(1);

                    if ( (LA6_0==KW_EXTERNAL) ) {
                        alt6=1;
                    }
                    switch (alt6) {
                        case 1 :
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:339:16: ext= KW_EXTERNAL
                            {
                            ext=(Token)match(input,KW_EXTERNAL,FOLLOW_KW_EXTERNAL_in_importStatement1118);  
                            stream_KW_EXTERNAL.add(ext);


                            }
                            break;

                    }


                    KW_TABLE21=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_importStatement1122);  
                    stream_KW_TABLE.add(KW_TABLE21);


                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:339:43: (tab= tableOrPartition )
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:339:44: tab= tableOrPartition
                    {
                    pushFollow(FOLLOW_tableOrPartition_in_importStatement1127);
                    tab=tableOrPartition();

                    state._fsp--;

                    stream_tableOrPartition.add(tab.getTree());

                    }


                    }
                    break;

            }


            KW_FROM22=(Token)match(input,KW_FROM,FOLLOW_KW_FROM_in_importStatement1132);  
            stream_KW_FROM.add(KW_FROM22);


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:339:76: (path= StringLiteral )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:339:77: path= StringLiteral
            {
            path=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_importStatement1137);  
            stream_StringLiteral.add(path);


            }


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:339:97: ( tableLocation )?
            int alt8=2;
            int LA8_0 = input.LA(1);

            if ( (LA8_0==KW_LOCATION) ) {
                alt8=1;
            }
            switch (alt8) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:339:97: tableLocation
                    {
                    pushFollow(FOLLOW_tableLocation_in_importStatement1140);
                    tableLocation23=tableLocation();

                    state._fsp--;

                    stream_tableLocation.add(tableLocation23.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: tableLocation, ext, tab, path
            // token labels: path, ext
            // rule labels: retval, tab
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_path=new RewriteRuleTokenStream(adaptor,"token path",path);
            RewriteRuleTokenStream stream_ext=new RewriteRuleTokenStream(adaptor,"token ext",ext);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_tab=new RewriteRuleSubtreeStream(adaptor,"rule tab",tab!=null?tab.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 340:5: -> ^( TOK_IMPORT $path ( $tab)? ( $ext)? ( tableLocation )? )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:340:8: ^( TOK_IMPORT $path ( $tab)? ( $ext)? ( tableLocation )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_IMPORT, "TOK_IMPORT")
                , root_1);

                adaptor.addChild(root_1, stream_path.nextNode());

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:340:28: ( $tab)?
                if ( stream_tab.hasNext() ) {
                    adaptor.addChild(root_1, stream_tab.nextTree());

                }
                stream_tab.reset();

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:340:34: ( $ext)?
                if ( stream_ext.hasNext() ) {
                    adaptor.addChild(root_1, stream_ext.nextNode());

                }
                stream_ext.reset();

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:340:39: ( tableLocation )?
                if ( stream_tableLocation.hasNext() ) {
                    adaptor.addChild(root_1, stream_tableLocation.nextTree());

                }
                stream_tableLocation.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "importStatement"


    public static class ddlStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "ddlStatement"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:343:1: ddlStatement : ( createDatabaseStatement | switchDatabaseStatement | dropDatabaseStatement | createTableStatement | dropTableStatement | alterStatement | descStatement | showStatement | metastoreCheck | createViewStatement | dropViewStatement | createFunctionStatement | createIndexStatement | dropIndexStatement | dropFunctionStatement | analyzeStatement | lockStatement | unlockStatement | createRoleStatement | dropRoleStatement | grantPrivileges | revokePrivileges | showGrants | showRoleGrants | grantRole | revokeRole );
    public final HiveParser.ddlStatement_return ddlStatement() throws RecognitionException {
        HiveParser.ddlStatement_return retval = new HiveParser.ddlStatement_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        HiveParser.createDatabaseStatement_return createDatabaseStatement24 =null;

        HiveParser.switchDatabaseStatement_return switchDatabaseStatement25 =null;

        HiveParser.dropDatabaseStatement_return dropDatabaseStatement26 =null;

        HiveParser.createTableStatement_return createTableStatement27 =null;

        HiveParser.dropTableStatement_return dropTableStatement28 =null;

        HiveParser.alterStatement_return alterStatement29 =null;

        HiveParser.descStatement_return descStatement30 =null;

        HiveParser.showStatement_return showStatement31 =null;

        HiveParser.metastoreCheck_return metastoreCheck32 =null;

        HiveParser.createViewStatement_return createViewStatement33 =null;

        HiveParser.dropViewStatement_return dropViewStatement34 =null;

        HiveParser.createFunctionStatement_return createFunctionStatement35 =null;

        HiveParser.createIndexStatement_return createIndexStatement36 =null;

        HiveParser.dropIndexStatement_return dropIndexStatement37 =null;

        HiveParser.dropFunctionStatement_return dropFunctionStatement38 =null;

        HiveParser.analyzeStatement_return analyzeStatement39 =null;

        HiveParser.lockStatement_return lockStatement40 =null;

        HiveParser.unlockStatement_return unlockStatement41 =null;

        HiveParser.createRoleStatement_return createRoleStatement42 =null;

        HiveParser.dropRoleStatement_return dropRoleStatement43 =null;

        HiveParser.grantPrivileges_return grantPrivileges44 =null;

        HiveParser.revokePrivileges_return revokePrivileges45 =null;

        HiveParser.showGrants_return showGrants46 =null;

        HiveParser.showRoleGrants_return showRoleGrants47 =null;

        HiveParser.grantRole_return grantRole48 =null;

        HiveParser.revokeRole_return revokeRole49 =null;



         msgs.push("ddl statement"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:346:5: ( createDatabaseStatement | switchDatabaseStatement | dropDatabaseStatement | createTableStatement | dropTableStatement | alterStatement | descStatement | showStatement | metastoreCheck | createViewStatement | dropViewStatement | createFunctionStatement | createIndexStatement | dropIndexStatement | dropFunctionStatement | analyzeStatement | lockStatement | unlockStatement | createRoleStatement | dropRoleStatement | grantPrivileges | revokePrivileges | showGrants | showRoleGrants | grantRole | revokeRole )
            int alt9=26;
            alt9 = dfa9.predict(input);
            switch (alt9) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:346:7: createDatabaseStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_createDatabaseStatement_in_ddlStatement1192);
                    createDatabaseStatement24=createDatabaseStatement();

                    state._fsp--;

                    adaptor.addChild(root_0, createDatabaseStatement24.getTree());

                    }
                    break;
                case 2 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:347:7: switchDatabaseStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_switchDatabaseStatement_in_ddlStatement1200);
                    switchDatabaseStatement25=switchDatabaseStatement();

                    state._fsp--;

                    adaptor.addChild(root_0, switchDatabaseStatement25.getTree());

                    }
                    break;
                case 3 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:348:7: dropDatabaseStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_dropDatabaseStatement_in_ddlStatement1208);
                    dropDatabaseStatement26=dropDatabaseStatement();

                    state._fsp--;

                    adaptor.addChild(root_0, dropDatabaseStatement26.getTree());

                    }
                    break;
                case 4 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:349:7: createTableStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_createTableStatement_in_ddlStatement1216);
                    createTableStatement27=createTableStatement();

                    state._fsp--;

                    adaptor.addChild(root_0, createTableStatement27.getTree());

                    }
                    break;
                case 5 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:350:7: dropTableStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_dropTableStatement_in_ddlStatement1224);
                    dropTableStatement28=dropTableStatement();

                    state._fsp--;

                    adaptor.addChild(root_0, dropTableStatement28.getTree());

                    }
                    break;
                case 6 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:351:7: alterStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_alterStatement_in_ddlStatement1232);
                    alterStatement29=alterStatement();

                    state._fsp--;

                    adaptor.addChild(root_0, alterStatement29.getTree());

                    }
                    break;
                case 7 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:352:7: descStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_descStatement_in_ddlStatement1240);
                    descStatement30=descStatement();

                    state._fsp--;

                    adaptor.addChild(root_0, descStatement30.getTree());

                    }
                    break;
                case 8 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:353:7: showStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_showStatement_in_ddlStatement1248);
                    showStatement31=showStatement();

                    state._fsp--;

                    adaptor.addChild(root_0, showStatement31.getTree());

                    }
                    break;
                case 9 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:354:7: metastoreCheck
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_metastoreCheck_in_ddlStatement1256);
                    metastoreCheck32=metastoreCheck();

                    state._fsp--;

                    adaptor.addChild(root_0, metastoreCheck32.getTree());

                    }
                    break;
                case 10 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:355:7: createViewStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_createViewStatement_in_ddlStatement1264);
                    createViewStatement33=createViewStatement();

                    state._fsp--;

                    adaptor.addChild(root_0, createViewStatement33.getTree());

                    }
                    break;
                case 11 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:356:7: dropViewStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_dropViewStatement_in_ddlStatement1272);
                    dropViewStatement34=dropViewStatement();

                    state._fsp--;

                    adaptor.addChild(root_0, dropViewStatement34.getTree());

                    }
                    break;
                case 12 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:357:7: createFunctionStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_createFunctionStatement_in_ddlStatement1280);
                    createFunctionStatement35=createFunctionStatement();

                    state._fsp--;

                    adaptor.addChild(root_0, createFunctionStatement35.getTree());

                    }
                    break;
                case 13 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:358:7: createIndexStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_createIndexStatement_in_ddlStatement1288);
                    createIndexStatement36=createIndexStatement();

                    state._fsp--;

                    adaptor.addChild(root_0, createIndexStatement36.getTree());

                    }
                    break;
                case 14 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:359:7: dropIndexStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_dropIndexStatement_in_ddlStatement1296);
                    dropIndexStatement37=dropIndexStatement();

                    state._fsp--;

                    adaptor.addChild(root_0, dropIndexStatement37.getTree());

                    }
                    break;
                case 15 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:360:7: dropFunctionStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_dropFunctionStatement_in_ddlStatement1304);
                    dropFunctionStatement38=dropFunctionStatement();

                    state._fsp--;

                    adaptor.addChild(root_0, dropFunctionStatement38.getTree());

                    }
                    break;
                case 16 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:361:7: analyzeStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_analyzeStatement_in_ddlStatement1312);
                    analyzeStatement39=analyzeStatement();

                    state._fsp--;

                    adaptor.addChild(root_0, analyzeStatement39.getTree());

                    }
                    break;
                case 17 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:362:7: lockStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_lockStatement_in_ddlStatement1320);
                    lockStatement40=lockStatement();

                    state._fsp--;

                    adaptor.addChild(root_0, lockStatement40.getTree());

                    }
                    break;
                case 18 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:363:7: unlockStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_unlockStatement_in_ddlStatement1328);
                    unlockStatement41=unlockStatement();

                    state._fsp--;

                    adaptor.addChild(root_0, unlockStatement41.getTree());

                    }
                    break;
                case 19 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:364:7: createRoleStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_createRoleStatement_in_ddlStatement1336);
                    createRoleStatement42=createRoleStatement();

                    state._fsp--;

                    adaptor.addChild(root_0, createRoleStatement42.getTree());

                    }
                    break;
                case 20 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:365:7: dropRoleStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_dropRoleStatement_in_ddlStatement1344);
                    dropRoleStatement43=dropRoleStatement();

                    state._fsp--;

                    adaptor.addChild(root_0, dropRoleStatement43.getTree());

                    }
                    break;
                case 21 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:366:7: grantPrivileges
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_grantPrivileges_in_ddlStatement1352);
                    grantPrivileges44=grantPrivileges();

                    state._fsp--;

                    adaptor.addChild(root_0, grantPrivileges44.getTree());

                    }
                    break;
                case 22 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:367:7: revokePrivileges
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_revokePrivileges_in_ddlStatement1360);
                    revokePrivileges45=revokePrivileges();

                    state._fsp--;

                    adaptor.addChild(root_0, revokePrivileges45.getTree());

                    }
                    break;
                case 23 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:368:7: showGrants
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_showGrants_in_ddlStatement1368);
                    showGrants46=showGrants();

                    state._fsp--;

                    adaptor.addChild(root_0, showGrants46.getTree());

                    }
                    break;
                case 24 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:369:7: showRoleGrants
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_showRoleGrants_in_ddlStatement1376);
                    showRoleGrants47=showRoleGrants();

                    state._fsp--;

                    adaptor.addChild(root_0, showRoleGrants47.getTree());

                    }
                    break;
                case 25 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:370:7: grantRole
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_grantRole_in_ddlStatement1384);
                    grantRole48=grantRole();

                    state._fsp--;

                    adaptor.addChild(root_0, grantRole48.getTree());

                    }
                    break;
                case 26 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:371:7: revokeRole
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_revokeRole_in_ddlStatement1392);
                    revokeRole49=revokeRole();

                    state._fsp--;

                    adaptor.addChild(root_0, revokeRole49.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "ddlStatement"


    public static class ifExists_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "ifExists"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:374:1: ifExists : KW_IF KW_EXISTS -> ^( TOK_IFEXISTS ) ;
    public final HiveParser.ifExists_return ifExists() throws RecognitionException {
        HiveParser.ifExists_return retval = new HiveParser.ifExists_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_IF50=null;
        Token KW_EXISTS51=null;

        CommonTree KW_IF50_tree=null;
        CommonTree KW_EXISTS51_tree=null;
        RewriteRuleTokenStream stream_KW_IF=new RewriteRuleTokenStream(adaptor,"token KW_IF");
        RewriteRuleTokenStream stream_KW_EXISTS=new RewriteRuleTokenStream(adaptor,"token KW_EXISTS");

         msgs.push("if exists clause"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:377:5: ( KW_IF KW_EXISTS -> ^( TOK_IFEXISTS ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:377:7: KW_IF KW_EXISTS
            {
            KW_IF50=(Token)match(input,KW_IF,FOLLOW_KW_IF_in_ifExists1419);  
            stream_KW_IF.add(KW_IF50);


            KW_EXISTS51=(Token)match(input,KW_EXISTS,FOLLOW_KW_EXISTS_in_ifExists1421);  
            stream_KW_EXISTS.add(KW_EXISTS51);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 378:5: -> ^( TOK_IFEXISTS )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:378:8: ^( TOK_IFEXISTS )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_IFEXISTS, "TOK_IFEXISTS")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "ifExists"


    public static class restrictOrCascade_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "restrictOrCascade"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:381:1: restrictOrCascade : ( KW_RESTRICT -> ^( TOK_RESTRICT ) | KW_CASCADE -> ^( TOK_CASCADE ) );
    public final HiveParser.restrictOrCascade_return restrictOrCascade() throws RecognitionException {
        HiveParser.restrictOrCascade_return retval = new HiveParser.restrictOrCascade_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_RESTRICT52=null;
        Token KW_CASCADE53=null;

        CommonTree KW_RESTRICT52_tree=null;
        CommonTree KW_CASCADE53_tree=null;
        RewriteRuleTokenStream stream_KW_CASCADE=new RewriteRuleTokenStream(adaptor,"token KW_CASCADE");
        RewriteRuleTokenStream stream_KW_RESTRICT=new RewriteRuleTokenStream(adaptor,"token KW_RESTRICT");

         msgs.push("restrict or cascade clause"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:384:5: ( KW_RESTRICT -> ^( TOK_RESTRICT ) | KW_CASCADE -> ^( TOK_CASCADE ) )
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==KW_RESTRICT) ) {
                alt10=1;
            }
            else if ( (LA10_0==KW_CASCADE) ) {
                alt10=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 10, 0, input);

                throw nvae;

            }
            switch (alt10) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:384:7: KW_RESTRICT
                    {
                    KW_RESTRICT52=(Token)match(input,KW_RESTRICT,FOLLOW_KW_RESTRICT_in_restrictOrCascade1458);  
                    stream_KW_RESTRICT.add(KW_RESTRICT52);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 385:5: -> ^( TOK_RESTRICT )
                    {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:385:8: ^( TOK_RESTRICT )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_RESTRICT, "TOK_RESTRICT")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 2 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:386:7: KW_CASCADE
                    {
                    KW_CASCADE53=(Token)match(input,KW_CASCADE,FOLLOW_KW_CASCADE_in_restrictOrCascade1476);  
                    stream_KW_CASCADE.add(KW_CASCADE53);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 387:5: -> ^( TOK_CASCADE )
                    {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:387:8: ^( TOK_CASCADE )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_CASCADE, "TOK_CASCADE")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "restrictOrCascade"


    public static class ifNotExists_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "ifNotExists"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:390:1: ifNotExists : KW_IF KW_NOT KW_EXISTS -> ^( TOK_IFNOTEXISTS ) ;
    public final HiveParser.ifNotExists_return ifNotExists() throws RecognitionException {
        HiveParser.ifNotExists_return retval = new HiveParser.ifNotExists_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_IF54=null;
        Token KW_NOT55=null;
        Token KW_EXISTS56=null;

        CommonTree KW_IF54_tree=null;
        CommonTree KW_NOT55_tree=null;
        CommonTree KW_EXISTS56_tree=null;
        RewriteRuleTokenStream stream_KW_IF=new RewriteRuleTokenStream(adaptor,"token KW_IF");
        RewriteRuleTokenStream stream_KW_NOT=new RewriteRuleTokenStream(adaptor,"token KW_NOT");
        RewriteRuleTokenStream stream_KW_EXISTS=new RewriteRuleTokenStream(adaptor,"token KW_EXISTS");

         msgs.push("if not exists clause"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:393:5: ( KW_IF KW_NOT KW_EXISTS -> ^( TOK_IFNOTEXISTS ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:393:7: KW_IF KW_NOT KW_EXISTS
            {
            KW_IF54=(Token)match(input,KW_IF,FOLLOW_KW_IF_in_ifNotExists1513);  
            stream_KW_IF.add(KW_IF54);


            KW_NOT55=(Token)match(input,KW_NOT,FOLLOW_KW_NOT_in_ifNotExists1515);  
            stream_KW_NOT.add(KW_NOT55);


            KW_EXISTS56=(Token)match(input,KW_EXISTS,FOLLOW_KW_EXISTS_in_ifNotExists1517);  
            stream_KW_EXISTS.add(KW_EXISTS56);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 394:5: -> ^( TOK_IFNOTEXISTS )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:394:8: ^( TOK_IFNOTEXISTS )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_IFNOTEXISTS, "TOK_IFNOTEXISTS")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "ifNotExists"


    public static class storedAsDirs_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "storedAsDirs"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:397:1: storedAsDirs : KW_STORED KW_AS KW_DIRECTORIES -> ^( TOK_STOREDASDIRS ) ;
    public final HiveParser.storedAsDirs_return storedAsDirs() throws RecognitionException {
        HiveParser.storedAsDirs_return retval = new HiveParser.storedAsDirs_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_STORED57=null;
        Token KW_AS58=null;
        Token KW_DIRECTORIES59=null;

        CommonTree KW_STORED57_tree=null;
        CommonTree KW_AS58_tree=null;
        CommonTree KW_DIRECTORIES59_tree=null;
        RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
        RewriteRuleTokenStream stream_KW_STORED=new RewriteRuleTokenStream(adaptor,"token KW_STORED");
        RewriteRuleTokenStream stream_KW_DIRECTORIES=new RewriteRuleTokenStream(adaptor,"token KW_DIRECTORIES");

         msgs.push("stored as directories"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:400:5: ( KW_STORED KW_AS KW_DIRECTORIES -> ^( TOK_STOREDASDIRS ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:400:7: KW_STORED KW_AS KW_DIRECTORIES
            {
            KW_STORED57=(Token)match(input,KW_STORED,FOLLOW_KW_STORED_in_storedAsDirs1554);  
            stream_KW_STORED.add(KW_STORED57);


            KW_AS58=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_storedAsDirs1556);  
            stream_KW_AS.add(KW_AS58);


            KW_DIRECTORIES59=(Token)match(input,KW_DIRECTORIES,FOLLOW_KW_DIRECTORIES_in_storedAsDirs1558);  
            stream_KW_DIRECTORIES.add(KW_DIRECTORIES59);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 401:5: -> ^( TOK_STOREDASDIRS )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:401:8: ^( TOK_STOREDASDIRS )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_STOREDASDIRS, "TOK_STOREDASDIRS")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "storedAsDirs"


    public static class orReplace_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "orReplace"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:404:1: orReplace : KW_OR KW_REPLACE -> ^( TOK_ORREPLACE ) ;
    public final HiveParser.orReplace_return orReplace() throws RecognitionException {
        HiveParser.orReplace_return retval = new HiveParser.orReplace_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_OR60=null;
        Token KW_REPLACE61=null;

        CommonTree KW_OR60_tree=null;
        CommonTree KW_REPLACE61_tree=null;
        RewriteRuleTokenStream stream_KW_REPLACE=new RewriteRuleTokenStream(adaptor,"token KW_REPLACE");
        RewriteRuleTokenStream stream_KW_OR=new RewriteRuleTokenStream(adaptor,"token KW_OR");

         msgs.push("or replace clause"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:407:5: ( KW_OR KW_REPLACE -> ^( TOK_ORREPLACE ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:407:7: KW_OR KW_REPLACE
            {
            KW_OR60=(Token)match(input,KW_OR,FOLLOW_KW_OR_in_orReplace1595);  
            stream_KW_OR.add(KW_OR60);


            KW_REPLACE61=(Token)match(input,KW_REPLACE,FOLLOW_KW_REPLACE_in_orReplace1597);  
            stream_KW_REPLACE.add(KW_REPLACE61);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 408:5: -> ^( TOK_ORREPLACE )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:408:8: ^( TOK_ORREPLACE )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_ORREPLACE, "TOK_ORREPLACE")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "orReplace"


    public static class createDatabaseStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "createDatabaseStatement"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:412:1: createDatabaseStatement : KW_CREATE ( KW_DATABASE | KW_SCHEMA ) ( ifNotExists )? name= Identifier ( databaseComment )? ( dbLocation )? ( KW_WITH KW_DBPROPERTIES dbprops= dbProperties )? -> ^( TOK_CREATEDATABASE $name ( ifNotExists )? ( dbLocation )? ( databaseComment )? ( $dbprops)? ) ;
    public final HiveParser.createDatabaseStatement_return createDatabaseStatement() throws RecognitionException {
        HiveParser.createDatabaseStatement_return retval = new HiveParser.createDatabaseStatement_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token name=null;
        Token KW_CREATE62=null;
        Token KW_DATABASE63=null;
        Token KW_SCHEMA64=null;
        Token KW_WITH68=null;
        Token KW_DBPROPERTIES69=null;
        HiveParser.dbProperties_return dbprops =null;

        HiveParser.ifNotExists_return ifNotExists65 =null;

        HiveParser.databaseComment_return databaseComment66 =null;

        HiveParser.dbLocation_return dbLocation67 =null;


        CommonTree name_tree=null;
        CommonTree KW_CREATE62_tree=null;
        CommonTree KW_DATABASE63_tree=null;
        CommonTree KW_SCHEMA64_tree=null;
        CommonTree KW_WITH68_tree=null;
        CommonTree KW_DBPROPERTIES69_tree=null;
        RewriteRuleTokenStream stream_KW_SCHEMA=new RewriteRuleTokenStream(adaptor,"token KW_SCHEMA");
        RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
        RewriteRuleTokenStream stream_KW_DBPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_DBPROPERTIES");
        RewriteRuleTokenStream stream_KW_DATABASE=new RewriteRuleTokenStream(adaptor,"token KW_DATABASE");
        RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_dbProperties=new RewriteRuleSubtreeStream(adaptor,"rule dbProperties");
        RewriteRuleSubtreeStream stream_dbLocation=new RewriteRuleSubtreeStream(adaptor,"rule dbLocation");
        RewriteRuleSubtreeStream stream_ifNotExists=new RewriteRuleSubtreeStream(adaptor,"rule ifNotExists");
        RewriteRuleSubtreeStream stream_databaseComment=new RewriteRuleSubtreeStream(adaptor,"rule databaseComment");
         msgs.push("create database statement"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:415:5: ( KW_CREATE ( KW_DATABASE | KW_SCHEMA ) ( ifNotExists )? name= Identifier ( databaseComment )? ( dbLocation )? ( KW_WITH KW_DBPROPERTIES dbprops= dbProperties )? -> ^( TOK_CREATEDATABASE $name ( ifNotExists )? ( dbLocation )? ( databaseComment )? ( $dbprops)? ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:415:7: KW_CREATE ( KW_DATABASE | KW_SCHEMA ) ( ifNotExists )? name= Identifier ( databaseComment )? ( dbLocation )? ( KW_WITH KW_DBPROPERTIES dbprops= dbProperties )?
            {
            KW_CREATE62=(Token)match(input,KW_CREATE,FOLLOW_KW_CREATE_in_createDatabaseStatement1635);  
            stream_KW_CREATE.add(KW_CREATE62);


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:415:17: ( KW_DATABASE | KW_SCHEMA )
            int alt11=2;
            int LA11_0 = input.LA(1);

            if ( (LA11_0==KW_DATABASE) ) {
                alt11=1;
            }
            else if ( (LA11_0==KW_SCHEMA) ) {
                alt11=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 11, 0, input);

                throw nvae;

            }
            switch (alt11) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:415:18: KW_DATABASE
                    {
                    KW_DATABASE63=(Token)match(input,KW_DATABASE,FOLLOW_KW_DATABASE_in_createDatabaseStatement1638);  
                    stream_KW_DATABASE.add(KW_DATABASE63);


                    }
                    break;
                case 2 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:415:30: KW_SCHEMA
                    {
                    KW_SCHEMA64=(Token)match(input,KW_SCHEMA,FOLLOW_KW_SCHEMA_in_createDatabaseStatement1640);  
                    stream_KW_SCHEMA.add(KW_SCHEMA64);


                    }
                    break;

            }


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:416:9: ( ifNotExists )?
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( (LA12_0==KW_IF) ) {
                alt12=1;
            }
            switch (alt12) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:416:9: ifNotExists
                    {
                    pushFollow(FOLLOW_ifNotExists_in_createDatabaseStatement1651);
                    ifNotExists65=ifNotExists();

                    state._fsp--;

                    stream_ifNotExists.add(ifNotExists65.getTree());

                    }
                    break;

            }


            name=(Token)match(input,Identifier,FOLLOW_Identifier_in_createDatabaseStatement1664);  
            stream_Identifier.add(name);


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:418:9: ( databaseComment )?
            int alt13=2;
            int LA13_0 = input.LA(1);

            if ( (LA13_0==KW_COMMENT) ) {
                alt13=1;
            }
            switch (alt13) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:418:9: databaseComment
                    {
                    pushFollow(FOLLOW_databaseComment_in_createDatabaseStatement1674);
                    databaseComment66=databaseComment();

                    state._fsp--;

                    stream_databaseComment.add(databaseComment66.getTree());

                    }
                    break;

            }


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:419:9: ( dbLocation )?
            int alt14=2;
            int LA14_0 = input.LA(1);

            if ( (LA14_0==KW_LOCATION) ) {
                alt14=1;
            }
            switch (alt14) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:419:9: dbLocation
                    {
                    pushFollow(FOLLOW_dbLocation_in_createDatabaseStatement1685);
                    dbLocation67=dbLocation();

                    state._fsp--;

                    stream_dbLocation.add(dbLocation67.getTree());

                    }
                    break;

            }


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:420:9: ( KW_WITH KW_DBPROPERTIES dbprops= dbProperties )?
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( (LA15_0==KW_WITH) ) {
                alt15=1;
            }
            switch (alt15) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:420:10: KW_WITH KW_DBPROPERTIES dbprops= dbProperties
                    {
                    KW_WITH68=(Token)match(input,KW_WITH,FOLLOW_KW_WITH_in_createDatabaseStatement1697);  
                    stream_KW_WITH.add(KW_WITH68);


                    KW_DBPROPERTIES69=(Token)match(input,KW_DBPROPERTIES,FOLLOW_KW_DBPROPERTIES_in_createDatabaseStatement1699);  
                    stream_KW_DBPROPERTIES.add(KW_DBPROPERTIES69);


                    pushFollow(FOLLOW_dbProperties_in_createDatabaseStatement1703);
                    dbprops=dbProperties();

                    state._fsp--;

                    stream_dbProperties.add(dbprops.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: name, dbLocation, databaseComment, dbprops, ifNotExists
            // token labels: name
            // rule labels: retval, dbprops
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_dbprops=new RewriteRuleSubtreeStream(adaptor,"rule dbprops",dbprops!=null?dbprops.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 421:5: -> ^( TOK_CREATEDATABASE $name ( ifNotExists )? ( dbLocation )? ( databaseComment )? ( $dbprops)? )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:421:8: ^( TOK_CREATEDATABASE $name ( ifNotExists )? ( dbLocation )? ( databaseComment )? ( $dbprops)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_CREATEDATABASE, "TOK_CREATEDATABASE")
                , root_1);

                adaptor.addChild(root_1, stream_name.nextNode());

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:421:35: ( ifNotExists )?
                if ( stream_ifNotExists.hasNext() ) {
                    adaptor.addChild(root_1, stream_ifNotExists.nextTree());

                }
                stream_ifNotExists.reset();

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:421:48: ( dbLocation )?
                if ( stream_dbLocation.hasNext() ) {
                    adaptor.addChild(root_1, stream_dbLocation.nextTree());

                }
                stream_dbLocation.reset();

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:421:60: ( databaseComment )?
                if ( stream_databaseComment.hasNext() ) {
                    adaptor.addChild(root_1, stream_databaseComment.nextTree());

                }
                stream_databaseComment.reset();

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:421:78: ( $dbprops)?
                if ( stream_dbprops.hasNext() ) {
                    adaptor.addChild(root_1, stream_dbprops.nextTree());

                }
                stream_dbprops.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "createDatabaseStatement"


    public static class dbLocation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "dbLocation"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:424:1: dbLocation : KW_LOCATION locn= StringLiteral -> ^( TOK_DATABASELOCATION $locn) ;
    public final HiveParser.dbLocation_return dbLocation() throws RecognitionException {
        HiveParser.dbLocation_return retval = new HiveParser.dbLocation_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token locn=null;
        Token KW_LOCATION70=null;

        CommonTree locn_tree=null;
        CommonTree KW_LOCATION70_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_LOCATION=new RewriteRuleTokenStream(adaptor,"token KW_LOCATION");

         msgs.push("database location specification"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:427:5: ( KW_LOCATION locn= StringLiteral -> ^( TOK_DATABASELOCATION $locn) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:428:7: KW_LOCATION locn= StringLiteral
            {
            KW_LOCATION70=(Token)match(input,KW_LOCATION,FOLLOW_KW_LOCATION_in_dbLocation1764);  
            stream_KW_LOCATION.add(KW_LOCATION70);


            locn=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_dbLocation1768);  
            stream_StringLiteral.add(locn);


            // AST REWRITE
            // elements: locn
            // token labels: locn
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_locn=new RewriteRuleTokenStream(adaptor,"token locn",locn);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 428:38: -> ^( TOK_DATABASELOCATION $locn)
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:428:41: ^( TOK_DATABASELOCATION $locn)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_DATABASELOCATION, "TOK_DATABASELOCATION")
                , root_1);

                adaptor.addChild(root_1, stream_locn.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "dbLocation"


    public static class dbProperties_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "dbProperties"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:431:1: dbProperties : LPAREN dbPropertiesList RPAREN -> ^( TOK_DATABASEPROPERTIES dbPropertiesList ) ;
    public final HiveParser.dbProperties_return dbProperties() throws RecognitionException {
        HiveParser.dbProperties_return retval = new HiveParser.dbProperties_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token LPAREN71=null;
        Token RPAREN73=null;
        HiveParser.dbPropertiesList_return dbPropertiesList72 =null;


        CommonTree LPAREN71_tree=null;
        CommonTree RPAREN73_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_dbPropertiesList=new RewriteRuleSubtreeStream(adaptor,"rule dbPropertiesList");
         msgs.push("dbproperties"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:434:5: ( LPAREN dbPropertiesList RPAREN -> ^( TOK_DATABASEPROPERTIES dbPropertiesList ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:435:7: LPAREN dbPropertiesList RPAREN
            {
            LPAREN71=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_dbProperties1810);  
            stream_LPAREN.add(LPAREN71);


            pushFollow(FOLLOW_dbPropertiesList_in_dbProperties1812);
            dbPropertiesList72=dbPropertiesList();

            state._fsp--;

            stream_dbPropertiesList.add(dbPropertiesList72.getTree());

            RPAREN73=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_dbProperties1814);  
            stream_RPAREN.add(RPAREN73);


            // AST REWRITE
            // elements: dbPropertiesList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 435:38: -> ^( TOK_DATABASEPROPERTIES dbPropertiesList )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:435:41: ^( TOK_DATABASEPROPERTIES dbPropertiesList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_DATABASEPROPERTIES, "TOK_DATABASEPROPERTIES")
                , root_1);

                adaptor.addChild(root_1, stream_dbPropertiesList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "dbProperties"


    public static class dbPropertiesList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "dbPropertiesList"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:438:1: dbPropertiesList : keyValueProperty ( COMMA keyValueProperty )* -> ^( TOK_DBPROPLIST ( keyValueProperty )+ ) ;
    public final HiveParser.dbPropertiesList_return dbPropertiesList() throws RecognitionException {
        HiveParser.dbPropertiesList_return retval = new HiveParser.dbPropertiesList_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token COMMA75=null;
        HiveParser.keyValueProperty_return keyValueProperty74 =null;

        HiveParser.keyValueProperty_return keyValueProperty76 =null;


        CommonTree COMMA75_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_keyValueProperty=new RewriteRuleSubtreeStream(adaptor,"rule keyValueProperty");
         msgs.push("database properties list"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:441:5: ( keyValueProperty ( COMMA keyValueProperty )* -> ^( TOK_DBPROPLIST ( keyValueProperty )+ ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:442:7: keyValueProperty ( COMMA keyValueProperty )*
            {
            pushFollow(FOLLOW_keyValueProperty_in_dbPropertiesList1855);
            keyValueProperty74=keyValueProperty();

            state._fsp--;

            stream_keyValueProperty.add(keyValueProperty74.getTree());

            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:442:24: ( COMMA keyValueProperty )*
            loop16:
            do {
                int alt16=2;
                int LA16_0 = input.LA(1);

                if ( (LA16_0==COMMA) ) {
                    alt16=1;
                }


                switch (alt16) {
            	case 1 :
            	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:442:25: COMMA keyValueProperty
            	    {
            	    COMMA75=(Token)match(input,COMMA,FOLLOW_COMMA_in_dbPropertiesList1858);  
            	    stream_COMMA.add(COMMA75);


            	    pushFollow(FOLLOW_keyValueProperty_in_dbPropertiesList1860);
            	    keyValueProperty76=keyValueProperty();

            	    state._fsp--;

            	    stream_keyValueProperty.add(keyValueProperty76.getTree());

            	    }
            	    break;

            	default :
            	    break loop16;
                }
            } while (true);


            // AST REWRITE
            // elements: keyValueProperty
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 442:50: -> ^( TOK_DBPROPLIST ( keyValueProperty )+ )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:442:53: ^( TOK_DBPROPLIST ( keyValueProperty )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_DBPROPLIST, "TOK_DBPROPLIST")
                , root_1);

                if ( !(stream_keyValueProperty.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_keyValueProperty.hasNext() ) {
                    adaptor.addChild(root_1, stream_keyValueProperty.nextTree());

                }
                stream_keyValueProperty.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "dbPropertiesList"


    public static class switchDatabaseStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switchDatabaseStatement"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:446:1: switchDatabaseStatement : KW_USE Identifier -> ^( TOK_SWITCHDATABASE Identifier ) ;
    public final HiveParser.switchDatabaseStatement_return switchDatabaseStatement() throws RecognitionException {
        HiveParser.switchDatabaseStatement_return retval = new HiveParser.switchDatabaseStatement_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_USE77=null;
        Token Identifier78=null;

        CommonTree KW_USE77_tree=null;
        CommonTree Identifier78_tree=null;
        RewriteRuleTokenStream stream_KW_USE=new RewriteRuleTokenStream(adaptor,"token KW_USE");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");

         msgs.push("switch database statement"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:449:5: ( KW_USE Identifier -> ^( TOK_SWITCHDATABASE Identifier ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:449:7: KW_USE Identifier
            {
            KW_USE77=(Token)match(input,KW_USE,FOLLOW_KW_USE_in_switchDatabaseStatement1899);  
            stream_KW_USE.add(KW_USE77);


            Identifier78=(Token)match(input,Identifier,FOLLOW_Identifier_in_switchDatabaseStatement1901);  
            stream_Identifier.add(Identifier78);


            // AST REWRITE
            // elements: Identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 450:5: -> ^( TOK_SWITCHDATABASE Identifier )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:450:8: ^( TOK_SWITCHDATABASE Identifier )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_SWITCHDATABASE, "TOK_SWITCHDATABASE")
                , root_1);

                adaptor.addChild(root_1, 
                stream_Identifier.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switchDatabaseStatement"


    public static class dropDatabaseStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "dropDatabaseStatement"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:453:1: dropDatabaseStatement : KW_DROP ( KW_DATABASE | KW_SCHEMA ) ( ifExists )? Identifier ( restrictOrCascade )? -> ^( TOK_DROPDATABASE Identifier ( ifExists )? ( restrictOrCascade )? ) ;
    public final HiveParser.dropDatabaseStatement_return dropDatabaseStatement() throws RecognitionException {
        HiveParser.dropDatabaseStatement_return retval = new HiveParser.dropDatabaseStatement_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_DROP79=null;
        Token KW_DATABASE80=null;
        Token KW_SCHEMA81=null;
        Token Identifier83=null;
        HiveParser.ifExists_return ifExists82 =null;

        HiveParser.restrictOrCascade_return restrictOrCascade84 =null;


        CommonTree KW_DROP79_tree=null;
        CommonTree KW_DATABASE80_tree=null;
        CommonTree KW_SCHEMA81_tree=null;
        CommonTree Identifier83_tree=null;
        RewriteRuleTokenStream stream_KW_SCHEMA=new RewriteRuleTokenStream(adaptor,"token KW_SCHEMA");
        RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
        RewriteRuleTokenStream stream_KW_DATABASE=new RewriteRuleTokenStream(adaptor,"token KW_DATABASE");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_restrictOrCascade=new RewriteRuleSubtreeStream(adaptor,"rule restrictOrCascade");
        RewriteRuleSubtreeStream stream_ifExists=new RewriteRuleSubtreeStream(adaptor,"rule ifExists");
         msgs.push("drop database statement"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:456:5: ( KW_DROP ( KW_DATABASE | KW_SCHEMA ) ( ifExists )? Identifier ( restrictOrCascade )? -> ^( TOK_DROPDATABASE Identifier ( ifExists )? ( restrictOrCascade )? ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:456:7: KW_DROP ( KW_DATABASE | KW_SCHEMA ) ( ifExists )? Identifier ( restrictOrCascade )?
            {
            KW_DROP79=(Token)match(input,KW_DROP,FOLLOW_KW_DROP_in_dropDatabaseStatement1940);  
            stream_KW_DROP.add(KW_DROP79);


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:456:15: ( KW_DATABASE | KW_SCHEMA )
            int alt17=2;
            int LA17_0 = input.LA(1);

            if ( (LA17_0==KW_DATABASE) ) {
                alt17=1;
            }
            else if ( (LA17_0==KW_SCHEMA) ) {
                alt17=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 17, 0, input);

                throw nvae;

            }
            switch (alt17) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:456:16: KW_DATABASE
                    {
                    KW_DATABASE80=(Token)match(input,KW_DATABASE,FOLLOW_KW_DATABASE_in_dropDatabaseStatement1943);  
                    stream_KW_DATABASE.add(KW_DATABASE80);


                    }
                    break;
                case 2 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:456:28: KW_SCHEMA
                    {
                    KW_SCHEMA81=(Token)match(input,KW_SCHEMA,FOLLOW_KW_SCHEMA_in_dropDatabaseStatement1945);  
                    stream_KW_SCHEMA.add(KW_SCHEMA81);


                    }
                    break;

            }


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:456:39: ( ifExists )?
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==KW_IF) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:456:39: ifExists
                    {
                    pushFollow(FOLLOW_ifExists_in_dropDatabaseStatement1948);
                    ifExists82=ifExists();

                    state._fsp--;

                    stream_ifExists.add(ifExists82.getTree());

                    }
                    break;

            }


            Identifier83=(Token)match(input,Identifier,FOLLOW_Identifier_in_dropDatabaseStatement1951);  
            stream_Identifier.add(Identifier83);


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:456:60: ( restrictOrCascade )?
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==KW_CASCADE||LA19_0==KW_RESTRICT) ) {
                alt19=1;
            }
            switch (alt19) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:456:60: restrictOrCascade
                    {
                    pushFollow(FOLLOW_restrictOrCascade_in_dropDatabaseStatement1953);
                    restrictOrCascade84=restrictOrCascade();

                    state._fsp--;

                    stream_restrictOrCascade.add(restrictOrCascade84.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: restrictOrCascade, ifExists, Identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 457:5: -> ^( TOK_DROPDATABASE Identifier ( ifExists )? ( restrictOrCascade )? )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:457:8: ^( TOK_DROPDATABASE Identifier ( ifExists )? ( restrictOrCascade )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_DROPDATABASE, "TOK_DROPDATABASE")
                , root_1);

                adaptor.addChild(root_1, 
                stream_Identifier.nextNode()
                );

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:457:38: ( ifExists )?
                if ( stream_ifExists.hasNext() ) {
                    adaptor.addChild(root_1, stream_ifExists.nextTree());

                }
                stream_ifExists.reset();

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:457:48: ( restrictOrCascade )?
                if ( stream_restrictOrCascade.hasNext() ) {
                    adaptor.addChild(root_1, stream_restrictOrCascade.nextTree());

                }
                stream_restrictOrCascade.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "dropDatabaseStatement"


    public static class databaseComment_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "databaseComment"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:460:1: databaseComment : KW_COMMENT comment= StringLiteral -> ^( TOK_DATABASECOMMENT $comment) ;
    public final HiveParser.databaseComment_return databaseComment() throws RecognitionException {
        HiveParser.databaseComment_return retval = new HiveParser.databaseComment_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token comment=null;
        Token KW_COMMENT85=null;

        CommonTree comment_tree=null;
        CommonTree KW_COMMENT85_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_COMMENT=new RewriteRuleTokenStream(adaptor,"token KW_COMMENT");

         msgs.push("database's comment"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:463:5: ( KW_COMMENT comment= StringLiteral -> ^( TOK_DATABASECOMMENT $comment) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:463:7: KW_COMMENT comment= StringLiteral
            {
            KW_COMMENT85=(Token)match(input,KW_COMMENT,FOLLOW_KW_COMMENT_in_databaseComment1999);  
            stream_KW_COMMENT.add(KW_COMMENT85);


            comment=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_databaseComment2003);  
            stream_StringLiteral.add(comment);


            // AST REWRITE
            // elements: comment
            // token labels: comment
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_comment=new RewriteRuleTokenStream(adaptor,"token comment",comment);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 464:5: -> ^( TOK_DATABASECOMMENT $comment)
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:464:8: ^( TOK_DATABASECOMMENT $comment)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_DATABASECOMMENT, "TOK_DATABASECOMMENT")
                , root_1);

                adaptor.addChild(root_1, stream_comment.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "databaseComment"


    public static class createTableStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "createTableStatement"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:467:1: createTableStatement : KW_CREATE (ext= KW_EXTERNAL )? KW_TABLE ( ifNotExists )? name= tableName (like= KW_LIKE likeName= tableName ( tableLocation )? | ( LPAREN columnNameTypeList RPAREN )? ( tableComment )? ( tablePartition )? ( tableBuckets )? ( tableSkewed )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( KW_AS selectStatement )? ) -> ^( TOK_CREATETABLE $name ( $ext)? ( ifNotExists )? ^( TOK_LIKETABLE ( $likeName)? ) ( columnNameTypeList )? ( tableComment )? ( tablePartition )? ( tableBuckets )? ( tableSkewed )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( selectStatement )? ) ;
    public final HiveParser.createTableStatement_return createTableStatement() throws RecognitionException {
        HiveParser.createTableStatement_return retval = new HiveParser.createTableStatement_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token ext=null;
        Token like=null;
        Token KW_CREATE86=null;
        Token KW_TABLE87=null;
        Token LPAREN90=null;
        Token RPAREN92=null;
        Token KW_AS101=null;
        HiveParser.tableName_return name =null;

        HiveParser.tableName_return likeName =null;

        HiveParser.ifNotExists_return ifNotExists88 =null;

        HiveParser.tableLocation_return tableLocation89 =null;

        HiveParser.columnNameTypeList_return columnNameTypeList91 =null;

        HiveParser.tableComment_return tableComment93 =null;

        HiveParser.tablePartition_return tablePartition94 =null;

        HiveParser.tableBuckets_return tableBuckets95 =null;

        HiveParser.tableSkewed_return tableSkewed96 =null;

        HiveParser.tableRowFormat_return tableRowFormat97 =null;

        HiveParser.tableFileFormat_return tableFileFormat98 =null;

        HiveParser.tableLocation_return tableLocation99 =null;

        HiveParser.tablePropertiesPrefixed_return tablePropertiesPrefixed100 =null;

        HiveParser.selectStatement_return selectStatement102 =null;


        CommonTree ext_tree=null;
        CommonTree like_tree=null;
        CommonTree KW_CREATE86_tree=null;
        CommonTree KW_TABLE87_tree=null;
        CommonTree LPAREN90_tree=null;
        CommonTree RPAREN92_tree=null;
        CommonTree KW_AS101_tree=null;
        RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
        RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_KW_LIKE=new RewriteRuleTokenStream(adaptor,"token KW_LIKE");
        RewriteRuleTokenStream stream_KW_EXTERNAL=new RewriteRuleTokenStream(adaptor,"token KW_EXTERNAL");
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_selectStatement=new RewriteRuleSubtreeStream(adaptor,"rule selectStatement");
        RewriteRuleSubtreeStream stream_columnNameTypeList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameTypeList");
        RewriteRuleSubtreeStream stream_tableBuckets=new RewriteRuleSubtreeStream(adaptor,"rule tableBuckets");
        RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
        RewriteRuleSubtreeStream stream_tablePartition=new RewriteRuleSubtreeStream(adaptor,"rule tablePartition");
        RewriteRuleSubtreeStream stream_tableComment=new RewriteRuleSubtreeStream(adaptor,"rule tableComment");
        RewriteRuleSubtreeStream stream_tableRowFormat=new RewriteRuleSubtreeStream(adaptor,"rule tableRowFormat");
        RewriteRuleSubtreeStream stream_tableFileFormat=new RewriteRuleSubtreeStream(adaptor,"rule tableFileFormat");
        RewriteRuleSubtreeStream stream_tablePropertiesPrefixed=new RewriteRuleSubtreeStream(adaptor,"rule tablePropertiesPrefixed");
        RewriteRuleSubtreeStream stream_tableLocation=new RewriteRuleSubtreeStream(adaptor,"rule tableLocation");
        RewriteRuleSubtreeStream stream_ifNotExists=new RewriteRuleSubtreeStream(adaptor,"rule ifNotExists");
        RewriteRuleSubtreeStream stream_tableSkewed=new RewriteRuleSubtreeStream(adaptor,"rule tableSkewed");
         msgs.push("create table statement"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:470:5: ( KW_CREATE (ext= KW_EXTERNAL )? KW_TABLE ( ifNotExists )? name= tableName (like= KW_LIKE likeName= tableName ( tableLocation )? | ( LPAREN columnNameTypeList RPAREN )? ( tableComment )? ( tablePartition )? ( tableBuckets )? ( tableSkewed )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( KW_AS selectStatement )? ) -> ^( TOK_CREATETABLE $name ( $ext)? ( ifNotExists )? ^( TOK_LIKETABLE ( $likeName)? ) ( columnNameTypeList )? ( tableComment )? ( tablePartition )? ( tableBuckets )? ( tableSkewed )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( selectStatement )? ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:470:7: KW_CREATE (ext= KW_EXTERNAL )? KW_TABLE ( ifNotExists )? name= tableName (like= KW_LIKE likeName= tableName ( tableLocation )? | ( LPAREN columnNameTypeList RPAREN )? ( tableComment )? ( tablePartition )? ( tableBuckets )? ( tableSkewed )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( KW_AS selectStatement )? )
            {
            KW_CREATE86=(Token)match(input,KW_CREATE,FOLLOW_KW_CREATE_in_createTableStatement2043);  
            stream_KW_CREATE.add(KW_CREATE86);


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:470:17: (ext= KW_EXTERNAL )?
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==KW_EXTERNAL) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:470:18: ext= KW_EXTERNAL
                    {
                    ext=(Token)match(input,KW_EXTERNAL,FOLLOW_KW_EXTERNAL_in_createTableStatement2048);  
                    stream_KW_EXTERNAL.add(ext);


                    }
                    break;

            }


            KW_TABLE87=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_createTableStatement2052);  
            stream_KW_TABLE.add(KW_TABLE87);


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:470:45: ( ifNotExists )?
            int alt21=2;
            int LA21_0 = input.LA(1);

            if ( (LA21_0==KW_IF) ) {
                alt21=1;
            }
            switch (alt21) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:470:45: ifNotExists
                    {
                    pushFollow(FOLLOW_ifNotExists_in_createTableStatement2054);
                    ifNotExists88=ifNotExists();

                    state._fsp--;

                    stream_ifNotExists.add(ifNotExists88.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_tableName_in_createTableStatement2059);
            name=tableName();

            state._fsp--;

            stream_tableName.add(name.getTree());

            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:471:7: (like= KW_LIKE likeName= tableName ( tableLocation )? | ( LPAREN columnNameTypeList RPAREN )? ( tableComment )? ( tablePartition )? ( tableBuckets )? ( tableSkewed )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( KW_AS selectStatement )? )
            int alt33=2;
            int LA33_0 = input.LA(1);

            if ( (LA33_0==KW_LIKE) ) {
                alt33=1;
            }
            else if ( (LA33_0==EOF||LA33_0==KW_AS||LA33_0==KW_CLUSTERED||LA33_0==KW_COMMENT||LA33_0==KW_LOCATION||LA33_0==KW_PARTITIONED||LA33_0==KW_ROW||LA33_0==KW_SKEWED||LA33_0==KW_STORED||LA33_0==KW_TBLPROPERTIES||LA33_0==LPAREN) ) {
                alt33=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 33, 0, input);

                throw nvae;

            }
            switch (alt33) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:471:10: like= KW_LIKE likeName= tableName ( tableLocation )?
                    {
                    like=(Token)match(input,KW_LIKE,FOLLOW_KW_LIKE_in_createTableStatement2072);  
                    stream_KW_LIKE.add(like);


                    pushFollow(FOLLOW_tableName_in_createTableStatement2076);
                    likeName=tableName();

                    state._fsp--;

                    stream_tableName.add(likeName.getTree());

                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:472:10: ( tableLocation )?
                    int alt22=2;
                    int LA22_0 = input.LA(1);

                    if ( (LA22_0==KW_LOCATION) ) {
                        alt22=1;
                    }
                    switch (alt22) {
                        case 1 :
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:472:10: tableLocation
                            {
                            pushFollow(FOLLOW_tableLocation_in_createTableStatement2087);
                            tableLocation89=tableLocation();

                            state._fsp--;

                            stream_tableLocation.add(tableLocation89.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:473:10: ( LPAREN columnNameTypeList RPAREN )? ( tableComment )? ( tablePartition )? ( tableBuckets )? ( tableSkewed )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( KW_AS selectStatement )?
                    {
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:473:10: ( LPAREN columnNameTypeList RPAREN )?
                    int alt23=2;
                    int LA23_0 = input.LA(1);

                    if ( (LA23_0==LPAREN) ) {
                        alt23=1;
                    }
                    switch (alt23) {
                        case 1 :
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:473:11: LPAREN columnNameTypeList RPAREN
                            {
                            LPAREN90=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createTableStatement2100);  
                            stream_LPAREN.add(LPAREN90);


                            pushFollow(FOLLOW_columnNameTypeList_in_createTableStatement2102);
                            columnNameTypeList91=columnNameTypeList();

                            state._fsp--;

                            stream_columnNameTypeList.add(columnNameTypeList91.getTree());

                            RPAREN92=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createTableStatement2104);  
                            stream_RPAREN.add(RPAREN92);


                            }
                            break;

                    }


                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:474:10: ( tableComment )?
                    int alt24=2;
                    int LA24_0 = input.LA(1);

                    if ( (LA24_0==KW_COMMENT) ) {
                        alt24=1;
                    }
                    switch (alt24) {
                        case 1 :
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:474:10: tableComment
                            {
                            pushFollow(FOLLOW_tableComment_in_createTableStatement2117);
                            tableComment93=tableComment();

                            state._fsp--;

                            stream_tableComment.add(tableComment93.getTree());

                            }
                            break;

                    }


                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:475:10: ( tablePartition )?
                    int alt25=2;
                    int LA25_0 = input.LA(1);

                    if ( (LA25_0==KW_PARTITIONED) ) {
                        alt25=1;
                    }
                    switch (alt25) {
                        case 1 :
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:475:10: tablePartition
                            {
                            pushFollow(FOLLOW_tablePartition_in_createTableStatement2129);
                            tablePartition94=tablePartition();

                            state._fsp--;

                            stream_tablePartition.add(tablePartition94.getTree());

                            }
                            break;

                    }


                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:476:10: ( tableBuckets )?
                    int alt26=2;
                    int LA26_0 = input.LA(1);

                    if ( (LA26_0==KW_CLUSTERED) ) {
                        alt26=1;
                    }
                    switch (alt26) {
                        case 1 :
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:476:10: tableBuckets
                            {
                            pushFollow(FOLLOW_tableBuckets_in_createTableStatement2141);
                            tableBuckets95=tableBuckets();

                            state._fsp--;

                            stream_tableBuckets.add(tableBuckets95.getTree());

                            }
                            break;

                    }


                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:477:10: ( tableSkewed )?
                    int alt27=2;
                    int LA27_0 = input.LA(1);

                    if ( (LA27_0==KW_SKEWED) ) {
                        alt27=1;
                    }
                    switch (alt27) {
                        case 1 :
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:477:10: tableSkewed
                            {
                            pushFollow(FOLLOW_tableSkewed_in_createTableStatement2153);
                            tableSkewed96=tableSkewed();

                            state._fsp--;

                            stream_tableSkewed.add(tableSkewed96.getTree());

                            }
                            break;

                    }


                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:478:10: ( tableRowFormat )?
                    int alt28=2;
                    int LA28_0 = input.LA(1);

                    if ( (LA28_0==KW_ROW) ) {
                        alt28=1;
                    }
                    switch (alt28) {
                        case 1 :
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:478:10: tableRowFormat
                            {
                            pushFollow(FOLLOW_tableRowFormat_in_createTableStatement2165);
                            tableRowFormat97=tableRowFormat();

                            state._fsp--;

                            stream_tableRowFormat.add(tableRowFormat97.getTree());

                            }
                            break;

                    }


                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:479:10: ( tableFileFormat )?
                    int alt29=2;
                    int LA29_0 = input.LA(1);

                    if ( (LA29_0==KW_STORED) ) {
                        alt29=1;
                    }
                    switch (alt29) {
                        case 1 :
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:479:10: tableFileFormat
                            {
                            pushFollow(FOLLOW_tableFileFormat_in_createTableStatement2177);
                            tableFileFormat98=tableFileFormat();

                            state._fsp--;

                            stream_tableFileFormat.add(tableFileFormat98.getTree());

                            }
                            break;

                    }


                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:480:10: ( tableLocation )?
                    int alt30=2;
                    int LA30_0 = input.LA(1);

                    if ( (LA30_0==KW_LOCATION) ) {
                        alt30=1;
                    }
                    switch (alt30) {
                        case 1 :
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:480:10: tableLocation
                            {
                            pushFollow(FOLLOW_tableLocation_in_createTableStatement2189);
                            tableLocation99=tableLocation();

                            state._fsp--;

                            stream_tableLocation.add(tableLocation99.getTree());

                            }
                            break;

                    }


                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:481:10: ( tablePropertiesPrefixed )?
                    int alt31=2;
                    int LA31_0 = input.LA(1);

                    if ( (LA31_0==KW_TBLPROPERTIES) ) {
                        alt31=1;
                    }
                    switch (alt31) {
                        case 1 :
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:481:10: tablePropertiesPrefixed
                            {
                            pushFollow(FOLLOW_tablePropertiesPrefixed_in_createTableStatement2201);
                            tablePropertiesPrefixed100=tablePropertiesPrefixed();

                            state._fsp--;

                            stream_tablePropertiesPrefixed.add(tablePropertiesPrefixed100.getTree());

                            }
                            break;

                    }


                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:482:10: ( KW_AS selectStatement )?
                    int alt32=2;
                    int LA32_0 = input.LA(1);

                    if ( (LA32_0==KW_AS) ) {
                        alt32=1;
                    }
                    switch (alt32) {
                        case 1 :
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:482:11: KW_AS selectStatement
                            {
                            KW_AS101=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_createTableStatement2214);  
                            stream_KW_AS.add(KW_AS101);


                            pushFollow(FOLLOW_selectStatement_in_createTableStatement2216);
                            selectStatement102=selectStatement();

                            state._fsp--;

                            stream_selectStatement.add(selectStatement102.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }


            // AST REWRITE
            // elements: name, ext, tableLocation, ifNotExists, tableSkewed, tablePartition, columnNameTypeList, selectStatement, tableComment, tableRowFormat, likeName, tableFileFormat, tableBuckets, tablePropertiesPrefixed
            // token labels: ext
            // rule labels: retval, likeName, name
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ext=new RewriteRuleTokenStream(adaptor,"token ext",ext);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_likeName=new RewriteRuleSubtreeStream(adaptor,"rule likeName",likeName!=null?likeName.tree:null);
            RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name",name!=null?name.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 484:5: -> ^( TOK_CREATETABLE $name ( $ext)? ( ifNotExists )? ^( TOK_LIKETABLE ( $likeName)? ) ( columnNameTypeList )? ( tableComment )? ( tablePartition )? ( tableBuckets )? ( tableSkewed )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( selectStatement )? )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:484:8: ^( TOK_CREATETABLE $name ( $ext)? ( ifNotExists )? ^( TOK_LIKETABLE ( $likeName)? ) ( columnNameTypeList )? ( tableComment )? ( tablePartition )? ( tableBuckets )? ( tableSkewed )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( selectStatement )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_CREATETABLE, "TOK_CREATETABLE")
                , root_1);

                adaptor.addChild(root_1, stream_name.nextTree());

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:484:33: ( $ext)?
                if ( stream_ext.hasNext() ) {
                    adaptor.addChild(root_1, stream_ext.nextNode());

                }
                stream_ext.reset();

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:484:38: ( ifNotExists )?
                if ( stream_ifNotExists.hasNext() ) {
                    adaptor.addChild(root_1, stream_ifNotExists.nextTree());

                }
                stream_ifNotExists.reset();

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:485:10: ^( TOK_LIKETABLE ( $likeName)? )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_LIKETABLE, "TOK_LIKETABLE")
                , root_2);

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:485:27: ( $likeName)?
                if ( stream_likeName.hasNext() ) {
                    adaptor.addChild(root_2, stream_likeName.nextTree());

                }
                stream_likeName.reset();

                adaptor.addChild(root_1, root_2);
                }

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:486:10: ( columnNameTypeList )?
                if ( stream_columnNameTypeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnNameTypeList.nextTree());

                }
                stream_columnNameTypeList.reset();

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:487:10: ( tableComment )?
                if ( stream_tableComment.hasNext() ) {
                    adaptor.addChild(root_1, stream_tableComment.nextTree());

                }
                stream_tableComment.reset();

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:488:10: ( tablePartition )?
                if ( stream_tablePartition.hasNext() ) {
                    adaptor.addChild(root_1, stream_tablePartition.nextTree());

                }
                stream_tablePartition.reset();

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:489:10: ( tableBuckets )?
                if ( stream_tableBuckets.hasNext() ) {
                    adaptor.addChild(root_1, stream_tableBuckets.nextTree());

                }
                stream_tableBuckets.reset();

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:490:10: ( tableSkewed )?
                if ( stream_tableSkewed.hasNext() ) {
                    adaptor.addChild(root_1, stream_tableSkewed.nextTree());

                }
                stream_tableSkewed.reset();

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:491:10: ( tableRowFormat )?
                if ( stream_tableRowFormat.hasNext() ) {
                    adaptor.addChild(root_1, stream_tableRowFormat.nextTree());

                }
                stream_tableRowFormat.reset();

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:492:10: ( tableFileFormat )?
                if ( stream_tableFileFormat.hasNext() ) {
                    adaptor.addChild(root_1, stream_tableFileFormat.nextTree());

                }
                stream_tableFileFormat.reset();

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:493:10: ( tableLocation )?
                if ( stream_tableLocation.hasNext() ) {
                    adaptor.addChild(root_1, stream_tableLocation.nextTree());

                }
                stream_tableLocation.reset();

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:494:10: ( tablePropertiesPrefixed )?
                if ( stream_tablePropertiesPrefixed.hasNext() ) {
                    adaptor.addChild(root_1, stream_tablePropertiesPrefixed.nextTree());

                }
                stream_tablePropertiesPrefixed.reset();

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:495:10: ( selectStatement )?
                if ( stream_selectStatement.hasNext() ) {
                    adaptor.addChild(root_1, stream_selectStatement.nextTree());

                }
                stream_selectStatement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "createTableStatement"


    public static class createIndexStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "createIndexStatement"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:499:1: createIndexStatement : KW_CREATE KW_INDEX indexName= Identifier KW_ON KW_TABLE tab= tableName LPAREN indexedCols= columnNameList RPAREN KW_AS typeName= StringLiteral ( autoRebuild )? ( indexPropertiesPrefixed )? ( indexTblName )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( indexComment )? -> ^( TOK_CREATEINDEX $indexName $typeName $tab $indexedCols ( autoRebuild )? ( indexPropertiesPrefixed )? ( indexTblName )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( indexComment )? ) ;
    public final HiveParser.createIndexStatement_return createIndexStatement() throws RecognitionException {
        HiveParser.createIndexStatement_return retval = new HiveParser.createIndexStatement_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token indexName=null;
        Token typeName=null;
        Token KW_CREATE103=null;
        Token KW_INDEX104=null;
        Token KW_ON105=null;
        Token KW_TABLE106=null;
        Token LPAREN107=null;
        Token RPAREN108=null;
        Token KW_AS109=null;
        HiveParser.tableName_return tab =null;

        HiveParser.columnNameList_return indexedCols =null;

        HiveParser.autoRebuild_return autoRebuild110 =null;

        HiveParser.indexPropertiesPrefixed_return indexPropertiesPrefixed111 =null;

        HiveParser.indexTblName_return indexTblName112 =null;

        HiveParser.tableRowFormat_return tableRowFormat113 =null;

        HiveParser.tableFileFormat_return tableFileFormat114 =null;

        HiveParser.tableLocation_return tableLocation115 =null;

        HiveParser.tablePropertiesPrefixed_return tablePropertiesPrefixed116 =null;

        HiveParser.indexComment_return indexComment117 =null;


        CommonTree indexName_tree=null;
        CommonTree typeName_tree=null;
        CommonTree KW_CREATE103_tree=null;
        CommonTree KW_INDEX104_tree=null;
        CommonTree KW_ON105_tree=null;
        CommonTree KW_TABLE106_tree=null;
        CommonTree LPAREN107_tree=null;
        CommonTree RPAREN108_tree=null;
        CommonTree KW_AS109_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
        RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_KW_INDEX=new RewriteRuleTokenStream(adaptor,"token KW_INDEX");
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_KW_ON=new RewriteRuleTokenStream(adaptor,"token KW_ON");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_columnNameList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameList");
        RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
        RewriteRuleSubtreeStream stream_indexPropertiesPrefixed=new RewriteRuleSubtreeStream(adaptor,"rule indexPropertiesPrefixed");
        RewriteRuleSubtreeStream stream_tableRowFormat=new RewriteRuleSubtreeStream(adaptor,"rule tableRowFormat");
        RewriteRuleSubtreeStream stream_tableFileFormat=new RewriteRuleSubtreeStream(adaptor,"rule tableFileFormat");
        RewriteRuleSubtreeStream stream_tablePropertiesPrefixed=new RewriteRuleSubtreeStream(adaptor,"rule tablePropertiesPrefixed");
        RewriteRuleSubtreeStream stream_autoRebuild=new RewriteRuleSubtreeStream(adaptor,"rule autoRebuild");
        RewriteRuleSubtreeStream stream_tableLocation=new RewriteRuleSubtreeStream(adaptor,"rule tableLocation");
        RewriteRuleSubtreeStream stream_indexTblName=new RewriteRuleSubtreeStream(adaptor,"rule indexTblName");
        RewriteRuleSubtreeStream stream_indexComment=new RewriteRuleSubtreeStream(adaptor,"rule indexComment");
         msgs.push("create index statement");
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:502:5: ( KW_CREATE KW_INDEX indexName= Identifier KW_ON KW_TABLE tab= tableName LPAREN indexedCols= columnNameList RPAREN KW_AS typeName= StringLiteral ( autoRebuild )? ( indexPropertiesPrefixed )? ( indexTblName )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( indexComment )? -> ^( TOK_CREATEINDEX $indexName $typeName $tab $indexedCols ( autoRebuild )? ( indexPropertiesPrefixed )? ( indexTblName )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( indexComment )? ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:502:7: KW_CREATE KW_INDEX indexName= Identifier KW_ON KW_TABLE tab= tableName LPAREN indexedCols= columnNameList RPAREN KW_AS typeName= StringLiteral ( autoRebuild )? ( indexPropertiesPrefixed )? ( indexTblName )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( indexComment )?
            {
            KW_CREATE103=(Token)match(input,KW_CREATE,FOLLOW_KW_CREATE_in_createIndexStatement2419);  
            stream_KW_CREATE.add(KW_CREATE103);


            KW_INDEX104=(Token)match(input,KW_INDEX,FOLLOW_KW_INDEX_in_createIndexStatement2421);  
            stream_KW_INDEX.add(KW_INDEX104);


            indexName=(Token)match(input,Identifier,FOLLOW_Identifier_in_createIndexStatement2425);  
            stream_Identifier.add(indexName);


            KW_ON105=(Token)match(input,KW_ON,FOLLOW_KW_ON_in_createIndexStatement2433);  
            stream_KW_ON.add(KW_ON105);


            KW_TABLE106=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_createIndexStatement2435);  
            stream_KW_TABLE.add(KW_TABLE106);


            pushFollow(FOLLOW_tableName_in_createIndexStatement2439);
            tab=tableName();

            state._fsp--;

            stream_tableName.add(tab.getTree());

            LPAREN107=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createIndexStatement2441);  
            stream_LPAREN.add(LPAREN107);


            pushFollow(FOLLOW_columnNameList_in_createIndexStatement2445);
            indexedCols=columnNameList();

            state._fsp--;

            stream_columnNameList.add(indexedCols.getTree());

            RPAREN108=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createIndexStatement2447);  
            stream_RPAREN.add(RPAREN108);


            KW_AS109=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_createIndexStatement2455);  
            stream_KW_AS.add(KW_AS109);


            typeName=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_createIndexStatement2459);  
            stream_StringLiteral.add(typeName);


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:505:7: ( autoRebuild )?
            int alt34=2;
            int LA34_0 = input.LA(1);

            if ( (LA34_0==KW_WITH) ) {
                alt34=1;
            }
            switch (alt34) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:505:7: autoRebuild
                    {
                    pushFollow(FOLLOW_autoRebuild_in_createIndexStatement2467);
                    autoRebuild110=autoRebuild();

                    state._fsp--;

                    stream_autoRebuild.add(autoRebuild110.getTree());

                    }
                    break;

            }


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:506:7: ( indexPropertiesPrefixed )?
            int alt35=2;
            int LA35_0 = input.LA(1);

            if ( (LA35_0==KW_IDXPROPERTIES) ) {
                alt35=1;
            }
            switch (alt35) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:506:7: indexPropertiesPrefixed
                    {
                    pushFollow(FOLLOW_indexPropertiesPrefixed_in_createIndexStatement2476);
                    indexPropertiesPrefixed111=indexPropertiesPrefixed();

                    state._fsp--;

                    stream_indexPropertiesPrefixed.add(indexPropertiesPrefixed111.getTree());

                    }
                    break;

            }


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:507:7: ( indexTblName )?
            int alt36=2;
            int LA36_0 = input.LA(1);

            if ( (LA36_0==KW_IN) ) {
                alt36=1;
            }
            switch (alt36) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:507:7: indexTblName
                    {
                    pushFollow(FOLLOW_indexTblName_in_createIndexStatement2485);
                    indexTblName112=indexTblName();

                    state._fsp--;

                    stream_indexTblName.add(indexTblName112.getTree());

                    }
                    break;

            }


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:508:7: ( tableRowFormat )?
            int alt37=2;
            int LA37_0 = input.LA(1);

            if ( (LA37_0==KW_ROW) ) {
                alt37=1;
            }
            switch (alt37) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:508:7: tableRowFormat
                    {
                    pushFollow(FOLLOW_tableRowFormat_in_createIndexStatement2494);
                    tableRowFormat113=tableRowFormat();

                    state._fsp--;

                    stream_tableRowFormat.add(tableRowFormat113.getTree());

                    }
                    break;

            }


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:509:7: ( tableFileFormat )?
            int alt38=2;
            int LA38_0 = input.LA(1);

            if ( (LA38_0==KW_STORED) ) {
                alt38=1;
            }
            switch (alt38) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:509:7: tableFileFormat
                    {
                    pushFollow(FOLLOW_tableFileFormat_in_createIndexStatement2503);
                    tableFileFormat114=tableFileFormat();

                    state._fsp--;

                    stream_tableFileFormat.add(tableFileFormat114.getTree());

                    }
                    break;

            }


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:510:7: ( tableLocation )?
            int alt39=2;
            int LA39_0 = input.LA(1);

            if ( (LA39_0==KW_LOCATION) ) {
                alt39=1;
            }
            switch (alt39) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:510:7: tableLocation
                    {
                    pushFollow(FOLLOW_tableLocation_in_createIndexStatement2512);
                    tableLocation115=tableLocation();

                    state._fsp--;

                    stream_tableLocation.add(tableLocation115.getTree());

                    }
                    break;

            }


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:511:7: ( tablePropertiesPrefixed )?
            int alt40=2;
            int LA40_0 = input.LA(1);

            if ( (LA40_0==KW_TBLPROPERTIES) ) {
                alt40=1;
            }
            switch (alt40) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:511:7: tablePropertiesPrefixed
                    {
                    pushFollow(FOLLOW_tablePropertiesPrefixed_in_createIndexStatement2521);
                    tablePropertiesPrefixed116=tablePropertiesPrefixed();

                    state._fsp--;

                    stream_tablePropertiesPrefixed.add(tablePropertiesPrefixed116.getTree());

                    }
                    break;

            }


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:512:7: ( indexComment )?
            int alt41=2;
            int LA41_0 = input.LA(1);

            if ( (LA41_0==KW_COMMENT) ) {
                alt41=1;
            }
            switch (alt41) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:512:7: indexComment
                    {
                    pushFollow(FOLLOW_indexComment_in_createIndexStatement2530);
                    indexComment117=indexComment();

                    state._fsp--;

                    stream_indexComment.add(indexComment117.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: typeName, indexPropertiesPrefixed, tablePropertiesPrefixed, tableRowFormat, autoRebuild, tableLocation, indexTblName, tableFileFormat, indexedCols, indexComment, tab, indexName
            // token labels: typeName, indexName
            // rule labels: indexedCols, retval, tab
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_typeName=new RewriteRuleTokenStream(adaptor,"token typeName",typeName);
            RewriteRuleTokenStream stream_indexName=new RewriteRuleTokenStream(adaptor,"token indexName",indexName);
            RewriteRuleSubtreeStream stream_indexedCols=new RewriteRuleSubtreeStream(adaptor,"rule indexedCols",indexedCols!=null?indexedCols.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_tab=new RewriteRuleSubtreeStream(adaptor,"rule tab",tab!=null?tab.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 513:5: -> ^( TOK_CREATEINDEX $indexName $typeName $tab $indexedCols ( autoRebuild )? ( indexPropertiesPrefixed )? ( indexTblName )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( indexComment )? )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:513:7: ^( TOK_CREATEINDEX $indexName $typeName $tab $indexedCols ( autoRebuild )? ( indexPropertiesPrefixed )? ( indexTblName )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( indexComment )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_CREATEINDEX, "TOK_CREATEINDEX")
                , root_1);

                adaptor.addChild(root_1, stream_indexName.nextNode());

                adaptor.addChild(root_1, stream_typeName.nextNode());

                adaptor.addChild(root_1, stream_tab.nextTree());

                adaptor.addChild(root_1, stream_indexedCols.nextTree());

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:514:9: ( autoRebuild )?
                if ( stream_autoRebuild.hasNext() ) {
                    adaptor.addChild(root_1, stream_autoRebuild.nextTree());

                }
                stream_autoRebuild.reset();

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:515:9: ( indexPropertiesPrefixed )?
                if ( stream_indexPropertiesPrefixed.hasNext() ) {
                    adaptor.addChild(root_1, stream_indexPropertiesPrefixed.nextTree());

                }
                stream_indexPropertiesPrefixed.reset();

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:516:9: ( indexTblName )?
                if ( stream_indexTblName.hasNext() ) {
                    adaptor.addChild(root_1, stream_indexTblName.nextTree());

                }
                stream_indexTblName.reset();

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:517:9: ( tableRowFormat )?
                if ( stream_tableRowFormat.hasNext() ) {
                    adaptor.addChild(root_1, stream_tableRowFormat.nextTree());

                }
                stream_tableRowFormat.reset();

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:518:9: ( tableFileFormat )?
                if ( stream_tableFileFormat.hasNext() ) {
                    adaptor.addChild(root_1, stream_tableFileFormat.nextTree());

                }
                stream_tableFileFormat.reset();

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:519:9: ( tableLocation )?
                if ( stream_tableLocation.hasNext() ) {
                    adaptor.addChild(root_1, stream_tableLocation.nextTree());

                }
                stream_tableLocation.reset();

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:520:9: ( tablePropertiesPrefixed )?
                if ( stream_tablePropertiesPrefixed.hasNext() ) {
                    adaptor.addChild(root_1, stream_tablePropertiesPrefixed.nextTree());

                }
                stream_tablePropertiesPrefixed.reset();

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:521:9: ( indexComment )?
                if ( stream_indexComment.hasNext() ) {
                    adaptor.addChild(root_1, stream_indexComment.nextTree());

                }
                stream_indexComment.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop();
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "createIndexStatement"


    public static class indexComment_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "indexComment"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:524:1: indexComment : KW_COMMENT comment= StringLiteral -> ^( TOK_INDEXCOMMENT $comment) ;
    public final HiveParser.indexComment_return indexComment() throws RecognitionException {
        HiveParser.indexComment_return retval = new HiveParser.indexComment_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token comment=null;
        Token KW_COMMENT118=null;

        CommonTree comment_tree=null;
        CommonTree KW_COMMENT118_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_COMMENT=new RewriteRuleTokenStream(adaptor,"token KW_COMMENT");

         msgs.push("comment on an index");
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:527:9: ( KW_COMMENT comment= StringLiteral -> ^( TOK_INDEXCOMMENT $comment) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:528:17: KW_COMMENT comment= StringLiteral
            {
            KW_COMMENT118=(Token)match(input,KW_COMMENT,FOLLOW_KW_COMMENT_in_indexComment2687);  
            stream_KW_COMMENT.add(KW_COMMENT118);


            comment=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_indexComment2691);  
            stream_StringLiteral.add(comment);


            // AST REWRITE
            // elements: comment
            // token labels: comment
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_comment=new RewriteRuleTokenStream(adaptor,"token comment",comment);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 528:51: -> ^( TOK_INDEXCOMMENT $comment)
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:528:54: ^( TOK_INDEXCOMMENT $comment)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_INDEXCOMMENT, "TOK_INDEXCOMMENT")
                , root_1);

                adaptor.addChild(root_1, stream_comment.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop();
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "indexComment"


    public static class autoRebuild_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "autoRebuild"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:531:1: autoRebuild : KW_WITH KW_DEFERRED KW_REBUILD -> ^( TOK_DEFERRED_REBUILDINDEX ) ;
    public final HiveParser.autoRebuild_return autoRebuild() throws RecognitionException {
        HiveParser.autoRebuild_return retval = new HiveParser.autoRebuild_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_WITH119=null;
        Token KW_DEFERRED120=null;
        Token KW_REBUILD121=null;

        CommonTree KW_WITH119_tree=null;
        CommonTree KW_DEFERRED120_tree=null;
        CommonTree KW_REBUILD121_tree=null;
        RewriteRuleTokenStream stream_KW_REBUILD=new RewriteRuleTokenStream(adaptor,"token KW_REBUILD");
        RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");
        RewriteRuleTokenStream stream_KW_DEFERRED=new RewriteRuleTokenStream(adaptor,"token KW_DEFERRED");

         msgs.push("auto rebuild index");
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:534:5: ( KW_WITH KW_DEFERRED KW_REBUILD -> ^( TOK_DEFERRED_REBUILDINDEX ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:534:7: KW_WITH KW_DEFERRED KW_REBUILD
            {
            KW_WITH119=(Token)match(input,KW_WITH,FOLLOW_KW_WITH_in_autoRebuild2732);  
            stream_KW_WITH.add(KW_WITH119);


            KW_DEFERRED120=(Token)match(input,KW_DEFERRED,FOLLOW_KW_DEFERRED_in_autoRebuild2734);  
            stream_KW_DEFERRED.add(KW_DEFERRED120);


            KW_REBUILD121=(Token)match(input,KW_REBUILD,FOLLOW_KW_REBUILD_in_autoRebuild2736);  
            stream_KW_REBUILD.add(KW_REBUILD121);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 535:5: -> ^( TOK_DEFERRED_REBUILDINDEX )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:535:7: ^( TOK_DEFERRED_REBUILDINDEX )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_DEFERRED_REBUILDINDEX, "TOK_DEFERRED_REBUILDINDEX")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop();
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "autoRebuild"


    public static class indexTblName_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "indexTblName"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:538:1: indexTblName : KW_IN KW_TABLE indexTbl= tableName -> ^( TOK_CREATEINDEX_INDEXTBLNAME $indexTbl) ;
    public final HiveParser.indexTblName_return indexTblName() throws RecognitionException {
        HiveParser.indexTblName_return retval = new HiveParser.indexTblName_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_IN122=null;
        Token KW_TABLE123=null;
        HiveParser.tableName_return indexTbl =null;


        CommonTree KW_IN122_tree=null;
        CommonTree KW_TABLE123_tree=null;
        RewriteRuleTokenStream stream_KW_IN=new RewriteRuleTokenStream(adaptor,"token KW_IN");
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
         msgs.push("index table name");
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:541:5: ( KW_IN KW_TABLE indexTbl= tableName -> ^( TOK_CREATEINDEX_INDEXTBLNAME $indexTbl) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:541:7: KW_IN KW_TABLE indexTbl= tableName
            {
            KW_IN122=(Token)match(input,KW_IN,FOLLOW_KW_IN_in_indexTblName2772);  
            stream_KW_IN.add(KW_IN122);


            KW_TABLE123=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_indexTblName2774);  
            stream_KW_TABLE.add(KW_TABLE123);


            pushFollow(FOLLOW_tableName_in_indexTblName2778);
            indexTbl=tableName();

            state._fsp--;

            stream_tableName.add(indexTbl.getTree());

            // AST REWRITE
            // elements: indexTbl
            // token labels: 
            // rule labels: retval, indexTbl
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_indexTbl=new RewriteRuleSubtreeStream(adaptor,"rule indexTbl",indexTbl!=null?indexTbl.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 542:5: -> ^( TOK_CREATEINDEX_INDEXTBLNAME $indexTbl)
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:542:7: ^( TOK_CREATEINDEX_INDEXTBLNAME $indexTbl)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_CREATEINDEX_INDEXTBLNAME, "TOK_CREATEINDEX_INDEXTBLNAME")
                , root_1);

                adaptor.addChild(root_1, stream_indexTbl.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop();
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "indexTblName"


    public static class indexPropertiesPrefixed_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "indexPropertiesPrefixed"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:545:1: indexPropertiesPrefixed : KW_IDXPROPERTIES ! indexProperties ;
    public final HiveParser.indexPropertiesPrefixed_return indexPropertiesPrefixed() throws RecognitionException {
        HiveParser.indexPropertiesPrefixed_return retval = new HiveParser.indexPropertiesPrefixed_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_IDXPROPERTIES124=null;
        HiveParser.indexProperties_return indexProperties125 =null;


        CommonTree KW_IDXPROPERTIES124_tree=null;

         msgs.push("table properties with prefix"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:548:5: ( KW_IDXPROPERTIES ! indexProperties )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:549:9: KW_IDXPROPERTIES ! indexProperties
            {
            root_0 = (CommonTree)adaptor.nil();


            KW_IDXPROPERTIES124=(Token)match(input,KW_IDXPROPERTIES,FOLLOW_KW_IDXPROPERTIES_in_indexPropertiesPrefixed2825); 

            pushFollow(FOLLOW_indexProperties_in_indexPropertiesPrefixed2828);
            indexProperties125=indexProperties();

            state._fsp--;

            adaptor.addChild(root_0, indexProperties125.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "indexPropertiesPrefixed"


    public static class indexProperties_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "indexProperties"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:552:1: indexProperties : LPAREN indexPropertiesList RPAREN -> ^( TOK_INDEXPROPERTIES indexPropertiesList ) ;
    public final HiveParser.indexProperties_return indexProperties() throws RecognitionException {
        HiveParser.indexProperties_return retval = new HiveParser.indexProperties_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token LPAREN126=null;
        Token RPAREN128=null;
        HiveParser.indexPropertiesList_return indexPropertiesList127 =null;


        CommonTree LPAREN126_tree=null;
        CommonTree RPAREN128_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_indexPropertiesList=new RewriteRuleSubtreeStream(adaptor,"rule indexPropertiesList");
         msgs.push("index properties"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:555:5: ( LPAREN indexPropertiesList RPAREN -> ^( TOK_INDEXPROPERTIES indexPropertiesList ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:556:7: LPAREN indexPropertiesList RPAREN
            {
            LPAREN126=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_indexProperties2861);  
            stream_LPAREN.add(LPAREN126);


            pushFollow(FOLLOW_indexPropertiesList_in_indexProperties2863);
            indexPropertiesList127=indexPropertiesList();

            state._fsp--;

            stream_indexPropertiesList.add(indexPropertiesList127.getTree());

            RPAREN128=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_indexProperties2865);  
            stream_RPAREN.add(RPAREN128);


            // AST REWRITE
            // elements: indexPropertiesList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 556:41: -> ^( TOK_INDEXPROPERTIES indexPropertiesList )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:556:44: ^( TOK_INDEXPROPERTIES indexPropertiesList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_INDEXPROPERTIES, "TOK_INDEXPROPERTIES")
                , root_1);

                adaptor.addChild(root_1, stream_indexPropertiesList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "indexProperties"


    public static class indexPropertiesList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "indexPropertiesList"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:559:1: indexPropertiesList : keyValueProperty ( COMMA keyValueProperty )* -> ^( TOK_INDEXPROPLIST ( keyValueProperty )+ ) ;
    public final HiveParser.indexPropertiesList_return indexPropertiesList() throws RecognitionException {
        HiveParser.indexPropertiesList_return retval = new HiveParser.indexPropertiesList_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token COMMA130=null;
        HiveParser.keyValueProperty_return keyValueProperty129 =null;

        HiveParser.keyValueProperty_return keyValueProperty131 =null;


        CommonTree COMMA130_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_keyValueProperty=new RewriteRuleSubtreeStream(adaptor,"rule keyValueProperty");
         msgs.push("index properties list"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:562:5: ( keyValueProperty ( COMMA keyValueProperty )* -> ^( TOK_INDEXPROPLIST ( keyValueProperty )+ ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:563:7: keyValueProperty ( COMMA keyValueProperty )*
            {
            pushFollow(FOLLOW_keyValueProperty_in_indexPropertiesList2906);
            keyValueProperty129=keyValueProperty();

            state._fsp--;

            stream_keyValueProperty.add(keyValueProperty129.getTree());

            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:563:24: ( COMMA keyValueProperty )*
            loop42:
            do {
                int alt42=2;
                int LA42_0 = input.LA(1);

                if ( (LA42_0==COMMA) ) {
                    alt42=1;
                }


                switch (alt42) {
            	case 1 :
            	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:563:25: COMMA keyValueProperty
            	    {
            	    COMMA130=(Token)match(input,COMMA,FOLLOW_COMMA_in_indexPropertiesList2909);  
            	    stream_COMMA.add(COMMA130);


            	    pushFollow(FOLLOW_keyValueProperty_in_indexPropertiesList2911);
            	    keyValueProperty131=keyValueProperty();

            	    state._fsp--;

            	    stream_keyValueProperty.add(keyValueProperty131.getTree());

            	    }
            	    break;

            	default :
            	    break loop42;
                }
            } while (true);


            // AST REWRITE
            // elements: keyValueProperty
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 563:50: -> ^( TOK_INDEXPROPLIST ( keyValueProperty )+ )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:563:53: ^( TOK_INDEXPROPLIST ( keyValueProperty )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_INDEXPROPLIST, "TOK_INDEXPROPLIST")
                , root_1);

                if ( !(stream_keyValueProperty.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_keyValueProperty.hasNext() ) {
                    adaptor.addChild(root_1, stream_keyValueProperty.nextTree());

                }
                stream_keyValueProperty.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "indexPropertiesList"


    public static class dropIndexStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "dropIndexStatement"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:566:1: dropIndexStatement : KW_DROP KW_INDEX ( ifExists )? indexName= Identifier KW_ON tab= tableName -> ^( TOK_DROPINDEX $indexName $tab ( ifExists )? ) ;
    public final HiveParser.dropIndexStatement_return dropIndexStatement() throws RecognitionException {
        HiveParser.dropIndexStatement_return retval = new HiveParser.dropIndexStatement_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token indexName=null;
        Token KW_DROP132=null;
        Token KW_INDEX133=null;
        Token KW_ON135=null;
        HiveParser.tableName_return tab =null;

        HiveParser.ifExists_return ifExists134 =null;


        CommonTree indexName_tree=null;
        CommonTree KW_DROP132_tree=null;
        CommonTree KW_INDEX133_tree=null;
        CommonTree KW_ON135_tree=null;
        RewriteRuleTokenStream stream_KW_INDEX=new RewriteRuleTokenStream(adaptor,"token KW_INDEX");
        RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_KW_ON=new RewriteRuleTokenStream(adaptor,"token KW_ON");
        RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
        RewriteRuleSubtreeStream stream_ifExists=new RewriteRuleSubtreeStream(adaptor,"rule ifExists");
         msgs.push("drop index statement");
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:569:5: ( KW_DROP KW_INDEX ( ifExists )? indexName= Identifier KW_ON tab= tableName -> ^( TOK_DROPINDEX $indexName $tab ( ifExists )? ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:569:7: KW_DROP KW_INDEX ( ifExists )? indexName= Identifier KW_ON tab= tableName
            {
            KW_DROP132=(Token)match(input,KW_DROP,FOLLOW_KW_DROP_in_dropIndexStatement2949);  
            stream_KW_DROP.add(KW_DROP132);


            KW_INDEX133=(Token)match(input,KW_INDEX,FOLLOW_KW_INDEX_in_dropIndexStatement2951);  
            stream_KW_INDEX.add(KW_INDEX133);


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:569:24: ( ifExists )?
            int alt43=2;
            int LA43_0 = input.LA(1);

            if ( (LA43_0==KW_IF) ) {
                alt43=1;
            }
            switch (alt43) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:569:24: ifExists
                    {
                    pushFollow(FOLLOW_ifExists_in_dropIndexStatement2953);
                    ifExists134=ifExists();

                    state._fsp--;

                    stream_ifExists.add(ifExists134.getTree());

                    }
                    break;

            }


            indexName=(Token)match(input,Identifier,FOLLOW_Identifier_in_dropIndexStatement2958);  
            stream_Identifier.add(indexName);


            KW_ON135=(Token)match(input,KW_ON,FOLLOW_KW_ON_in_dropIndexStatement2960);  
            stream_KW_ON.add(KW_ON135);


            pushFollow(FOLLOW_tableName_in_dropIndexStatement2964);
            tab=tableName();

            state._fsp--;

            stream_tableName.add(tab.getTree());

            // AST REWRITE
            // elements: ifExists, tab, indexName
            // token labels: indexName
            // rule labels: retval, tab
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_indexName=new RewriteRuleTokenStream(adaptor,"token indexName",indexName);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_tab=new RewriteRuleSubtreeStream(adaptor,"rule tab",tab!=null?tab.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 570:5: -> ^( TOK_DROPINDEX $indexName $tab ( ifExists )? )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:570:7: ^( TOK_DROPINDEX $indexName $tab ( ifExists )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_DROPINDEX, "TOK_DROPINDEX")
                , root_1);

                adaptor.addChild(root_1, stream_indexName.nextNode());

                adaptor.addChild(root_1, stream_tab.nextTree());

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:570:39: ( ifExists )?
                if ( stream_ifExists.hasNext() ) {
                    adaptor.addChild(root_1, stream_ifExists.nextTree());

                }
                stream_ifExists.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop();
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "dropIndexStatement"


    public static class dropTableStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "dropTableStatement"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:573:1: dropTableStatement : KW_DROP KW_TABLE ( ifExists )? tableName -> ^( TOK_DROPTABLE tableName ( ifExists )? ) ;
    public final HiveParser.dropTableStatement_return dropTableStatement() throws RecognitionException {
        HiveParser.dropTableStatement_return retval = new HiveParser.dropTableStatement_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_DROP136=null;
        Token KW_TABLE137=null;
        HiveParser.ifExists_return ifExists138 =null;

        HiveParser.tableName_return tableName139 =null;


        CommonTree KW_DROP136_tree=null;
        CommonTree KW_TABLE137_tree=null;
        RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
        RewriteRuleSubtreeStream stream_ifExists=new RewriteRuleSubtreeStream(adaptor,"rule ifExists");
         msgs.push("drop statement"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:576:5: ( KW_DROP KW_TABLE ( ifExists )? tableName -> ^( TOK_DROPTABLE tableName ( ifExists )? ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:576:7: KW_DROP KW_TABLE ( ifExists )? tableName
            {
            KW_DROP136=(Token)match(input,KW_DROP,FOLLOW_KW_DROP_in_dropTableStatement3009);  
            stream_KW_DROP.add(KW_DROP136);


            KW_TABLE137=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_dropTableStatement3011);  
            stream_KW_TABLE.add(KW_TABLE137);


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:576:24: ( ifExists )?
            int alt44=2;
            int LA44_0 = input.LA(1);

            if ( (LA44_0==KW_IF) ) {
                alt44=1;
            }
            switch (alt44) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:576:24: ifExists
                    {
                    pushFollow(FOLLOW_ifExists_in_dropTableStatement3013);
                    ifExists138=ifExists();

                    state._fsp--;

                    stream_ifExists.add(ifExists138.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_tableName_in_dropTableStatement3016);
            tableName139=tableName();

            state._fsp--;

            stream_tableName.add(tableName139.getTree());

            // AST REWRITE
            // elements: ifExists, tableName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 576:44: -> ^( TOK_DROPTABLE tableName ( ifExists )? )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:576:47: ^( TOK_DROPTABLE tableName ( ifExists )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_DROPTABLE, "TOK_DROPTABLE")
                , root_1);

                adaptor.addChild(root_1, stream_tableName.nextTree());

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:576:73: ( ifExists )?
                if ( stream_ifExists.hasNext() ) {
                    adaptor.addChild(root_1, stream_ifExists.nextTree());

                }
                stream_ifExists.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "dropTableStatement"


    public static class alterStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alterStatement"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:579:1: alterStatement : KW_ALTER ! ( KW_TABLE ! alterTableStatementSuffix | KW_VIEW ! alterViewStatementSuffix | KW_INDEX ! alterIndexStatementSuffix | KW_DATABASE ! alterDatabaseStatementSuffix ) ;
    public final HiveParser.alterStatement_return alterStatement() throws RecognitionException {
        HiveParser.alterStatement_return retval = new HiveParser.alterStatement_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_ALTER140=null;
        Token KW_TABLE141=null;
        Token KW_VIEW143=null;
        Token KW_INDEX145=null;
        Token KW_DATABASE147=null;
        HiveParser.alterTableStatementSuffix_return alterTableStatementSuffix142 =null;

        HiveParser.alterViewStatementSuffix_return alterViewStatementSuffix144 =null;

        HiveParser.alterIndexStatementSuffix_return alterIndexStatementSuffix146 =null;

        HiveParser.alterDatabaseStatementSuffix_return alterDatabaseStatementSuffix148 =null;


        CommonTree KW_ALTER140_tree=null;
        CommonTree KW_TABLE141_tree=null;
        CommonTree KW_VIEW143_tree=null;
        CommonTree KW_INDEX145_tree=null;
        CommonTree KW_DATABASE147_tree=null;

         msgs.push("alter statement"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:582:5: ( KW_ALTER ! ( KW_TABLE ! alterTableStatementSuffix | KW_VIEW ! alterViewStatementSuffix | KW_INDEX ! alterIndexStatementSuffix | KW_DATABASE ! alterDatabaseStatementSuffix ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:582:7: KW_ALTER ! ( KW_TABLE ! alterTableStatementSuffix | KW_VIEW ! alterViewStatementSuffix | KW_INDEX ! alterIndexStatementSuffix | KW_DATABASE ! alterDatabaseStatementSuffix )
            {
            root_0 = (CommonTree)adaptor.nil();


            KW_ALTER140=(Token)match(input,KW_ALTER,FOLLOW_KW_ALTER_in_alterStatement3054); 

            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:583:9: ( KW_TABLE ! alterTableStatementSuffix | KW_VIEW ! alterViewStatementSuffix | KW_INDEX ! alterIndexStatementSuffix | KW_DATABASE ! alterDatabaseStatementSuffix )
            int alt45=4;
            switch ( input.LA(1) ) {
            case KW_TABLE:
                {
                alt45=1;
                }
                break;
            case KW_VIEW:
                {
                alt45=2;
                }
                break;
            case KW_INDEX:
                {
                alt45=3;
                }
                break;
            case KW_DATABASE:
                {
                alt45=4;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 45, 0, input);

                throw nvae;

            }

            switch (alt45) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:584:13: KW_TABLE ! alterTableStatementSuffix
                    {
                    KW_TABLE141=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_alterStatement3079); 

                    pushFollow(FOLLOW_alterTableStatementSuffix_in_alterStatement3082);
                    alterTableStatementSuffix142=alterTableStatementSuffix();

                    state._fsp--;

                    adaptor.addChild(root_0, alterTableStatementSuffix142.getTree());

                    }
                    break;
                case 2 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:586:13: KW_VIEW ! alterViewStatementSuffix
                    {
                    KW_VIEW143=(Token)match(input,KW_VIEW,FOLLOW_KW_VIEW_in_alterStatement3106); 

                    pushFollow(FOLLOW_alterViewStatementSuffix_in_alterStatement3109);
                    alterViewStatementSuffix144=alterViewStatementSuffix();

                    state._fsp--;

                    adaptor.addChild(root_0, alterViewStatementSuffix144.getTree());

                    }
                    break;
                case 3 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:588:13: KW_INDEX ! alterIndexStatementSuffix
                    {
                    KW_INDEX145=(Token)match(input,KW_INDEX,FOLLOW_KW_INDEX_in_alterStatement3133); 

                    pushFollow(FOLLOW_alterIndexStatementSuffix_in_alterStatement3136);
                    alterIndexStatementSuffix146=alterIndexStatementSuffix();

                    state._fsp--;

                    adaptor.addChild(root_0, alterIndexStatementSuffix146.getTree());

                    }
                    break;
                case 4 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:590:13: KW_DATABASE ! alterDatabaseStatementSuffix
                    {
                    KW_DATABASE147=(Token)match(input,KW_DATABASE,FOLLOW_KW_DATABASE_in_alterStatement3160); 

                    pushFollow(FOLLOW_alterDatabaseStatementSuffix_in_alterStatement3163);
                    alterDatabaseStatementSuffix148=alterDatabaseStatementSuffix();

                    state._fsp--;

                    adaptor.addChild(root_0, alterDatabaseStatementSuffix148.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alterStatement"


    public static class alterTableStatementSuffix_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alterTableStatementSuffix"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:594:1: alterTableStatementSuffix : ( alterStatementSuffixRename | alterStatementSuffixAddCol | alterStatementSuffixRenameCol | alterStatementSuffixDropPartitions | alterStatementSuffixAddPartitions | alterStatementSuffixTouch | alterStatementSuffixArchive | alterStatementSuffixUnArchive | alterStatementSuffixProperties | alterTblPartitionStatement | alterStatementSuffixClusterbySortby | alterStatementSuffixSkewedby );
    public final HiveParser.alterTableStatementSuffix_return alterTableStatementSuffix() throws RecognitionException {
        HiveParser.alterTableStatementSuffix_return retval = new HiveParser.alterTableStatementSuffix_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        HiveParser.alterStatementSuffixRename_return alterStatementSuffixRename149 =null;

        HiveParser.alterStatementSuffixAddCol_return alterStatementSuffixAddCol150 =null;

        HiveParser.alterStatementSuffixRenameCol_return alterStatementSuffixRenameCol151 =null;

        HiveParser.alterStatementSuffixDropPartitions_return alterStatementSuffixDropPartitions152 =null;

        HiveParser.alterStatementSuffixAddPartitions_return alterStatementSuffixAddPartitions153 =null;

        HiveParser.alterStatementSuffixTouch_return alterStatementSuffixTouch154 =null;

        HiveParser.alterStatementSuffixArchive_return alterStatementSuffixArchive155 =null;

        HiveParser.alterStatementSuffixUnArchive_return alterStatementSuffixUnArchive156 =null;

        HiveParser.alterStatementSuffixProperties_return alterStatementSuffixProperties157 =null;

        HiveParser.alterTblPartitionStatement_return alterTblPartitionStatement158 =null;

        HiveParser.alterStatementSuffixClusterbySortby_return alterStatementSuffixClusterbySortby159 =null;

        HiveParser.alterStatementSuffixSkewedby_return alterStatementSuffixSkewedby160 =null;



         msgs.push("alter table statement"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:597:5: ( alterStatementSuffixRename | alterStatementSuffixAddCol | alterStatementSuffixRenameCol | alterStatementSuffixDropPartitions | alterStatementSuffixAddPartitions | alterStatementSuffixTouch | alterStatementSuffixArchive | alterStatementSuffixUnArchive | alterStatementSuffixProperties | alterTblPartitionStatement | alterStatementSuffixClusterbySortby | alterStatementSuffixSkewedby )
            int alt46=12;
            int LA46_0 = input.LA(1);

            if ( (LA46_0==Identifier) ) {
                switch ( input.LA(2) ) {
                case KW_RENAME:
                    {
                    int LA46_2 = input.LA(3);

                    if ( (LA46_2==KW_TO) ) {
                        alt46=1;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("", 46, 2, input);

                        throw nvae;

                    }
                    }
                    break;
                case KW_CHANGE:
                    {
                    alt46=3;
                    }
                    break;
                case KW_DROP:
                    {
                    alt46=4;
                    }
                    break;
                case KW_ADD:
                    {
                    int LA46_5 = input.LA(3);

                    if ( (LA46_5==KW_IF||LA46_5==KW_PARTITION) ) {
                        alt46=5;
                    }
                    else if ( (LA46_5==KW_COLUMNS) ) {
                        alt46=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("", 46, 5, input);

                        throw nvae;

                    }
                    }
                    break;
                case KW_TOUCH:
                    {
                    alt46=6;
                    }
                    break;
                case KW_ARCHIVE:
                    {
                    alt46=7;
                    }
                    break;
                case KW_UNARCHIVE:
                    {
                    alt46=8;
                    }
                    break;
                case KW_SET:
                    {
                    int LA46_9 = input.LA(3);

                    if ( (LA46_9==KW_TBLPROPERTIES) ) {
                        alt46=9;
                    }
                    else if ( (LA46_9==KW_FILEFORMAT||LA46_9==KW_LOCATION||(LA46_9 >= KW_SERDE && LA46_9 <= KW_SERDEPROPERTIES)||LA46_9==KW_SKEWED) ) {
                        alt46=10;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("", 46, 9, input);

                        throw nvae;

                    }
                    }
                    break;
                case KW_NOT:
                    {
                    int LA46_10 = input.LA(3);

                    if ( (LA46_10==KW_CLUSTERED) ) {
                        alt46=11;
                    }
                    else if ( (LA46_10==KW_SKEWED||LA46_10==KW_STORED) ) {
                        alt46=12;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("", 46, 10, input);

                        throw nvae;

                    }
                    }
                    break;
                case KW_REPLACE:
                    {
                    alt46=2;
                    }
                    break;
                case KW_CONCATENATE:
                case KW_DISABLE:
                case KW_ENABLE:
                case KW_PARTITION:
                    {
                    alt46=10;
                    }
                    break;
                case KW_CLUSTERED:
                    {
                    alt46=11;
                    }
                    break;
                case KW_SKEWED:
                    {
                    alt46=12;
                    }
                    break;
                default:
                    NoViableAltException nvae =
                        new NoViableAltException("", 46, 1, input);

                    throw nvae;

                }

            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 46, 0, input);

                throw nvae;

            }
            switch (alt46) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:597:7: alterStatementSuffixRename
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_alterStatementSuffixRename_in_alterTableStatementSuffix3200);
                    alterStatementSuffixRename149=alterStatementSuffixRename();

                    state._fsp--;

                    adaptor.addChild(root_0, alterStatementSuffixRename149.getTree());

                    }
                    break;
                case 2 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:598:7: alterStatementSuffixAddCol
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_alterStatementSuffixAddCol_in_alterTableStatementSuffix3208);
                    alterStatementSuffixAddCol150=alterStatementSuffixAddCol();

                    state._fsp--;

                    adaptor.addChild(root_0, alterStatementSuffixAddCol150.getTree());

                    }
                    break;
                case 3 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:599:7: alterStatementSuffixRenameCol
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_alterStatementSuffixRenameCol_in_alterTableStatementSuffix3216);
                    alterStatementSuffixRenameCol151=alterStatementSuffixRenameCol();

                    state._fsp--;

                    adaptor.addChild(root_0, alterStatementSuffixRenameCol151.getTree());

                    }
                    break;
                case 4 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:600:7: alterStatementSuffixDropPartitions
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_alterStatementSuffixDropPartitions_in_alterTableStatementSuffix3224);
                    alterStatementSuffixDropPartitions152=alterStatementSuffixDropPartitions();

                    state._fsp--;

                    adaptor.addChild(root_0, alterStatementSuffixDropPartitions152.getTree());

                    }
                    break;
                case 5 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:601:7: alterStatementSuffixAddPartitions
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_alterStatementSuffixAddPartitions_in_alterTableStatementSuffix3232);
                    alterStatementSuffixAddPartitions153=alterStatementSuffixAddPartitions();

                    state._fsp--;

                    adaptor.addChild(root_0, alterStatementSuffixAddPartitions153.getTree());

                    }
                    break;
                case 6 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:602:7: alterStatementSuffixTouch
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_alterStatementSuffixTouch_in_alterTableStatementSuffix3240);
                    alterStatementSuffixTouch154=alterStatementSuffixTouch();

                    state._fsp--;

                    adaptor.addChild(root_0, alterStatementSuffixTouch154.getTree());

                    }
                    break;
                case 7 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:603:7: alterStatementSuffixArchive
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_alterStatementSuffixArchive_in_alterTableStatementSuffix3248);
                    alterStatementSuffixArchive155=alterStatementSuffixArchive();

                    state._fsp--;

                    adaptor.addChild(root_0, alterStatementSuffixArchive155.getTree());

                    }
                    break;
                case 8 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:604:7: alterStatementSuffixUnArchive
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_alterStatementSuffixUnArchive_in_alterTableStatementSuffix3256);
                    alterStatementSuffixUnArchive156=alterStatementSuffixUnArchive();

                    state._fsp--;

                    adaptor.addChild(root_0, alterStatementSuffixUnArchive156.getTree());

                    }
                    break;
                case 9 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:605:7: alterStatementSuffixProperties
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_alterStatementSuffixProperties_in_alterTableStatementSuffix3264);
                    alterStatementSuffixProperties157=alterStatementSuffixProperties();

                    state._fsp--;

                    adaptor.addChild(root_0, alterStatementSuffixProperties157.getTree());

                    }
                    break;
                case 10 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:606:7: alterTblPartitionStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_alterTblPartitionStatement_in_alterTableStatementSuffix3272);
                    alterTblPartitionStatement158=alterTblPartitionStatement();

                    state._fsp--;

                    adaptor.addChild(root_0, alterTblPartitionStatement158.getTree());

                    }
                    break;
                case 11 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:607:7: alterStatementSuffixClusterbySortby
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_alterStatementSuffixClusterbySortby_in_alterTableStatementSuffix3280);
                    alterStatementSuffixClusterbySortby159=alterStatementSuffixClusterbySortby();

                    state._fsp--;

                    adaptor.addChild(root_0, alterStatementSuffixClusterbySortby159.getTree());

                    }
                    break;
                case 12 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:608:7: alterStatementSuffixSkewedby
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_alterStatementSuffixSkewedby_in_alterTableStatementSuffix3288);
                    alterStatementSuffixSkewedby160=alterStatementSuffixSkewedby();

                    state._fsp--;

                    adaptor.addChild(root_0, alterStatementSuffixSkewedby160.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alterTableStatementSuffix"


    public static class alterViewStatementSuffix_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alterViewStatementSuffix"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:611:1: alterViewStatementSuffix : ( alterViewSuffixProperties | alterStatementSuffixRename -> ^( TOK_ALTERVIEW_RENAME alterStatementSuffixRename ) | alterStatementSuffixAddPartitions -> ^( TOK_ALTERVIEW_ADDPARTS alterStatementSuffixAddPartitions ) | alterStatementSuffixDropPartitions -> ^( TOK_ALTERVIEW_DROPPARTS alterStatementSuffixDropPartitions ) );
    public final HiveParser.alterViewStatementSuffix_return alterViewStatementSuffix() throws RecognitionException {
        HiveParser.alterViewStatementSuffix_return retval = new HiveParser.alterViewStatementSuffix_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        HiveParser.alterViewSuffixProperties_return alterViewSuffixProperties161 =null;

        HiveParser.alterStatementSuffixRename_return alterStatementSuffixRename162 =null;

        HiveParser.alterStatementSuffixAddPartitions_return alterStatementSuffixAddPartitions163 =null;

        HiveParser.alterStatementSuffixDropPartitions_return alterStatementSuffixDropPartitions164 =null;


        RewriteRuleSubtreeStream stream_alterStatementSuffixAddPartitions=new RewriteRuleSubtreeStream(adaptor,"rule alterStatementSuffixAddPartitions");
        RewriteRuleSubtreeStream stream_alterStatementSuffixRename=new RewriteRuleSubtreeStream(adaptor,"rule alterStatementSuffixRename");
        RewriteRuleSubtreeStream stream_alterStatementSuffixDropPartitions=new RewriteRuleSubtreeStream(adaptor,"rule alterStatementSuffixDropPartitions");
         msgs.push("alter view statement"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:614:5: ( alterViewSuffixProperties | alterStatementSuffixRename -> ^( TOK_ALTERVIEW_RENAME alterStatementSuffixRename ) | alterStatementSuffixAddPartitions -> ^( TOK_ALTERVIEW_ADDPARTS alterStatementSuffixAddPartitions ) | alterStatementSuffixDropPartitions -> ^( TOK_ALTERVIEW_DROPPARTS alterStatementSuffixDropPartitions ) )
            int alt47=4;
            int LA47_0 = input.LA(1);

            if ( (LA47_0==Identifier) ) {
                switch ( input.LA(2) ) {
                case KW_SET:
                    {
                    alt47=1;
                    }
                    break;
                case KW_RENAME:
                    {
                    alt47=2;
                    }
                    break;
                case KW_ADD:
                    {
                    alt47=3;
                    }
                    break;
                case KW_DROP:
                    {
                    alt47=4;
                    }
                    break;
                default:
                    NoViableAltException nvae =
                        new NoViableAltException("", 47, 1, input);

                    throw nvae;

                }

            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 47, 0, input);

                throw nvae;

            }
            switch (alt47) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:614:7: alterViewSuffixProperties
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_alterViewSuffixProperties_in_alterViewStatementSuffix3315);
                    alterViewSuffixProperties161=alterViewSuffixProperties();

                    state._fsp--;

                    adaptor.addChild(root_0, alterViewSuffixProperties161.getTree());

                    }
                    break;
                case 2 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:615:7: alterStatementSuffixRename
                    {
                    pushFollow(FOLLOW_alterStatementSuffixRename_in_alterViewStatementSuffix3323);
                    alterStatementSuffixRename162=alterStatementSuffixRename();

                    state._fsp--;

                    stream_alterStatementSuffixRename.add(alterStatementSuffixRename162.getTree());

                    // AST REWRITE
                    // elements: alterStatementSuffixRename
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 616:9: -> ^( TOK_ALTERVIEW_RENAME alterStatementSuffixRename )
                    {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:616:12: ^( TOK_ALTERVIEW_RENAME alterStatementSuffixRename )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_ALTERVIEW_RENAME, "TOK_ALTERVIEW_RENAME")
                        , root_1);

                        adaptor.addChild(root_1, stream_alterStatementSuffixRename.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 3 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:617:7: alterStatementSuffixAddPartitions
                    {
                    pushFollow(FOLLOW_alterStatementSuffixAddPartitions_in_alterViewStatementSuffix3347);
                    alterStatementSuffixAddPartitions163=alterStatementSuffixAddPartitions();

                    state._fsp--;

                    stream_alterStatementSuffixAddPartitions.add(alterStatementSuffixAddPartitions163.getTree());

                    // AST REWRITE
                    // elements: alterStatementSuffixAddPartitions
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 618:9: -> ^( TOK_ALTERVIEW_ADDPARTS alterStatementSuffixAddPartitions )
                    {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:618:12: ^( TOK_ALTERVIEW_ADDPARTS alterStatementSuffixAddPartitions )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_ALTERVIEW_ADDPARTS, "TOK_ALTERVIEW_ADDPARTS")
                        , root_1);

                        adaptor.addChild(root_1, stream_alterStatementSuffixAddPartitions.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 4 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:619:7: alterStatementSuffixDropPartitions
                    {
                    pushFollow(FOLLOW_alterStatementSuffixDropPartitions_in_alterViewStatementSuffix3371);
                    alterStatementSuffixDropPartitions164=alterStatementSuffixDropPartitions();

                    state._fsp--;

                    stream_alterStatementSuffixDropPartitions.add(alterStatementSuffixDropPartitions164.getTree());

                    // AST REWRITE
                    // elements: alterStatementSuffixDropPartitions
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 620:9: -> ^( TOK_ALTERVIEW_DROPPARTS alterStatementSuffixDropPartitions )
                    {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:620:12: ^( TOK_ALTERVIEW_DROPPARTS alterStatementSuffixDropPartitions )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_ALTERVIEW_DROPPARTS, "TOK_ALTERVIEW_DROPPARTS")
                        , root_1);

                        adaptor.addChild(root_1, stream_alterStatementSuffixDropPartitions.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alterViewStatementSuffix"


    public static class alterIndexStatementSuffix_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alterIndexStatementSuffix"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:623:1: alterIndexStatementSuffix : indexName= Identifier ( KW_ON tableNameId= Identifier ) ( partitionSpec )? ( KW_REBUILD -> ^( TOK_ALTERINDEX_REBUILD $tableNameId $indexName ( partitionSpec )? ) | KW_SET KW_IDXPROPERTIES indexProperties -> ^( TOK_ALTERINDEX_PROPERTIES $tableNameId $indexName indexProperties ) ) ;
    public final HiveParser.alterIndexStatementSuffix_return alterIndexStatementSuffix() throws RecognitionException {
        HiveParser.alterIndexStatementSuffix_return retval = new HiveParser.alterIndexStatementSuffix_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token indexName=null;
        Token tableNameId=null;
        Token KW_ON165=null;
        Token KW_REBUILD167=null;
        Token KW_SET168=null;
        Token KW_IDXPROPERTIES169=null;
        HiveParser.partitionSpec_return partitionSpec166 =null;

        HiveParser.indexProperties_return indexProperties170 =null;


        CommonTree indexName_tree=null;
        CommonTree tableNameId_tree=null;
        CommonTree KW_ON165_tree=null;
        CommonTree KW_REBUILD167_tree=null;
        CommonTree KW_SET168_tree=null;
        CommonTree KW_IDXPROPERTIES169_tree=null;
        RewriteRuleTokenStream stream_KW_REBUILD=new RewriteRuleTokenStream(adaptor,"token KW_REBUILD");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_KW_ON=new RewriteRuleTokenStream(adaptor,"token KW_ON");
        RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
        RewriteRuleTokenStream stream_KW_IDXPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_IDXPROPERTIES");
        RewriteRuleSubtreeStream stream_indexProperties=new RewriteRuleSubtreeStream(adaptor,"rule indexProperties");
        RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
         msgs.push("alter index statement"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:626:5: (indexName= Identifier ( KW_ON tableNameId= Identifier ) ( partitionSpec )? ( KW_REBUILD -> ^( TOK_ALTERINDEX_REBUILD $tableNameId $indexName ( partitionSpec )? ) | KW_SET KW_IDXPROPERTIES indexProperties -> ^( TOK_ALTERINDEX_PROPERTIES $tableNameId $indexName indexProperties ) ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:626:7: indexName= Identifier ( KW_ON tableNameId= Identifier ) ( partitionSpec )? ( KW_REBUILD -> ^( TOK_ALTERINDEX_REBUILD $tableNameId $indexName ( partitionSpec )? ) | KW_SET KW_IDXPROPERTIES indexProperties -> ^( TOK_ALTERINDEX_PROPERTIES $tableNameId $indexName indexProperties ) )
            {
            indexName=(Token)match(input,Identifier,FOLLOW_Identifier_in_alterIndexStatementSuffix3416);  
            stream_Identifier.add(indexName);


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:627:7: ( KW_ON tableNameId= Identifier )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:627:8: KW_ON tableNameId= Identifier
            {
            KW_ON165=(Token)match(input,KW_ON,FOLLOW_KW_ON_in_alterIndexStatementSuffix3425);  
            stream_KW_ON.add(KW_ON165);


            tableNameId=(Token)match(input,Identifier,FOLLOW_Identifier_in_alterIndexStatementSuffix3429);  
            stream_Identifier.add(tableNameId);


            }


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:628:7: ( partitionSpec )?
            int alt48=2;
            int LA48_0 = input.LA(1);

            if ( (LA48_0==KW_PARTITION) ) {
                alt48=1;
            }
            switch (alt48) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:628:7: partitionSpec
                    {
                    pushFollow(FOLLOW_partitionSpec_in_alterIndexStatementSuffix3438);
                    partitionSpec166=partitionSpec();

                    state._fsp--;

                    stream_partitionSpec.add(partitionSpec166.getTree());

                    }
                    break;

            }


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:629:5: ( KW_REBUILD -> ^( TOK_ALTERINDEX_REBUILD $tableNameId $indexName ( partitionSpec )? ) | KW_SET KW_IDXPROPERTIES indexProperties -> ^( TOK_ALTERINDEX_PROPERTIES $tableNameId $indexName indexProperties ) )
            int alt49=2;
            int LA49_0 = input.LA(1);

            if ( (LA49_0==KW_REBUILD) ) {
                alt49=1;
            }
            else if ( (LA49_0==KW_SET) ) {
                alt49=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 49, 0, input);

                throw nvae;

            }
            switch (alt49) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:630:7: KW_REBUILD
                    {
                    KW_REBUILD167=(Token)match(input,KW_REBUILD,FOLLOW_KW_REBUILD_in_alterIndexStatementSuffix3453);  
                    stream_KW_REBUILD.add(KW_REBUILD167);


                    // AST REWRITE
                    // elements: indexName, tableNameId, partitionSpec
                    // token labels: tableNameId, indexName
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_tableNameId=new RewriteRuleTokenStream(adaptor,"token tableNameId",tableNameId);
                    RewriteRuleTokenStream stream_indexName=new RewriteRuleTokenStream(adaptor,"token indexName",indexName);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 631:7: -> ^( TOK_ALTERINDEX_REBUILD $tableNameId $indexName ( partitionSpec )? )
                    {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:631:9: ^( TOK_ALTERINDEX_REBUILD $tableNameId $indexName ( partitionSpec )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_ALTERINDEX_REBUILD, "TOK_ALTERINDEX_REBUILD")
                        , root_1);

                        adaptor.addChild(root_1, stream_tableNameId.nextNode());

                        adaptor.addChild(root_1, stream_indexName.nextNode());

                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:631:58: ( partitionSpec )?
                        if ( stream_partitionSpec.hasNext() ) {
                            adaptor.addChild(root_1, stream_partitionSpec.nextTree());

                        }
                        stream_partitionSpec.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 2 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:633:7: KW_SET KW_IDXPROPERTIES indexProperties
                    {
                    KW_SET168=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_alterIndexStatementSuffix3487);  
                    stream_KW_SET.add(KW_SET168);


                    KW_IDXPROPERTIES169=(Token)match(input,KW_IDXPROPERTIES,FOLLOW_KW_IDXPROPERTIES_in_alterIndexStatementSuffix3489);  
                    stream_KW_IDXPROPERTIES.add(KW_IDXPROPERTIES169);


                    pushFollow(FOLLOW_indexProperties_in_alterIndexStatementSuffix3497);
                    indexProperties170=indexProperties();

                    state._fsp--;

                    stream_indexProperties.add(indexProperties170.getTree());

                    // AST REWRITE
                    // elements: indexName, indexProperties, tableNameId
                    // token labels: tableNameId, indexName
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_tableNameId=new RewriteRuleTokenStream(adaptor,"token tableNameId",tableNameId);
                    RewriteRuleTokenStream stream_indexName=new RewriteRuleTokenStream(adaptor,"token indexName",indexName);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 635:7: -> ^( TOK_ALTERINDEX_PROPERTIES $tableNameId $indexName indexProperties )
                    {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:635:9: ^( TOK_ALTERINDEX_PROPERTIES $tableNameId $indexName indexProperties )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_ALTERINDEX_PROPERTIES, "TOK_ALTERINDEX_PROPERTIES")
                        , root_1);

                        adaptor.addChild(root_1, stream_tableNameId.nextNode());

                        adaptor.addChild(root_1, stream_indexName.nextNode());

                        adaptor.addChild(root_1, stream_indexProperties.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alterIndexStatementSuffix"


    public static class alterDatabaseStatementSuffix_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alterDatabaseStatementSuffix"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:639:1: alterDatabaseStatementSuffix : alterDatabaseSuffixProperties ;
    public final HiveParser.alterDatabaseStatementSuffix_return alterDatabaseStatementSuffix() throws RecognitionException {
        HiveParser.alterDatabaseStatementSuffix_return retval = new HiveParser.alterDatabaseStatementSuffix_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        HiveParser.alterDatabaseSuffixProperties_return alterDatabaseSuffixProperties171 =null;



         msgs.push("alter database statement"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:642:5: ( alterDatabaseSuffixProperties )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:642:7: alterDatabaseSuffixProperties
            {
            root_0 = (CommonTree)adaptor.nil();


            pushFollow(FOLLOW_alterDatabaseSuffixProperties_in_alterDatabaseStatementSuffix3549);
            alterDatabaseSuffixProperties171=alterDatabaseSuffixProperties();

            state._fsp--;

            adaptor.addChild(root_0, alterDatabaseSuffixProperties171.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alterDatabaseStatementSuffix"


    public static class alterDatabaseSuffixProperties_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alterDatabaseSuffixProperties"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:645:1: alterDatabaseSuffixProperties : name= Identifier KW_SET KW_DBPROPERTIES dbProperties -> ^( TOK_ALTERDATABASE_PROPERTIES $name dbProperties ) ;
    public final HiveParser.alterDatabaseSuffixProperties_return alterDatabaseSuffixProperties() throws RecognitionException {
        HiveParser.alterDatabaseSuffixProperties_return retval = new HiveParser.alterDatabaseSuffixProperties_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token name=null;
        Token KW_SET172=null;
        Token KW_DBPROPERTIES173=null;
        HiveParser.dbProperties_return dbProperties174 =null;


        CommonTree name_tree=null;
        CommonTree KW_SET172_tree=null;
        CommonTree KW_DBPROPERTIES173_tree=null;
        RewriteRuleTokenStream stream_KW_DBPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_DBPROPERTIES");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
        RewriteRuleSubtreeStream stream_dbProperties=new RewriteRuleSubtreeStream(adaptor,"rule dbProperties");
         msgs.push("alter database properties statement"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:648:5: (name= Identifier KW_SET KW_DBPROPERTIES dbProperties -> ^( TOK_ALTERDATABASE_PROPERTIES $name dbProperties ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:648:7: name= Identifier KW_SET KW_DBPROPERTIES dbProperties
            {
            name=(Token)match(input,Identifier,FOLLOW_Identifier_in_alterDatabaseSuffixProperties3578);  
            stream_Identifier.add(name);


            KW_SET172=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_alterDatabaseSuffixProperties3580);  
            stream_KW_SET.add(KW_SET172);


            KW_DBPROPERTIES173=(Token)match(input,KW_DBPROPERTIES,FOLLOW_KW_DBPROPERTIES_in_alterDatabaseSuffixProperties3582);  
            stream_KW_DBPROPERTIES.add(KW_DBPROPERTIES173);


            pushFollow(FOLLOW_dbProperties_in_alterDatabaseSuffixProperties3584);
            dbProperties174=dbProperties();

            state._fsp--;

            stream_dbProperties.add(dbProperties174.getTree());

            // AST REWRITE
            // elements: name, dbProperties
            // token labels: name
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 649:5: -> ^( TOK_ALTERDATABASE_PROPERTIES $name dbProperties )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:649:8: ^( TOK_ALTERDATABASE_PROPERTIES $name dbProperties )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_ALTERDATABASE_PROPERTIES, "TOK_ALTERDATABASE_PROPERTIES")
                , root_1);

                adaptor.addChild(root_1, stream_name.nextNode());

                adaptor.addChild(root_1, stream_dbProperties.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alterDatabaseSuffixProperties"


    public static class alterStatementSuffixRename_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alterStatementSuffixRename"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:652:1: alterStatementSuffixRename : oldName= Identifier KW_RENAME KW_TO newName= Identifier -> ^( TOK_ALTERTABLE_RENAME $oldName $newName) ;
    public final HiveParser.alterStatementSuffixRename_return alterStatementSuffixRename() throws RecognitionException {
        HiveParser.alterStatementSuffixRename_return retval = new HiveParser.alterStatementSuffixRename_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token oldName=null;
        Token newName=null;
        Token KW_RENAME175=null;
        Token KW_TO176=null;

        CommonTree oldName_tree=null;
        CommonTree newName_tree=null;
        CommonTree KW_RENAME175_tree=null;
        CommonTree KW_TO176_tree=null;
        RewriteRuleTokenStream stream_KW_RENAME=new RewriteRuleTokenStream(adaptor,"token KW_RENAME");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_KW_TO=new RewriteRuleTokenStream(adaptor,"token KW_TO");

         msgs.push("rename statement"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:655:5: (oldName= Identifier KW_RENAME KW_TO newName= Identifier -> ^( TOK_ALTERTABLE_RENAME $oldName $newName) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:655:7: oldName= Identifier KW_RENAME KW_TO newName= Identifier
            {
            oldName=(Token)match(input,Identifier,FOLLOW_Identifier_in_alterStatementSuffixRename3628);  
            stream_Identifier.add(oldName);


            KW_RENAME175=(Token)match(input,KW_RENAME,FOLLOW_KW_RENAME_in_alterStatementSuffixRename3630);  
            stream_KW_RENAME.add(KW_RENAME175);


            KW_TO176=(Token)match(input,KW_TO,FOLLOW_KW_TO_in_alterStatementSuffixRename3632);  
            stream_KW_TO.add(KW_TO176);


            newName=(Token)match(input,Identifier,FOLLOW_Identifier_in_alterStatementSuffixRename3636);  
            stream_Identifier.add(newName);


            // AST REWRITE
            // elements: oldName, newName
            // token labels: newName, oldName
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_newName=new RewriteRuleTokenStream(adaptor,"token newName",newName);
            RewriteRuleTokenStream stream_oldName=new RewriteRuleTokenStream(adaptor,"token oldName",oldName);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 656:5: -> ^( TOK_ALTERTABLE_RENAME $oldName $newName)
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:656:8: ^( TOK_ALTERTABLE_RENAME $oldName $newName)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_ALTERTABLE_RENAME, "TOK_ALTERTABLE_RENAME")
                , root_1);

                adaptor.addChild(root_1, stream_oldName.nextNode());

                adaptor.addChild(root_1, stream_newName.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alterStatementSuffixRename"


    public static class alterStatementSuffixAddCol_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alterStatementSuffixAddCol"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:659:1: alterStatementSuffixAddCol : Identifier (add= KW_ADD |replace= KW_REPLACE ) KW_COLUMNS LPAREN columnNameTypeList RPAREN -> {$add != null}? ^( TOK_ALTERTABLE_ADDCOLS Identifier columnNameTypeList ) -> ^( TOK_ALTERTABLE_REPLACECOLS Identifier columnNameTypeList ) ;
    public final HiveParser.alterStatementSuffixAddCol_return alterStatementSuffixAddCol() throws RecognitionException {
        HiveParser.alterStatementSuffixAddCol_return retval = new HiveParser.alterStatementSuffixAddCol_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token add=null;
        Token replace=null;
        Token Identifier177=null;
        Token KW_COLUMNS178=null;
        Token LPAREN179=null;
        Token RPAREN181=null;
        HiveParser.columnNameTypeList_return columnNameTypeList180 =null;


        CommonTree add_tree=null;
        CommonTree replace_tree=null;
        CommonTree Identifier177_tree=null;
        CommonTree KW_COLUMNS178_tree=null;
        CommonTree LPAREN179_tree=null;
        CommonTree RPAREN181_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_KW_REPLACE=new RewriteRuleTokenStream(adaptor,"token KW_REPLACE");
        RewriteRuleTokenStream stream_KW_COLUMNS=new RewriteRuleTokenStream(adaptor,"token KW_COLUMNS");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_KW_ADD=new RewriteRuleTokenStream(adaptor,"token KW_ADD");
        RewriteRuleSubtreeStream stream_columnNameTypeList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameTypeList");
         msgs.push("add column statement"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:662:5: ( Identifier (add= KW_ADD |replace= KW_REPLACE ) KW_COLUMNS LPAREN columnNameTypeList RPAREN -> {$add != null}? ^( TOK_ALTERTABLE_ADDCOLS Identifier columnNameTypeList ) -> ^( TOK_ALTERTABLE_REPLACECOLS Identifier columnNameTypeList ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:662:7: Identifier (add= KW_ADD |replace= KW_REPLACE ) KW_COLUMNS LPAREN columnNameTypeList RPAREN
            {
            Identifier177=(Token)match(input,Identifier,FOLLOW_Identifier_in_alterStatementSuffixAddCol3679);  
            stream_Identifier.add(Identifier177);


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:662:18: (add= KW_ADD |replace= KW_REPLACE )
            int alt50=2;
            int LA50_0 = input.LA(1);

            if ( (LA50_0==KW_ADD) ) {
                alt50=1;
            }
            else if ( (LA50_0==KW_REPLACE) ) {
                alt50=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 50, 0, input);

                throw nvae;

            }
            switch (alt50) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:662:19: add= KW_ADD
                    {
                    add=(Token)match(input,KW_ADD,FOLLOW_KW_ADD_in_alterStatementSuffixAddCol3684);  
                    stream_KW_ADD.add(add);


                    }
                    break;
                case 2 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:662:32: replace= KW_REPLACE
                    {
                    replace=(Token)match(input,KW_REPLACE,FOLLOW_KW_REPLACE_in_alterStatementSuffixAddCol3690);  
                    stream_KW_REPLACE.add(replace);


                    }
                    break;

            }


            KW_COLUMNS178=(Token)match(input,KW_COLUMNS,FOLLOW_KW_COLUMNS_in_alterStatementSuffixAddCol3693);  
            stream_KW_COLUMNS.add(KW_COLUMNS178);


            LPAREN179=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_alterStatementSuffixAddCol3695);  
            stream_LPAREN.add(LPAREN179);


            pushFollow(FOLLOW_columnNameTypeList_in_alterStatementSuffixAddCol3697);
            columnNameTypeList180=columnNameTypeList();

            state._fsp--;

            stream_columnNameTypeList.add(columnNameTypeList180.getTree());

            RPAREN181=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_alterStatementSuffixAddCol3699);  
            stream_RPAREN.add(RPAREN181);


            // AST REWRITE
            // elements: Identifier, columnNameTypeList, Identifier, columnNameTypeList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 663:5: -> {$add != null}? ^( TOK_ALTERTABLE_ADDCOLS Identifier columnNameTypeList )
            if (add != null) {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:663:24: ^( TOK_ALTERTABLE_ADDCOLS Identifier columnNameTypeList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_ALTERTABLE_ADDCOLS, "TOK_ALTERTABLE_ADDCOLS")
                , root_1);

                adaptor.addChild(root_1, 
                stream_Identifier.nextNode()
                );

                adaptor.addChild(root_1, stream_columnNameTypeList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 664:5: -> ^( TOK_ALTERTABLE_REPLACECOLS Identifier columnNameTypeList )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:664:24: ^( TOK_ALTERTABLE_REPLACECOLS Identifier columnNameTypeList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_ALTERTABLE_REPLACECOLS, "TOK_ALTERTABLE_REPLACECOLS")
                , root_1);

                adaptor.addChild(root_1, 
                stream_Identifier.nextNode()
                );

                adaptor.addChild(root_1, stream_columnNameTypeList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alterStatementSuffixAddCol"


    public static class alterStatementSuffixRenameCol_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alterStatementSuffixRenameCol"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:667:1: alterStatementSuffixRenameCol : Identifier KW_CHANGE ( KW_COLUMN )? oldName= Identifier newName= Identifier colType ( KW_COMMENT comment= StringLiteral )? ( alterStatementChangeColPosition )? -> ^( TOK_ALTERTABLE_RENAMECOL Identifier $oldName $newName colType ( $comment)? ( alterStatementChangeColPosition )? ) ;
    public final HiveParser.alterStatementSuffixRenameCol_return alterStatementSuffixRenameCol() throws RecognitionException {
        HiveParser.alterStatementSuffixRenameCol_return retval = new HiveParser.alterStatementSuffixRenameCol_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token oldName=null;
        Token newName=null;
        Token comment=null;
        Token Identifier182=null;
        Token KW_CHANGE183=null;
        Token KW_COLUMN184=null;
        Token KW_COMMENT186=null;
        HiveParser.colType_return colType185 =null;

        HiveParser.alterStatementChangeColPosition_return alterStatementChangeColPosition187 =null;


        CommonTree oldName_tree=null;
        CommonTree newName_tree=null;
        CommonTree comment_tree=null;
        CommonTree Identifier182_tree=null;
        CommonTree KW_CHANGE183_tree=null;
        CommonTree KW_COLUMN184_tree=null;
        CommonTree KW_COMMENT186_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_COMMENT=new RewriteRuleTokenStream(adaptor,"token KW_COMMENT");
        RewriteRuleTokenStream stream_KW_COLUMN=new RewriteRuleTokenStream(adaptor,"token KW_COLUMN");
        RewriteRuleTokenStream stream_KW_CHANGE=new RewriteRuleTokenStream(adaptor,"token KW_CHANGE");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_alterStatementChangeColPosition=new RewriteRuleSubtreeStream(adaptor,"rule alterStatementChangeColPosition");
        RewriteRuleSubtreeStream stream_colType=new RewriteRuleSubtreeStream(adaptor,"rule colType");
         msgs.push("rename column name"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:670:5: ( Identifier KW_CHANGE ( KW_COLUMN )? oldName= Identifier newName= Identifier colType ( KW_COMMENT comment= StringLiteral )? ( alterStatementChangeColPosition )? -> ^( TOK_ALTERTABLE_RENAMECOL Identifier $oldName $newName colType ( $comment)? ( alterStatementChangeColPosition )? ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:670:7: Identifier KW_CHANGE ( KW_COLUMN )? oldName= Identifier newName= Identifier colType ( KW_COMMENT comment= StringLiteral )? ( alterStatementChangeColPosition )?
            {
            Identifier182=(Token)match(input,Identifier,FOLLOW_Identifier_in_alterStatementSuffixRenameCol3772);  
            stream_Identifier.add(Identifier182);


            KW_CHANGE183=(Token)match(input,KW_CHANGE,FOLLOW_KW_CHANGE_in_alterStatementSuffixRenameCol3774);  
            stream_KW_CHANGE.add(KW_CHANGE183);


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:670:28: ( KW_COLUMN )?
            int alt51=2;
            int LA51_0 = input.LA(1);

            if ( (LA51_0==KW_COLUMN) ) {
                alt51=1;
            }
            switch (alt51) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:670:28: KW_COLUMN
                    {
                    KW_COLUMN184=(Token)match(input,KW_COLUMN,FOLLOW_KW_COLUMN_in_alterStatementSuffixRenameCol3776);  
                    stream_KW_COLUMN.add(KW_COLUMN184);


                    }
                    break;

            }


            oldName=(Token)match(input,Identifier,FOLLOW_Identifier_in_alterStatementSuffixRenameCol3781);  
            stream_Identifier.add(oldName);


            newName=(Token)match(input,Identifier,FOLLOW_Identifier_in_alterStatementSuffixRenameCol3785);  
            stream_Identifier.add(newName);


            pushFollow(FOLLOW_colType_in_alterStatementSuffixRenameCol3787);
            colType185=colType();

            state._fsp--;

            stream_colType.add(colType185.getTree());

            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:670:85: ( KW_COMMENT comment= StringLiteral )?
            int alt52=2;
            int LA52_0 = input.LA(1);

            if ( (LA52_0==KW_COMMENT) ) {
                alt52=1;
            }
            switch (alt52) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:670:86: KW_COMMENT comment= StringLiteral
                    {
                    KW_COMMENT186=(Token)match(input,KW_COMMENT,FOLLOW_KW_COMMENT_in_alterStatementSuffixRenameCol3790);  
                    stream_KW_COMMENT.add(KW_COMMENT186);


                    comment=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_alterStatementSuffixRenameCol3794);  
                    stream_StringLiteral.add(comment);


                    }
                    break;

            }


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:670:121: ( alterStatementChangeColPosition )?
            int alt53=2;
            int LA53_0 = input.LA(1);

            if ( (LA53_0==KW_AFTER||LA53_0==KW_FIRST) ) {
                alt53=1;
            }
            switch (alt53) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:670:121: alterStatementChangeColPosition
                    {
                    pushFollow(FOLLOW_alterStatementChangeColPosition_in_alterStatementSuffixRenameCol3798);
                    alterStatementChangeColPosition187=alterStatementChangeColPosition();

                    state._fsp--;

                    stream_alterStatementChangeColPosition.add(alterStatementChangeColPosition187.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: alterStatementChangeColPosition, Identifier, oldName, newName, comment, colType
            // token labels: newName, comment, oldName
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_newName=new RewriteRuleTokenStream(adaptor,"token newName",newName);
            RewriteRuleTokenStream stream_comment=new RewriteRuleTokenStream(adaptor,"token comment",comment);
            RewriteRuleTokenStream stream_oldName=new RewriteRuleTokenStream(adaptor,"token oldName",oldName);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 671:5: -> ^( TOK_ALTERTABLE_RENAMECOL Identifier $oldName $newName colType ( $comment)? ( alterStatementChangeColPosition )? )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:671:7: ^( TOK_ALTERTABLE_RENAMECOL Identifier $oldName $newName colType ( $comment)? ( alterStatementChangeColPosition )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_ALTERTABLE_RENAMECOL, "TOK_ALTERTABLE_RENAMECOL")
                , root_1);

                adaptor.addChild(root_1, 
                stream_Identifier.nextNode()
                );

                adaptor.addChild(root_1, stream_oldName.nextNode());

                adaptor.addChild(root_1, stream_newName.nextNode());

                adaptor.addChild(root_1, stream_colType.nextTree());

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:671:72: ( $comment)?
                if ( stream_comment.hasNext() ) {
                    adaptor.addChild(root_1, stream_comment.nextNode());

                }
                stream_comment.reset();

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:671:81: ( alterStatementChangeColPosition )?
                if ( stream_alterStatementChangeColPosition.hasNext() ) {
                    adaptor.addChild(root_1, stream_alterStatementChangeColPosition.nextTree());

                }
                stream_alterStatementChangeColPosition.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alterStatementSuffixRenameCol"


    public static class alterStatementChangeColPosition_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alterStatementChangeColPosition"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:674:1: alterStatementChangeColPosition : (first= KW_FIRST | KW_AFTER afterCol= Identifier -> {$first != null}? ^( TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION ) -> ^( TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION $afterCol) );
    public final HiveParser.alterStatementChangeColPosition_return alterStatementChangeColPosition() throws RecognitionException {
        HiveParser.alterStatementChangeColPosition_return retval = new HiveParser.alterStatementChangeColPosition_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token first=null;
        Token afterCol=null;
        Token KW_AFTER188=null;

        CommonTree first_tree=null;
        CommonTree afterCol_tree=null;
        CommonTree KW_AFTER188_tree=null;
        RewriteRuleTokenStream stream_KW_AFTER=new RewriteRuleTokenStream(adaptor,"token KW_AFTER");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");

        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:675:5: (first= KW_FIRST | KW_AFTER afterCol= Identifier -> {$first != null}? ^( TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION ) -> ^( TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION $afterCol) )
            int alt54=2;
            int LA54_0 = input.LA(1);

            if ( (LA54_0==KW_FIRST) ) {
                alt54=1;
            }
            else if ( (LA54_0==KW_AFTER) ) {
                alt54=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 54, 0, input);

                throw nvae;

            }
            switch (alt54) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:675:7: first= KW_FIRST
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    first=(Token)match(input,KW_FIRST,FOLLOW_KW_FIRST_in_alterStatementChangeColPosition3844); 
                    first_tree = 
                    (CommonTree)adaptor.create(first)
                    ;
                    adaptor.addChild(root_0, first_tree);


                    }
                    break;
                case 2 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:675:22: KW_AFTER afterCol= Identifier
                    {
                    KW_AFTER188=(Token)match(input,KW_AFTER,FOLLOW_KW_AFTER_in_alterStatementChangeColPosition3846);  
                    stream_KW_AFTER.add(KW_AFTER188);


                    afterCol=(Token)match(input,Identifier,FOLLOW_Identifier_in_alterStatementChangeColPosition3850);  
                    stream_Identifier.add(afterCol);


                    // AST REWRITE
                    // elements: afterCol
                    // token labels: afterCol
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_afterCol=new RewriteRuleTokenStream(adaptor,"token afterCol",afterCol);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 676:5: -> {$first != null}? ^( TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION )
                    if (first != null) {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:676:25: ^( TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION, "TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    else // 677:5: -> ^( TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION $afterCol)
                    {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:677:8: ^( TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION $afterCol)
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION, "TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION")
                        , root_1);

                        adaptor.addChild(root_1, stream_afterCol.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alterStatementChangeColPosition"


    public static class alterStatementSuffixAddPartitions_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alterStatementSuffixAddPartitions"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:680:1: alterStatementSuffixAddPartitions : Identifier KW_ADD ( ifNotExists )? partitionSpec ( partitionLocation )? ( partitionSpec ( partitionLocation )? )* -> ^( TOK_ALTERTABLE_ADDPARTS Identifier ( ifNotExists )? ( partitionSpec ( partitionLocation )? )+ ) ;
    public final HiveParser.alterStatementSuffixAddPartitions_return alterStatementSuffixAddPartitions() throws RecognitionException {
        HiveParser.alterStatementSuffixAddPartitions_return retval = new HiveParser.alterStatementSuffixAddPartitions_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token Identifier189=null;
        Token KW_ADD190=null;
        HiveParser.ifNotExists_return ifNotExists191 =null;

        HiveParser.partitionSpec_return partitionSpec192 =null;

        HiveParser.partitionLocation_return partitionLocation193 =null;

        HiveParser.partitionSpec_return partitionSpec194 =null;

        HiveParser.partitionLocation_return partitionLocation195 =null;


        CommonTree Identifier189_tree=null;
        CommonTree KW_ADD190_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_KW_ADD=new RewriteRuleTokenStream(adaptor,"token KW_ADD");
        RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
        RewriteRuleSubtreeStream stream_partitionLocation=new RewriteRuleSubtreeStream(adaptor,"rule partitionLocation");
        RewriteRuleSubtreeStream stream_ifNotExists=new RewriteRuleSubtreeStream(adaptor,"rule ifNotExists");
         msgs.push("add partition statement"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:683:5: ( Identifier KW_ADD ( ifNotExists )? partitionSpec ( partitionLocation )? ( partitionSpec ( partitionLocation )? )* -> ^( TOK_ALTERTABLE_ADDPARTS Identifier ( ifNotExists )? ( partitionSpec ( partitionLocation )? )+ ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:683:7: Identifier KW_ADD ( ifNotExists )? partitionSpec ( partitionLocation )? ( partitionSpec ( partitionLocation )? )*
            {
            Identifier189=(Token)match(input,Identifier,FOLLOW_Identifier_in_alterStatementSuffixAddPartitions3902);  
            stream_Identifier.add(Identifier189);


            KW_ADD190=(Token)match(input,KW_ADD,FOLLOW_KW_ADD_in_alterStatementSuffixAddPartitions3904);  
            stream_KW_ADD.add(KW_ADD190);


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:683:25: ( ifNotExists )?
            int alt55=2;
            int LA55_0 = input.LA(1);

            if ( (LA55_0==KW_IF) ) {
                alt55=1;
            }
            switch (alt55) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:683:25: ifNotExists
                    {
                    pushFollow(FOLLOW_ifNotExists_in_alterStatementSuffixAddPartitions3906);
                    ifNotExists191=ifNotExists();

                    state._fsp--;

                    stream_ifNotExists.add(ifNotExists191.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_partitionSpec_in_alterStatementSuffixAddPartitions3909);
            partitionSpec192=partitionSpec();

            state._fsp--;

            stream_partitionSpec.add(partitionSpec192.getTree());

            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:683:52: ( partitionLocation )?
            int alt56=2;
            int LA56_0 = input.LA(1);

            if ( (LA56_0==KW_LOCATION) ) {
                alt56=1;
            }
            switch (alt56) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:683:52: partitionLocation
                    {
                    pushFollow(FOLLOW_partitionLocation_in_alterStatementSuffixAddPartitions3911);
                    partitionLocation193=partitionLocation();

                    state._fsp--;

                    stream_partitionLocation.add(partitionLocation193.getTree());

                    }
                    break;

            }


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:683:71: ( partitionSpec ( partitionLocation )? )*
            loop58:
            do {
                int alt58=2;
                int LA58_0 = input.LA(1);

                if ( (LA58_0==KW_PARTITION) ) {
                    alt58=1;
                }


                switch (alt58) {
            	case 1 :
            	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:683:72: partitionSpec ( partitionLocation )?
            	    {
            	    pushFollow(FOLLOW_partitionSpec_in_alterStatementSuffixAddPartitions3915);
            	    partitionSpec194=partitionSpec();

            	    state._fsp--;

            	    stream_partitionSpec.add(partitionSpec194.getTree());

            	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:683:86: ( partitionLocation )?
            	    int alt57=2;
            	    int LA57_0 = input.LA(1);

            	    if ( (LA57_0==KW_LOCATION) ) {
            	        alt57=1;
            	    }
            	    switch (alt57) {
            	        case 1 :
            	            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:683:86: partitionLocation
            	            {
            	            pushFollow(FOLLOW_partitionLocation_in_alterStatementSuffixAddPartitions3917);
            	            partitionLocation195=partitionLocation();

            	            state._fsp--;

            	            stream_partitionLocation.add(partitionLocation195.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop58;
                }
            } while (true);


            // AST REWRITE
            // elements: ifNotExists, partitionLocation, Identifier, partitionSpec
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 684:5: -> ^( TOK_ALTERTABLE_ADDPARTS Identifier ( ifNotExists )? ( partitionSpec ( partitionLocation )? )+ )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:684:8: ^( TOK_ALTERTABLE_ADDPARTS Identifier ( ifNotExists )? ( partitionSpec ( partitionLocation )? )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_ALTERTABLE_ADDPARTS, "TOK_ALTERTABLE_ADDPARTS")
                , root_1);

                adaptor.addChild(root_1, 
                stream_Identifier.nextNode()
                );

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:684:45: ( ifNotExists )?
                if ( stream_ifNotExists.hasNext() ) {
                    adaptor.addChild(root_1, stream_ifNotExists.nextTree());

                }
                stream_ifNotExists.reset();

                if ( !(stream_partitionSpec.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_partitionSpec.hasNext() ) {
                    adaptor.addChild(root_1, stream_partitionSpec.nextTree());

                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:684:73: ( partitionLocation )?
                    if ( stream_partitionLocation.hasNext() ) {
                        adaptor.addChild(root_1, stream_partitionLocation.nextTree());

                    }
                    stream_partitionLocation.reset();

                }
                stream_partitionSpec.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alterStatementSuffixAddPartitions"


    public static class alterStatementSuffixTouch_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alterStatementSuffixTouch"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:687:1: alterStatementSuffixTouch : Identifier KW_TOUCH ( partitionSpec )* -> ^( TOK_ALTERTABLE_TOUCH Identifier ( partitionSpec )* ) ;
    public final HiveParser.alterStatementSuffixTouch_return alterStatementSuffixTouch() throws RecognitionException {
        HiveParser.alterStatementSuffixTouch_return retval = new HiveParser.alterStatementSuffixTouch_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token Identifier196=null;
        Token KW_TOUCH197=null;
        HiveParser.partitionSpec_return partitionSpec198 =null;


        CommonTree Identifier196_tree=null;
        CommonTree KW_TOUCH197_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_KW_TOUCH=new RewriteRuleTokenStream(adaptor,"token KW_TOUCH");
        RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
         msgs.push("touch statement"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:690:5: ( Identifier KW_TOUCH ( partitionSpec )* -> ^( TOK_ALTERTABLE_TOUCH Identifier ( partitionSpec )* ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:690:7: Identifier KW_TOUCH ( partitionSpec )*
            {
            Identifier196=(Token)match(input,Identifier,FOLLOW_Identifier_in_alterStatementSuffixTouch3970);  
            stream_Identifier.add(Identifier196);


            KW_TOUCH197=(Token)match(input,KW_TOUCH,FOLLOW_KW_TOUCH_in_alterStatementSuffixTouch3972);  
            stream_KW_TOUCH.add(KW_TOUCH197);


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:690:27: ( partitionSpec )*
            loop59:
            do {
                int alt59=2;
                int LA59_0 = input.LA(1);

                if ( (LA59_0==KW_PARTITION) ) {
                    alt59=1;
                }


                switch (alt59) {
            	case 1 :
            	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:690:28: partitionSpec
            	    {
            	    pushFollow(FOLLOW_partitionSpec_in_alterStatementSuffixTouch3975);
            	    partitionSpec198=partitionSpec();

            	    state._fsp--;

            	    stream_partitionSpec.add(partitionSpec198.getTree());

            	    }
            	    break;

            	default :
            	    break loop59;
                }
            } while (true);


            // AST REWRITE
            // elements: Identifier, partitionSpec
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 691:5: -> ^( TOK_ALTERTABLE_TOUCH Identifier ( partitionSpec )* )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:691:8: ^( TOK_ALTERTABLE_TOUCH Identifier ( partitionSpec )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_ALTERTABLE_TOUCH, "TOK_ALTERTABLE_TOUCH")
                , root_1);

                adaptor.addChild(root_1, 
                stream_Identifier.nextNode()
                );

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:691:42: ( partitionSpec )*
                while ( stream_partitionSpec.hasNext() ) {
                    adaptor.addChild(root_1, stream_partitionSpec.nextTree());

                }
                stream_partitionSpec.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alterStatementSuffixTouch"


    public static class alterStatementSuffixArchive_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alterStatementSuffixArchive"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:694:1: alterStatementSuffixArchive : Identifier KW_ARCHIVE ( partitionSpec )* -> ^( TOK_ALTERTABLE_ARCHIVE Identifier ( partitionSpec )* ) ;
    public final HiveParser.alterStatementSuffixArchive_return alterStatementSuffixArchive() throws RecognitionException {
        HiveParser.alterStatementSuffixArchive_return retval = new HiveParser.alterStatementSuffixArchive_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token Identifier199=null;
        Token KW_ARCHIVE200=null;
        HiveParser.partitionSpec_return partitionSpec201 =null;


        CommonTree Identifier199_tree=null;
        CommonTree KW_ARCHIVE200_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_KW_ARCHIVE=new RewriteRuleTokenStream(adaptor,"token KW_ARCHIVE");
        RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
         msgs.push("archive statement"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:697:5: ( Identifier KW_ARCHIVE ( partitionSpec )* -> ^( TOK_ALTERTABLE_ARCHIVE Identifier ( partitionSpec )* ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:697:7: Identifier KW_ARCHIVE ( partitionSpec )*
            {
            Identifier199=(Token)match(input,Identifier,FOLLOW_Identifier_in_alterStatementSuffixArchive4021);  
            stream_Identifier.add(Identifier199);


            KW_ARCHIVE200=(Token)match(input,KW_ARCHIVE,FOLLOW_KW_ARCHIVE_in_alterStatementSuffixArchive4023);  
            stream_KW_ARCHIVE.add(KW_ARCHIVE200);


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:697:29: ( partitionSpec )*
            loop60:
            do {
                int alt60=2;
                int LA60_0 = input.LA(1);

                if ( (LA60_0==KW_PARTITION) ) {
                    alt60=1;
                }


                switch (alt60) {
            	case 1 :
            	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:697:30: partitionSpec
            	    {
            	    pushFollow(FOLLOW_partitionSpec_in_alterStatementSuffixArchive4026);
            	    partitionSpec201=partitionSpec();

            	    state._fsp--;

            	    stream_partitionSpec.add(partitionSpec201.getTree());

            	    }
            	    break;

            	default :
            	    break loop60;
                }
            } while (true);


            // AST REWRITE
            // elements: Identifier, partitionSpec
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 698:5: -> ^( TOK_ALTERTABLE_ARCHIVE Identifier ( partitionSpec )* )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:698:8: ^( TOK_ALTERTABLE_ARCHIVE Identifier ( partitionSpec )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_ALTERTABLE_ARCHIVE, "TOK_ALTERTABLE_ARCHIVE")
                , root_1);

                adaptor.addChild(root_1, 
                stream_Identifier.nextNode()
                );

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:698:44: ( partitionSpec )*
                while ( stream_partitionSpec.hasNext() ) {
                    adaptor.addChild(root_1, stream_partitionSpec.nextTree());

                }
                stream_partitionSpec.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alterStatementSuffixArchive"


    public static class alterStatementSuffixUnArchive_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alterStatementSuffixUnArchive"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:701:1: alterStatementSuffixUnArchive : Identifier KW_UNARCHIVE ( partitionSpec )* -> ^( TOK_ALTERTABLE_UNARCHIVE Identifier ( partitionSpec )* ) ;
    public final HiveParser.alterStatementSuffixUnArchive_return alterStatementSuffixUnArchive() throws RecognitionException {
        HiveParser.alterStatementSuffixUnArchive_return retval = new HiveParser.alterStatementSuffixUnArchive_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token Identifier202=null;
        Token KW_UNARCHIVE203=null;
        HiveParser.partitionSpec_return partitionSpec204 =null;


        CommonTree Identifier202_tree=null;
        CommonTree KW_UNARCHIVE203_tree=null;
        RewriteRuleTokenStream stream_KW_UNARCHIVE=new RewriteRuleTokenStream(adaptor,"token KW_UNARCHIVE");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
         msgs.push("unarchive statement"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:704:5: ( Identifier KW_UNARCHIVE ( partitionSpec )* -> ^( TOK_ALTERTABLE_UNARCHIVE Identifier ( partitionSpec )* ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:704:7: Identifier KW_UNARCHIVE ( partitionSpec )*
            {
            Identifier202=(Token)match(input,Identifier,FOLLOW_Identifier_in_alterStatementSuffixUnArchive4072);  
            stream_Identifier.add(Identifier202);


            KW_UNARCHIVE203=(Token)match(input,KW_UNARCHIVE,FOLLOW_KW_UNARCHIVE_in_alterStatementSuffixUnArchive4074);  
            stream_KW_UNARCHIVE.add(KW_UNARCHIVE203);


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:704:31: ( partitionSpec )*
            loop61:
            do {
                int alt61=2;
                int LA61_0 = input.LA(1);

                if ( (LA61_0==KW_PARTITION) ) {
                    alt61=1;
                }


                switch (alt61) {
            	case 1 :
            	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:704:32: partitionSpec
            	    {
            	    pushFollow(FOLLOW_partitionSpec_in_alterStatementSuffixUnArchive4077);
            	    partitionSpec204=partitionSpec();

            	    state._fsp--;

            	    stream_partitionSpec.add(partitionSpec204.getTree());

            	    }
            	    break;

            	default :
            	    break loop61;
                }
            } while (true);


            // AST REWRITE
            // elements: partitionSpec, Identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 705:5: -> ^( TOK_ALTERTABLE_UNARCHIVE Identifier ( partitionSpec )* )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:705:8: ^( TOK_ALTERTABLE_UNARCHIVE Identifier ( partitionSpec )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_ALTERTABLE_UNARCHIVE, "TOK_ALTERTABLE_UNARCHIVE")
                , root_1);

                adaptor.addChild(root_1, 
                stream_Identifier.nextNode()
                );

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:705:46: ( partitionSpec )*
                while ( stream_partitionSpec.hasNext() ) {
                    adaptor.addChild(root_1, stream_partitionSpec.nextTree());

                }
                stream_partitionSpec.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alterStatementSuffixUnArchive"


    public static class partitionLocation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "partitionLocation"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:708:1: partitionLocation : KW_LOCATION locn= StringLiteral -> ^( TOK_PARTITIONLOCATION $locn) ;
    public final HiveParser.partitionLocation_return partitionLocation() throws RecognitionException {
        HiveParser.partitionLocation_return retval = new HiveParser.partitionLocation_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token locn=null;
        Token KW_LOCATION205=null;

        CommonTree locn_tree=null;
        CommonTree KW_LOCATION205_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_LOCATION=new RewriteRuleTokenStream(adaptor,"token KW_LOCATION");

         msgs.push("partition location"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:711:5: ( KW_LOCATION locn= StringLiteral -> ^( TOK_PARTITIONLOCATION $locn) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:712:7: KW_LOCATION locn= StringLiteral
            {
            KW_LOCATION205=(Token)match(input,KW_LOCATION,FOLLOW_KW_LOCATION_in_partitionLocation4129);  
            stream_KW_LOCATION.add(KW_LOCATION205);


            locn=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_partitionLocation4133);  
            stream_StringLiteral.add(locn);


            // AST REWRITE
            // elements: locn
            // token labels: locn
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_locn=new RewriteRuleTokenStream(adaptor,"token locn",locn);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 712:38: -> ^( TOK_PARTITIONLOCATION $locn)
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:712:41: ^( TOK_PARTITIONLOCATION $locn)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_PARTITIONLOCATION, "TOK_PARTITIONLOCATION")
                , root_1);

                adaptor.addChild(root_1, stream_locn.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "partitionLocation"


    public static class alterStatementSuffixDropPartitions_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alterStatementSuffixDropPartitions"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:715:1: alterStatementSuffixDropPartitions : Identifier KW_DROP ( ifExists )? dropPartitionSpec ( COMMA dropPartitionSpec )* -> ^( TOK_ALTERTABLE_DROPPARTS Identifier ( dropPartitionSpec )+ ( ifExists )? ) ;
    public final HiveParser.alterStatementSuffixDropPartitions_return alterStatementSuffixDropPartitions() throws RecognitionException {
        HiveParser.alterStatementSuffixDropPartitions_return retval = new HiveParser.alterStatementSuffixDropPartitions_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token Identifier206=null;
        Token KW_DROP207=null;
        Token COMMA210=null;
        HiveParser.ifExists_return ifExists208 =null;

        HiveParser.dropPartitionSpec_return dropPartitionSpec209 =null;

        HiveParser.dropPartitionSpec_return dropPartitionSpec211 =null;


        CommonTree Identifier206_tree=null;
        CommonTree KW_DROP207_tree=null;
        CommonTree COMMA210_tree=null;
        RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_dropPartitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule dropPartitionSpec");
        RewriteRuleSubtreeStream stream_ifExists=new RewriteRuleSubtreeStream(adaptor,"rule ifExists");
         msgs.push("drop partition statement"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:718:5: ( Identifier KW_DROP ( ifExists )? dropPartitionSpec ( COMMA dropPartitionSpec )* -> ^( TOK_ALTERTABLE_DROPPARTS Identifier ( dropPartitionSpec )+ ( ifExists )? ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:718:7: Identifier KW_DROP ( ifExists )? dropPartitionSpec ( COMMA dropPartitionSpec )*
            {
            Identifier206=(Token)match(input,Identifier,FOLLOW_Identifier_in_alterStatementSuffixDropPartitions4169);  
            stream_Identifier.add(Identifier206);


            KW_DROP207=(Token)match(input,KW_DROP,FOLLOW_KW_DROP_in_alterStatementSuffixDropPartitions4171);  
            stream_KW_DROP.add(KW_DROP207);


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:718:26: ( ifExists )?
            int alt62=2;
            int LA62_0 = input.LA(1);

            if ( (LA62_0==KW_IF) ) {
                alt62=1;
            }
            switch (alt62) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:718:26: ifExists
                    {
                    pushFollow(FOLLOW_ifExists_in_alterStatementSuffixDropPartitions4173);
                    ifExists208=ifExists();

                    state._fsp--;

                    stream_ifExists.add(ifExists208.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_dropPartitionSpec_in_alterStatementSuffixDropPartitions4176);
            dropPartitionSpec209=dropPartitionSpec();

            state._fsp--;

            stream_dropPartitionSpec.add(dropPartitionSpec209.getTree());

            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:718:54: ( COMMA dropPartitionSpec )*
            loop63:
            do {
                int alt63=2;
                int LA63_0 = input.LA(1);

                if ( (LA63_0==COMMA) ) {
                    alt63=1;
                }


                switch (alt63) {
            	case 1 :
            	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:718:55: COMMA dropPartitionSpec
            	    {
            	    COMMA210=(Token)match(input,COMMA,FOLLOW_COMMA_in_alterStatementSuffixDropPartitions4179);  
            	    stream_COMMA.add(COMMA210);


            	    pushFollow(FOLLOW_dropPartitionSpec_in_alterStatementSuffixDropPartitions4181);
            	    dropPartitionSpec211=dropPartitionSpec();

            	    state._fsp--;

            	    stream_dropPartitionSpec.add(dropPartitionSpec211.getTree());

            	    }
            	    break;

            	default :
            	    break loop63;
                }
            } while (true);


            // AST REWRITE
            // elements: dropPartitionSpec, Identifier, ifExists
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 719:5: -> ^( TOK_ALTERTABLE_DROPPARTS Identifier ( dropPartitionSpec )+ ( ifExists )? )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:719:8: ^( TOK_ALTERTABLE_DROPPARTS Identifier ( dropPartitionSpec )+ ( ifExists )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_ALTERTABLE_DROPPARTS, "TOK_ALTERTABLE_DROPPARTS")
                , root_1);

                adaptor.addChild(root_1, 
                stream_Identifier.nextNode()
                );

                if ( !(stream_dropPartitionSpec.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_dropPartitionSpec.hasNext() ) {
                    adaptor.addChild(root_1, stream_dropPartitionSpec.nextTree());

                }
                stream_dropPartitionSpec.reset();

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:719:65: ( ifExists )?
                if ( stream_ifExists.hasNext() ) {
                    adaptor.addChild(root_1, stream_ifExists.nextTree());

                }
                stream_ifExists.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alterStatementSuffixDropPartitions"


    public static class alterStatementSuffixProperties_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alterStatementSuffixProperties"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:722:1: alterStatementSuffixProperties : name= Identifier KW_SET KW_TBLPROPERTIES tableProperties -> ^( TOK_ALTERTABLE_PROPERTIES $name tableProperties ) ;
    public final HiveParser.alterStatementSuffixProperties_return alterStatementSuffixProperties() throws RecognitionException {
        HiveParser.alterStatementSuffixProperties_return retval = new HiveParser.alterStatementSuffixProperties_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token name=null;
        Token KW_SET212=null;
        Token KW_TBLPROPERTIES213=null;
        HiveParser.tableProperties_return tableProperties214 =null;


        CommonTree name_tree=null;
        CommonTree KW_SET212_tree=null;
        CommonTree KW_TBLPROPERTIES213_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
        RewriteRuleTokenStream stream_KW_TBLPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_TBLPROPERTIES");
        RewriteRuleSubtreeStream stream_tableProperties=new RewriteRuleSubtreeStream(adaptor,"rule tableProperties");
         msgs.push("alter properties statement"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:725:5: (name= Identifier KW_SET KW_TBLPROPERTIES tableProperties -> ^( TOK_ALTERTABLE_PROPERTIES $name tableProperties ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:725:7: name= Identifier KW_SET KW_TBLPROPERTIES tableProperties
            {
            name=(Token)match(input,Identifier,FOLLOW_Identifier_in_alterStatementSuffixProperties4230);  
            stream_Identifier.add(name);


            KW_SET212=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_alterStatementSuffixProperties4232);  
            stream_KW_SET.add(KW_SET212);


            KW_TBLPROPERTIES213=(Token)match(input,KW_TBLPROPERTIES,FOLLOW_KW_TBLPROPERTIES_in_alterStatementSuffixProperties4234);  
            stream_KW_TBLPROPERTIES.add(KW_TBLPROPERTIES213);


            pushFollow(FOLLOW_tableProperties_in_alterStatementSuffixProperties4236);
            tableProperties214=tableProperties();

            state._fsp--;

            stream_tableProperties.add(tableProperties214.getTree());

            // AST REWRITE
            // elements: name, tableProperties
            // token labels: name
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 726:5: -> ^( TOK_ALTERTABLE_PROPERTIES $name tableProperties )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:726:8: ^( TOK_ALTERTABLE_PROPERTIES $name tableProperties )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_ALTERTABLE_PROPERTIES, "TOK_ALTERTABLE_PROPERTIES")
                , root_1);

                adaptor.addChild(root_1, stream_name.nextNode());

                adaptor.addChild(root_1, stream_tableProperties.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alterStatementSuffixProperties"


    public static class alterViewSuffixProperties_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alterViewSuffixProperties"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:729:1: alterViewSuffixProperties : name= Identifier KW_SET KW_TBLPROPERTIES tableProperties -> ^( TOK_ALTERVIEW_PROPERTIES $name tableProperties ) ;
    public final HiveParser.alterViewSuffixProperties_return alterViewSuffixProperties() throws RecognitionException {
        HiveParser.alterViewSuffixProperties_return retval = new HiveParser.alterViewSuffixProperties_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token name=null;
        Token KW_SET215=null;
        Token KW_TBLPROPERTIES216=null;
        HiveParser.tableProperties_return tableProperties217 =null;


        CommonTree name_tree=null;
        CommonTree KW_SET215_tree=null;
        CommonTree KW_TBLPROPERTIES216_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
        RewriteRuleTokenStream stream_KW_TBLPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_TBLPROPERTIES");
        RewriteRuleSubtreeStream stream_tableProperties=new RewriteRuleSubtreeStream(adaptor,"rule tableProperties");
         msgs.push("alter view properties statement"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:732:5: (name= Identifier KW_SET KW_TBLPROPERTIES tableProperties -> ^( TOK_ALTERVIEW_PROPERTIES $name tableProperties ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:732:7: name= Identifier KW_SET KW_TBLPROPERTIES tableProperties
            {
            name=(Token)match(input,Identifier,FOLLOW_Identifier_in_alterViewSuffixProperties4280);  
            stream_Identifier.add(name);


            KW_SET215=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_alterViewSuffixProperties4282);  
            stream_KW_SET.add(KW_SET215);


            KW_TBLPROPERTIES216=(Token)match(input,KW_TBLPROPERTIES,FOLLOW_KW_TBLPROPERTIES_in_alterViewSuffixProperties4284);  
            stream_KW_TBLPROPERTIES.add(KW_TBLPROPERTIES216);


            pushFollow(FOLLOW_tableProperties_in_alterViewSuffixProperties4286);
            tableProperties217=tableProperties();

            state._fsp--;

            stream_tableProperties.add(tableProperties217.getTree());

            // AST REWRITE
            // elements: tableProperties, name
            // token labels: name
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 733:5: -> ^( TOK_ALTERVIEW_PROPERTIES $name tableProperties )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:733:8: ^( TOK_ALTERVIEW_PROPERTIES $name tableProperties )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_ALTERVIEW_PROPERTIES, "TOK_ALTERVIEW_PROPERTIES")
                , root_1);

                adaptor.addChild(root_1, stream_name.nextNode());

                adaptor.addChild(root_1, stream_tableProperties.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alterViewSuffixProperties"


    public static class alterStatementSuffixSerdeProperties_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alterStatementSuffixSerdeProperties"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:736:1: alterStatementSuffixSerdeProperties : ( KW_SET KW_SERDE serdeName= StringLiteral ( KW_WITH KW_SERDEPROPERTIES tableProperties )? -> ^( TOK_ALTERTABLE_SERIALIZER $serdeName ( tableProperties )? ) | KW_SET KW_SERDEPROPERTIES tableProperties -> ^( TOK_ALTERTABLE_SERDEPROPERTIES tableProperties ) );
    public final HiveParser.alterStatementSuffixSerdeProperties_return alterStatementSuffixSerdeProperties() throws RecognitionException {
        HiveParser.alterStatementSuffixSerdeProperties_return retval = new HiveParser.alterStatementSuffixSerdeProperties_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token serdeName=null;
        Token KW_SET218=null;
        Token KW_SERDE219=null;
        Token KW_WITH220=null;
        Token KW_SERDEPROPERTIES221=null;
        Token KW_SET223=null;
        Token KW_SERDEPROPERTIES224=null;
        HiveParser.tableProperties_return tableProperties222 =null;

        HiveParser.tableProperties_return tableProperties225 =null;


        CommonTree serdeName_tree=null;
        CommonTree KW_SET218_tree=null;
        CommonTree KW_SERDE219_tree=null;
        CommonTree KW_WITH220_tree=null;
        CommonTree KW_SERDEPROPERTIES221_tree=null;
        CommonTree KW_SET223_tree=null;
        CommonTree KW_SERDEPROPERTIES224_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");
        RewriteRuleTokenStream stream_KW_SERDE=new RewriteRuleTokenStream(adaptor,"token KW_SERDE");
        RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
        RewriteRuleTokenStream stream_KW_SERDEPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_SERDEPROPERTIES");
        RewriteRuleSubtreeStream stream_tableProperties=new RewriteRuleSubtreeStream(adaptor,"rule tableProperties");
         msgs.push("alter serdes statement"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:739:5: ( KW_SET KW_SERDE serdeName= StringLiteral ( KW_WITH KW_SERDEPROPERTIES tableProperties )? -> ^( TOK_ALTERTABLE_SERIALIZER $serdeName ( tableProperties )? ) | KW_SET KW_SERDEPROPERTIES tableProperties -> ^( TOK_ALTERTABLE_SERDEPROPERTIES tableProperties ) )
            int alt65=2;
            int LA65_0 = input.LA(1);

            if ( (LA65_0==KW_SET) ) {
                int LA65_1 = input.LA(2);

                if ( (LA65_1==KW_SERDE) ) {
                    alt65=1;
                }
                else if ( (LA65_1==KW_SERDEPROPERTIES) ) {
                    alt65=2;
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("", 65, 1, input);

                    throw nvae;

                }
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 65, 0, input);

                throw nvae;

            }
            switch (alt65) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:739:7: KW_SET KW_SERDE serdeName= StringLiteral ( KW_WITH KW_SERDEPROPERTIES tableProperties )?
                    {
                    KW_SET218=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_alterStatementSuffixSerdeProperties4328);  
                    stream_KW_SET.add(KW_SET218);


                    KW_SERDE219=(Token)match(input,KW_SERDE,FOLLOW_KW_SERDE_in_alterStatementSuffixSerdeProperties4330);  
                    stream_KW_SERDE.add(KW_SERDE219);


                    serdeName=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_alterStatementSuffixSerdeProperties4334);  
                    stream_StringLiteral.add(serdeName);


                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:739:47: ( KW_WITH KW_SERDEPROPERTIES tableProperties )?
                    int alt64=2;
                    int LA64_0 = input.LA(1);

                    if ( (LA64_0==KW_WITH) ) {
                        alt64=1;
                    }
                    switch (alt64) {
                        case 1 :
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:739:48: KW_WITH KW_SERDEPROPERTIES tableProperties
                            {
                            KW_WITH220=(Token)match(input,KW_WITH,FOLLOW_KW_WITH_in_alterStatementSuffixSerdeProperties4337);  
                            stream_KW_WITH.add(KW_WITH220);


                            KW_SERDEPROPERTIES221=(Token)match(input,KW_SERDEPROPERTIES,FOLLOW_KW_SERDEPROPERTIES_in_alterStatementSuffixSerdeProperties4339);  
                            stream_KW_SERDEPROPERTIES.add(KW_SERDEPROPERTIES221);


                            pushFollow(FOLLOW_tableProperties_in_alterStatementSuffixSerdeProperties4341);
                            tableProperties222=tableProperties();

                            state._fsp--;

                            stream_tableProperties.add(tableProperties222.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: tableProperties, serdeName
                    // token labels: serdeName
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_serdeName=new RewriteRuleTokenStream(adaptor,"token serdeName",serdeName);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 740:5: -> ^( TOK_ALTERTABLE_SERIALIZER $serdeName ( tableProperties )? )
                    {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:740:8: ^( TOK_ALTERTABLE_SERIALIZER $serdeName ( tableProperties )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_ALTERTABLE_SERIALIZER, "TOK_ALTERTABLE_SERIALIZER")
                        , root_1);

                        adaptor.addChild(root_1, stream_serdeName.nextNode());

                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:740:47: ( tableProperties )?
                        if ( stream_tableProperties.hasNext() ) {
                            adaptor.addChild(root_1, stream_tableProperties.nextTree());

                        }
                        stream_tableProperties.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 2 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:741:7: KW_SET KW_SERDEPROPERTIES tableProperties
                    {
                    KW_SET223=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_alterStatementSuffixSerdeProperties4367);  
                    stream_KW_SET.add(KW_SET223);


                    KW_SERDEPROPERTIES224=(Token)match(input,KW_SERDEPROPERTIES,FOLLOW_KW_SERDEPROPERTIES_in_alterStatementSuffixSerdeProperties4369);  
                    stream_KW_SERDEPROPERTIES.add(KW_SERDEPROPERTIES224);


                    pushFollow(FOLLOW_tableProperties_in_alterStatementSuffixSerdeProperties4371);
                    tableProperties225=tableProperties();

                    state._fsp--;

                    stream_tableProperties.add(tableProperties225.getTree());

                    // AST REWRITE
                    // elements: tableProperties
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 742:5: -> ^( TOK_ALTERTABLE_SERDEPROPERTIES tableProperties )
                    {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:742:8: ^( TOK_ALTERTABLE_SERDEPROPERTIES tableProperties )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_ALTERTABLE_SERDEPROPERTIES, "TOK_ALTERTABLE_SERDEPROPERTIES")
                        , root_1);

                        adaptor.addChild(root_1, stream_tableProperties.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alterStatementSuffixSerdeProperties"


    public static class tablePartitionPrefix_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "tablePartitionPrefix"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:745:1: tablePartitionPrefix : name= Identifier ( partitionSpec )? -> ^( TOK_TABLE_PARTITION $name ( partitionSpec )? ) ;
    public final HiveParser.tablePartitionPrefix_return tablePartitionPrefix() throws RecognitionException {
        HiveParser.tablePartitionPrefix_return retval = new HiveParser.tablePartitionPrefix_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token name=null;
        HiveParser.partitionSpec_return partitionSpec226 =null;


        CommonTree name_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
        msgs.push("table partition prefix");
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:748:3: (name= Identifier ( partitionSpec )? -> ^( TOK_TABLE_PARTITION $name ( partitionSpec )? ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:748:4: name= Identifier ( partitionSpec )?
            {
            name=(Token)match(input,Identifier,FOLLOW_Identifier_in_tablePartitionPrefix4409);  
            stream_Identifier.add(name);


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:748:20: ( partitionSpec )?
            int alt66=2;
            int LA66_0 = input.LA(1);

            if ( (LA66_0==KW_PARTITION) ) {
                alt66=1;
            }
            switch (alt66) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:748:20: partitionSpec
                    {
                    pushFollow(FOLLOW_partitionSpec_in_tablePartitionPrefix4411);
                    partitionSpec226=partitionSpec();

                    state._fsp--;

                    stream_partitionSpec.add(partitionSpec226.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: name, partitionSpec
            // token labels: name
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 749:3: -> ^( TOK_TABLE_PARTITION $name ( partitionSpec )? )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:749:5: ^( TOK_TABLE_PARTITION $name ( partitionSpec )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_TABLE_PARTITION, "TOK_TABLE_PARTITION")
                , root_1);

                adaptor.addChild(root_1, stream_name.nextNode());

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:749:33: ( partitionSpec )?
                if ( stream_partitionSpec.hasNext() ) {
                    adaptor.addChild(root_1, stream_partitionSpec.nextTree());

                }
                stream_partitionSpec.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop();
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "tablePartitionPrefix"


    public static class alterTblPartitionStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alterTblPartitionStatement"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:752:1: alterTblPartitionStatement : tablePartitionPrefix alterTblPartitionStatementSuffix -> ^( TOK_ALTERTABLE_PARTITION tablePartitionPrefix alterTblPartitionStatementSuffix ) ;
    public final HiveParser.alterTblPartitionStatement_return alterTblPartitionStatement() throws RecognitionException {
        HiveParser.alterTblPartitionStatement_return retval = new HiveParser.alterTblPartitionStatement_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        HiveParser.tablePartitionPrefix_return tablePartitionPrefix227 =null;

        HiveParser.alterTblPartitionStatementSuffix_return alterTblPartitionStatementSuffix228 =null;


        RewriteRuleSubtreeStream stream_alterTblPartitionStatementSuffix=new RewriteRuleSubtreeStream(adaptor,"rule alterTblPartitionStatementSuffix");
        RewriteRuleSubtreeStream stream_tablePartitionPrefix=new RewriteRuleSubtreeStream(adaptor,"rule tablePartitionPrefix");
        msgs.push("alter table partition statement");
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:755:3: ( tablePartitionPrefix alterTblPartitionStatementSuffix -> ^( TOK_ALTERTABLE_PARTITION tablePartitionPrefix alterTblPartitionStatementSuffix ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:755:6: tablePartitionPrefix alterTblPartitionStatementSuffix
            {
            pushFollow(FOLLOW_tablePartitionPrefix_in_alterTblPartitionStatement4449);
            tablePartitionPrefix227=tablePartitionPrefix();

            state._fsp--;

            stream_tablePartitionPrefix.add(tablePartitionPrefix227.getTree());

            pushFollow(FOLLOW_alterTblPartitionStatementSuffix_in_alterTblPartitionStatement4451);
            alterTblPartitionStatementSuffix228=alterTblPartitionStatementSuffix();

            state._fsp--;

            stream_alterTblPartitionStatementSuffix.add(alterTblPartitionStatementSuffix228.getTree());

            // AST REWRITE
            // elements: tablePartitionPrefix, alterTblPartitionStatementSuffix
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 756:3: -> ^( TOK_ALTERTABLE_PARTITION tablePartitionPrefix alterTblPartitionStatementSuffix )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:756:6: ^( TOK_ALTERTABLE_PARTITION tablePartitionPrefix alterTblPartitionStatementSuffix )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_ALTERTABLE_PARTITION, "TOK_ALTERTABLE_PARTITION")
                , root_1);

                adaptor.addChild(root_1, stream_tablePartitionPrefix.nextTree());

                adaptor.addChild(root_1, stream_alterTblPartitionStatementSuffix.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop();
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alterTblPartitionStatement"


    public static class alterTblPartitionStatementSuffix_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alterTblPartitionStatementSuffix"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:759:1: alterTblPartitionStatementSuffix : ( alterStatementSuffixFileFormat | alterStatementSuffixLocation | alterStatementSuffixProtectMode | alterStatementSuffixMergeFiles | alterStatementSuffixSerdeProperties | alterStatementSuffixRenamePart | alterTblPartitionStatementSuffixSkewedLocation );
    public final HiveParser.alterTblPartitionStatementSuffix_return alterTblPartitionStatementSuffix() throws RecognitionException {
        HiveParser.alterTblPartitionStatementSuffix_return retval = new HiveParser.alterTblPartitionStatementSuffix_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        HiveParser.alterStatementSuffixFileFormat_return alterStatementSuffixFileFormat229 =null;

        HiveParser.alterStatementSuffixLocation_return alterStatementSuffixLocation230 =null;

        HiveParser.alterStatementSuffixProtectMode_return alterStatementSuffixProtectMode231 =null;

        HiveParser.alterStatementSuffixMergeFiles_return alterStatementSuffixMergeFiles232 =null;

        HiveParser.alterStatementSuffixSerdeProperties_return alterStatementSuffixSerdeProperties233 =null;

        HiveParser.alterStatementSuffixRenamePart_return alterStatementSuffixRenamePart234 =null;

        HiveParser.alterTblPartitionStatementSuffixSkewedLocation_return alterTblPartitionStatementSuffixSkewedLocation235 =null;



        msgs.push("alter table partition statement suffix");
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:762:3: ( alterStatementSuffixFileFormat | alterStatementSuffixLocation | alterStatementSuffixProtectMode | alterStatementSuffixMergeFiles | alterStatementSuffixSerdeProperties | alterStatementSuffixRenamePart | alterTblPartitionStatementSuffixSkewedLocation )
            int alt67=7;
            switch ( input.LA(1) ) {
            case KW_SET:
                {
                switch ( input.LA(2) ) {
                case KW_FILEFORMAT:
                    {
                    alt67=1;
                    }
                    break;
                case KW_LOCATION:
                    {
                    alt67=2;
                    }
                    break;
                case KW_SERDE:
                case KW_SERDEPROPERTIES:
                    {
                    alt67=5;
                    }
                    break;
                case KW_SKEWED:
                    {
                    alt67=7;
                    }
                    break;
                default:
                    NoViableAltException nvae =
                        new NoViableAltException("", 67, 1, input);

                    throw nvae;

                }

                }
                break;
            case KW_DISABLE:
            case KW_ENABLE:
                {
                alt67=3;
                }
                break;
            case KW_CONCATENATE:
                {
                alt67=4;
                }
                break;
            case KW_RENAME:
                {
                alt67=6;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 67, 0, input);

                throw nvae;

            }

            switch (alt67) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:762:5: alterStatementSuffixFileFormat
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_alterStatementSuffixFileFormat_in_alterTblPartitionStatementSuffix4486);
                    alterStatementSuffixFileFormat229=alterStatementSuffixFileFormat();

                    state._fsp--;

                    adaptor.addChild(root_0, alterStatementSuffixFileFormat229.getTree());

                    }
                    break;
                case 2 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:763:5: alterStatementSuffixLocation
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_alterStatementSuffixLocation_in_alterTblPartitionStatementSuffix4492);
                    alterStatementSuffixLocation230=alterStatementSuffixLocation();

                    state._fsp--;

                    adaptor.addChild(root_0, alterStatementSuffixLocation230.getTree());

                    }
                    break;
                case 3 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:764:5: alterStatementSuffixProtectMode
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_alterStatementSuffixProtectMode_in_alterTblPartitionStatementSuffix4498);
                    alterStatementSuffixProtectMode231=alterStatementSuffixProtectMode();

                    state._fsp--;

                    adaptor.addChild(root_0, alterStatementSuffixProtectMode231.getTree());

                    }
                    break;
                case 4 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:765:5: alterStatementSuffixMergeFiles
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_alterStatementSuffixMergeFiles_in_alterTblPartitionStatementSuffix4504);
                    alterStatementSuffixMergeFiles232=alterStatementSuffixMergeFiles();

                    state._fsp--;

                    adaptor.addChild(root_0, alterStatementSuffixMergeFiles232.getTree());

                    }
                    break;
                case 5 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:766:5: alterStatementSuffixSerdeProperties
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_alterStatementSuffixSerdeProperties_in_alterTblPartitionStatementSuffix4510);
                    alterStatementSuffixSerdeProperties233=alterStatementSuffixSerdeProperties();

                    state._fsp--;

                    adaptor.addChild(root_0, alterStatementSuffixSerdeProperties233.getTree());

                    }
                    break;
                case 6 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:767:5: alterStatementSuffixRenamePart
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_alterStatementSuffixRenamePart_in_alterTblPartitionStatementSuffix4516);
                    alterStatementSuffixRenamePart234=alterStatementSuffixRenamePart();

                    state._fsp--;

                    adaptor.addChild(root_0, alterStatementSuffixRenamePart234.getTree());

                    }
                    break;
                case 7 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:768:5: alterTblPartitionStatementSuffixSkewedLocation
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_alterTblPartitionStatementSuffixSkewedLocation_in_alterTblPartitionStatementSuffix4522);
                    alterTblPartitionStatementSuffixSkewedLocation235=alterTblPartitionStatementSuffixSkewedLocation();

                    state._fsp--;

                    adaptor.addChild(root_0, alterTblPartitionStatementSuffixSkewedLocation235.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop();
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alterTblPartitionStatementSuffix"


    public static class alterStatementSuffixFileFormat_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alterStatementSuffixFileFormat"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:771:1: alterStatementSuffixFileFormat : KW_SET KW_FILEFORMAT fileFormat -> ^( TOK_ALTERTABLE_FILEFORMAT fileFormat ) ;
    public final HiveParser.alterStatementSuffixFileFormat_return alterStatementSuffixFileFormat() throws RecognitionException {
        HiveParser.alterStatementSuffixFileFormat_return retval = new HiveParser.alterStatementSuffixFileFormat_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_SET236=null;
        Token KW_FILEFORMAT237=null;
        HiveParser.fileFormat_return fileFormat238 =null;


        CommonTree KW_SET236_tree=null;
        CommonTree KW_FILEFORMAT237_tree=null;
        RewriteRuleTokenStream stream_KW_FILEFORMAT=new RewriteRuleTokenStream(adaptor,"token KW_FILEFORMAT");
        RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
        RewriteRuleSubtreeStream stream_fileFormat=new RewriteRuleSubtreeStream(adaptor,"rule fileFormat");
        msgs.push("alter fileformat statement"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:774:2: ( KW_SET KW_FILEFORMAT fileFormat -> ^( TOK_ALTERTABLE_FILEFORMAT fileFormat ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:774:4: KW_SET KW_FILEFORMAT fileFormat
            {
            KW_SET236=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_alterStatementSuffixFileFormat4544);  
            stream_KW_SET.add(KW_SET236);


            KW_FILEFORMAT237=(Token)match(input,KW_FILEFORMAT,FOLLOW_KW_FILEFORMAT_in_alterStatementSuffixFileFormat4546);  
            stream_KW_FILEFORMAT.add(KW_FILEFORMAT237);


            pushFollow(FOLLOW_fileFormat_in_alterStatementSuffixFileFormat4548);
            fileFormat238=fileFormat();

            state._fsp--;

            stream_fileFormat.add(fileFormat238.getTree());

            // AST REWRITE
            // elements: fileFormat
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 775:2: -> ^( TOK_ALTERTABLE_FILEFORMAT fileFormat )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:775:5: ^( TOK_ALTERTABLE_FILEFORMAT fileFormat )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_ALTERTABLE_FILEFORMAT, "TOK_ALTERTABLE_FILEFORMAT")
                , root_1);

                adaptor.addChild(root_1, stream_fileFormat.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop();
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alterStatementSuffixFileFormat"


    public static class alterTblPartitionStatementSuffixSkewedLocation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alterTblPartitionStatementSuffixSkewedLocation"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:778:1: alterTblPartitionStatementSuffixSkewedLocation : KW_SET KW_SKEWED KW_LOCATION skewedLocations -> ^( TOK_ALTERTBLPART_SKEWED_LOCATION skewedLocations ) ;
    public final HiveParser.alterTblPartitionStatementSuffixSkewedLocation_return alterTblPartitionStatementSuffixSkewedLocation() throws RecognitionException {
        HiveParser.alterTblPartitionStatementSuffixSkewedLocation_return retval = new HiveParser.alterTblPartitionStatementSuffixSkewedLocation_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_SET239=null;
        Token KW_SKEWED240=null;
        Token KW_LOCATION241=null;
        HiveParser.skewedLocations_return skewedLocations242 =null;


        CommonTree KW_SET239_tree=null;
        CommonTree KW_SKEWED240_tree=null;
        CommonTree KW_LOCATION241_tree=null;
        RewriteRuleTokenStream stream_KW_SKEWED=new RewriteRuleTokenStream(adaptor,"token KW_SKEWED");
        RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
        RewriteRuleTokenStream stream_KW_LOCATION=new RewriteRuleTokenStream(adaptor,"token KW_LOCATION");
        RewriteRuleSubtreeStream stream_skewedLocations=new RewriteRuleSubtreeStream(adaptor,"rule skewedLocations");
        msgs.push("alter partition skewed location");
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:781:3: ( KW_SET KW_SKEWED KW_LOCATION skewedLocations -> ^( TOK_ALTERTBLPART_SKEWED_LOCATION skewedLocations ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:781:5: KW_SET KW_SKEWED KW_LOCATION skewedLocations
            {
            KW_SET239=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_alterTblPartitionStatementSuffixSkewedLocation4579);  
            stream_KW_SET.add(KW_SET239);


            KW_SKEWED240=(Token)match(input,KW_SKEWED,FOLLOW_KW_SKEWED_in_alterTblPartitionStatementSuffixSkewedLocation4581);  
            stream_KW_SKEWED.add(KW_SKEWED240);


            KW_LOCATION241=(Token)match(input,KW_LOCATION,FOLLOW_KW_LOCATION_in_alterTblPartitionStatementSuffixSkewedLocation4583);  
            stream_KW_LOCATION.add(KW_LOCATION241);


            pushFollow(FOLLOW_skewedLocations_in_alterTblPartitionStatementSuffixSkewedLocation4585);
            skewedLocations242=skewedLocations();

            state._fsp--;

            stream_skewedLocations.add(skewedLocations242.getTree());

            // AST REWRITE
            // elements: skewedLocations
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 782:3: -> ^( TOK_ALTERTBLPART_SKEWED_LOCATION skewedLocations )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:782:6: ^( TOK_ALTERTBLPART_SKEWED_LOCATION skewedLocations )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_ALTERTBLPART_SKEWED_LOCATION, "TOK_ALTERTBLPART_SKEWED_LOCATION")
                , root_1);

                adaptor.addChild(root_1, stream_skewedLocations.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop();
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alterTblPartitionStatementSuffixSkewedLocation"


    public static class skewedLocations_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "skewedLocations"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:785:1: skewedLocations : LPAREN skewedLocationsList RPAREN -> ^( TOK_SKEWED_LOCATIONS skewedLocationsList ) ;
    public final HiveParser.skewedLocations_return skewedLocations() throws RecognitionException {
        HiveParser.skewedLocations_return retval = new HiveParser.skewedLocations_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token LPAREN243=null;
        Token RPAREN245=null;
        HiveParser.skewedLocationsList_return skewedLocationsList244 =null;


        CommonTree LPAREN243_tree=null;
        CommonTree RPAREN245_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_skewedLocationsList=new RewriteRuleSubtreeStream(adaptor,"rule skewedLocationsList");
         msgs.push("skewed locations"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:788:5: ( LPAREN skewedLocationsList RPAREN -> ^( TOK_SKEWED_LOCATIONS skewedLocationsList ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:789:7: LPAREN skewedLocationsList RPAREN
            {
            LPAREN243=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_skewedLocations4628);  
            stream_LPAREN.add(LPAREN243);


            pushFollow(FOLLOW_skewedLocationsList_in_skewedLocations4630);
            skewedLocationsList244=skewedLocationsList();

            state._fsp--;

            stream_skewedLocationsList.add(skewedLocationsList244.getTree());

            RPAREN245=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_skewedLocations4632);  
            stream_RPAREN.add(RPAREN245);


            // AST REWRITE
            // elements: skewedLocationsList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 789:41: -> ^( TOK_SKEWED_LOCATIONS skewedLocationsList )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:789:44: ^( TOK_SKEWED_LOCATIONS skewedLocationsList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_SKEWED_LOCATIONS, "TOK_SKEWED_LOCATIONS")
                , root_1);

                adaptor.addChild(root_1, stream_skewedLocationsList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "skewedLocations"


    public static class skewedLocationsList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "skewedLocationsList"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:792:1: skewedLocationsList : skewedLocationMap ( COMMA skewedLocationMap )* -> ^( TOK_SKEWED_LOCATION_LIST ( skewedLocationMap )+ ) ;
    public final HiveParser.skewedLocationsList_return skewedLocationsList() throws RecognitionException {
        HiveParser.skewedLocationsList_return retval = new HiveParser.skewedLocationsList_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token COMMA247=null;
        HiveParser.skewedLocationMap_return skewedLocationMap246 =null;

        HiveParser.skewedLocationMap_return skewedLocationMap248 =null;


        CommonTree COMMA247_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_skewedLocationMap=new RewriteRuleSubtreeStream(adaptor,"rule skewedLocationMap");
         msgs.push("skewed locations list"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:795:5: ( skewedLocationMap ( COMMA skewedLocationMap )* -> ^( TOK_SKEWED_LOCATION_LIST ( skewedLocationMap )+ ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:796:7: skewedLocationMap ( COMMA skewedLocationMap )*
            {
            pushFollow(FOLLOW_skewedLocationMap_in_skewedLocationsList4673);
            skewedLocationMap246=skewedLocationMap();

            state._fsp--;

            stream_skewedLocationMap.add(skewedLocationMap246.getTree());

            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:796:25: ( COMMA skewedLocationMap )*
            loop68:
            do {
                int alt68=2;
                int LA68_0 = input.LA(1);

                if ( (LA68_0==COMMA) ) {
                    alt68=1;
                }


                switch (alt68) {
            	case 1 :
            	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:796:26: COMMA skewedLocationMap
            	    {
            	    COMMA247=(Token)match(input,COMMA,FOLLOW_COMMA_in_skewedLocationsList4676);  
            	    stream_COMMA.add(COMMA247);


            	    pushFollow(FOLLOW_skewedLocationMap_in_skewedLocationsList4678);
            	    skewedLocationMap248=skewedLocationMap();

            	    state._fsp--;

            	    stream_skewedLocationMap.add(skewedLocationMap248.getTree());

            	    }
            	    break;

            	default :
            	    break loop68;
                }
            } while (true);


            // AST REWRITE
            // elements: skewedLocationMap
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 796:52: -> ^( TOK_SKEWED_LOCATION_LIST ( skewedLocationMap )+ )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:796:55: ^( TOK_SKEWED_LOCATION_LIST ( skewedLocationMap )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_SKEWED_LOCATION_LIST, "TOK_SKEWED_LOCATION_LIST")
                , root_1);

                if ( !(stream_skewedLocationMap.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_skewedLocationMap.hasNext() ) {
                    adaptor.addChild(root_1, stream_skewedLocationMap.nextTree());

                }
                stream_skewedLocationMap.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "skewedLocationsList"


    public static class skewedLocationMap_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "skewedLocationMap"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:799:1: skewedLocationMap : key= skewedValueLocationElement EQUAL value= StringLiteral -> ^( TOK_SKEWED_LOCATION_MAP $key $value) ;
    public final HiveParser.skewedLocationMap_return skewedLocationMap() throws RecognitionException {
        HiveParser.skewedLocationMap_return retval = new HiveParser.skewedLocationMap_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token value=null;
        Token EQUAL249=null;
        HiveParser.skewedValueLocationElement_return key =null;


        CommonTree value_tree=null;
        CommonTree EQUAL249_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");
        RewriteRuleSubtreeStream stream_skewedValueLocationElement=new RewriteRuleSubtreeStream(adaptor,"rule skewedValueLocationElement");
         msgs.push("specifying skewed location map"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:802:5: (key= skewedValueLocationElement EQUAL value= StringLiteral -> ^( TOK_SKEWED_LOCATION_MAP $key $value) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:803:7: key= skewedValueLocationElement EQUAL value= StringLiteral
            {
            pushFollow(FOLLOW_skewedValueLocationElement_in_skewedLocationMap4724);
            key=skewedValueLocationElement();

            state._fsp--;

            stream_skewedValueLocationElement.add(key.getTree());

            EQUAL249=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_skewedLocationMap4726);  
            stream_EQUAL.add(EQUAL249);


            value=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_skewedLocationMap4730);  
            stream_StringLiteral.add(value);


            // AST REWRITE
            // elements: value, key
            // token labels: value
            // rule labels: retval, key
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_value=new RewriteRuleTokenStream(adaptor,"token value",value);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_key=new RewriteRuleSubtreeStream(adaptor,"rule key",key!=null?key.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 803:64: -> ^( TOK_SKEWED_LOCATION_MAP $key $value)
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:803:67: ^( TOK_SKEWED_LOCATION_MAP $key $value)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_SKEWED_LOCATION_MAP, "TOK_SKEWED_LOCATION_MAP")
                , root_1);

                adaptor.addChild(root_1, stream_key.nextTree());

                adaptor.addChild(root_1, stream_value.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "skewedLocationMap"


    public static class alterStatementSuffixLocation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alterStatementSuffixLocation"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:806:1: alterStatementSuffixLocation : KW_SET KW_LOCATION newLoc= StringLiteral -> ^( TOK_ALTERTABLE_LOCATION $newLoc) ;
    public final HiveParser.alterStatementSuffixLocation_return alterStatementSuffixLocation() throws RecognitionException {
        HiveParser.alterStatementSuffixLocation_return retval = new HiveParser.alterStatementSuffixLocation_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token newLoc=null;
        Token KW_SET250=null;
        Token KW_LOCATION251=null;

        CommonTree newLoc_tree=null;
        CommonTree KW_SET250_tree=null;
        CommonTree KW_LOCATION251_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
        RewriteRuleTokenStream stream_KW_LOCATION=new RewriteRuleTokenStream(adaptor,"token KW_LOCATION");

        msgs.push("alter location");
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:809:3: ( KW_SET KW_LOCATION newLoc= StringLiteral -> ^( TOK_ALTERTABLE_LOCATION $newLoc) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:809:5: KW_SET KW_LOCATION newLoc= StringLiteral
            {
            KW_SET250=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_alterStatementSuffixLocation4767);  
            stream_KW_SET.add(KW_SET250);


            KW_LOCATION251=(Token)match(input,KW_LOCATION,FOLLOW_KW_LOCATION_in_alterStatementSuffixLocation4769);  
            stream_KW_LOCATION.add(KW_LOCATION251);


            newLoc=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_alterStatementSuffixLocation4773);  
            stream_StringLiteral.add(newLoc);


            // AST REWRITE
            // elements: newLoc
            // token labels: newLoc
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_newLoc=new RewriteRuleTokenStream(adaptor,"token newLoc",newLoc);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 810:3: -> ^( TOK_ALTERTABLE_LOCATION $newLoc)
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:810:6: ^( TOK_ALTERTABLE_LOCATION $newLoc)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_ALTERTABLE_LOCATION, "TOK_ALTERTABLE_LOCATION")
                , root_1);

                adaptor.addChild(root_1, stream_newLoc.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop();
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alterStatementSuffixLocation"


    public static class alterStatementSuffixSkewedby_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alterStatementSuffixSkewedby"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:814:1: alterStatementSuffixSkewedby : (name= Identifier tableSkewed -> ^( TOK_ALTERTABLE_SKEWED $name tableSkewed ) |name= Identifier KW_NOT KW_SKEWED -> ^( TOK_ALTERTABLE_SKEWED $name) |name= Identifier KW_NOT storedAsDirs -> ^( TOK_ALTERTABLE_SKEWED $name storedAsDirs ) );
    public final HiveParser.alterStatementSuffixSkewedby_return alterStatementSuffixSkewedby() throws RecognitionException {
        HiveParser.alterStatementSuffixSkewedby_return retval = new HiveParser.alterStatementSuffixSkewedby_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token name=null;
        Token KW_NOT253=null;
        Token KW_SKEWED254=null;
        Token KW_NOT255=null;
        HiveParser.tableSkewed_return tableSkewed252 =null;

        HiveParser.storedAsDirs_return storedAsDirs256 =null;


        CommonTree name_tree=null;
        CommonTree KW_NOT253_tree=null;
        CommonTree KW_SKEWED254_tree=null;
        CommonTree KW_NOT255_tree=null;
        RewriteRuleTokenStream stream_KW_SKEWED=new RewriteRuleTokenStream(adaptor,"token KW_SKEWED");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_KW_NOT=new RewriteRuleTokenStream(adaptor,"token KW_NOT");
        RewriteRuleSubtreeStream stream_storedAsDirs=new RewriteRuleSubtreeStream(adaptor,"rule storedAsDirs");
        RewriteRuleSubtreeStream stream_tableSkewed=new RewriteRuleSubtreeStream(adaptor,"rule tableSkewed");
        msgs.push("alter skewed by statement");
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:817:2: (name= Identifier tableSkewed -> ^( TOK_ALTERTABLE_SKEWED $name tableSkewed ) |name= Identifier KW_NOT KW_SKEWED -> ^( TOK_ALTERTABLE_SKEWED $name) |name= Identifier KW_NOT storedAsDirs -> ^( TOK_ALTERTABLE_SKEWED $name storedAsDirs ) )
            int alt69=3;
            int LA69_0 = input.LA(1);

            if ( (LA69_0==Identifier) ) {
                int LA69_1 = input.LA(2);

                if ( (LA69_1==KW_NOT) ) {
                    int LA69_2 = input.LA(3);

                    if ( (LA69_2==KW_SKEWED) ) {
                        alt69=2;
                    }
                    else if ( (LA69_2==KW_STORED) ) {
                        alt69=3;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("", 69, 2, input);

                        throw nvae;

                    }
                }
                else if ( (LA69_1==KW_SKEWED) ) {
                    alt69=1;
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("", 69, 1, input);

                    throw nvae;

                }
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 69, 0, input);

                throw nvae;

            }
            switch (alt69) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:817:3: name= Identifier tableSkewed
                    {
                    name=(Token)match(input,Identifier,FOLLOW_Identifier_in_alterStatementSuffixSkewedby4808);  
                    stream_Identifier.add(name);


                    pushFollow(FOLLOW_tableSkewed_in_alterStatementSuffixSkewedby4810);
                    tableSkewed252=tableSkewed();

                    state._fsp--;

                    stream_tableSkewed.add(tableSkewed252.getTree());

                    // AST REWRITE
                    // elements: tableSkewed, name
                    // token labels: name
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 818:2: -> ^( TOK_ALTERTABLE_SKEWED $name tableSkewed )
                    {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:818:4: ^( TOK_ALTERTABLE_SKEWED $name tableSkewed )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_ALTERTABLE_SKEWED, "TOK_ALTERTABLE_SKEWED")
                        , root_1);

                        adaptor.addChild(root_1, stream_name.nextNode());

                        adaptor.addChild(root_1, stream_tableSkewed.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 2 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:820:2: name= Identifier KW_NOT KW_SKEWED
                    {
                    name=(Token)match(input,Identifier,FOLLOW_Identifier_in_alterStatementSuffixSkewedby4829);  
                    stream_Identifier.add(name);


                    KW_NOT253=(Token)match(input,KW_NOT,FOLLOW_KW_NOT_in_alterStatementSuffixSkewedby4831);  
                    stream_KW_NOT.add(KW_NOT253);


                    KW_SKEWED254=(Token)match(input,KW_SKEWED,FOLLOW_KW_SKEWED_in_alterStatementSuffixSkewedby4833);  
                    stream_KW_SKEWED.add(KW_SKEWED254);


                    // AST REWRITE
                    // elements: name
                    // token labels: name
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 821:2: -> ^( TOK_ALTERTABLE_SKEWED $name)
                    {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:821:4: ^( TOK_ALTERTABLE_SKEWED $name)
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_ALTERTABLE_SKEWED, "TOK_ALTERTABLE_SKEWED")
                        , root_1);

                        adaptor.addChild(root_1, stream_name.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 3 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:823:2: name= Identifier KW_NOT storedAsDirs
                    {
                    name=(Token)match(input,Identifier,FOLLOW_Identifier_in_alterStatementSuffixSkewedby4850);  
                    stream_Identifier.add(name);


                    KW_NOT255=(Token)match(input,KW_NOT,FOLLOW_KW_NOT_in_alterStatementSuffixSkewedby4852);  
                    stream_KW_NOT.add(KW_NOT255);


                    pushFollow(FOLLOW_storedAsDirs_in_alterStatementSuffixSkewedby4854);
                    storedAsDirs256=storedAsDirs();

                    state._fsp--;

                    stream_storedAsDirs.add(storedAsDirs256.getTree());

                    // AST REWRITE
                    // elements: storedAsDirs, name
                    // token labels: name
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 824:2: -> ^( TOK_ALTERTABLE_SKEWED $name storedAsDirs )
                    {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:824:4: ^( TOK_ALTERTABLE_SKEWED $name storedAsDirs )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_ALTERTABLE_SKEWED, "TOK_ALTERTABLE_SKEWED")
                        , root_1);

                        adaptor.addChild(root_1, stream_name.nextNode());

                        adaptor.addChild(root_1, stream_storedAsDirs.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop();
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alterStatementSuffixSkewedby"


    public static class alterStatementSuffixProtectMode_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alterStatementSuffixProtectMode"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:827:1: alterStatementSuffixProtectMode : alterProtectMode -> ^( TOK_ALTERTABLE_ALTERPARTS_PROTECTMODE alterProtectMode ) ;
    public final HiveParser.alterStatementSuffixProtectMode_return alterStatementSuffixProtectMode() throws RecognitionException {
        HiveParser.alterStatementSuffixProtectMode_return retval = new HiveParser.alterStatementSuffixProtectMode_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        HiveParser.alterProtectMode_return alterProtectMode257 =null;


        RewriteRuleSubtreeStream stream_alterProtectMode=new RewriteRuleSubtreeStream(adaptor,"rule alterProtectMode");
         msgs.push("alter partition protect mode statement"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:830:5: ( alterProtectMode -> ^( TOK_ALTERTABLE_ALTERPARTS_PROTECTMODE alterProtectMode ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:830:7: alterProtectMode
            {
            pushFollow(FOLLOW_alterProtectMode_in_alterStatementSuffixProtectMode4889);
            alterProtectMode257=alterProtectMode();

            state._fsp--;

            stream_alterProtectMode.add(alterProtectMode257.getTree());

            // AST REWRITE
            // elements: alterProtectMode
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 831:5: -> ^( TOK_ALTERTABLE_ALTERPARTS_PROTECTMODE alterProtectMode )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:831:8: ^( TOK_ALTERTABLE_ALTERPARTS_PROTECTMODE alterProtectMode )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_ALTERTABLE_ALTERPARTS_PROTECTMODE, "TOK_ALTERTABLE_ALTERPARTS_PROTECTMODE")
                , root_1);

                adaptor.addChild(root_1, stream_alterProtectMode.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alterStatementSuffixProtectMode"


    public static class alterStatementSuffixRenamePart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alterStatementSuffixRenamePart"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:834:1: alterStatementSuffixRenamePart : KW_RENAME KW_TO partitionSpec -> ^( TOK_ALTERTABLE_RENAMEPART partitionSpec ) ;
    public final HiveParser.alterStatementSuffixRenamePart_return alterStatementSuffixRenamePart() throws RecognitionException {
        HiveParser.alterStatementSuffixRenamePart_return retval = new HiveParser.alterStatementSuffixRenamePart_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_RENAME258=null;
        Token KW_TO259=null;
        HiveParser.partitionSpec_return partitionSpec260 =null;


        CommonTree KW_RENAME258_tree=null;
        CommonTree KW_TO259_tree=null;
        RewriteRuleTokenStream stream_KW_RENAME=new RewriteRuleTokenStream(adaptor,"token KW_RENAME");
        RewriteRuleTokenStream stream_KW_TO=new RewriteRuleTokenStream(adaptor,"token KW_TO");
        RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
         msgs.push("alter table rename partition statement"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:837:5: ( KW_RENAME KW_TO partitionSpec -> ^( TOK_ALTERTABLE_RENAMEPART partitionSpec ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:837:7: KW_RENAME KW_TO partitionSpec
            {
            KW_RENAME258=(Token)match(input,KW_RENAME,FOLLOW_KW_RENAME_in_alterStatementSuffixRenamePart4928);  
            stream_KW_RENAME.add(KW_RENAME258);


            KW_TO259=(Token)match(input,KW_TO,FOLLOW_KW_TO_in_alterStatementSuffixRenamePart4930);  
            stream_KW_TO.add(KW_TO259);


            pushFollow(FOLLOW_partitionSpec_in_alterStatementSuffixRenamePart4932);
            partitionSpec260=partitionSpec();

            state._fsp--;

            stream_partitionSpec.add(partitionSpec260.getTree());

            // AST REWRITE
            // elements: partitionSpec
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 838:5: -> ^( TOK_ALTERTABLE_RENAMEPART partitionSpec )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:838:7: ^( TOK_ALTERTABLE_RENAMEPART partitionSpec )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_ALTERTABLE_RENAMEPART, "TOK_ALTERTABLE_RENAMEPART")
                , root_1);

                adaptor.addChild(root_1, stream_partitionSpec.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alterStatementSuffixRenamePart"


    public static class alterStatementSuffixMergeFiles_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alterStatementSuffixMergeFiles"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:841:1: alterStatementSuffixMergeFiles : KW_CONCATENATE -> ^( TOK_ALTERTABLE_ALTERPARTS_MERGEFILES ) ;
    public final HiveParser.alterStatementSuffixMergeFiles_return alterStatementSuffixMergeFiles() throws RecognitionException {
        HiveParser.alterStatementSuffixMergeFiles_return retval = new HiveParser.alterStatementSuffixMergeFiles_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_CONCATENATE261=null;

        CommonTree KW_CONCATENATE261_tree=null;
        RewriteRuleTokenStream stream_KW_CONCATENATE=new RewriteRuleTokenStream(adaptor,"token KW_CONCATENATE");

         msgs.push(""); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:844:5: ( KW_CONCATENATE -> ^( TOK_ALTERTABLE_ALTERPARTS_MERGEFILES ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:844:7: KW_CONCATENATE
            {
            KW_CONCATENATE261=(Token)match(input,KW_CONCATENATE,FOLLOW_KW_CONCATENATE_in_alterStatementSuffixMergeFiles4970);  
            stream_KW_CONCATENATE.add(KW_CONCATENATE261);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 845:5: -> ^( TOK_ALTERTABLE_ALTERPARTS_MERGEFILES )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:845:8: ^( TOK_ALTERTABLE_ALTERPARTS_MERGEFILES )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_ALTERTABLE_ALTERPARTS_MERGEFILES, "TOK_ALTERTABLE_ALTERPARTS_MERGEFILES")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alterStatementSuffixMergeFiles"


    public static class alterProtectMode_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alterProtectMode"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:848:1: alterProtectMode : ( KW_ENABLE alterProtectModeMode -> ^( TOK_ENABLE alterProtectModeMode ) | KW_DISABLE alterProtectModeMode -> ^( TOK_DISABLE alterProtectModeMode ) );
    public final HiveParser.alterProtectMode_return alterProtectMode() throws RecognitionException {
        HiveParser.alterProtectMode_return retval = new HiveParser.alterProtectMode_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_ENABLE262=null;
        Token KW_DISABLE264=null;
        HiveParser.alterProtectModeMode_return alterProtectModeMode263 =null;

        HiveParser.alterProtectModeMode_return alterProtectModeMode265 =null;


        CommonTree KW_ENABLE262_tree=null;
        CommonTree KW_DISABLE264_tree=null;
        RewriteRuleTokenStream stream_KW_DISABLE=new RewriteRuleTokenStream(adaptor,"token KW_DISABLE");
        RewriteRuleTokenStream stream_KW_ENABLE=new RewriteRuleTokenStream(adaptor,"token KW_ENABLE");
        RewriteRuleSubtreeStream stream_alterProtectModeMode=new RewriteRuleSubtreeStream(adaptor,"rule alterProtectModeMode");
         msgs.push("protect mode specification enable"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:851:5: ( KW_ENABLE alterProtectModeMode -> ^( TOK_ENABLE alterProtectModeMode ) | KW_DISABLE alterProtectModeMode -> ^( TOK_DISABLE alterProtectModeMode ) )
            int alt70=2;
            int LA70_0 = input.LA(1);

            if ( (LA70_0==KW_ENABLE) ) {
                alt70=1;
            }
            else if ( (LA70_0==KW_DISABLE) ) {
                alt70=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 70, 0, input);

                throw nvae;

            }
            switch (alt70) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:851:7: KW_ENABLE alterProtectModeMode
                    {
                    KW_ENABLE262=(Token)match(input,KW_ENABLE,FOLLOW_KW_ENABLE_in_alterProtectMode5007);  
                    stream_KW_ENABLE.add(KW_ENABLE262);


                    pushFollow(FOLLOW_alterProtectModeMode_in_alterProtectMode5009);
                    alterProtectModeMode263=alterProtectModeMode();

                    state._fsp--;

                    stream_alterProtectModeMode.add(alterProtectModeMode263.getTree());

                    // AST REWRITE
                    // elements: alterProtectModeMode
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 851:39: -> ^( TOK_ENABLE alterProtectModeMode )
                    {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:851:42: ^( TOK_ENABLE alterProtectModeMode )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_ENABLE, "TOK_ENABLE")
                        , root_1);

                        adaptor.addChild(root_1, stream_alterProtectModeMode.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 2 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:852:7: KW_DISABLE alterProtectModeMode
                    {
                    KW_DISABLE264=(Token)match(input,KW_DISABLE,FOLLOW_KW_DISABLE_in_alterProtectMode5026);  
                    stream_KW_DISABLE.add(KW_DISABLE264);


                    pushFollow(FOLLOW_alterProtectModeMode_in_alterProtectMode5028);
                    alterProtectModeMode265=alterProtectModeMode();

                    state._fsp--;

                    stream_alterProtectModeMode.add(alterProtectModeMode265.getTree());

                    // AST REWRITE
                    // elements: alterProtectModeMode
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 852:40: -> ^( TOK_DISABLE alterProtectModeMode )
                    {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:852:43: ^( TOK_DISABLE alterProtectModeMode )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_DISABLE, "TOK_DISABLE")
                        , root_1);

                        adaptor.addChild(root_1, stream_alterProtectModeMode.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alterProtectMode"


    public static class alterProtectModeMode_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alterProtectModeMode"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:855:1: alterProtectModeMode : ( KW_OFFLINE -> ^( TOK_OFFLINE ) | KW_NO_DROP ( KW_CASCADE )? -> ^( TOK_NO_DROP ( KW_CASCADE )? ) | KW_READONLY -> ^( TOK_READONLY ) );
    public final HiveParser.alterProtectModeMode_return alterProtectModeMode() throws RecognitionException {
        HiveParser.alterProtectModeMode_return retval = new HiveParser.alterProtectModeMode_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_OFFLINE266=null;
        Token KW_NO_DROP267=null;
        Token KW_CASCADE268=null;
        Token KW_READONLY269=null;

        CommonTree KW_OFFLINE266_tree=null;
        CommonTree KW_NO_DROP267_tree=null;
        CommonTree KW_CASCADE268_tree=null;
        CommonTree KW_READONLY269_tree=null;
        RewriteRuleTokenStream stream_KW_READONLY=new RewriteRuleTokenStream(adaptor,"token KW_READONLY");
        RewriteRuleTokenStream stream_KW_NO_DROP=new RewriteRuleTokenStream(adaptor,"token KW_NO_DROP");
        RewriteRuleTokenStream stream_KW_CASCADE=new RewriteRuleTokenStream(adaptor,"token KW_CASCADE");
        RewriteRuleTokenStream stream_KW_OFFLINE=new RewriteRuleTokenStream(adaptor,"token KW_OFFLINE");

         msgs.push("protect mode specification enable"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:858:5: ( KW_OFFLINE -> ^( TOK_OFFLINE ) | KW_NO_DROP ( KW_CASCADE )? -> ^( TOK_NO_DROP ( KW_CASCADE )? ) | KW_READONLY -> ^( TOK_READONLY ) )
            int alt72=3;
            switch ( input.LA(1) ) {
            case KW_OFFLINE:
                {
                alt72=1;
                }
                break;
            case KW_NO_DROP:
                {
                alt72=2;
                }
                break;
            case KW_READONLY:
                {
                alt72=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 72, 0, input);

                throw nvae;

            }

            switch (alt72) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:858:7: KW_OFFLINE
                    {
                    KW_OFFLINE266=(Token)match(input,KW_OFFLINE,FOLLOW_KW_OFFLINE_in_alterProtectModeMode5064);  
                    stream_KW_OFFLINE.add(KW_OFFLINE266);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 858:19: -> ^( TOK_OFFLINE )
                    {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:858:22: ^( TOK_OFFLINE )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_OFFLINE, "TOK_OFFLINE")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 2 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:859:7: KW_NO_DROP ( KW_CASCADE )?
                    {
                    KW_NO_DROP267=(Token)match(input,KW_NO_DROP,FOLLOW_KW_NO_DROP_in_alterProtectModeMode5079);  
                    stream_KW_NO_DROP.add(KW_NO_DROP267);


                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:859:18: ( KW_CASCADE )?
                    int alt71=2;
                    int LA71_0 = input.LA(1);

                    if ( (LA71_0==KW_CASCADE) ) {
                        alt71=1;
                    }
                    switch (alt71) {
                        case 1 :
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:859:18: KW_CASCADE
                            {
                            KW_CASCADE268=(Token)match(input,KW_CASCADE,FOLLOW_KW_CASCADE_in_alterProtectModeMode5081);  
                            stream_KW_CASCADE.add(KW_CASCADE268);


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: KW_CASCADE
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 859:30: -> ^( TOK_NO_DROP ( KW_CASCADE )? )
                    {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:859:33: ^( TOK_NO_DROP ( KW_CASCADE )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_NO_DROP, "TOK_NO_DROP")
                        , root_1);

                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:859:47: ( KW_CASCADE )?
                        if ( stream_KW_CASCADE.hasNext() ) {
                            adaptor.addChild(root_1, 
                            stream_KW_CASCADE.nextNode()
                            );

                        }
                        stream_KW_CASCADE.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 3 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:860:7: KW_READONLY
                    {
                    KW_READONLY269=(Token)match(input,KW_READONLY,FOLLOW_KW_READONLY_in_alterProtectModeMode5099);  
                    stream_KW_READONLY.add(KW_READONLY269);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 860:20: -> ^( TOK_READONLY )
                    {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:860:23: ^( TOK_READONLY )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_READONLY, "TOK_READONLY")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alterProtectModeMode"


    public static class alterStatementSuffixClusterbySortby_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alterStatementSuffixClusterbySortby"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:864:1: alterStatementSuffixClusterbySortby : (name= Identifier tableBuckets -> ^( TOK_ALTERTABLE_CLUSTER_SORT $name tableBuckets ) |name= Identifier KW_NOT KW_CLUSTERED -> ^( TOK_ALTERTABLE_CLUSTER_SORT $name) );
    public final HiveParser.alterStatementSuffixClusterbySortby_return alterStatementSuffixClusterbySortby() throws RecognitionException {
        HiveParser.alterStatementSuffixClusterbySortby_return retval = new HiveParser.alterStatementSuffixClusterbySortby_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token name=null;
        Token KW_NOT271=null;
        Token KW_CLUSTERED272=null;
        HiveParser.tableBuckets_return tableBuckets270 =null;


        CommonTree name_tree=null;
        CommonTree KW_NOT271_tree=null;
        CommonTree KW_CLUSTERED272_tree=null;
        RewriteRuleTokenStream stream_KW_CLUSTERED=new RewriteRuleTokenStream(adaptor,"token KW_CLUSTERED");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_KW_NOT=new RewriteRuleTokenStream(adaptor,"token KW_NOT");
        RewriteRuleSubtreeStream stream_tableBuckets=new RewriteRuleSubtreeStream(adaptor,"rule tableBuckets");
        msgs.push("alter cluster by sort by statement");
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:867:2: (name= Identifier tableBuckets -> ^( TOK_ALTERTABLE_CLUSTER_SORT $name tableBuckets ) |name= Identifier KW_NOT KW_CLUSTERED -> ^( TOK_ALTERTABLE_CLUSTER_SORT $name) )
            int alt73=2;
            int LA73_0 = input.LA(1);

            if ( (LA73_0==Identifier) ) {
                int LA73_1 = input.LA(2);

                if ( (LA73_1==KW_NOT) ) {
                    alt73=2;
                }
                else if ( (LA73_1==KW_CLUSTERED) ) {
                    alt73=1;
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("", 73, 1, input);

                    throw nvae;

                }
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 73, 0, input);

                throw nvae;

            }
            switch (alt73) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:867:3: name= Identifier tableBuckets
                    {
                    name=(Token)match(input,Identifier,FOLLOW_Identifier_in_alterStatementSuffixClusterbySortby5131);  
                    stream_Identifier.add(name);


                    pushFollow(FOLLOW_tableBuckets_in_alterStatementSuffixClusterbySortby5133);
                    tableBuckets270=tableBuckets();

                    state._fsp--;

                    stream_tableBuckets.add(tableBuckets270.getTree());

                    // AST REWRITE
                    // elements: tableBuckets, name
                    // token labels: name
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 868:2: -> ^( TOK_ALTERTABLE_CLUSTER_SORT $name tableBuckets )
                    {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:868:4: ^( TOK_ALTERTABLE_CLUSTER_SORT $name tableBuckets )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_ALTERTABLE_CLUSTER_SORT, "TOK_ALTERTABLE_CLUSTER_SORT")
                        , root_1);

                        adaptor.addChild(root_1, stream_name.nextNode());

                        adaptor.addChild(root_1, stream_tableBuckets.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 2 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:870:2: name= Identifier KW_NOT KW_CLUSTERED
                    {
                    name=(Token)match(input,Identifier,FOLLOW_Identifier_in_alterStatementSuffixClusterbySortby5152);  
                    stream_Identifier.add(name);


                    KW_NOT271=(Token)match(input,KW_NOT,FOLLOW_KW_NOT_in_alterStatementSuffixClusterbySortby5154);  
                    stream_KW_NOT.add(KW_NOT271);


                    KW_CLUSTERED272=(Token)match(input,KW_CLUSTERED,FOLLOW_KW_CLUSTERED_in_alterStatementSuffixClusterbySortby5156);  
                    stream_KW_CLUSTERED.add(KW_CLUSTERED272);


                    // AST REWRITE
                    // elements: name
                    // token labels: name
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 871:2: -> ^( TOK_ALTERTABLE_CLUSTER_SORT $name)
                    {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:871:4: ^( TOK_ALTERTABLE_CLUSTER_SORT $name)
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_ALTERTABLE_CLUSTER_SORT, "TOK_ALTERTABLE_CLUSTER_SORT")
                        , root_1);

                        adaptor.addChild(root_1, stream_name.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop();
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alterStatementSuffixClusterbySortby"


    public static class fileFormat_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fileFormat"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:874:1: fileFormat : ( KW_SEQUENCEFILE -> ^( TOK_TBLSEQUENCEFILE ) | KW_TEXTFILE -> ^( TOK_TBLTEXTFILE ) | KW_RCFILE -> ^( TOK_TBLRCFILE ) | KW_INPUTFORMAT inFmt= StringLiteral KW_OUTPUTFORMAT outFmt= StringLiteral ( KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral )? -> ^( TOK_TABLEFILEFORMAT $inFmt $outFmt ( $inDriver)? ( $outDriver)? ) |genericSpec= Identifier -> ^( TOK_FILEFORMAT_GENERIC $genericSpec) );
    public final HiveParser.fileFormat_return fileFormat() throws RecognitionException {
        HiveParser.fileFormat_return retval = new HiveParser.fileFormat_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token inFmt=null;
        Token outFmt=null;
        Token inDriver=null;
        Token outDriver=null;
        Token genericSpec=null;
        Token KW_SEQUENCEFILE273=null;
        Token KW_TEXTFILE274=null;
        Token KW_RCFILE275=null;
        Token KW_INPUTFORMAT276=null;
        Token KW_OUTPUTFORMAT277=null;
        Token KW_INPUTDRIVER278=null;
        Token KW_OUTPUTDRIVER279=null;

        CommonTree inFmt_tree=null;
        CommonTree outFmt_tree=null;
        CommonTree inDriver_tree=null;
        CommonTree outDriver_tree=null;
        CommonTree genericSpec_tree=null;
        CommonTree KW_SEQUENCEFILE273_tree=null;
        CommonTree KW_TEXTFILE274_tree=null;
        CommonTree KW_RCFILE275_tree=null;
        CommonTree KW_INPUTFORMAT276_tree=null;
        CommonTree KW_OUTPUTFORMAT277_tree=null;
        CommonTree KW_INPUTDRIVER278_tree=null;
        CommonTree KW_OUTPUTDRIVER279_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_INPUTDRIVER=new RewriteRuleTokenStream(adaptor,"token KW_INPUTDRIVER");
        RewriteRuleTokenStream stream_KW_RCFILE=new RewriteRuleTokenStream(adaptor,"token KW_RCFILE");
        RewriteRuleTokenStream stream_KW_INPUTFORMAT=new RewriteRuleTokenStream(adaptor,"token KW_INPUTFORMAT");
        RewriteRuleTokenStream stream_KW_OUTPUTFORMAT=new RewriteRuleTokenStream(adaptor,"token KW_OUTPUTFORMAT");
        RewriteRuleTokenStream stream_KW_OUTPUTDRIVER=new RewriteRuleTokenStream(adaptor,"token KW_OUTPUTDRIVER");
        RewriteRuleTokenStream stream_KW_SEQUENCEFILE=new RewriteRuleTokenStream(adaptor,"token KW_SEQUENCEFILE");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_KW_TEXTFILE=new RewriteRuleTokenStream(adaptor,"token KW_TEXTFILE");

         msgs.push("file format specification"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:877:5: ( KW_SEQUENCEFILE -> ^( TOK_TBLSEQUENCEFILE ) | KW_TEXTFILE -> ^( TOK_TBLTEXTFILE ) | KW_RCFILE -> ^( TOK_TBLRCFILE ) | KW_INPUTFORMAT inFmt= StringLiteral KW_OUTPUTFORMAT outFmt= StringLiteral ( KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral )? -> ^( TOK_TABLEFILEFORMAT $inFmt $outFmt ( $inDriver)? ( $outDriver)? ) |genericSpec= Identifier -> ^( TOK_FILEFORMAT_GENERIC $genericSpec) )
            int alt75=5;
            switch ( input.LA(1) ) {
            case KW_SEQUENCEFILE:
                {
                alt75=1;
                }
                break;
            case KW_TEXTFILE:
                {
                alt75=2;
                }
                break;
            case KW_RCFILE:
                {
                alt75=3;
                }
                break;
            case KW_INPUTFORMAT:
                {
                alt75=4;
                }
                break;
            case Identifier:
                {
                alt75=5;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 75, 0, input);

                throw nvae;

            }

            switch (alt75) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:877:7: KW_SEQUENCEFILE
                    {
                    KW_SEQUENCEFILE273=(Token)match(input,KW_SEQUENCEFILE,FOLLOW_KW_SEQUENCEFILE_in_fileFormat5189);  
                    stream_KW_SEQUENCEFILE.add(KW_SEQUENCEFILE273);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 877:24: -> ^( TOK_TBLSEQUENCEFILE )
                    {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:877:27: ^( TOK_TBLSEQUENCEFILE )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_TBLSEQUENCEFILE, "TOK_TBLSEQUENCEFILE")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 2 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:878:7: KW_TEXTFILE
                    {
                    KW_TEXTFILE274=(Token)match(input,KW_TEXTFILE,FOLLOW_KW_TEXTFILE_in_fileFormat5204);  
                    stream_KW_TEXTFILE.add(KW_TEXTFILE274);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 878:20: -> ^( TOK_TBLTEXTFILE )
                    {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:878:23: ^( TOK_TBLTEXTFILE )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_TBLTEXTFILE, "TOK_TBLTEXTFILE")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 3 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:879:7: KW_RCFILE
                    {
                    KW_RCFILE275=(Token)match(input,KW_RCFILE,FOLLOW_KW_RCFILE_in_fileFormat5219);  
                    stream_KW_RCFILE.add(KW_RCFILE275);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 879:18: -> ^( TOK_TBLRCFILE )
                    {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:879:21: ^( TOK_TBLRCFILE )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_TBLRCFILE, "TOK_TBLRCFILE")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 4 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:880:7: KW_INPUTFORMAT inFmt= StringLiteral KW_OUTPUTFORMAT outFmt= StringLiteral ( KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral )?
                    {
                    KW_INPUTFORMAT276=(Token)match(input,KW_INPUTFORMAT,FOLLOW_KW_INPUTFORMAT_in_fileFormat5234);  
                    stream_KW_INPUTFORMAT.add(KW_INPUTFORMAT276);


                    inFmt=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_fileFormat5238);  
                    stream_StringLiteral.add(inFmt);


                    KW_OUTPUTFORMAT277=(Token)match(input,KW_OUTPUTFORMAT,FOLLOW_KW_OUTPUTFORMAT_in_fileFormat5240);  
                    stream_KW_OUTPUTFORMAT.add(KW_OUTPUTFORMAT277);


                    outFmt=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_fileFormat5244);  
                    stream_StringLiteral.add(outFmt);


                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:880:79: ( KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral )?
                    int alt74=2;
                    int LA74_0 = input.LA(1);

                    if ( (LA74_0==KW_INPUTDRIVER) ) {
                        alt74=1;
                    }
                    switch (alt74) {
                        case 1 :
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:880:80: KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral
                            {
                            KW_INPUTDRIVER278=(Token)match(input,KW_INPUTDRIVER,FOLLOW_KW_INPUTDRIVER_in_fileFormat5247);  
                            stream_KW_INPUTDRIVER.add(KW_INPUTDRIVER278);


                            inDriver=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_fileFormat5251);  
                            stream_StringLiteral.add(inDriver);


                            KW_OUTPUTDRIVER279=(Token)match(input,KW_OUTPUTDRIVER,FOLLOW_KW_OUTPUTDRIVER_in_fileFormat5253);  
                            stream_KW_OUTPUTDRIVER.add(KW_OUTPUTDRIVER279);


                            outDriver=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_fileFormat5257);  
                            stream_StringLiteral.add(outDriver);


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: inDriver, outFmt, inFmt, outDriver
                    // token labels: outDriver, outFmt, inDriver, inFmt
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_outDriver=new RewriteRuleTokenStream(adaptor,"token outDriver",outDriver);
                    RewriteRuleTokenStream stream_outFmt=new RewriteRuleTokenStream(adaptor,"token outFmt",outFmt);
                    RewriteRuleTokenStream stream_inDriver=new RewriteRuleTokenStream(adaptor,"token inDriver",inDriver);
                    RewriteRuleTokenStream stream_inFmt=new RewriteRuleTokenStream(adaptor,"token inFmt",inFmt);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 881:7: -> ^( TOK_TABLEFILEFORMAT $inFmt $outFmt ( $inDriver)? ( $outDriver)? )
                    {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:881:10: ^( TOK_TABLEFILEFORMAT $inFmt $outFmt ( $inDriver)? ( $outDriver)? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_TABLEFILEFORMAT, "TOK_TABLEFILEFORMAT")
                        , root_1);

                        adaptor.addChild(root_1, stream_inFmt.nextNode());

                        adaptor.addChild(root_1, stream_outFmt.nextNode());

                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:881:48: ( $inDriver)?
                        if ( stream_inDriver.hasNext() ) {
                            adaptor.addChild(root_1, stream_inDriver.nextNode());

                        }
                        stream_inDriver.reset();

                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:881:59: ( $outDriver)?
                        if ( stream_outDriver.hasNext() ) {
                            adaptor.addChild(root_1, stream_outDriver.nextNode());

                        }
                        stream_outDriver.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 5 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:882:7: genericSpec= Identifier
                    {
                    genericSpec=(Token)match(input,Identifier,FOLLOW_Identifier_in_fileFormat5295);  
                    stream_Identifier.add(genericSpec);


                    // AST REWRITE
                    // elements: genericSpec
                    // token labels: genericSpec
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_genericSpec=new RewriteRuleTokenStream(adaptor,"token genericSpec",genericSpec);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 882:30: -> ^( TOK_FILEFORMAT_GENERIC $genericSpec)
                    {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:882:33: ^( TOK_FILEFORMAT_GENERIC $genericSpec)
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_FILEFORMAT_GENERIC, "TOK_FILEFORMAT_GENERIC")
                        , root_1);

                        adaptor.addChild(root_1, stream_genericSpec.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "fileFormat"


    public static class tabTypeExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "tabTypeExpr"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:885:1: tabTypeExpr : Identifier ( DOT ^ ( Identifier | KW_ELEM_TYPE | KW_KEY_TYPE | KW_VALUE_TYPE ) )* ;
    public final HiveParser.tabTypeExpr_return tabTypeExpr() throws RecognitionException {
        HiveParser.tabTypeExpr_return retval = new HiveParser.tabTypeExpr_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token Identifier280=null;
        Token DOT281=null;
        Token set282=null;

        CommonTree Identifier280_tree=null;
        CommonTree DOT281_tree=null;
        CommonTree set282_tree=null;

         msgs.push("specifying table types"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:889:4: ( Identifier ( DOT ^ ( Identifier | KW_ELEM_TYPE | KW_KEY_TYPE | KW_VALUE_TYPE ) )* )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:889:6: Identifier ( DOT ^ ( Identifier | KW_ELEM_TYPE | KW_KEY_TYPE | KW_VALUE_TYPE ) )*
            {
            root_0 = (CommonTree)adaptor.nil();


            Identifier280=(Token)match(input,Identifier,FOLLOW_Identifier_in_tabTypeExpr5331); 
            Identifier280_tree = 
            (CommonTree)adaptor.create(Identifier280)
            ;
            adaptor.addChild(root_0, Identifier280_tree);


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:889:17: ( DOT ^ ( Identifier | KW_ELEM_TYPE | KW_KEY_TYPE | KW_VALUE_TYPE ) )*
            loop76:
            do {
                int alt76=2;
                int LA76_0 = input.LA(1);

                if ( (LA76_0==DOT) ) {
                    alt76=1;
                }


                switch (alt76) {
            	case 1 :
            	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:889:18: DOT ^ ( Identifier | KW_ELEM_TYPE | KW_KEY_TYPE | KW_VALUE_TYPE )
            	    {
            	    DOT281=(Token)match(input,DOT,FOLLOW_DOT_in_tabTypeExpr5334); 
            	    DOT281_tree = 
            	    (CommonTree)adaptor.create(DOT281)
            	    ;
            	    root_0 = (CommonTree)adaptor.becomeRoot(DOT281_tree, root_0);


            	    set282=(Token)input.LT(1);

            	    if ( input.LA(1)==Identifier||input.LA(1)==KW_ELEM_TYPE||input.LA(1)==KW_KEY_TYPE||input.LA(1)==KW_VALUE_TYPE ) {
            	        input.consume();
            	        adaptor.addChild(root_0, 
            	        (CommonTree)adaptor.create(set282)
            	        );
            	        state.errorRecovery=false;
            	    }
            	    else {
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    }
            	    break;

            	default :
            	    break loop76;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "tabTypeExpr"


    public static class descTabTypeExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "descTabTypeExpr"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:892:1: descTabTypeExpr : Identifier ( DOT ^ ( Identifier | KW_ELEM_TYPE | KW_KEY_TYPE | KW_VALUE_TYPE ) )* ( Identifier )? ;
    public final HiveParser.descTabTypeExpr_return descTabTypeExpr() throws RecognitionException {
        HiveParser.descTabTypeExpr_return retval = new HiveParser.descTabTypeExpr_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token Identifier283=null;
        Token DOT284=null;
        Token set285=null;
        Token Identifier286=null;

        CommonTree Identifier283_tree=null;
        CommonTree DOT284_tree=null;
        CommonTree set285_tree=null;
        CommonTree Identifier286_tree=null;

         msgs.push("specifying describe table types"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:896:4: ( Identifier ( DOT ^ ( Identifier | KW_ELEM_TYPE | KW_KEY_TYPE | KW_VALUE_TYPE ) )* ( Identifier )? )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:896:6: Identifier ( DOT ^ ( Identifier | KW_ELEM_TYPE | KW_KEY_TYPE | KW_VALUE_TYPE ) )* ( Identifier )?
            {
            root_0 = (CommonTree)adaptor.nil();


            Identifier283=(Token)match(input,Identifier,FOLLOW_Identifier_in_descTabTypeExpr5379); 
            Identifier283_tree = 
            (CommonTree)adaptor.create(Identifier283)
            ;
            adaptor.addChild(root_0, Identifier283_tree);


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:896:17: ( DOT ^ ( Identifier | KW_ELEM_TYPE | KW_KEY_TYPE | KW_VALUE_TYPE ) )*
            loop77:
            do {
                int alt77=2;
                int LA77_0 = input.LA(1);

                if ( (LA77_0==DOT) ) {
                    alt77=1;
                }


                switch (alt77) {
            	case 1 :
            	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:896:18: DOT ^ ( Identifier | KW_ELEM_TYPE | KW_KEY_TYPE | KW_VALUE_TYPE )
            	    {
            	    DOT284=(Token)match(input,DOT,FOLLOW_DOT_in_descTabTypeExpr5382); 
            	    DOT284_tree = 
            	    (CommonTree)adaptor.create(DOT284)
            	    ;
            	    root_0 = (CommonTree)adaptor.becomeRoot(DOT284_tree, root_0);


            	    set285=(Token)input.LT(1);

            	    if ( input.LA(1)==Identifier||input.LA(1)==KW_ELEM_TYPE||input.LA(1)==KW_KEY_TYPE||input.LA(1)==KW_VALUE_TYPE ) {
            	        input.consume();
            	        adaptor.addChild(root_0, 
            	        (CommonTree)adaptor.create(set285)
            	        );
            	        state.errorRecovery=false;
            	    }
            	    else {
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    }
            	    break;

            	default :
            	    break loop77;
                }
            } while (true);


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:896:83: ( Identifier )?
            int alt78=2;
            int LA78_0 = input.LA(1);

            if ( (LA78_0==Identifier) ) {
                alt78=1;
            }
            switch (alt78) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:896:83: Identifier
                    {
                    Identifier286=(Token)match(input,Identifier,FOLLOW_Identifier_in_descTabTypeExpr5403); 
                    Identifier286_tree = 
                    (CommonTree)adaptor.create(Identifier286)
                    ;
                    adaptor.addChild(root_0, Identifier286_tree);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "descTabTypeExpr"


    public static class partTypeExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "partTypeExpr"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:899:1: partTypeExpr : tabTypeExpr ( partitionSpec )? -> ^( TOK_TABTYPE tabTypeExpr ( partitionSpec )? ) ;
    public final HiveParser.partTypeExpr_return partTypeExpr() throws RecognitionException {
        HiveParser.partTypeExpr_return retval = new HiveParser.partTypeExpr_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        HiveParser.tabTypeExpr_return tabTypeExpr287 =null;

        HiveParser.partitionSpec_return partitionSpec288 =null;


        RewriteRuleSubtreeStream stream_tabTypeExpr=new RewriteRuleSubtreeStream(adaptor,"rule tabTypeExpr");
        RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
         msgs.push("specifying table partitions"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:902:5: ( tabTypeExpr ( partitionSpec )? -> ^( TOK_TABTYPE tabTypeExpr ( partitionSpec )? ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:902:8: tabTypeExpr ( partitionSpec )?
            {
            pushFollow(FOLLOW_tabTypeExpr_in_partTypeExpr5431);
            tabTypeExpr287=tabTypeExpr();

            state._fsp--;

            stream_tabTypeExpr.add(tabTypeExpr287.getTree());

            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:902:20: ( partitionSpec )?
            int alt79=2;
            int LA79_0 = input.LA(1);

            if ( (LA79_0==KW_PARTITION) ) {
                alt79=1;
            }
            switch (alt79) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:902:20: partitionSpec
                    {
                    pushFollow(FOLLOW_partitionSpec_in_partTypeExpr5433);
                    partitionSpec288=partitionSpec();

                    state._fsp--;

                    stream_partitionSpec.add(partitionSpec288.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: tabTypeExpr, partitionSpec
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 902:35: -> ^( TOK_TABTYPE tabTypeExpr ( partitionSpec )? )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:902:38: ^( TOK_TABTYPE tabTypeExpr ( partitionSpec )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_TABTYPE, "TOK_TABTYPE")
                , root_1);

                adaptor.addChild(root_1, stream_tabTypeExpr.nextTree());

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:902:64: ( partitionSpec )?
                if ( stream_partitionSpec.hasNext() ) {
                    adaptor.addChild(root_1, stream_partitionSpec.nextTree());

                }
                stream_partitionSpec.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "partTypeExpr"


    public static class descPartTypeExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "descPartTypeExpr"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:905:1: descPartTypeExpr : descTabTypeExpr ( partitionSpec )? -> ^( TOK_TABTYPE descTabTypeExpr ( partitionSpec )? ) ;
    public final HiveParser.descPartTypeExpr_return descPartTypeExpr() throws RecognitionException {
        HiveParser.descPartTypeExpr_return retval = new HiveParser.descPartTypeExpr_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        HiveParser.descTabTypeExpr_return descTabTypeExpr289 =null;

        HiveParser.partitionSpec_return partitionSpec290 =null;


        RewriteRuleSubtreeStream stream_descTabTypeExpr=new RewriteRuleSubtreeStream(adaptor,"rule descTabTypeExpr");
        RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
         msgs.push("specifying describe table partitions"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:908:5: ( descTabTypeExpr ( partitionSpec )? -> ^( TOK_TABTYPE descTabTypeExpr ( partitionSpec )? ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:908:8: descTabTypeExpr ( partitionSpec )?
            {
            pushFollow(FOLLOW_descTabTypeExpr_in_descPartTypeExpr5473);
            descTabTypeExpr289=descTabTypeExpr();

            state._fsp--;

            stream_descTabTypeExpr.add(descTabTypeExpr289.getTree());

            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:908:24: ( partitionSpec )?
            int alt80=2;
            int LA80_0 = input.LA(1);

            if ( (LA80_0==KW_PARTITION) ) {
                alt80=1;
            }
            switch (alt80) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:908:24: partitionSpec
                    {
                    pushFollow(FOLLOW_partitionSpec_in_descPartTypeExpr5475);
                    partitionSpec290=partitionSpec();

                    state._fsp--;

                    stream_partitionSpec.add(partitionSpec290.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: descTabTypeExpr, partitionSpec
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 908:39: -> ^( TOK_TABTYPE descTabTypeExpr ( partitionSpec )? )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:908:42: ^( TOK_TABTYPE descTabTypeExpr ( partitionSpec )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_TABTYPE, "TOK_TABTYPE")
                , root_1);

                adaptor.addChild(root_1, stream_descTabTypeExpr.nextTree());

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:908:72: ( partitionSpec )?
                if ( stream_partitionSpec.hasNext() ) {
                    adaptor.addChild(root_1, stream_partitionSpec.nextTree());

                }
                stream_partitionSpec.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "descPartTypeExpr"


    public static class descStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "descStatement"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:911:1: descStatement : ( ( KW_DESCRIBE | KW_DESC ) (descOptions= KW_FORMATTED |descOptions= KW_EXTENDED )? (parttype= descPartTypeExpr ) -> ^( TOK_DESCTABLE $parttype ( $descOptions)? ) | ( KW_DESCRIBE | KW_DESC ) KW_FUNCTION ( KW_EXTENDED )? (name= descFuncNames ) -> ^( TOK_DESCFUNCTION $name ( KW_EXTENDED )? ) | ( KW_DESCRIBE | KW_DESC ) KW_DATABASE ( KW_EXTENDED )? (dbName= Identifier ) -> ^( TOK_DESCDATABASE $dbName ( KW_EXTENDED )? ) );
    public final HiveParser.descStatement_return descStatement() throws RecognitionException {
        HiveParser.descStatement_return retval = new HiveParser.descStatement_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token descOptions=null;
        Token dbName=null;
        Token KW_DESCRIBE291=null;
        Token KW_DESC292=null;
        Token KW_DESCRIBE293=null;
        Token KW_DESC294=null;
        Token KW_FUNCTION295=null;
        Token KW_EXTENDED296=null;
        Token KW_DESCRIBE297=null;
        Token KW_DESC298=null;
        Token KW_DATABASE299=null;
        Token KW_EXTENDED300=null;
        HiveParser.descPartTypeExpr_return parttype =null;

        HiveParser.descFuncNames_return name =null;


        CommonTree descOptions_tree=null;
        CommonTree dbName_tree=null;
        CommonTree KW_DESCRIBE291_tree=null;
        CommonTree KW_DESC292_tree=null;
        CommonTree KW_DESCRIBE293_tree=null;
        CommonTree KW_DESC294_tree=null;
        CommonTree KW_FUNCTION295_tree=null;
        CommonTree KW_EXTENDED296_tree=null;
        CommonTree KW_DESCRIBE297_tree=null;
        CommonTree KW_DESC298_tree=null;
        CommonTree KW_DATABASE299_tree=null;
        CommonTree KW_EXTENDED300_tree=null;
        RewriteRuleTokenStream stream_KW_DESC=new RewriteRuleTokenStream(adaptor,"token KW_DESC");
        RewriteRuleTokenStream stream_KW_FUNCTION=new RewriteRuleTokenStream(adaptor,"token KW_FUNCTION");
        RewriteRuleTokenStream stream_KW_FORMATTED=new RewriteRuleTokenStream(adaptor,"token KW_FORMATTED");
        RewriteRuleTokenStream stream_KW_EXTENDED=new RewriteRuleTokenStream(adaptor,"token KW_EXTENDED");
        RewriteRuleTokenStream stream_KW_DATABASE=new RewriteRuleTokenStream(adaptor,"token KW_DATABASE");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_KW_DESCRIBE=new RewriteRuleTokenStream(adaptor,"token KW_DESCRIBE");
        RewriteRuleSubtreeStream stream_descPartTypeExpr=new RewriteRuleSubtreeStream(adaptor,"rule descPartTypeExpr");
        RewriteRuleSubtreeStream stream_descFuncNames=new RewriteRuleSubtreeStream(adaptor,"rule descFuncNames");
         msgs.push("describe statement"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:914:5: ( ( KW_DESCRIBE | KW_DESC ) (descOptions= KW_FORMATTED |descOptions= KW_EXTENDED )? (parttype= descPartTypeExpr ) -> ^( TOK_DESCTABLE $parttype ( $descOptions)? ) | ( KW_DESCRIBE | KW_DESC ) KW_FUNCTION ( KW_EXTENDED )? (name= descFuncNames ) -> ^( TOK_DESCFUNCTION $name ( KW_EXTENDED )? ) | ( KW_DESCRIBE | KW_DESC ) KW_DATABASE ( KW_EXTENDED )? (dbName= Identifier ) -> ^( TOK_DESCDATABASE $dbName ( KW_EXTENDED )? ) )
            int alt87=3;
            int LA87_0 = input.LA(1);

            if ( (LA87_0==KW_DESCRIBE) ) {
                switch ( input.LA(2) ) {
                case Identifier:
                case KW_EXTENDED:
                case KW_FORMATTED:
                    {
                    alt87=1;
                    }
                    break;
                case KW_FUNCTION:
                    {
                    alt87=2;
                    }
                    break;
                case KW_DATABASE:
                    {
                    alt87=3;
                    }
                    break;
                default:
                    NoViableAltException nvae =
                        new NoViableAltException("", 87, 1, input);

                    throw nvae;

                }

            }
            else if ( (LA87_0==KW_DESC) ) {
                switch ( input.LA(2) ) {
                case Identifier:
                case KW_EXTENDED:
                case KW_FORMATTED:
                    {
                    alt87=1;
                    }
                    break;
                case KW_FUNCTION:
                    {
                    alt87=2;
                    }
                    break;
                case KW_DATABASE:
                    {
                    alt87=3;
                    }
                    break;
                default:
                    NoViableAltException nvae =
                        new NoViableAltException("", 87, 2, input);

                    throw nvae;

                }

            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 87, 0, input);

                throw nvae;

            }
            switch (alt87) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:914:7: ( KW_DESCRIBE | KW_DESC ) (descOptions= KW_FORMATTED |descOptions= KW_EXTENDED )? (parttype= descPartTypeExpr )
                    {
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:914:7: ( KW_DESCRIBE | KW_DESC )
                    int alt81=2;
                    int LA81_0 = input.LA(1);

                    if ( (LA81_0==KW_DESCRIBE) ) {
                        alt81=1;
                    }
                    else if ( (LA81_0==KW_DESC) ) {
                        alt81=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("", 81, 0, input);

                        throw nvae;

                    }
                    switch (alt81) {
                        case 1 :
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:914:8: KW_DESCRIBE
                            {
                            KW_DESCRIBE291=(Token)match(input,KW_DESCRIBE,FOLLOW_KW_DESCRIBE_in_descStatement5515);  
                            stream_KW_DESCRIBE.add(KW_DESCRIBE291);


                            }
                            break;
                        case 2 :
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:914:20: KW_DESC
                            {
                            KW_DESC292=(Token)match(input,KW_DESC,FOLLOW_KW_DESC_in_descStatement5517);  
                            stream_KW_DESC.add(KW_DESC292);


                            }
                            break;

                    }


                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:914:29: (descOptions= KW_FORMATTED |descOptions= KW_EXTENDED )?
                    int alt82=3;
                    int LA82_0 = input.LA(1);

                    if ( (LA82_0==KW_FORMATTED) ) {
                        alt82=1;
                    }
                    else if ( (LA82_0==KW_EXTENDED) ) {
                        alt82=2;
                    }
                    switch (alt82) {
                        case 1 :
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:914:30: descOptions= KW_FORMATTED
                            {
                            descOptions=(Token)match(input,KW_FORMATTED,FOLLOW_KW_FORMATTED_in_descStatement5523);  
                            stream_KW_FORMATTED.add(descOptions);


                            }
                            break;
                        case 2 :
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:914:55: descOptions= KW_EXTENDED
                            {
                            descOptions=(Token)match(input,KW_EXTENDED,FOLLOW_KW_EXTENDED_in_descStatement5527);  
                            stream_KW_EXTENDED.add(descOptions);


                            }
                            break;

                    }


                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:914:81: (parttype= descPartTypeExpr )
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:914:82: parttype= descPartTypeExpr
                    {
                    pushFollow(FOLLOW_descPartTypeExpr_in_descStatement5534);
                    parttype=descPartTypeExpr();

                    state._fsp--;

                    stream_descPartTypeExpr.add(parttype.getTree());

                    }


                    // AST REWRITE
                    // elements: parttype, descOptions
                    // token labels: descOptions
                    // rule labels: retval, parttype
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_descOptions=new RewriteRuleTokenStream(adaptor,"token descOptions",descOptions);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_parttype=new RewriteRuleSubtreeStream(adaptor,"rule parttype",parttype!=null?parttype.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 914:109: -> ^( TOK_DESCTABLE $parttype ( $descOptions)? )
                    {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:914:112: ^( TOK_DESCTABLE $parttype ( $descOptions)? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_DESCTABLE, "TOK_DESCTABLE")
                        , root_1);

                        adaptor.addChild(root_1, stream_parttype.nextTree());

                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:914:139: ( $descOptions)?
                        if ( stream_descOptions.hasNext() ) {
                            adaptor.addChild(root_1, stream_descOptions.nextNode());

                        }
                        stream_descOptions.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 2 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:915:7: ( KW_DESCRIBE | KW_DESC ) KW_FUNCTION ( KW_EXTENDED )? (name= descFuncNames )
                    {
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:915:7: ( KW_DESCRIBE | KW_DESC )
                    int alt83=2;
                    int LA83_0 = input.LA(1);

                    if ( (LA83_0==KW_DESCRIBE) ) {
                        alt83=1;
                    }
                    else if ( (LA83_0==KW_DESC) ) {
                        alt83=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("", 83, 0, input);

                        throw nvae;

                    }
                    switch (alt83) {
                        case 1 :
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:915:8: KW_DESCRIBE
                            {
                            KW_DESCRIBE293=(Token)match(input,KW_DESCRIBE,FOLLOW_KW_DESCRIBE_in_descStatement5557);  
                            stream_KW_DESCRIBE.add(KW_DESCRIBE293);


                            }
                            break;
                        case 2 :
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:915:20: KW_DESC
                            {
                            KW_DESC294=(Token)match(input,KW_DESC,FOLLOW_KW_DESC_in_descStatement5559);  
                            stream_KW_DESC.add(KW_DESC294);


                            }
                            break;

                    }


                    KW_FUNCTION295=(Token)match(input,KW_FUNCTION,FOLLOW_KW_FUNCTION_in_descStatement5562);  
                    stream_KW_FUNCTION.add(KW_FUNCTION295);


                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:915:41: ( KW_EXTENDED )?
                    int alt84=2;
                    int LA84_0 = input.LA(1);

                    if ( (LA84_0==KW_EXTENDED) ) {
                        alt84=1;
                    }
                    switch (alt84) {
                        case 1 :
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:915:41: KW_EXTENDED
                            {
                            KW_EXTENDED296=(Token)match(input,KW_EXTENDED,FOLLOW_KW_EXTENDED_in_descStatement5564);  
                            stream_KW_EXTENDED.add(KW_EXTENDED296);


                            }
                            break;

                    }


                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:915:54: (name= descFuncNames )
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:915:55: name= descFuncNames
                    {
                    pushFollow(FOLLOW_descFuncNames_in_descStatement5570);
                    name=descFuncNames();

                    state._fsp--;

                    stream_descFuncNames.add(name.getTree());

                    }


                    // AST REWRITE
                    // elements: KW_EXTENDED, name
                    // token labels: 
                    // rule labels: retval, name
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name",name!=null?name.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 915:75: -> ^( TOK_DESCFUNCTION $name ( KW_EXTENDED )? )
                    {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:915:78: ^( TOK_DESCFUNCTION $name ( KW_EXTENDED )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_DESCFUNCTION, "TOK_DESCFUNCTION")
                        , root_1);

                        adaptor.addChild(root_1, stream_name.nextTree());

                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:915:103: ( KW_EXTENDED )?
                        if ( stream_KW_EXTENDED.hasNext() ) {
                            adaptor.addChild(root_1, 
                            stream_KW_EXTENDED.nextNode()
                            );

                        }
                        stream_KW_EXTENDED.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 3 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:916:7: ( KW_DESCRIBE | KW_DESC ) KW_DATABASE ( KW_EXTENDED )? (dbName= Identifier )
                    {
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:916:7: ( KW_DESCRIBE | KW_DESC )
                    int alt85=2;
                    int LA85_0 = input.LA(1);

                    if ( (LA85_0==KW_DESCRIBE) ) {
                        alt85=1;
                    }
                    else if ( (LA85_0==KW_DESC) ) {
                        alt85=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("", 85, 0, input);

                        throw nvae;

                    }
                    switch (alt85) {
                        case 1 :
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:916:8: KW_DESCRIBE
                            {
                            KW_DESCRIBE297=(Token)match(input,KW_DESCRIBE,FOLLOW_KW_DESCRIBE_in_descStatement5592);  
                            stream_KW_DESCRIBE.add(KW_DESCRIBE297);


                            }
                            break;
                        case 2 :
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:916:20: KW_DESC
                            {
                            KW_DESC298=(Token)match(input,KW_DESC,FOLLOW_KW_DESC_in_descStatement5594);  
                            stream_KW_DESC.add(KW_DESC298);


                            }
                            break;

                    }


                    KW_DATABASE299=(Token)match(input,KW_DATABASE,FOLLOW_KW_DATABASE_in_descStatement5597);  
                    stream_KW_DATABASE.add(KW_DATABASE299);


                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:916:41: ( KW_EXTENDED )?
                    int alt86=2;
                    int LA86_0 = input.LA(1);

                    if ( (LA86_0==KW_EXTENDED) ) {
                        alt86=1;
                    }
                    switch (alt86) {
                        case 1 :
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:916:41: KW_EXTENDED
                            {
                            KW_EXTENDED300=(Token)match(input,KW_EXTENDED,FOLLOW_KW_EXTENDED_in_descStatement5599);  
                            stream_KW_EXTENDED.add(KW_EXTENDED300);


                            }
                            break;

                    }


                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:916:54: (dbName= Identifier )
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:916:55: dbName= Identifier
                    {
                    dbName=(Token)match(input,Identifier,FOLLOW_Identifier_in_descStatement5605);  
                    stream_Identifier.add(dbName);


                    }


                    // AST REWRITE
                    // elements: dbName, KW_EXTENDED
                    // token labels: dbName
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_dbName=new RewriteRuleTokenStream(adaptor,"token dbName",dbName);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 916:74: -> ^( TOK_DESCDATABASE $dbName ( KW_EXTENDED )? )
                    {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:916:77: ^( TOK_DESCDATABASE $dbName ( KW_EXTENDED )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_DESCDATABASE, "TOK_DESCDATABASE")
                        , root_1);

                        adaptor.addChild(root_1, stream_dbName.nextNode());

                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:916:104: ( KW_EXTENDED )?
                        if ( stream_KW_EXTENDED.hasNext() ) {
                            adaptor.addChild(root_1, 
                            stream_KW_EXTENDED.nextNode()
                            );

                        }
                        stream_KW_EXTENDED.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "descStatement"


    public static class analyzeStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "analyzeStatement"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:919:1: analyzeStatement : KW_ANALYZE KW_TABLE (parttype= tableOrPartition ) KW_COMPUTE KW_STATISTICS ( KW_FOR KW_COLUMNS statsColumnName= columnNameList )? -> ^( TOK_ANALYZE $parttype ( $statsColumnName)? ) ;
    public final HiveParser.analyzeStatement_return analyzeStatement() throws RecognitionException {
        HiveParser.analyzeStatement_return retval = new HiveParser.analyzeStatement_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_ANALYZE301=null;
        Token KW_TABLE302=null;
        Token KW_COMPUTE303=null;
        Token KW_STATISTICS304=null;
        Token KW_FOR305=null;
        Token KW_COLUMNS306=null;
        HiveParser.tableOrPartition_return parttype =null;

        HiveParser.columnNameList_return statsColumnName =null;


        CommonTree KW_ANALYZE301_tree=null;
        CommonTree KW_TABLE302_tree=null;
        CommonTree KW_COMPUTE303_tree=null;
        CommonTree KW_STATISTICS304_tree=null;
        CommonTree KW_FOR305_tree=null;
        CommonTree KW_COLUMNS306_tree=null;
        RewriteRuleTokenStream stream_KW_ANALYZE=new RewriteRuleTokenStream(adaptor,"token KW_ANALYZE");
        RewriteRuleTokenStream stream_KW_COLUMNS=new RewriteRuleTokenStream(adaptor,"token KW_COLUMNS");
        RewriteRuleTokenStream stream_KW_STATISTICS=new RewriteRuleTokenStream(adaptor,"token KW_STATISTICS");
        RewriteRuleTokenStream stream_KW_FOR=new RewriteRuleTokenStream(adaptor,"token KW_FOR");
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleTokenStream stream_KW_COMPUTE=new RewriteRuleTokenStream(adaptor,"token KW_COMPUTE");
        RewriteRuleSubtreeStream stream_tableOrPartition=new RewriteRuleSubtreeStream(adaptor,"rule tableOrPartition");
        RewriteRuleSubtreeStream stream_columnNameList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameList");
         msgs.push("analyze statement"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:922:5: ( KW_ANALYZE KW_TABLE (parttype= tableOrPartition ) KW_COMPUTE KW_STATISTICS ( KW_FOR KW_COLUMNS statsColumnName= columnNameList )? -> ^( TOK_ANALYZE $parttype ( $statsColumnName)? ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:922:7: KW_ANALYZE KW_TABLE (parttype= tableOrPartition ) KW_COMPUTE KW_STATISTICS ( KW_FOR KW_COLUMNS statsColumnName= columnNameList )?
            {
            KW_ANALYZE301=(Token)match(input,KW_ANALYZE,FOLLOW_KW_ANALYZE_in_analyzeStatement5645);  
            stream_KW_ANALYZE.add(KW_ANALYZE301);


            KW_TABLE302=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_analyzeStatement5647);  
            stream_KW_TABLE.add(KW_TABLE302);


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:922:27: (parttype= tableOrPartition )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:922:28: parttype= tableOrPartition
            {
            pushFollow(FOLLOW_tableOrPartition_in_analyzeStatement5652);
            parttype=tableOrPartition();

            state._fsp--;

            stream_tableOrPartition.add(parttype.getTree());

            }


            KW_COMPUTE303=(Token)match(input,KW_COMPUTE,FOLLOW_KW_COMPUTE_in_analyzeStatement5655);  
            stream_KW_COMPUTE.add(KW_COMPUTE303);


            KW_STATISTICS304=(Token)match(input,KW_STATISTICS,FOLLOW_KW_STATISTICS_in_analyzeStatement5657);  
            stream_KW_STATISTICS.add(KW_STATISTICS304);


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:922:80: ( KW_FOR KW_COLUMNS statsColumnName= columnNameList )?
            int alt88=2;
            int LA88_0 = input.LA(1);

            if ( (LA88_0==KW_FOR) ) {
                alt88=1;
            }
            switch (alt88) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:922:81: KW_FOR KW_COLUMNS statsColumnName= columnNameList
                    {
                    KW_FOR305=(Token)match(input,KW_FOR,FOLLOW_KW_FOR_in_analyzeStatement5660);  
                    stream_KW_FOR.add(KW_FOR305);


                    KW_COLUMNS306=(Token)match(input,KW_COLUMNS,FOLLOW_KW_COLUMNS_in_analyzeStatement5662);  
                    stream_KW_COLUMNS.add(KW_COLUMNS306);


                    pushFollow(FOLLOW_columnNameList_in_analyzeStatement5666);
                    statsColumnName=columnNameList();

                    state._fsp--;

                    stream_columnNameList.add(statsColumnName.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: statsColumnName, parttype
            // token labels: 
            // rule labels: retval, parttype, statsColumnName
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_parttype=new RewriteRuleSubtreeStream(adaptor,"rule parttype",parttype!=null?parttype.tree:null);
            RewriteRuleSubtreeStream stream_statsColumnName=new RewriteRuleSubtreeStream(adaptor,"rule statsColumnName",statsColumnName!=null?statsColumnName.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 922:132: -> ^( TOK_ANALYZE $parttype ( $statsColumnName)? )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:922:135: ^( TOK_ANALYZE $parttype ( $statsColumnName)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_ANALYZE, "TOK_ANALYZE")
                , root_1);

                adaptor.addChild(root_1, stream_parttype.nextTree());

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:922:160: ( $statsColumnName)?
                if ( stream_statsColumnName.hasNext() ) {
                    adaptor.addChild(root_1, stream_statsColumnName.nextTree());

                }
                stream_statsColumnName.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "analyzeStatement"


    public static class showStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "showStatement"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:925:1: showStatement : ( KW_SHOW ( KW_DATABASES | KW_SCHEMAS ) ( KW_LIKE showStmtIdentifier )? -> ^( TOK_SHOWDATABASES ( showStmtIdentifier )? ) | KW_SHOW KW_TABLES ( ( KW_FROM | KW_IN ) db_name= Identifier )? ( KW_LIKE showStmtIdentifier | showStmtIdentifier )? -> ^( TOK_SHOWTABLES ( TOK_FROM $db_name)? ( showStmtIdentifier )? ) | KW_SHOW KW_COLUMNS ( KW_FROM | KW_IN ) tabname= tableName ( ( KW_FROM | KW_IN ) db_name= Identifier )? -> ^( TOK_SHOWCOLUMNS ( $db_name)? $tabname) | KW_SHOW KW_FUNCTIONS ( showStmtIdentifier )? -> ^( TOK_SHOWFUNCTIONS ( showStmtIdentifier )? ) | KW_SHOW KW_PARTITIONS Identifier ( partitionSpec )? -> ^( TOK_SHOWPARTITIONS Identifier ( partitionSpec )? ) | KW_SHOW KW_CREATE KW_TABLE tabName= tableName -> ^( TOK_SHOW_CREATETABLE $tabName) | KW_SHOW KW_TABLE KW_EXTENDED ( ( KW_FROM | KW_IN ) db_name= Identifier )? KW_LIKE showStmtIdentifier ( partitionSpec )? -> ^( TOK_SHOW_TABLESTATUS showStmtIdentifier ( $db_name)? ( partitionSpec )? ) | KW_SHOW KW_TBLPROPERTIES tblName= Identifier ( LPAREN prptyName= StringLiteral RPAREN )? -> ^( TOK_SHOW_TBLPROPERTIES $tblName ( $prptyName)? ) | KW_SHOW KW_LOCKS (parttype= partTypeExpr )? (isExtended= KW_EXTENDED )? -> ^( TOK_SHOWLOCKS ( $parttype)? ( $isExtended)? ) | KW_SHOW (showOptions= KW_FORMATTED )? ( KW_INDEX | KW_INDEXES ) KW_ON showStmtIdentifier ( ( KW_FROM | KW_IN ) db_name= Identifier )? -> ^( TOK_SHOWINDEXES showStmtIdentifier ( $showOptions)? ( $db_name)? ) );
    public final HiveParser.showStatement_return showStatement() throws RecognitionException {
        HiveParser.showStatement_return retval = new HiveParser.showStatement_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token db_name=null;
        Token tblName=null;
        Token prptyName=null;
        Token isExtended=null;
        Token showOptions=null;
        Token KW_SHOW307=null;
        Token KW_DATABASES308=null;
        Token KW_SCHEMAS309=null;
        Token KW_LIKE310=null;
        Token KW_SHOW312=null;
        Token KW_TABLES313=null;
        Token KW_FROM314=null;
        Token KW_IN315=null;
        Token KW_LIKE316=null;
        Token KW_SHOW319=null;
        Token KW_COLUMNS320=null;
        Token KW_FROM321=null;
        Token KW_IN322=null;
        Token KW_FROM323=null;
        Token KW_IN324=null;
        Token KW_SHOW325=null;
        Token KW_FUNCTIONS326=null;
        Token KW_SHOW328=null;
        Token KW_PARTITIONS329=null;
        Token Identifier330=null;
        Token KW_SHOW332=null;
        Token KW_CREATE333=null;
        Token KW_TABLE334=null;
        Token KW_SHOW335=null;
        Token KW_TABLE336=null;
        Token KW_EXTENDED337=null;
        Token KW_FROM338=null;
        Token KW_IN339=null;
        Token KW_LIKE340=null;
        Token KW_SHOW343=null;
        Token KW_TBLPROPERTIES344=null;
        Token LPAREN345=null;
        Token RPAREN346=null;
        Token KW_SHOW347=null;
        Token KW_LOCKS348=null;
        Token KW_SHOW349=null;
        Token KW_INDEX350=null;
        Token KW_INDEXES351=null;
        Token KW_ON352=null;
        Token KW_FROM354=null;
        Token KW_IN355=null;
        HiveParser.tableName_return tabname =null;

        HiveParser.tableName_return tabName =null;

        HiveParser.partTypeExpr_return parttype =null;

        HiveParser.showStmtIdentifier_return showStmtIdentifier311 =null;

        HiveParser.showStmtIdentifier_return showStmtIdentifier317 =null;

        HiveParser.showStmtIdentifier_return showStmtIdentifier318 =null;

        HiveParser.showStmtIdentifier_return showStmtIdentifier327 =null;

        HiveParser.partitionSpec_return partitionSpec331 =null;

        HiveParser.showStmtIdentifier_return showStmtIdentifier341 =null;

        HiveParser.partitionSpec_return partitionSpec342 =null;

        HiveParser.showStmtIdentifier_return showStmtIdentifier353 =null;


        CommonTree db_name_tree=null;
        CommonTree tblName_tree=null;
        CommonTree prptyName_tree=null;
        CommonTree isExtended_tree=null;
        CommonTree showOptions_tree=null;
        CommonTree KW_SHOW307_tree=null;
        CommonTree KW_DATABASES308_tree=null;
        CommonTree KW_SCHEMAS309_tree=null;
        CommonTree KW_LIKE310_tree=null;
        CommonTree KW_SHOW312_tree=null;
        CommonTree KW_TABLES313_tree=null;
        CommonTree KW_FROM314_tree=null;
        CommonTree KW_IN315_tree=null;
        CommonTree KW_LIKE316_tree=null;
        CommonTree KW_SHOW319_tree=null;
        CommonTree KW_COLUMNS320_tree=null;
        CommonTree KW_FROM321_tree=null;
        CommonTree KW_IN322_tree=null;
        CommonTree KW_FROM323_tree=null;
        CommonTree KW_IN324_tree=null;
        CommonTree KW_SHOW325_tree=null;
        CommonTree KW_FUNCTIONS326_tree=null;
        CommonTree KW_SHOW328_tree=null;
        CommonTree KW_PARTITIONS329_tree=null;
        CommonTree Identifier330_tree=null;
        CommonTree KW_SHOW332_tree=null;
        CommonTree KW_CREATE333_tree=null;
        CommonTree KW_TABLE334_tree=null;
        CommonTree KW_SHOW335_tree=null;
        CommonTree KW_TABLE336_tree=null;
        CommonTree KW_EXTENDED337_tree=null;
        CommonTree KW_FROM338_tree=null;
        CommonTree KW_IN339_tree=null;
        CommonTree KW_LIKE340_tree=null;
        CommonTree KW_SHOW343_tree=null;
        CommonTree KW_TBLPROPERTIES344_tree=null;
        CommonTree LPAREN345_tree=null;
        CommonTree RPAREN346_tree=null;
        CommonTree KW_SHOW347_tree=null;
        CommonTree KW_LOCKS348_tree=null;
        CommonTree KW_SHOW349_tree=null;
        CommonTree KW_INDEX350_tree=null;
        CommonTree KW_INDEXES351_tree=null;
        CommonTree KW_ON352_tree=null;
        CommonTree KW_FROM354_tree=null;
        CommonTree KW_IN355_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_SHOW=new RewriteRuleTokenStream(adaptor,"token KW_SHOW");
        RewriteRuleTokenStream stream_KW_LOCKS=new RewriteRuleTokenStream(adaptor,"token KW_LOCKS");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_KW_LIKE=new RewriteRuleTokenStream(adaptor,"token KW_LIKE");
        RewriteRuleTokenStream stream_KW_FORMATTED=new RewriteRuleTokenStream(adaptor,"token KW_FORMATTED");
        RewriteRuleTokenStream stream_KW_COLUMNS=new RewriteRuleTokenStream(adaptor,"token KW_COLUMNS");
        RewriteRuleTokenStream stream_KW_PARTITIONS=new RewriteRuleTokenStream(adaptor,"token KW_PARTITIONS");
        RewriteRuleTokenStream stream_KW_ON=new RewriteRuleTokenStream(adaptor,"token KW_ON");
        RewriteRuleTokenStream stream_KW_FUNCTIONS=new RewriteRuleTokenStream(adaptor,"token KW_FUNCTIONS");
        RewriteRuleTokenStream stream_KW_IN=new RewriteRuleTokenStream(adaptor,"token KW_IN");
        RewriteRuleTokenStream stream_KW_INDEXES=new RewriteRuleTokenStream(adaptor,"token KW_INDEXES");
        RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
        RewriteRuleTokenStream stream_KW_SCHEMAS=new RewriteRuleTokenStream(adaptor,"token KW_SCHEMAS");
        RewriteRuleTokenStream stream_KW_INDEX=new RewriteRuleTokenStream(adaptor,"token KW_INDEX");
        RewriteRuleTokenStream stream_KW_TABLES=new RewriteRuleTokenStream(adaptor,"token KW_TABLES");
        RewriteRuleTokenStream stream_KW_EXTENDED=new RewriteRuleTokenStream(adaptor,"token KW_EXTENDED");
        RewriteRuleTokenStream stream_KW_DATABASES=new RewriteRuleTokenStream(adaptor,"token KW_DATABASES");
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_KW_TBLPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_TBLPROPERTIES");
        RewriteRuleTokenStream stream_KW_FROM=new RewriteRuleTokenStream(adaptor,"token KW_FROM");
        RewriteRuleSubtreeStream stream_showStmtIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule showStmtIdentifier");
        RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
        RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
        RewriteRuleSubtreeStream stream_partTypeExpr=new RewriteRuleSubtreeStream(adaptor,"rule partTypeExpr");
         msgs.push("show statement"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:928:5: ( KW_SHOW ( KW_DATABASES | KW_SCHEMAS ) ( KW_LIKE showStmtIdentifier )? -> ^( TOK_SHOWDATABASES ( showStmtIdentifier )? ) | KW_SHOW KW_TABLES ( ( KW_FROM | KW_IN ) db_name= Identifier )? ( KW_LIKE showStmtIdentifier | showStmtIdentifier )? -> ^( TOK_SHOWTABLES ( TOK_FROM $db_name)? ( showStmtIdentifier )? ) | KW_SHOW KW_COLUMNS ( KW_FROM | KW_IN ) tabname= tableName ( ( KW_FROM | KW_IN ) db_name= Identifier )? -> ^( TOK_SHOWCOLUMNS ( $db_name)? $tabname) | KW_SHOW KW_FUNCTIONS ( showStmtIdentifier )? -> ^( TOK_SHOWFUNCTIONS ( showStmtIdentifier )? ) | KW_SHOW KW_PARTITIONS Identifier ( partitionSpec )? -> ^( TOK_SHOWPARTITIONS Identifier ( partitionSpec )? ) | KW_SHOW KW_CREATE KW_TABLE tabName= tableName -> ^( TOK_SHOW_CREATETABLE $tabName) | KW_SHOW KW_TABLE KW_EXTENDED ( ( KW_FROM | KW_IN ) db_name= Identifier )? KW_LIKE showStmtIdentifier ( partitionSpec )? -> ^( TOK_SHOW_TABLESTATUS showStmtIdentifier ( $db_name)? ( partitionSpec )? ) | KW_SHOW KW_TBLPROPERTIES tblName= Identifier ( LPAREN prptyName= StringLiteral RPAREN )? -> ^( TOK_SHOW_TBLPROPERTIES $tblName ( $prptyName)? ) | KW_SHOW KW_LOCKS (parttype= partTypeExpr )? (isExtended= KW_EXTENDED )? -> ^( TOK_SHOWLOCKS ( $parttype)? ( $isExtended)? ) | KW_SHOW (showOptions= KW_FORMATTED )? ( KW_INDEX | KW_INDEXES ) KW_ON showStmtIdentifier ( ( KW_FROM | KW_IN ) db_name= Identifier )? -> ^( TOK_SHOWINDEXES showStmtIdentifier ( $showOptions)? ( $db_name)? ) )
            int alt109=10;
            int LA109_0 = input.LA(1);

            if ( (LA109_0==KW_SHOW) ) {
                switch ( input.LA(2) ) {
                case KW_TABLES:
                    {
                    alt109=2;
                    }
                    break;
                case KW_COLUMNS:
                    {
                    alt109=3;
                    }
                    break;
                case KW_FUNCTIONS:
                    {
                    alt109=4;
                    }
                    break;
                case KW_PARTITIONS:
                    {
                    alt109=5;
                    }
                    break;
                case KW_CREATE:
                    {
                    alt109=6;
                    }
                    break;
                case KW_TABLE:
                    {
                    alt109=7;
                    }
                    break;
                case KW_TBLPROPERTIES:
                    {
                    alt109=8;
                    }
                    break;
                case KW_LOCKS:
                    {
                    alt109=9;
                    }
                    break;
                case KW_DATABASES:
                case KW_SCHEMAS:
                    {
                    alt109=1;
                    }
                    break;
                case KW_FORMATTED:
                case KW_INDEX:
                case KW_INDEXES:
                    {
                    alt109=10;
                    }
                    break;
                default:
                    NoViableAltException nvae =
                        new NoViableAltException("", 109, 1, input);

                    throw nvae;

                }

            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 109, 0, input);

                throw nvae;

            }
            switch (alt109) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:928:7: KW_SHOW ( KW_DATABASES | KW_SCHEMAS ) ( KW_LIKE showStmtIdentifier )?
                    {
                    KW_SHOW307=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement5708);  
                    stream_KW_SHOW.add(KW_SHOW307);


                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:928:15: ( KW_DATABASES | KW_SCHEMAS )
                    int alt89=2;
                    int LA89_0 = input.LA(1);

                    if ( (LA89_0==KW_DATABASES) ) {
                        alt89=1;
                    }
                    else if ( (LA89_0==KW_SCHEMAS) ) {
                        alt89=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("", 89, 0, input);

                        throw nvae;

                    }
                    switch (alt89) {
                        case 1 :
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:928:16: KW_DATABASES
                            {
                            KW_DATABASES308=(Token)match(input,KW_DATABASES,FOLLOW_KW_DATABASES_in_showStatement5711);  
                            stream_KW_DATABASES.add(KW_DATABASES308);


                            }
                            break;
                        case 2 :
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:928:29: KW_SCHEMAS
                            {
                            KW_SCHEMAS309=(Token)match(input,KW_SCHEMAS,FOLLOW_KW_SCHEMAS_in_showStatement5713);  
                            stream_KW_SCHEMAS.add(KW_SCHEMAS309);


                            }
                            break;

                    }


                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:928:41: ( KW_LIKE showStmtIdentifier )?
                    int alt90=2;
                    int LA90_0 = input.LA(1);

                    if ( (LA90_0==KW_LIKE) ) {
                        alt90=1;
                    }
                    switch (alt90) {
                        case 1 :
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:928:42: KW_LIKE showStmtIdentifier
                            {
                            KW_LIKE310=(Token)match(input,KW_LIKE,FOLLOW_KW_LIKE_in_showStatement5717);  
                            stream_KW_LIKE.add(KW_LIKE310);


                            pushFollow(FOLLOW_showStmtIdentifier_in_showStatement5719);
                            showStmtIdentifier311=showStmtIdentifier();

                            state._fsp--;

                            stream_showStmtIdentifier.add(showStmtIdentifier311.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: showStmtIdentifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 928:71: -> ^( TOK_SHOWDATABASES ( showStmtIdentifier )? )
                    {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:928:74: ^( TOK_SHOWDATABASES ( showStmtIdentifier )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_SHOWDATABASES, "TOK_SHOWDATABASES")
                        , root_1);

                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:928:94: ( showStmtIdentifier )?
                        if ( stream_showStmtIdentifier.hasNext() ) {
                            adaptor.addChild(root_1, stream_showStmtIdentifier.nextTree());

                        }
                        stream_showStmtIdentifier.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 2 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:929:7: KW_SHOW KW_TABLES ( ( KW_FROM | KW_IN ) db_name= Identifier )? ( KW_LIKE showStmtIdentifier | showStmtIdentifier )?
                    {
                    KW_SHOW312=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement5738);  
                    stream_KW_SHOW.add(KW_SHOW312);


                    KW_TABLES313=(Token)match(input,KW_TABLES,FOLLOW_KW_TABLES_in_showStatement5740);  
                    stream_KW_TABLES.add(KW_TABLES313);


                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:929:25: ( ( KW_FROM | KW_IN ) db_name= Identifier )?
                    int alt92=2;
                    int LA92_0 = input.LA(1);

                    if ( (LA92_0==KW_FROM||LA92_0==KW_IN) ) {
                        alt92=1;
                    }
                    switch (alt92) {
                        case 1 :
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:929:26: ( KW_FROM | KW_IN ) db_name= Identifier
                            {
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:929:26: ( KW_FROM | KW_IN )
                            int alt91=2;
                            int LA91_0 = input.LA(1);

                            if ( (LA91_0==KW_FROM) ) {
                                alt91=1;
                            }
                            else if ( (LA91_0==KW_IN) ) {
                                alt91=2;
                            }
                            else {
                                NoViableAltException nvae =
                                    new NoViableAltException("", 91, 0, input);

                                throw nvae;

                            }
                            switch (alt91) {
                                case 1 :
                                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:929:27: KW_FROM
                                    {
                                    KW_FROM314=(Token)match(input,KW_FROM,FOLLOW_KW_FROM_in_showStatement5744);  
                                    stream_KW_FROM.add(KW_FROM314);


                                    }
                                    break;
                                case 2 :
                                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:929:35: KW_IN
                                    {
                                    KW_IN315=(Token)match(input,KW_IN,FOLLOW_KW_IN_in_showStatement5746);  
                                    stream_KW_IN.add(KW_IN315);


                                    }
                                    break;

                            }


                            db_name=(Token)match(input,Identifier,FOLLOW_Identifier_in_showStatement5751);  
                            stream_Identifier.add(db_name);


                            }
                            break;

                    }


                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:929:63: ( KW_LIKE showStmtIdentifier | showStmtIdentifier )?
                    int alt93=3;
                    int LA93_0 = input.LA(1);

                    if ( (LA93_0==KW_LIKE) ) {
                        alt93=1;
                    }
                    else if ( (LA93_0==Identifier||LA93_0==StringLiteral) ) {
                        alt93=2;
                    }
                    switch (alt93) {
                        case 1 :
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:929:64: KW_LIKE showStmtIdentifier
                            {
                            KW_LIKE316=(Token)match(input,KW_LIKE,FOLLOW_KW_LIKE_in_showStatement5756);  
                            stream_KW_LIKE.add(KW_LIKE316);


                            pushFollow(FOLLOW_showStmtIdentifier_in_showStatement5758);
                            showStmtIdentifier317=showStmtIdentifier();

                            state._fsp--;

                            stream_showStmtIdentifier.add(showStmtIdentifier317.getTree());

                            }
                            break;
                        case 2 :
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:929:91: showStmtIdentifier
                            {
                            pushFollow(FOLLOW_showStmtIdentifier_in_showStatement5760);
                            showStmtIdentifier318=showStmtIdentifier();

                            state._fsp--;

                            stream_showStmtIdentifier.add(showStmtIdentifier318.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: showStmtIdentifier, db_name
                    // token labels: db_name
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_db_name=new RewriteRuleTokenStream(adaptor,"token db_name",db_name);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 929:113: -> ^( TOK_SHOWTABLES ( TOK_FROM $db_name)? ( showStmtIdentifier )? )
                    {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:929:116: ^( TOK_SHOWTABLES ( TOK_FROM $db_name)? ( showStmtIdentifier )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_SHOWTABLES, "TOK_SHOWTABLES")
                        , root_1);

                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:929:133: ( TOK_FROM $db_name)?
                        if ( stream_db_name.hasNext() ) {
                            adaptor.addChild(root_1, 
                            (CommonTree)adaptor.create(TOK_FROM, "TOK_FROM")
                            );

                            adaptor.addChild(root_1, stream_db_name.nextNode());

                        }
                        stream_db_name.reset();

                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:929:154: ( showStmtIdentifier )?
                        if ( stream_showStmtIdentifier.hasNext() ) {
                            adaptor.addChild(root_1, stream_showStmtIdentifier.nextTree());

                        }
                        stream_showStmtIdentifier.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 3 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:930:7: KW_SHOW KW_COLUMNS ( KW_FROM | KW_IN ) tabname= tableName ( ( KW_FROM | KW_IN ) db_name= Identifier )?
                    {
                    KW_SHOW319=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement5788);  
                    stream_KW_SHOW.add(KW_SHOW319);


                    KW_COLUMNS320=(Token)match(input,KW_COLUMNS,FOLLOW_KW_COLUMNS_in_showStatement5790);  
                    stream_KW_COLUMNS.add(KW_COLUMNS320);


                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:930:26: ( KW_FROM | KW_IN )
                    int alt94=2;
                    int LA94_0 = input.LA(1);

                    if ( (LA94_0==KW_FROM) ) {
                        alt94=1;
                    }
                    else if ( (LA94_0==KW_IN) ) {
                        alt94=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("", 94, 0, input);

                        throw nvae;

                    }
                    switch (alt94) {
                        case 1 :
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:930:27: KW_FROM
                            {
                            KW_FROM321=(Token)match(input,KW_FROM,FOLLOW_KW_FROM_in_showStatement5793);  
                            stream_KW_FROM.add(KW_FROM321);


                            }
                            break;
                        case 2 :
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:930:35: KW_IN
                            {
                            KW_IN322=(Token)match(input,KW_IN,FOLLOW_KW_IN_in_showStatement5795);  
                            stream_KW_IN.add(KW_IN322);


                            }
                            break;

                    }


                    pushFollow(FOLLOW_tableName_in_showStatement5800);
                    tabname=tableName();

                    state._fsp--;

                    stream_tableName.add(tabname.getTree());

                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:930:60: ( ( KW_FROM | KW_IN ) db_name= Identifier )?
                    int alt96=2;
                    int LA96_0 = input.LA(1);

                    if ( (LA96_0==KW_FROM||LA96_0==KW_IN) ) {
                        alt96=1;
                    }
                    switch (alt96) {
                        case 1 :
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:930:61: ( KW_FROM | KW_IN ) db_name= Identifier
                            {
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:930:61: ( KW_FROM | KW_IN )
                            int alt95=2;
                            int LA95_0 = input.LA(1);

                            if ( (LA95_0==KW_FROM) ) {
                                alt95=1;
                            }
                            else if ( (LA95_0==KW_IN) ) {
                                alt95=2;
                            }
                            else {
                                NoViableAltException nvae =
                                    new NoViableAltException("", 95, 0, input);

                                throw nvae;

                            }
                            switch (alt95) {
                                case 1 :
                                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:930:62: KW_FROM
                                    {
                                    KW_FROM323=(Token)match(input,KW_FROM,FOLLOW_KW_FROM_in_showStatement5804);  
                                    stream_KW_FROM.add(KW_FROM323);


                                    }
                                    break;
                                case 2 :
                                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:930:70: KW_IN
                                    {
                                    KW_IN324=(Token)match(input,KW_IN,FOLLOW_KW_IN_in_showStatement5806);  
                                    stream_KW_IN.add(KW_IN324);


                                    }
                                    break;

                            }


                            db_name=(Token)match(input,Identifier,FOLLOW_Identifier_in_showStatement5811);  
                            stream_Identifier.add(db_name);


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: tabname, db_name
                    // token labels: db_name
                    // rule labels: retval, tabname
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_db_name=new RewriteRuleTokenStream(adaptor,"token db_name",db_name);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_tabname=new RewriteRuleSubtreeStream(adaptor,"rule tabname",tabname!=null?tabname.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 931:5: -> ^( TOK_SHOWCOLUMNS ( $db_name)? $tabname)
                    {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:931:8: ^( TOK_SHOWCOLUMNS ( $db_name)? $tabname)
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_SHOWCOLUMNS, "TOK_SHOWCOLUMNS")
                        , root_1);

                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:931:27: ( $db_name)?
                        if ( stream_db_name.hasNext() ) {
                            adaptor.addChild(root_1, stream_db_name.nextNode());

                        }
                        stream_db_name.reset();

                        adaptor.addChild(root_1, stream_tabname.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 4 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:932:7: KW_SHOW KW_FUNCTIONS ( showStmtIdentifier )?
                    {
                    KW_SHOW325=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement5839);  
                    stream_KW_SHOW.add(KW_SHOW325);


                    KW_FUNCTIONS326=(Token)match(input,KW_FUNCTIONS,FOLLOW_KW_FUNCTIONS_in_showStatement5841);  
                    stream_KW_FUNCTIONS.add(KW_FUNCTIONS326);


                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:932:28: ( showStmtIdentifier )?
                    int alt97=2;
                    int LA97_0 = input.LA(1);

                    if ( (LA97_0==Identifier||LA97_0==StringLiteral) ) {
                        alt97=1;
                    }
                    switch (alt97) {
                        case 1 :
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:932:28: showStmtIdentifier
                            {
                            pushFollow(FOLLOW_showStmtIdentifier_in_showStatement5843);
                            showStmtIdentifier327=showStmtIdentifier();

                            state._fsp--;

                            stream_showStmtIdentifier.add(showStmtIdentifier327.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: showStmtIdentifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 932:49: -> ^( TOK_SHOWFUNCTIONS ( showStmtIdentifier )? )
                    {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:932:52: ^( TOK_SHOWFUNCTIONS ( showStmtIdentifier )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_SHOWFUNCTIONS, "TOK_SHOWFUNCTIONS")
                        , root_1);

                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:932:72: ( showStmtIdentifier )?
                        if ( stream_showStmtIdentifier.hasNext() ) {
                            adaptor.addChild(root_1, stream_showStmtIdentifier.nextTree());

                        }
                        stream_showStmtIdentifier.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 5 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:933:7: KW_SHOW KW_PARTITIONS Identifier ( partitionSpec )?
                    {
                    KW_SHOW328=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement5862);  
                    stream_KW_SHOW.add(KW_SHOW328);


                    KW_PARTITIONS329=(Token)match(input,KW_PARTITIONS,FOLLOW_KW_PARTITIONS_in_showStatement5864);  
                    stream_KW_PARTITIONS.add(KW_PARTITIONS329);


                    Identifier330=(Token)match(input,Identifier,FOLLOW_Identifier_in_showStatement5866);  
                    stream_Identifier.add(Identifier330);


                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:933:40: ( partitionSpec )?
                    int alt98=2;
                    int LA98_0 = input.LA(1);

                    if ( (LA98_0==KW_PARTITION) ) {
                        alt98=1;
                    }
                    switch (alt98) {
                        case 1 :
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:933:40: partitionSpec
                            {
                            pushFollow(FOLLOW_partitionSpec_in_showStatement5868);
                            partitionSpec331=partitionSpec();

                            state._fsp--;

                            stream_partitionSpec.add(partitionSpec331.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: partitionSpec, Identifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 933:55: -> ^( TOK_SHOWPARTITIONS Identifier ( partitionSpec )? )
                    {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:933:58: ^( TOK_SHOWPARTITIONS Identifier ( partitionSpec )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_SHOWPARTITIONS, "TOK_SHOWPARTITIONS")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_Identifier.nextNode()
                        );

                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:933:90: ( partitionSpec )?
                        if ( stream_partitionSpec.hasNext() ) {
                            adaptor.addChild(root_1, stream_partitionSpec.nextTree());

                        }
                        stream_partitionSpec.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 6 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:934:7: KW_SHOW KW_CREATE KW_TABLE tabName= tableName
                    {
                    KW_SHOW332=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement5888);  
                    stream_KW_SHOW.add(KW_SHOW332);


                    KW_CREATE333=(Token)match(input,KW_CREATE,FOLLOW_KW_CREATE_in_showStatement5890);  
                    stream_KW_CREATE.add(KW_CREATE333);


                    KW_TABLE334=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_showStatement5892);  
                    stream_KW_TABLE.add(KW_TABLE334);


                    pushFollow(FOLLOW_tableName_in_showStatement5896);
                    tabName=tableName();

                    state._fsp--;

                    stream_tableName.add(tabName.getTree());

                    // AST REWRITE
                    // elements: tabName
                    // token labels: 
                    // rule labels: retval, tabName
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_tabName=new RewriteRuleSubtreeStream(adaptor,"rule tabName",tabName!=null?tabName.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 934:52: -> ^( TOK_SHOW_CREATETABLE $tabName)
                    {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:934:55: ^( TOK_SHOW_CREATETABLE $tabName)
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_SHOW_CREATETABLE, "TOK_SHOW_CREATETABLE")
                        , root_1);

                        adaptor.addChild(root_1, stream_tabName.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 7 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:935:7: KW_SHOW KW_TABLE KW_EXTENDED ( ( KW_FROM | KW_IN ) db_name= Identifier )? KW_LIKE showStmtIdentifier ( partitionSpec )?
                    {
                    KW_SHOW335=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement5913);  
                    stream_KW_SHOW.add(KW_SHOW335);


                    KW_TABLE336=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_showStatement5915);  
                    stream_KW_TABLE.add(KW_TABLE336);


                    KW_EXTENDED337=(Token)match(input,KW_EXTENDED,FOLLOW_KW_EXTENDED_in_showStatement5917);  
                    stream_KW_EXTENDED.add(KW_EXTENDED337);


                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:935:36: ( ( KW_FROM | KW_IN ) db_name= Identifier )?
                    int alt100=2;
                    int LA100_0 = input.LA(1);

                    if ( (LA100_0==KW_FROM||LA100_0==KW_IN) ) {
                        alt100=1;
                    }
                    switch (alt100) {
                        case 1 :
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:935:37: ( KW_FROM | KW_IN ) db_name= Identifier
                            {
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:935:37: ( KW_FROM | KW_IN )
                            int alt99=2;
                            int LA99_0 = input.LA(1);

                            if ( (LA99_0==KW_FROM) ) {
                                alt99=1;
                            }
                            else if ( (LA99_0==KW_IN) ) {
                                alt99=2;
                            }
                            else {
                                NoViableAltException nvae =
                                    new NoViableAltException("", 99, 0, input);

                                throw nvae;

                            }
                            switch (alt99) {
                                case 1 :
                                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:935:38: KW_FROM
                                    {
                                    KW_FROM338=(Token)match(input,KW_FROM,FOLLOW_KW_FROM_in_showStatement5921);  
                                    stream_KW_FROM.add(KW_FROM338);


                                    }
                                    break;
                                case 2 :
                                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:935:46: KW_IN
                                    {
                                    KW_IN339=(Token)match(input,KW_IN,FOLLOW_KW_IN_in_showStatement5923);  
                                    stream_KW_IN.add(KW_IN339);


                                    }
                                    break;

                            }


                            db_name=(Token)match(input,Identifier,FOLLOW_Identifier_in_showStatement5928);  
                            stream_Identifier.add(db_name);


                            }
                            break;

                    }


                    KW_LIKE340=(Token)match(input,KW_LIKE,FOLLOW_KW_LIKE_in_showStatement5932);  
                    stream_KW_LIKE.add(KW_LIKE340);


                    pushFollow(FOLLOW_showStmtIdentifier_in_showStatement5934);
                    showStmtIdentifier341=showStmtIdentifier();

                    state._fsp--;

                    stream_showStmtIdentifier.add(showStmtIdentifier341.getTree());

                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:935:101: ( partitionSpec )?
                    int alt101=2;
                    int LA101_0 = input.LA(1);

                    if ( (LA101_0==KW_PARTITION) ) {
                        alt101=1;
                    }
                    switch (alt101) {
                        case 1 :
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:935:101: partitionSpec
                            {
                            pushFollow(FOLLOW_partitionSpec_in_showStatement5936);
                            partitionSpec342=partitionSpec();

                            state._fsp--;

                            stream_partitionSpec.add(partitionSpec342.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: db_name, partitionSpec, showStmtIdentifier
                    // token labels: db_name
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_db_name=new RewriteRuleTokenStream(adaptor,"token db_name",db_name);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 936:5: -> ^( TOK_SHOW_TABLESTATUS showStmtIdentifier ( $db_name)? ( partitionSpec )? )
                    {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:936:8: ^( TOK_SHOW_TABLESTATUS showStmtIdentifier ( $db_name)? ( partitionSpec )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_SHOW_TABLESTATUS, "TOK_SHOW_TABLESTATUS")
                        , root_1);

                        adaptor.addChild(root_1, stream_showStmtIdentifier.nextTree());

                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:936:51: ( $db_name)?
                        if ( stream_db_name.hasNext() ) {
                            adaptor.addChild(root_1, stream_db_name.nextNode());

                        }
                        stream_db_name.reset();

                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:936:60: ( partitionSpec )?
                        if ( stream_partitionSpec.hasNext() ) {
                            adaptor.addChild(root_1, stream_partitionSpec.nextTree());

                        }
                        stream_partitionSpec.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 8 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:937:7: KW_SHOW KW_TBLPROPERTIES tblName= Identifier ( LPAREN prptyName= StringLiteral RPAREN )?
                    {
                    KW_SHOW343=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement5964);  
                    stream_KW_SHOW.add(KW_SHOW343);


                    KW_TBLPROPERTIES344=(Token)match(input,KW_TBLPROPERTIES,FOLLOW_KW_TBLPROPERTIES_in_showStatement5966);  
                    stream_KW_TBLPROPERTIES.add(KW_TBLPROPERTIES344);


                    tblName=(Token)match(input,Identifier,FOLLOW_Identifier_in_showStatement5970);  
                    stream_Identifier.add(tblName);


                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:937:51: ( LPAREN prptyName= StringLiteral RPAREN )?
                    int alt102=2;
                    int LA102_0 = input.LA(1);

                    if ( (LA102_0==LPAREN) ) {
                        alt102=1;
                    }
                    switch (alt102) {
                        case 1 :
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:937:52: LPAREN prptyName= StringLiteral RPAREN
                            {
                            LPAREN345=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_showStatement5973);  
                            stream_LPAREN.add(LPAREN345);


                            prptyName=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_showStatement5977);  
                            stream_StringLiteral.add(prptyName);


                            RPAREN346=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_showStatement5979);  
                            stream_RPAREN.add(RPAREN346);


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: prptyName, tblName
                    // token labels: prptyName, tblName
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_prptyName=new RewriteRuleTokenStream(adaptor,"token prptyName",prptyName);
                    RewriteRuleTokenStream stream_tblName=new RewriteRuleTokenStream(adaptor,"token tblName",tblName);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 937:92: -> ^( TOK_SHOW_TBLPROPERTIES $tblName ( $prptyName)? )
                    {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:937:95: ^( TOK_SHOW_TBLPROPERTIES $tblName ( $prptyName)? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_SHOW_TBLPROPERTIES, "TOK_SHOW_TBLPROPERTIES")
                        , root_1);

                        adaptor.addChild(root_1, stream_tblName.nextNode());

                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:937:130: ( $prptyName)?
                        if ( stream_prptyName.hasNext() ) {
                            adaptor.addChild(root_1, stream_prptyName.nextNode());

                        }
                        stream_prptyName.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 9 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:938:7: KW_SHOW KW_LOCKS (parttype= partTypeExpr )? (isExtended= KW_EXTENDED )?
                    {
                    KW_SHOW347=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement6002);  
                    stream_KW_SHOW.add(KW_SHOW347);


                    KW_LOCKS348=(Token)match(input,KW_LOCKS,FOLLOW_KW_LOCKS_in_showStatement6004);  
                    stream_KW_LOCKS.add(KW_LOCKS348);


                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:938:24: (parttype= partTypeExpr )?
                    int alt103=2;
                    int LA103_0 = input.LA(1);

                    if ( (LA103_0==Identifier) ) {
                        alt103=1;
                    }
                    switch (alt103) {
                        case 1 :
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:938:25: parttype= partTypeExpr
                            {
                            pushFollow(FOLLOW_partTypeExpr_in_showStatement6009);
                            parttype=partTypeExpr();

                            state._fsp--;

                            stream_partTypeExpr.add(parttype.getTree());

                            }
                            break;

                    }


                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:938:49: (isExtended= KW_EXTENDED )?
                    int alt104=2;
                    int LA104_0 = input.LA(1);

                    if ( (LA104_0==KW_EXTENDED) ) {
                        alt104=1;
                    }
                    switch (alt104) {
                        case 1 :
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:938:50: isExtended= KW_EXTENDED
                            {
                            isExtended=(Token)match(input,KW_EXTENDED,FOLLOW_KW_EXTENDED_in_showStatement6016);  
                            stream_KW_EXTENDED.add(isExtended);


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: isExtended, parttype
                    // token labels: isExtended
                    // rule labels: retval, parttype
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_isExtended=new RewriteRuleTokenStream(adaptor,"token isExtended",isExtended);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_parttype=new RewriteRuleSubtreeStream(adaptor,"rule parttype",parttype!=null?parttype.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 938:75: -> ^( TOK_SHOWLOCKS ( $parttype)? ( $isExtended)? )
                    {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:938:78: ^( TOK_SHOWLOCKS ( $parttype)? ( $isExtended)? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_SHOWLOCKS, "TOK_SHOWLOCKS")
                        , root_1);

                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:938:95: ( $parttype)?
                        if ( stream_parttype.hasNext() ) {
                            adaptor.addChild(root_1, stream_parttype.nextTree());

                        }
                        stream_parttype.reset();

                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:938:106: ( $isExtended)?
                        if ( stream_isExtended.hasNext() ) {
                            adaptor.addChild(root_1, stream_isExtended.nextNode());

                        }
                        stream_isExtended.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 10 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:939:7: KW_SHOW (showOptions= KW_FORMATTED )? ( KW_INDEX | KW_INDEXES ) KW_ON showStmtIdentifier ( ( KW_FROM | KW_IN ) db_name= Identifier )?
                    {
                    KW_SHOW349=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement6040);  
                    stream_KW_SHOW.add(KW_SHOW349);


                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:939:15: (showOptions= KW_FORMATTED )?
                    int alt105=2;
                    int LA105_0 = input.LA(1);

                    if ( (LA105_0==KW_FORMATTED) ) {
                        alt105=1;
                    }
                    switch (alt105) {
                        case 1 :
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:939:16: showOptions= KW_FORMATTED
                            {
                            showOptions=(Token)match(input,KW_FORMATTED,FOLLOW_KW_FORMATTED_in_showStatement6045);  
                            stream_KW_FORMATTED.add(showOptions);


                            }
                            break;

                    }


                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:939:43: ( KW_INDEX | KW_INDEXES )
                    int alt106=2;
                    int LA106_0 = input.LA(1);

                    if ( (LA106_0==KW_INDEX) ) {
                        alt106=1;
                    }
                    else if ( (LA106_0==KW_INDEXES) ) {
                        alt106=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("", 106, 0, input);

                        throw nvae;

                    }
                    switch (alt106) {
                        case 1 :
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:939:44: KW_INDEX
                            {
                            KW_INDEX350=(Token)match(input,KW_INDEX,FOLLOW_KW_INDEX_in_showStatement6050);  
                            stream_KW_INDEX.add(KW_INDEX350);


                            }
                            break;
                        case 2 :
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:939:53: KW_INDEXES
                            {
                            KW_INDEXES351=(Token)match(input,KW_INDEXES,FOLLOW_KW_INDEXES_in_showStatement6052);  
                            stream_KW_INDEXES.add(KW_INDEXES351);


                            }
                            break;

                    }


                    KW_ON352=(Token)match(input,KW_ON,FOLLOW_KW_ON_in_showStatement6055);  
                    stream_KW_ON.add(KW_ON352);


                    pushFollow(FOLLOW_showStmtIdentifier_in_showStatement6057);
                    showStmtIdentifier353=showStmtIdentifier();

                    state._fsp--;

                    stream_showStmtIdentifier.add(showStmtIdentifier353.getTree());

                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:939:90: ( ( KW_FROM | KW_IN ) db_name= Identifier )?
                    int alt108=2;
                    int LA108_0 = input.LA(1);

                    if ( (LA108_0==KW_FROM||LA108_0==KW_IN) ) {
                        alt108=1;
                    }
                    switch (alt108) {
                        case 1 :
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:939:91: ( KW_FROM | KW_IN ) db_name= Identifier
                            {
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:939:91: ( KW_FROM | KW_IN )
                            int alt107=2;
                            int LA107_0 = input.LA(1);

                            if ( (LA107_0==KW_FROM) ) {
                                alt107=1;
                            }
                            else if ( (LA107_0==KW_IN) ) {
                                alt107=2;
                            }
                            else {
                                NoViableAltException nvae =
                                    new NoViableAltException("", 107, 0, input);

                                throw nvae;

                            }
                            switch (alt107) {
                                case 1 :
                                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:939:92: KW_FROM
                                    {
                                    KW_FROM354=(Token)match(input,KW_FROM,FOLLOW_KW_FROM_in_showStatement6061);  
                                    stream_KW_FROM.add(KW_FROM354);


                                    }
                                    break;
                                case 2 :
                                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:939:100: KW_IN
                                    {
                                    KW_IN355=(Token)match(input,KW_IN,FOLLOW_KW_IN_in_showStatement6063);  
                                    stream_KW_IN.add(KW_IN355);


                                    }
                                    break;

                            }


                            db_name=(Token)match(input,Identifier,FOLLOW_Identifier_in_showStatement6068);  
                            stream_Identifier.add(db_name);


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: showOptions, db_name, showStmtIdentifier
                    // token labels: showOptions, db_name
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_showOptions=new RewriteRuleTokenStream(adaptor,"token showOptions",showOptions);
                    RewriteRuleTokenStream stream_db_name=new RewriteRuleTokenStream(adaptor,"token db_name",db_name);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 940:5: -> ^( TOK_SHOWINDEXES showStmtIdentifier ( $showOptions)? ( $db_name)? )
                    {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:940:8: ^( TOK_SHOWINDEXES showStmtIdentifier ( $showOptions)? ( $db_name)? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_SHOWINDEXES, "TOK_SHOWINDEXES")
                        , root_1);

                        adaptor.addChild(root_1, stream_showStmtIdentifier.nextTree());

                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:940:46: ( $showOptions)?
                        if ( stream_showOptions.hasNext() ) {
                            adaptor.addChild(root_1, stream_showOptions.nextNode());

                        }
                        stream_showOptions.reset();

                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:940:60: ( $db_name)?
                        if ( stream_db_name.hasNext() ) {
                            adaptor.addChild(root_1, stream_db_name.nextNode());

                        }
                        stream_db_name.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "showStatement"


    public static class lockStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "lockStatement"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:943:1: lockStatement : KW_LOCK KW_TABLE tableName ( partitionSpec )? lockMode -> ^( TOK_LOCKTABLE tableName lockMode ( partitionSpec )? ) ;
    public final HiveParser.lockStatement_return lockStatement() throws RecognitionException {
        HiveParser.lockStatement_return retval = new HiveParser.lockStatement_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_LOCK356=null;
        Token KW_TABLE357=null;
        HiveParser.tableName_return tableName358 =null;

        HiveParser.partitionSpec_return partitionSpec359 =null;

        HiveParser.lockMode_return lockMode360 =null;


        CommonTree KW_LOCK356_tree=null;
        CommonTree KW_TABLE357_tree=null;
        RewriteRuleTokenStream stream_KW_LOCK=new RewriteRuleTokenStream(adaptor,"token KW_LOCK");
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
        RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
        RewriteRuleSubtreeStream stream_lockMode=new RewriteRuleSubtreeStream(adaptor,"rule lockMode");
         msgs.push("lock statement"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:946:5: ( KW_LOCK KW_TABLE tableName ( partitionSpec )? lockMode -> ^( TOK_LOCKTABLE tableName lockMode ( partitionSpec )? ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:946:7: KW_LOCK KW_TABLE tableName ( partitionSpec )? lockMode
            {
            KW_LOCK356=(Token)match(input,KW_LOCK,FOLLOW_KW_LOCK_in_lockStatement6117);  
            stream_KW_LOCK.add(KW_LOCK356);


            KW_TABLE357=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_lockStatement6119);  
            stream_KW_TABLE.add(KW_TABLE357);


            pushFollow(FOLLOW_tableName_in_lockStatement6121);
            tableName358=tableName();

            state._fsp--;

            stream_tableName.add(tableName358.getTree());

            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:946:34: ( partitionSpec )?
            int alt110=2;
            int LA110_0 = input.LA(1);

            if ( (LA110_0==KW_PARTITION) ) {
                alt110=1;
            }
            switch (alt110) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:946:34: partitionSpec
                    {
                    pushFollow(FOLLOW_partitionSpec_in_lockStatement6123);
                    partitionSpec359=partitionSpec();

                    state._fsp--;

                    stream_partitionSpec.add(partitionSpec359.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_lockMode_in_lockStatement6126);
            lockMode360=lockMode();

            state._fsp--;

            stream_lockMode.add(lockMode360.getTree());

            // AST REWRITE
            // elements: tableName, lockMode, partitionSpec
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 946:58: -> ^( TOK_LOCKTABLE tableName lockMode ( partitionSpec )? )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:946:61: ^( TOK_LOCKTABLE tableName lockMode ( partitionSpec )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_LOCKTABLE, "TOK_LOCKTABLE")
                , root_1);

                adaptor.addChild(root_1, stream_tableName.nextTree());

                adaptor.addChild(root_1, stream_lockMode.nextTree());

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:946:96: ( partitionSpec )?
                if ( stream_partitionSpec.hasNext() ) {
                    adaptor.addChild(root_1, stream_partitionSpec.nextTree());

                }
                stream_partitionSpec.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "lockStatement"


    public static class lockMode_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "lockMode"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:949:1: lockMode : ( KW_SHARED | KW_EXCLUSIVE );
    public final HiveParser.lockMode_return lockMode() throws RecognitionException {
        HiveParser.lockMode_return retval = new HiveParser.lockMode_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token set361=null;

        CommonTree set361_tree=null;

         msgs.push("lock mode"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:952:5: ( KW_SHARED | KW_EXCLUSIVE )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:
            {
            root_0 = (CommonTree)adaptor.nil();


            set361=(Token)input.LT(1);

            if ( input.LA(1)==KW_EXCLUSIVE||input.LA(1)==KW_SHARED ) {
                input.consume();
                adaptor.addChild(root_0, 
                (CommonTree)adaptor.create(set361)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "lockMode"


    public static class unlockStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "unlockStatement"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:955:1: unlockStatement : KW_UNLOCK KW_TABLE tableName ( partitionSpec )? -> ^( TOK_UNLOCKTABLE tableName ( partitionSpec )? ) ;
    public final HiveParser.unlockStatement_return unlockStatement() throws RecognitionException {
        HiveParser.unlockStatement_return retval = new HiveParser.unlockStatement_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_UNLOCK362=null;
        Token KW_TABLE363=null;
        HiveParser.tableName_return tableName364 =null;

        HiveParser.partitionSpec_return partitionSpec365 =null;


        CommonTree KW_UNLOCK362_tree=null;
        CommonTree KW_TABLE363_tree=null;
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleTokenStream stream_KW_UNLOCK=new RewriteRuleTokenStream(adaptor,"token KW_UNLOCK");
        RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
        RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
         msgs.push("unlock statement"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:958:5: ( KW_UNLOCK KW_TABLE tableName ( partitionSpec )? -> ^( TOK_UNLOCKTABLE tableName ( partitionSpec )? ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:958:7: KW_UNLOCK KW_TABLE tableName ( partitionSpec )?
            {
            KW_UNLOCK362=(Token)match(input,KW_UNLOCK,FOLLOW_KW_UNLOCK_in_unlockStatement6197);  
            stream_KW_UNLOCK.add(KW_UNLOCK362);


            KW_TABLE363=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_unlockStatement6199);  
            stream_KW_TABLE.add(KW_TABLE363);


            pushFollow(FOLLOW_tableName_in_unlockStatement6201);
            tableName364=tableName();

            state._fsp--;

            stream_tableName.add(tableName364.getTree());

            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:958:36: ( partitionSpec )?
            int alt111=2;
            int LA111_0 = input.LA(1);

            if ( (LA111_0==KW_PARTITION) ) {
                alt111=1;
            }
            switch (alt111) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:958:36: partitionSpec
                    {
                    pushFollow(FOLLOW_partitionSpec_in_unlockStatement6203);
                    partitionSpec365=partitionSpec();

                    state._fsp--;

                    stream_partitionSpec.add(partitionSpec365.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: partitionSpec, tableName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 958:52: -> ^( TOK_UNLOCKTABLE tableName ( partitionSpec )? )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:958:55: ^( TOK_UNLOCKTABLE tableName ( partitionSpec )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_UNLOCKTABLE, "TOK_UNLOCKTABLE")
                , root_1);

                adaptor.addChild(root_1, stream_tableName.nextTree());

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:958:83: ( partitionSpec )?
                if ( stream_partitionSpec.hasNext() ) {
                    adaptor.addChild(root_1, stream_partitionSpec.nextTree());

                }
                stream_partitionSpec.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "unlockStatement"


    public static class createRoleStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "createRoleStatement"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:961:1: createRoleStatement : KW_CREATE kwRole roleName= Identifier -> ^( TOK_CREATEROLE $roleName) ;
    public final HiveParser.createRoleStatement_return createRoleStatement() throws RecognitionException {
        HiveParser.createRoleStatement_return retval = new HiveParser.createRoleStatement_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token roleName=null;
        Token KW_CREATE366=null;
        HiveParser.kwRole_return kwRole367 =null;


        CommonTree roleName_tree=null;
        CommonTree KW_CREATE366_tree=null;
        RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_kwRole=new RewriteRuleSubtreeStream(adaptor,"rule kwRole");
         msgs.push("create role"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:964:5: ( KW_CREATE kwRole roleName= Identifier -> ^( TOK_CREATEROLE $roleName) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:964:7: KW_CREATE kwRole roleName= Identifier
            {
            KW_CREATE366=(Token)match(input,KW_CREATE,FOLLOW_KW_CREATE_in_createRoleStatement6243);  
            stream_KW_CREATE.add(KW_CREATE366);


            pushFollow(FOLLOW_kwRole_in_createRoleStatement6245);
            kwRole367=kwRole();

            state._fsp--;

            stream_kwRole.add(kwRole367.getTree());

            roleName=(Token)match(input,Identifier,FOLLOW_Identifier_in_createRoleStatement6249);  
            stream_Identifier.add(roleName);


            // AST REWRITE
            // elements: roleName
            // token labels: roleName
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_roleName=new RewriteRuleTokenStream(adaptor,"token roleName",roleName);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 965:5: -> ^( TOK_CREATEROLE $roleName)
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:965:8: ^( TOK_CREATEROLE $roleName)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_CREATEROLE, "TOK_CREATEROLE")
                , root_1);

                adaptor.addChild(root_1, stream_roleName.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "createRoleStatement"


    public static class dropRoleStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "dropRoleStatement"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:968:1: dropRoleStatement : KW_DROP kwRole roleName= Identifier -> ^( TOK_DROPROLE $roleName) ;
    public final HiveParser.dropRoleStatement_return dropRoleStatement() throws RecognitionException {
        HiveParser.dropRoleStatement_return retval = new HiveParser.dropRoleStatement_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token roleName=null;
        Token KW_DROP368=null;
        HiveParser.kwRole_return kwRole369 =null;


        CommonTree roleName_tree=null;
        CommonTree KW_DROP368_tree=null;
        RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_kwRole=new RewriteRuleSubtreeStream(adaptor,"rule kwRole");
        msgs.push("drop role");
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:971:5: ( KW_DROP kwRole roleName= Identifier -> ^( TOK_DROPROLE $roleName) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:971:7: KW_DROP kwRole roleName= Identifier
            {
            KW_DROP368=(Token)match(input,KW_DROP,FOLLOW_KW_DROP_in_dropRoleStatement6289);  
            stream_KW_DROP.add(KW_DROP368);


            pushFollow(FOLLOW_kwRole_in_dropRoleStatement6291);
            kwRole369=kwRole();

            state._fsp--;

            stream_kwRole.add(kwRole369.getTree());

            roleName=(Token)match(input,Identifier,FOLLOW_Identifier_in_dropRoleStatement6295);  
            stream_Identifier.add(roleName);


            // AST REWRITE
            // elements: roleName
            // token labels: roleName
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_roleName=new RewriteRuleTokenStream(adaptor,"token roleName",roleName);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 972:5: -> ^( TOK_DROPROLE $roleName)
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:972:8: ^( TOK_DROPROLE $roleName)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_DROPROLE, "TOK_DROPROLE")
                , root_1);

                adaptor.addChild(root_1, stream_roleName.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop();
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "dropRoleStatement"


    public static class grantPrivileges_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "grantPrivileges"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:975:1: grantPrivileges : KW_GRANT privList= privilegeList ( privilegeObject )? KW_TO principalSpecification ( KW_WITH withOption )? -> ^( TOK_GRANT $privList principalSpecification ( privilegeObject )? ( withOption )? ) ;
    public final HiveParser.grantPrivileges_return grantPrivileges() throws RecognitionException {
        HiveParser.grantPrivileges_return retval = new HiveParser.grantPrivileges_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_GRANT370=null;
        Token KW_TO372=null;
        Token KW_WITH374=null;
        HiveParser.privilegeList_return privList =null;

        HiveParser.privilegeObject_return privilegeObject371 =null;

        HiveParser.principalSpecification_return principalSpecification373 =null;

        HiveParser.withOption_return withOption375 =null;


        CommonTree KW_GRANT370_tree=null;
        CommonTree KW_TO372_tree=null;
        CommonTree KW_WITH374_tree=null;
        RewriteRuleTokenStream stream_KW_GRANT=new RewriteRuleTokenStream(adaptor,"token KW_GRANT");
        RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");
        RewriteRuleTokenStream stream_KW_TO=new RewriteRuleTokenStream(adaptor,"token KW_TO");
        RewriteRuleSubtreeStream stream_privilegeList=new RewriteRuleSubtreeStream(adaptor,"rule privilegeList");
        RewriteRuleSubtreeStream stream_privilegeObject=new RewriteRuleSubtreeStream(adaptor,"rule privilegeObject");
        RewriteRuleSubtreeStream stream_principalSpecification=new RewriteRuleSubtreeStream(adaptor,"rule principalSpecification");
        RewriteRuleSubtreeStream stream_withOption=new RewriteRuleSubtreeStream(adaptor,"rule withOption");
        msgs.push("grant privileges");
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:978:5: ( KW_GRANT privList= privilegeList ( privilegeObject )? KW_TO principalSpecification ( KW_WITH withOption )? -> ^( TOK_GRANT $privList principalSpecification ( privilegeObject )? ( withOption )? ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:978:7: KW_GRANT privList= privilegeList ( privilegeObject )? KW_TO principalSpecification ( KW_WITH withOption )?
            {
            KW_GRANT370=(Token)match(input,KW_GRANT,FOLLOW_KW_GRANT_in_grantPrivileges6335);  
            stream_KW_GRANT.add(KW_GRANT370);


            pushFollow(FOLLOW_privilegeList_in_grantPrivileges6339);
            privList=privilegeList();

            state._fsp--;

            stream_privilegeList.add(privList.getTree());

            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:979:7: ( privilegeObject )?
            int alt112=2;
            int LA112_0 = input.LA(1);

            if ( (LA112_0==KW_ON) ) {
                alt112=1;
            }
            switch (alt112) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:979:7: privilegeObject
                    {
                    pushFollow(FOLLOW_privilegeObject_in_grantPrivileges6347);
                    privilegeObject371=privilegeObject();

                    state._fsp--;

                    stream_privilegeObject.add(privilegeObject371.getTree());

                    }
                    break;

            }


            KW_TO372=(Token)match(input,KW_TO,FOLLOW_KW_TO_in_grantPrivileges6356);  
            stream_KW_TO.add(KW_TO372);


            pushFollow(FOLLOW_principalSpecification_in_grantPrivileges6358);
            principalSpecification373=principalSpecification();

            state._fsp--;

            stream_principalSpecification.add(principalSpecification373.getTree());

            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:981:7: ( KW_WITH withOption )?
            int alt113=2;
            int LA113_0 = input.LA(1);

            if ( (LA113_0==KW_WITH) ) {
                alt113=1;
            }
            switch (alt113) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:981:8: KW_WITH withOption
                    {
                    KW_WITH374=(Token)match(input,KW_WITH,FOLLOW_KW_WITH_in_grantPrivileges6367);  
                    stream_KW_WITH.add(KW_WITH374);


                    pushFollow(FOLLOW_withOption_in_grantPrivileges6369);
                    withOption375=withOption();

                    state._fsp--;

                    stream_withOption.add(withOption375.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: privList, privilegeObject, withOption, principalSpecification
            // token labels: 
            // rule labels: retval, privList
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_privList=new RewriteRuleSubtreeStream(adaptor,"rule privList",privList!=null?privList.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 982:5: -> ^( TOK_GRANT $privList principalSpecification ( privilegeObject )? ( withOption )? )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:982:8: ^( TOK_GRANT $privList principalSpecification ( privilegeObject )? ( withOption )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_GRANT, "TOK_GRANT")
                , root_1);

                adaptor.addChild(root_1, stream_privList.nextTree());

                adaptor.addChild(root_1, stream_principalSpecification.nextTree());

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:982:53: ( privilegeObject )?
                if ( stream_privilegeObject.hasNext() ) {
                    adaptor.addChild(root_1, stream_privilegeObject.nextTree());

                }
                stream_privilegeObject.reset();

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:982:70: ( withOption )?
                if ( stream_withOption.hasNext() ) {
                    adaptor.addChild(root_1, stream_withOption.nextTree());

                }
                stream_withOption.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop();
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "grantPrivileges"


    public static class revokePrivileges_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "revokePrivileges"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:985:1: revokePrivileges : KW_REVOKE privilegeList ( privilegeObject )? KW_FROM principalSpecification -> ^( TOK_REVOKE privilegeList principalSpecification ( privilegeObject )? ) ;
    public final HiveParser.revokePrivileges_return revokePrivileges() throws RecognitionException {
        HiveParser.revokePrivileges_return retval = new HiveParser.revokePrivileges_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_REVOKE376=null;
        Token KW_FROM379=null;
        HiveParser.privilegeList_return privilegeList377 =null;

        HiveParser.privilegeObject_return privilegeObject378 =null;

        HiveParser.principalSpecification_return principalSpecification380 =null;


        CommonTree KW_REVOKE376_tree=null;
        CommonTree KW_FROM379_tree=null;
        RewriteRuleTokenStream stream_KW_REVOKE=new RewriteRuleTokenStream(adaptor,"token KW_REVOKE");
        RewriteRuleTokenStream stream_KW_FROM=new RewriteRuleTokenStream(adaptor,"token KW_FROM");
        RewriteRuleSubtreeStream stream_privilegeList=new RewriteRuleSubtreeStream(adaptor,"rule privilegeList");
        RewriteRuleSubtreeStream stream_privilegeObject=new RewriteRuleSubtreeStream(adaptor,"rule privilegeObject");
        RewriteRuleSubtreeStream stream_principalSpecification=new RewriteRuleSubtreeStream(adaptor,"rule principalSpecification");
        msgs.push("revoke privileges");
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:988:5: ( KW_REVOKE privilegeList ( privilegeObject )? KW_FROM principalSpecification -> ^( TOK_REVOKE privilegeList principalSpecification ( privilegeObject )? ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:988:7: KW_REVOKE privilegeList ( privilegeObject )? KW_FROM principalSpecification
            {
            KW_REVOKE376=(Token)match(input,KW_REVOKE,FOLLOW_KW_REVOKE_in_revokePrivileges6419);  
            stream_KW_REVOKE.add(KW_REVOKE376);


            pushFollow(FOLLOW_privilegeList_in_revokePrivileges6421);
            privilegeList377=privilegeList();

            state._fsp--;

            stream_privilegeList.add(privilegeList377.getTree());

            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:988:31: ( privilegeObject )?
            int alt114=2;
            int LA114_0 = input.LA(1);

            if ( (LA114_0==KW_ON) ) {
                alt114=1;
            }
            switch (alt114) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:988:31: privilegeObject
                    {
                    pushFollow(FOLLOW_privilegeObject_in_revokePrivileges6423);
                    privilegeObject378=privilegeObject();

                    state._fsp--;

                    stream_privilegeObject.add(privilegeObject378.getTree());

                    }
                    break;

            }


            KW_FROM379=(Token)match(input,KW_FROM,FOLLOW_KW_FROM_in_revokePrivileges6426);  
            stream_KW_FROM.add(KW_FROM379);


            pushFollow(FOLLOW_principalSpecification_in_revokePrivileges6428);
            principalSpecification380=principalSpecification();

            state._fsp--;

            stream_principalSpecification.add(principalSpecification380.getTree());

            // AST REWRITE
            // elements: privilegeObject, principalSpecification, privilegeList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 989:5: -> ^( TOK_REVOKE privilegeList principalSpecification ( privilegeObject )? )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:989:8: ^( TOK_REVOKE privilegeList principalSpecification ( privilegeObject )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_REVOKE, "TOK_REVOKE")
                , root_1);

                adaptor.addChild(root_1, stream_privilegeList.nextTree());

                adaptor.addChild(root_1, stream_principalSpecification.nextTree());

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:989:58: ( privilegeObject )?
                if ( stream_privilegeObject.hasNext() ) {
                    adaptor.addChild(root_1, stream_privilegeObject.nextTree());

                }
                stream_privilegeObject.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "revokePrivileges"


    public static class grantRole_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "grantRole"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:992:1: grantRole : KW_GRANT kwRole Identifier ( COMMA Identifier )* KW_TO principalSpecification -> ^( TOK_GRANT_ROLE principalSpecification ( Identifier )+ ) ;
    public final HiveParser.grantRole_return grantRole() throws RecognitionException {
        HiveParser.grantRole_return retval = new HiveParser.grantRole_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_GRANT381=null;
        Token Identifier383=null;
        Token COMMA384=null;
        Token Identifier385=null;
        Token KW_TO386=null;
        HiveParser.kwRole_return kwRole382 =null;

        HiveParser.principalSpecification_return principalSpecification387 =null;


        CommonTree KW_GRANT381_tree=null;
        CommonTree Identifier383_tree=null;
        CommonTree COMMA384_tree=null;
        CommonTree Identifier385_tree=null;
        CommonTree KW_TO386_tree=null;
        RewriteRuleTokenStream stream_KW_GRANT=new RewriteRuleTokenStream(adaptor,"token KW_GRANT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_KW_TO=new RewriteRuleTokenStream(adaptor,"token KW_TO");
        RewriteRuleSubtreeStream stream_kwRole=new RewriteRuleSubtreeStream(adaptor,"rule kwRole");
        RewriteRuleSubtreeStream stream_principalSpecification=new RewriteRuleSubtreeStream(adaptor,"rule principalSpecification");
        msgs.push("grant role");
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:995:5: ( KW_GRANT kwRole Identifier ( COMMA Identifier )* KW_TO principalSpecification -> ^( TOK_GRANT_ROLE principalSpecification ( Identifier )+ ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:995:7: KW_GRANT kwRole Identifier ( COMMA Identifier )* KW_TO principalSpecification
            {
            KW_GRANT381=(Token)match(input,KW_GRANT,FOLLOW_KW_GRANT_in_grantRole6472);  
            stream_KW_GRANT.add(KW_GRANT381);


            pushFollow(FOLLOW_kwRole_in_grantRole6474);
            kwRole382=kwRole();

            state._fsp--;

            stream_kwRole.add(kwRole382.getTree());

            Identifier383=(Token)match(input,Identifier,FOLLOW_Identifier_in_grantRole6476);  
            stream_Identifier.add(Identifier383);


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:995:34: ( COMMA Identifier )*
            loop115:
            do {
                int alt115=2;
                int LA115_0 = input.LA(1);

                if ( (LA115_0==COMMA) ) {
                    alt115=1;
                }


                switch (alt115) {
            	case 1 :
            	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:995:35: COMMA Identifier
            	    {
            	    COMMA384=(Token)match(input,COMMA,FOLLOW_COMMA_in_grantRole6479);  
            	    stream_COMMA.add(COMMA384);


            	    Identifier385=(Token)match(input,Identifier,FOLLOW_Identifier_in_grantRole6481);  
            	    stream_Identifier.add(Identifier385);


            	    }
            	    break;

            	default :
            	    break loop115;
                }
            } while (true);


            KW_TO386=(Token)match(input,KW_TO,FOLLOW_KW_TO_in_grantRole6485);  
            stream_KW_TO.add(KW_TO386);


            pushFollow(FOLLOW_principalSpecification_in_grantRole6487);
            principalSpecification387=principalSpecification();

            state._fsp--;

            stream_principalSpecification.add(principalSpecification387.getTree());

            // AST REWRITE
            // elements: Identifier, principalSpecification
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 996:5: -> ^( TOK_GRANT_ROLE principalSpecification ( Identifier )+ )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:996:8: ^( TOK_GRANT_ROLE principalSpecification ( Identifier )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_GRANT_ROLE, "TOK_GRANT_ROLE")
                , root_1);

                adaptor.addChild(root_1, stream_principalSpecification.nextTree());

                if ( !(stream_Identifier.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_Identifier.hasNext() ) {
                    adaptor.addChild(root_1, 
                    stream_Identifier.nextNode()
                    );

                }
                stream_Identifier.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop();
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "grantRole"


    public static class revokeRole_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "revokeRole"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:999:1: revokeRole : KW_REVOKE kwRole Identifier ( COMMA Identifier )* KW_FROM principalSpecification -> ^( TOK_REVOKE_ROLE principalSpecification ( Identifier )+ ) ;
    public final HiveParser.revokeRole_return revokeRole() throws RecognitionException {
        HiveParser.revokeRole_return retval = new HiveParser.revokeRole_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_REVOKE388=null;
        Token Identifier390=null;
        Token COMMA391=null;
        Token Identifier392=null;
        Token KW_FROM393=null;
        HiveParser.kwRole_return kwRole389 =null;

        HiveParser.principalSpecification_return principalSpecification394 =null;


        CommonTree KW_REVOKE388_tree=null;
        CommonTree Identifier390_tree=null;
        CommonTree COMMA391_tree=null;
        CommonTree Identifier392_tree=null;
        CommonTree KW_FROM393_tree=null;
        RewriteRuleTokenStream stream_KW_REVOKE=new RewriteRuleTokenStream(adaptor,"token KW_REVOKE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_KW_FROM=new RewriteRuleTokenStream(adaptor,"token KW_FROM");
        RewriteRuleSubtreeStream stream_kwRole=new RewriteRuleSubtreeStream(adaptor,"rule kwRole");
        RewriteRuleSubtreeStream stream_principalSpecification=new RewriteRuleSubtreeStream(adaptor,"rule principalSpecification");
        msgs.push("revoke role");
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1002:5: ( KW_REVOKE kwRole Identifier ( COMMA Identifier )* KW_FROM principalSpecification -> ^( TOK_REVOKE_ROLE principalSpecification ( Identifier )+ ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1002:7: KW_REVOKE kwRole Identifier ( COMMA Identifier )* KW_FROM principalSpecification
            {
            KW_REVOKE388=(Token)match(input,KW_REVOKE,FOLLOW_KW_REVOKE_in_revokeRole6529);  
            stream_KW_REVOKE.add(KW_REVOKE388);


            pushFollow(FOLLOW_kwRole_in_revokeRole6531);
            kwRole389=kwRole();

            state._fsp--;

            stream_kwRole.add(kwRole389.getTree());

            Identifier390=(Token)match(input,Identifier,FOLLOW_Identifier_in_revokeRole6533);  
            stream_Identifier.add(Identifier390);


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1002:35: ( COMMA Identifier )*
            loop116:
            do {
                int alt116=2;
                int LA116_0 = input.LA(1);

                if ( (LA116_0==COMMA) ) {
                    alt116=1;
                }


                switch (alt116) {
            	case 1 :
            	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1002:36: COMMA Identifier
            	    {
            	    COMMA391=(Token)match(input,COMMA,FOLLOW_COMMA_in_revokeRole6536);  
            	    stream_COMMA.add(COMMA391);


            	    Identifier392=(Token)match(input,Identifier,FOLLOW_Identifier_in_revokeRole6538);  
            	    stream_Identifier.add(Identifier392);


            	    }
            	    break;

            	default :
            	    break loop116;
                }
            } while (true);


            KW_FROM393=(Token)match(input,KW_FROM,FOLLOW_KW_FROM_in_revokeRole6542);  
            stream_KW_FROM.add(KW_FROM393);


            pushFollow(FOLLOW_principalSpecification_in_revokeRole6544);
            principalSpecification394=principalSpecification();

            state._fsp--;

            stream_principalSpecification.add(principalSpecification394.getTree());

            // AST REWRITE
            // elements: Identifier, principalSpecification
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1003:5: -> ^( TOK_REVOKE_ROLE principalSpecification ( Identifier )+ )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1003:8: ^( TOK_REVOKE_ROLE principalSpecification ( Identifier )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_REVOKE_ROLE, "TOK_REVOKE_ROLE")
                , root_1);

                adaptor.addChild(root_1, stream_principalSpecification.nextTree());

                if ( !(stream_Identifier.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_Identifier.hasNext() ) {
                    adaptor.addChild(root_1, 
                    stream_Identifier.nextNode()
                    );

                }
                stream_Identifier.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop();
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "revokeRole"


    public static class showRoleGrants_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "showRoleGrants"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1006:1: showRoleGrants : KW_SHOW kwRole KW_GRANT principalName -> ^( TOK_SHOW_ROLE_GRANT principalName ) ;
    public final HiveParser.showRoleGrants_return showRoleGrants() throws RecognitionException {
        HiveParser.showRoleGrants_return retval = new HiveParser.showRoleGrants_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_SHOW395=null;
        Token KW_GRANT397=null;
        HiveParser.kwRole_return kwRole396 =null;

        HiveParser.principalName_return principalName398 =null;


        CommonTree KW_SHOW395_tree=null;
        CommonTree KW_GRANT397_tree=null;
        RewriteRuleTokenStream stream_KW_SHOW=new RewriteRuleTokenStream(adaptor,"token KW_SHOW");
        RewriteRuleTokenStream stream_KW_GRANT=new RewriteRuleTokenStream(adaptor,"token KW_GRANT");
        RewriteRuleSubtreeStream stream_kwRole=new RewriteRuleSubtreeStream(adaptor,"rule kwRole");
        RewriteRuleSubtreeStream stream_principalName=new RewriteRuleSubtreeStream(adaptor,"rule principalName");
        msgs.push("show role grants");
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1009:5: ( KW_SHOW kwRole KW_GRANT principalName -> ^( TOK_SHOW_ROLE_GRANT principalName ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1009:7: KW_SHOW kwRole KW_GRANT principalName
            {
            KW_SHOW395=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showRoleGrants6586);  
            stream_KW_SHOW.add(KW_SHOW395);


            pushFollow(FOLLOW_kwRole_in_showRoleGrants6588);
            kwRole396=kwRole();

            state._fsp--;

            stream_kwRole.add(kwRole396.getTree());

            KW_GRANT397=(Token)match(input,KW_GRANT,FOLLOW_KW_GRANT_in_showRoleGrants6590);  
            stream_KW_GRANT.add(KW_GRANT397);


            pushFollow(FOLLOW_principalName_in_showRoleGrants6592);
            principalName398=principalName();

            state._fsp--;

            stream_principalName.add(principalName398.getTree());

            // AST REWRITE
            // elements: principalName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1010:5: -> ^( TOK_SHOW_ROLE_GRANT principalName )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1010:8: ^( TOK_SHOW_ROLE_GRANT principalName )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_SHOW_ROLE_GRANT, "TOK_SHOW_ROLE_GRANT")
                , root_1);

                adaptor.addChild(root_1, stream_principalName.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop();
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "showRoleGrants"


    public static class showGrants_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "showGrants"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1013:1: showGrants : KW_SHOW KW_GRANT principalName ( privilegeIncludeColObject )? -> ^( TOK_SHOW_GRANT principalName ( privilegeIncludeColObject )? ) ;
    public final HiveParser.showGrants_return showGrants() throws RecognitionException {
        HiveParser.showGrants_return retval = new HiveParser.showGrants_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_SHOW399=null;
        Token KW_GRANT400=null;
        HiveParser.principalName_return principalName401 =null;

        HiveParser.privilegeIncludeColObject_return privilegeIncludeColObject402 =null;


        CommonTree KW_SHOW399_tree=null;
        CommonTree KW_GRANT400_tree=null;
        RewriteRuleTokenStream stream_KW_SHOW=new RewriteRuleTokenStream(adaptor,"token KW_SHOW");
        RewriteRuleTokenStream stream_KW_GRANT=new RewriteRuleTokenStream(adaptor,"token KW_GRANT");
        RewriteRuleSubtreeStream stream_principalName=new RewriteRuleSubtreeStream(adaptor,"rule principalName");
        RewriteRuleSubtreeStream stream_privilegeIncludeColObject=new RewriteRuleSubtreeStream(adaptor,"rule privilegeIncludeColObject");
        msgs.push("show grants");
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1016:5: ( KW_SHOW KW_GRANT principalName ( privilegeIncludeColObject )? -> ^( TOK_SHOW_GRANT principalName ( privilegeIncludeColObject )? ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1016:7: KW_SHOW KW_GRANT principalName ( privilegeIncludeColObject )?
            {
            KW_SHOW399=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showGrants6631);  
            stream_KW_SHOW.add(KW_SHOW399);


            KW_GRANT400=(Token)match(input,KW_GRANT,FOLLOW_KW_GRANT_in_showGrants6633);  
            stream_KW_GRANT.add(KW_GRANT400);


            pushFollow(FOLLOW_principalName_in_showGrants6635);
            principalName401=principalName();

            state._fsp--;

            stream_principalName.add(principalName401.getTree());

            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1016:38: ( privilegeIncludeColObject )?
            int alt117=2;
            int LA117_0 = input.LA(1);

            if ( (LA117_0==KW_ON) ) {
                alt117=1;
            }
            switch (alt117) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1016:38: privilegeIncludeColObject
                    {
                    pushFollow(FOLLOW_privilegeIncludeColObject_in_showGrants6637);
                    privilegeIncludeColObject402=privilegeIncludeColObject();

                    state._fsp--;

                    stream_privilegeIncludeColObject.add(privilegeIncludeColObject402.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: privilegeIncludeColObject, principalName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1017:5: -> ^( TOK_SHOW_GRANT principalName ( privilegeIncludeColObject )? )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1017:8: ^( TOK_SHOW_GRANT principalName ( privilegeIncludeColObject )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_SHOW_GRANT, "TOK_SHOW_GRANT")
                , root_1);

                adaptor.addChild(root_1, stream_principalName.nextTree());

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1017:39: ( privilegeIncludeColObject )?
                if ( stream_privilegeIncludeColObject.hasNext() ) {
                    adaptor.addChild(root_1, stream_privilegeIncludeColObject.nextTree());

                }
                stream_privilegeIncludeColObject.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop();
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "showGrants"


    public static class privilegeIncludeColObject_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "privilegeIncludeColObject"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1020:1: privilegeIncludeColObject : KW_ON (table= KW_TABLE | KW_DATABASE ) Identifier ( LPAREN cols= columnNameList RPAREN )? ( partitionSpec )? -> ^( TOK_PRIV_OBJECT_COL Identifier ( $table)? ( $cols)? ( partitionSpec )? ) ;
    public final HiveParser.privilegeIncludeColObject_return privilegeIncludeColObject() throws RecognitionException {
        HiveParser.privilegeIncludeColObject_return retval = new HiveParser.privilegeIncludeColObject_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token table=null;
        Token KW_ON403=null;
        Token KW_DATABASE404=null;
        Token Identifier405=null;
        Token LPAREN406=null;
        Token RPAREN407=null;
        HiveParser.columnNameList_return cols =null;

        HiveParser.partitionSpec_return partitionSpec408 =null;


        CommonTree table_tree=null;
        CommonTree KW_ON403_tree=null;
        CommonTree KW_DATABASE404_tree=null;
        CommonTree Identifier405_tree=null;
        CommonTree LPAREN406_tree=null;
        CommonTree RPAREN407_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_KW_DATABASE=new RewriteRuleTokenStream(adaptor,"token KW_DATABASE");
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_KW_ON=new RewriteRuleTokenStream(adaptor,"token KW_ON");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_columnNameList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameList");
        RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
        msgs.push("privilege object including columns");
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1023:5: ( KW_ON (table= KW_TABLE | KW_DATABASE ) Identifier ( LPAREN cols= columnNameList RPAREN )? ( partitionSpec )? -> ^( TOK_PRIV_OBJECT_COL Identifier ( $table)? ( $cols)? ( partitionSpec )? ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1023:7: KW_ON (table= KW_TABLE | KW_DATABASE ) Identifier ( LPAREN cols= columnNameList RPAREN )? ( partitionSpec )?
            {
            KW_ON403=(Token)match(input,KW_ON,FOLLOW_KW_ON_in_privilegeIncludeColObject6680);  
            stream_KW_ON.add(KW_ON403);


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1023:13: (table= KW_TABLE | KW_DATABASE )
            int alt118=2;
            int LA118_0 = input.LA(1);

            if ( (LA118_0==KW_TABLE) ) {
                alt118=1;
            }
            else if ( (LA118_0==KW_DATABASE) ) {
                alt118=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 118, 0, input);

                throw nvae;

            }
            switch (alt118) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1023:14: table= KW_TABLE
                    {
                    table=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_privilegeIncludeColObject6685);  
                    stream_KW_TABLE.add(table);


                    }
                    break;
                case 2 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1023:29: KW_DATABASE
                    {
                    KW_DATABASE404=(Token)match(input,KW_DATABASE,FOLLOW_KW_DATABASE_in_privilegeIncludeColObject6687);  
                    stream_KW_DATABASE.add(KW_DATABASE404);


                    }
                    break;

            }


            Identifier405=(Token)match(input,Identifier,FOLLOW_Identifier_in_privilegeIncludeColObject6690);  
            stream_Identifier.add(Identifier405);


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1023:53: ( LPAREN cols= columnNameList RPAREN )?
            int alt119=2;
            int LA119_0 = input.LA(1);

            if ( (LA119_0==LPAREN) ) {
                alt119=1;
            }
            switch (alt119) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1023:54: LPAREN cols= columnNameList RPAREN
                    {
                    LPAREN406=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_privilegeIncludeColObject6693);  
                    stream_LPAREN.add(LPAREN406);


                    pushFollow(FOLLOW_columnNameList_in_privilegeIncludeColObject6697);
                    cols=columnNameList();

                    state._fsp--;

                    stream_columnNameList.add(cols.getTree());

                    RPAREN407=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_privilegeIncludeColObject6699);  
                    stream_RPAREN.add(RPAREN407);


                    }
                    break;

            }


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1023:90: ( partitionSpec )?
            int alt120=2;
            int LA120_0 = input.LA(1);

            if ( (LA120_0==KW_PARTITION) ) {
                alt120=1;
            }
            switch (alt120) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1023:90: partitionSpec
                    {
                    pushFollow(FOLLOW_partitionSpec_in_privilegeIncludeColObject6703);
                    partitionSpec408=partitionSpec();

                    state._fsp--;

                    stream_partitionSpec.add(partitionSpec408.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: partitionSpec, cols, Identifier, table
            // token labels: table
            // rule labels: retval, cols
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_table=new RewriteRuleTokenStream(adaptor,"token table",table);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_cols=new RewriteRuleSubtreeStream(adaptor,"rule cols",cols!=null?cols.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1024:5: -> ^( TOK_PRIV_OBJECT_COL Identifier ( $table)? ( $cols)? ( partitionSpec )? )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1024:8: ^( TOK_PRIV_OBJECT_COL Identifier ( $table)? ( $cols)? ( partitionSpec )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_PRIV_OBJECT_COL, "TOK_PRIV_OBJECT_COL")
                , root_1);

                adaptor.addChild(root_1, 
                stream_Identifier.nextNode()
                );

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1024:42: ( $table)?
                if ( stream_table.hasNext() ) {
                    adaptor.addChild(root_1, stream_table.nextNode());

                }
                stream_table.reset();

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1024:50: ( $cols)?
                if ( stream_cols.hasNext() ) {
                    adaptor.addChild(root_1, stream_cols.nextTree());

                }
                stream_cols.reset();

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1024:56: ( partitionSpec )?
                if ( stream_partitionSpec.hasNext() ) {
                    adaptor.addChild(root_1, stream_partitionSpec.nextTree());

                }
                stream_partitionSpec.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop();
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "privilegeIncludeColObject"


    public static class privilegeObject_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "privilegeObject"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1027:1: privilegeObject : KW_ON (table= KW_TABLE | KW_DATABASE ) Identifier ( partitionSpec )? -> ^( TOK_PRIV_OBJECT Identifier ( $table)? ( partitionSpec )? ) ;
    public final HiveParser.privilegeObject_return privilegeObject() throws RecognitionException {
        HiveParser.privilegeObject_return retval = new HiveParser.privilegeObject_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token table=null;
        Token KW_ON409=null;
        Token KW_DATABASE410=null;
        Token Identifier411=null;
        HiveParser.partitionSpec_return partitionSpec412 =null;


        CommonTree table_tree=null;
        CommonTree KW_ON409_tree=null;
        CommonTree KW_DATABASE410_tree=null;
        CommonTree Identifier411_tree=null;
        RewriteRuleTokenStream stream_KW_DATABASE=new RewriteRuleTokenStream(adaptor,"token KW_DATABASE");
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_KW_ON=new RewriteRuleTokenStream(adaptor,"token KW_ON");
        RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
        msgs.push("privilege subject");
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1030:5: ( KW_ON (table= KW_TABLE | KW_DATABASE ) Identifier ( partitionSpec )? -> ^( TOK_PRIV_OBJECT Identifier ( $table)? ( partitionSpec )? ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1030:7: KW_ON (table= KW_TABLE | KW_DATABASE ) Identifier ( partitionSpec )?
            {
            KW_ON409=(Token)match(input,KW_ON,FOLLOW_KW_ON_in_privilegeObject6754);  
            stream_KW_ON.add(KW_ON409);


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1030:13: (table= KW_TABLE | KW_DATABASE )
            int alt121=2;
            int LA121_0 = input.LA(1);

            if ( (LA121_0==KW_TABLE) ) {
                alt121=1;
            }
            else if ( (LA121_0==KW_DATABASE) ) {
                alt121=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 121, 0, input);

                throw nvae;

            }
            switch (alt121) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1030:14: table= KW_TABLE
                    {
                    table=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_privilegeObject6759);  
                    stream_KW_TABLE.add(table);


                    }
                    break;
                case 2 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1030:29: KW_DATABASE
                    {
                    KW_DATABASE410=(Token)match(input,KW_DATABASE,FOLLOW_KW_DATABASE_in_privilegeObject6761);  
                    stream_KW_DATABASE.add(KW_DATABASE410);


                    }
                    break;

            }


            Identifier411=(Token)match(input,Identifier,FOLLOW_Identifier_in_privilegeObject6764);  
            stream_Identifier.add(Identifier411);


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1030:53: ( partitionSpec )?
            int alt122=2;
            int LA122_0 = input.LA(1);

            if ( (LA122_0==KW_PARTITION) ) {
                alt122=1;
            }
            switch (alt122) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1030:53: partitionSpec
                    {
                    pushFollow(FOLLOW_partitionSpec_in_privilegeObject6766);
                    partitionSpec412=partitionSpec();

                    state._fsp--;

                    stream_partitionSpec.add(partitionSpec412.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: partitionSpec, Identifier, table
            // token labels: table
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_table=new RewriteRuleTokenStream(adaptor,"token table",table);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1031:5: -> ^( TOK_PRIV_OBJECT Identifier ( $table)? ( partitionSpec )? )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1031:8: ^( TOK_PRIV_OBJECT Identifier ( $table)? ( partitionSpec )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_PRIV_OBJECT, "TOK_PRIV_OBJECT")
                , root_1);

                adaptor.addChild(root_1, 
                stream_Identifier.nextNode()
                );

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1031:38: ( $table)?
                if ( stream_table.hasNext() ) {
                    adaptor.addChild(root_1, stream_table.nextNode());

                }
                stream_table.reset();

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1031:45: ( partitionSpec )?
                if ( stream_partitionSpec.hasNext() ) {
                    adaptor.addChild(root_1, stream_partitionSpec.nextTree());

                }
                stream_partitionSpec.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop();
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "privilegeObject"


    public static class privilegeList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "privilegeList"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1034:1: privilegeList : privlegeDef ( COMMA privlegeDef )* -> ^( TOK_PRIVILEGE_LIST ( privlegeDef )+ ) ;
    public final HiveParser.privilegeList_return privilegeList() throws RecognitionException {
        HiveParser.privilegeList_return retval = new HiveParser.privilegeList_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token COMMA414=null;
        HiveParser.privlegeDef_return privlegeDef413 =null;

        HiveParser.privlegeDef_return privlegeDef415 =null;


        CommonTree COMMA414_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_privlegeDef=new RewriteRuleSubtreeStream(adaptor,"rule privlegeDef");
        msgs.push("grant privilege list");
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1037:5: ( privlegeDef ( COMMA privlegeDef )* -> ^( TOK_PRIVILEGE_LIST ( privlegeDef )+ ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1037:7: privlegeDef ( COMMA privlegeDef )*
            {
            pushFollow(FOLLOW_privlegeDef_in_privilegeList6813);
            privlegeDef413=privlegeDef();

            state._fsp--;

            stream_privlegeDef.add(privlegeDef413.getTree());

            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1037:19: ( COMMA privlegeDef )*
            loop123:
            do {
                int alt123=2;
                int LA123_0 = input.LA(1);

                if ( (LA123_0==COMMA) ) {
                    alt123=1;
                }


                switch (alt123) {
            	case 1 :
            	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1037:20: COMMA privlegeDef
            	    {
            	    COMMA414=(Token)match(input,COMMA,FOLLOW_COMMA_in_privilegeList6816);  
            	    stream_COMMA.add(COMMA414);


            	    pushFollow(FOLLOW_privlegeDef_in_privilegeList6818);
            	    privlegeDef415=privlegeDef();

            	    state._fsp--;

            	    stream_privlegeDef.add(privlegeDef415.getTree());

            	    }
            	    break;

            	default :
            	    break loop123;
                }
            } while (true);


            // AST REWRITE
            // elements: privlegeDef
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1038:5: -> ^( TOK_PRIVILEGE_LIST ( privlegeDef )+ )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1038:8: ^( TOK_PRIVILEGE_LIST ( privlegeDef )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_PRIVILEGE_LIST, "TOK_PRIVILEGE_LIST")
                , root_1);

                if ( !(stream_privlegeDef.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_privlegeDef.hasNext() ) {
                    adaptor.addChild(root_1, stream_privlegeDef.nextTree());

                }
                stream_privlegeDef.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop();
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "privilegeList"


    public static class privlegeDef_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "privlegeDef"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1041:1: privlegeDef : privilegeType ( LPAREN cols= columnNameList RPAREN )? -> ^( TOK_PRIVILEGE privilegeType ( $cols)? ) ;
    public final HiveParser.privlegeDef_return privlegeDef() throws RecognitionException {
        HiveParser.privlegeDef_return retval = new HiveParser.privlegeDef_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token LPAREN417=null;
        Token RPAREN418=null;
        HiveParser.columnNameList_return cols =null;

        HiveParser.privilegeType_return privilegeType416 =null;


        CommonTree LPAREN417_tree=null;
        CommonTree RPAREN418_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_privilegeType=new RewriteRuleSubtreeStream(adaptor,"rule privilegeType");
        RewriteRuleSubtreeStream stream_columnNameList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameList");
        msgs.push("grant privilege");
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1044:5: ( privilegeType ( LPAREN cols= columnNameList RPAREN )? -> ^( TOK_PRIVILEGE privilegeType ( $cols)? ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1044:7: privilegeType ( LPAREN cols= columnNameList RPAREN )?
            {
            pushFollow(FOLLOW_privilegeType_in_privlegeDef6860);
            privilegeType416=privilegeType();

            state._fsp--;

            stream_privilegeType.add(privilegeType416.getTree());

            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1044:21: ( LPAREN cols= columnNameList RPAREN )?
            int alt124=2;
            int LA124_0 = input.LA(1);

            if ( (LA124_0==LPAREN) ) {
                alt124=1;
            }
            switch (alt124) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1044:22: LPAREN cols= columnNameList RPAREN
                    {
                    LPAREN417=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_privlegeDef6863);  
                    stream_LPAREN.add(LPAREN417);


                    pushFollow(FOLLOW_columnNameList_in_privlegeDef6867);
                    cols=columnNameList();

                    state._fsp--;

                    stream_columnNameList.add(cols.getTree());

                    RPAREN418=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_privlegeDef6869);  
                    stream_RPAREN.add(RPAREN418);


                    }
                    break;

            }


            // AST REWRITE
            // elements: cols, privilegeType
            // token labels: 
            // rule labels: retval, cols
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_cols=new RewriteRuleSubtreeStream(adaptor,"rule cols",cols!=null?cols.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1045:5: -> ^( TOK_PRIVILEGE privilegeType ( $cols)? )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1045:8: ^( TOK_PRIVILEGE privilegeType ( $cols)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_PRIVILEGE, "TOK_PRIVILEGE")
                , root_1);

                adaptor.addChild(root_1, stream_privilegeType.nextTree());

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1045:39: ( $cols)?
                if ( stream_cols.hasNext() ) {
                    adaptor.addChild(root_1, stream_cols.nextTree());

                }
                stream_cols.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop();
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "privlegeDef"


    public static class privilegeType_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "privilegeType"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1048:1: privilegeType : ( KW_ALL -> ^( TOK_PRIV_ALL ) | KW_ALTER -> ^( TOK_PRIV_ALTER_METADATA ) | KW_UPDATE -> ^( TOK_PRIV_ALTER_DATA ) | KW_CREATE -> ^( TOK_PRIV_CREATE ) | KW_DROP -> ^( TOK_PRIV_DROP ) | KW_INDEX -> ^( TOK_PRIV_INDEX ) | KW_LOCK -> ^( TOK_PRIV_LOCK ) | KW_SELECT -> ^( TOK_PRIV_SELECT ) | KW_SHOW_DATABASE -> ^( TOK_PRIV_SHOW_DATABASE ) );
    public final HiveParser.privilegeType_return privilegeType() throws RecognitionException {
        HiveParser.privilegeType_return retval = new HiveParser.privilegeType_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_ALL419=null;
        Token KW_ALTER420=null;
        Token KW_UPDATE421=null;
        Token KW_CREATE422=null;
        Token KW_DROP423=null;
        Token KW_INDEX424=null;
        Token KW_LOCK425=null;
        Token KW_SELECT426=null;
        Token KW_SHOW_DATABASE427=null;

        CommonTree KW_ALL419_tree=null;
        CommonTree KW_ALTER420_tree=null;
        CommonTree KW_UPDATE421_tree=null;
        CommonTree KW_CREATE422_tree=null;
        CommonTree KW_DROP423_tree=null;
        CommonTree KW_INDEX424_tree=null;
        CommonTree KW_LOCK425_tree=null;
        CommonTree KW_SELECT426_tree=null;
        CommonTree KW_SHOW_DATABASE427_tree=null;
        RewriteRuleTokenStream stream_KW_ALTER=new RewriteRuleTokenStream(adaptor,"token KW_ALTER");
        RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
        RewriteRuleTokenStream stream_KW_ALL=new RewriteRuleTokenStream(adaptor,"token KW_ALL");
        RewriteRuleTokenStream stream_KW_SELECT=new RewriteRuleTokenStream(adaptor,"token KW_SELECT");
        RewriteRuleTokenStream stream_KW_UPDATE=new RewriteRuleTokenStream(adaptor,"token KW_UPDATE");
        RewriteRuleTokenStream stream_KW_SHOW_DATABASE=new RewriteRuleTokenStream(adaptor,"token KW_SHOW_DATABASE");
        RewriteRuleTokenStream stream_KW_INDEX=new RewriteRuleTokenStream(adaptor,"token KW_INDEX");
        RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
        RewriteRuleTokenStream stream_KW_LOCK=new RewriteRuleTokenStream(adaptor,"token KW_LOCK");

        msgs.push("privilege type");
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1051:5: ( KW_ALL -> ^( TOK_PRIV_ALL ) | KW_ALTER -> ^( TOK_PRIV_ALTER_METADATA ) | KW_UPDATE -> ^( TOK_PRIV_ALTER_DATA ) | KW_CREATE -> ^( TOK_PRIV_CREATE ) | KW_DROP -> ^( TOK_PRIV_DROP ) | KW_INDEX -> ^( TOK_PRIV_INDEX ) | KW_LOCK -> ^( TOK_PRIV_LOCK ) | KW_SELECT -> ^( TOK_PRIV_SELECT ) | KW_SHOW_DATABASE -> ^( TOK_PRIV_SHOW_DATABASE ) )
            int alt125=9;
            switch ( input.LA(1) ) {
            case KW_ALL:
                {
                alt125=1;
                }
                break;
            case KW_ALTER:
                {
                alt125=2;
                }
                break;
            case KW_UPDATE:
                {
                alt125=3;
                }
                break;
            case KW_CREATE:
                {
                alt125=4;
                }
                break;
            case KW_DROP:
                {
                alt125=5;
                }
                break;
            case KW_INDEX:
                {
                alt125=6;
                }
                break;
            case KW_LOCK:
                {
                alt125=7;
                }
                break;
            case KW_SELECT:
                {
                alt125=8;
                }
                break;
            case KW_SHOW_DATABASE:
                {
                alt125=9;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 125, 0, input);

                throw nvae;

            }

            switch (alt125) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1051:7: KW_ALL
                    {
                    KW_ALL419=(Token)match(input,KW_ALL,FOLLOW_KW_ALL_in_privilegeType6914);  
                    stream_KW_ALL.add(KW_ALL419);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1051:14: -> ^( TOK_PRIV_ALL )
                    {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1051:17: ^( TOK_PRIV_ALL )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_PRIV_ALL, "TOK_PRIV_ALL")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 2 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1052:7: KW_ALTER
                    {
                    KW_ALTER420=(Token)match(input,KW_ALTER,FOLLOW_KW_ALTER_in_privilegeType6928);  
                    stream_KW_ALTER.add(KW_ALTER420);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1052:16: -> ^( TOK_PRIV_ALTER_METADATA )
                    {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1052:19: ^( TOK_PRIV_ALTER_METADATA )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_PRIV_ALTER_METADATA, "TOK_PRIV_ALTER_METADATA")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 3 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1053:7: KW_UPDATE
                    {
                    KW_UPDATE421=(Token)match(input,KW_UPDATE,FOLLOW_KW_UPDATE_in_privilegeType6942);  
                    stream_KW_UPDATE.add(KW_UPDATE421);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1053:17: -> ^( TOK_PRIV_ALTER_DATA )
                    {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1053:20: ^( TOK_PRIV_ALTER_DATA )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_PRIV_ALTER_DATA, "TOK_PRIV_ALTER_DATA")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 4 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1054:7: KW_CREATE
                    {
                    KW_CREATE422=(Token)match(input,KW_CREATE,FOLLOW_KW_CREATE_in_privilegeType6956);  
                    stream_KW_CREATE.add(KW_CREATE422);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1054:17: -> ^( TOK_PRIV_CREATE )
                    {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1054:20: ^( TOK_PRIV_CREATE )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_PRIV_CREATE, "TOK_PRIV_CREATE")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 5 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1055:7: KW_DROP
                    {
                    KW_DROP423=(Token)match(input,KW_DROP,FOLLOW_KW_DROP_in_privilegeType6970);  
                    stream_KW_DROP.add(KW_DROP423);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1055:15: -> ^( TOK_PRIV_DROP )
                    {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1055:18: ^( TOK_PRIV_DROP )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_PRIV_DROP, "TOK_PRIV_DROP")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 6 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1056:7: KW_INDEX
                    {
                    KW_INDEX424=(Token)match(input,KW_INDEX,FOLLOW_KW_INDEX_in_privilegeType6984);  
                    stream_KW_INDEX.add(KW_INDEX424);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1056:16: -> ^( TOK_PRIV_INDEX )
                    {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1056:19: ^( TOK_PRIV_INDEX )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_PRIV_INDEX, "TOK_PRIV_INDEX")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 7 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1057:7: KW_LOCK
                    {
                    KW_LOCK425=(Token)match(input,KW_LOCK,FOLLOW_KW_LOCK_in_privilegeType6998);  
                    stream_KW_LOCK.add(KW_LOCK425);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1057:15: -> ^( TOK_PRIV_LOCK )
                    {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1057:18: ^( TOK_PRIV_LOCK )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_PRIV_LOCK, "TOK_PRIV_LOCK")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 8 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1058:7: KW_SELECT
                    {
                    KW_SELECT426=(Token)match(input,KW_SELECT,FOLLOW_KW_SELECT_in_privilegeType7012);  
                    stream_KW_SELECT.add(KW_SELECT426);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1058:17: -> ^( TOK_PRIV_SELECT )
                    {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1058:20: ^( TOK_PRIV_SELECT )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_PRIV_SELECT, "TOK_PRIV_SELECT")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 9 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1059:7: KW_SHOW_DATABASE
                    {
                    KW_SHOW_DATABASE427=(Token)match(input,KW_SHOW_DATABASE,FOLLOW_KW_SHOW_DATABASE_in_privilegeType7026);  
                    stream_KW_SHOW_DATABASE.add(KW_SHOW_DATABASE427);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1059:24: -> ^( TOK_PRIV_SHOW_DATABASE )
                    {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1059:27: ^( TOK_PRIV_SHOW_DATABASE )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_PRIV_SHOW_DATABASE, "TOK_PRIV_SHOW_DATABASE")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop();
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "privilegeType"


    public static class principalSpecification_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "principalSpecification"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1062:1: principalSpecification : principalName ( COMMA principalName )* -> ^( TOK_PRINCIPAL_NAME ( principalName )+ ) ;
    public final HiveParser.principalSpecification_return principalSpecification() throws RecognitionException {
        HiveParser.principalSpecification_return retval = new HiveParser.principalSpecification_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token COMMA429=null;
        HiveParser.principalName_return principalName428 =null;

        HiveParser.principalName_return principalName430 =null;


        CommonTree COMMA429_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_principalName=new RewriteRuleSubtreeStream(adaptor,"rule principalName");
         msgs.push("user/group/role name list"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1065:5: ( principalName ( COMMA principalName )* -> ^( TOK_PRINCIPAL_NAME ( principalName )+ ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1065:7: principalName ( COMMA principalName )*
            {
            pushFollow(FOLLOW_principalName_in_principalSpecification7059);
            principalName428=principalName();

            state._fsp--;

            stream_principalName.add(principalName428.getTree());

            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1065:21: ( COMMA principalName )*
            loop126:
            do {
                int alt126=2;
                int LA126_0 = input.LA(1);

                if ( (LA126_0==COMMA) ) {
                    alt126=1;
                }


                switch (alt126) {
            	case 1 :
            	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1065:22: COMMA principalName
            	    {
            	    COMMA429=(Token)match(input,COMMA,FOLLOW_COMMA_in_principalSpecification7062);  
            	    stream_COMMA.add(COMMA429);


            	    pushFollow(FOLLOW_principalName_in_principalSpecification7064);
            	    principalName430=principalName();

            	    state._fsp--;

            	    stream_principalName.add(principalName430.getTree());

            	    }
            	    break;

            	default :
            	    break loop126;
                }
            } while (true);


            // AST REWRITE
            // elements: principalName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1065:44: -> ^( TOK_PRINCIPAL_NAME ( principalName )+ )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1065:47: ^( TOK_PRINCIPAL_NAME ( principalName )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_PRINCIPAL_NAME, "TOK_PRINCIPAL_NAME")
                , root_1);

                if ( !(stream_principalName.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_principalName.hasNext() ) {
                    adaptor.addChild(root_1, stream_principalName.nextTree());

                }
                stream_principalName.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "principalSpecification"


    public static class principalName_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "principalName"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1068:1: principalName : ( kwUser Identifier -> ^( TOK_USER Identifier ) | KW_GROUP Identifier -> ^( TOK_GROUP Identifier ) | kwRole Identifier -> ^( TOK_ROLE Identifier ) );
    public final HiveParser.principalName_return principalName() throws RecognitionException {
        HiveParser.principalName_return retval = new HiveParser.principalName_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token Identifier432=null;
        Token KW_GROUP433=null;
        Token Identifier434=null;
        Token Identifier436=null;
        HiveParser.kwUser_return kwUser431 =null;

        HiveParser.kwRole_return kwRole435 =null;


        CommonTree Identifier432_tree=null;
        CommonTree KW_GROUP433_tree=null;
        CommonTree Identifier434_tree=null;
        CommonTree Identifier436_tree=null;
        RewriteRuleTokenStream stream_KW_GROUP=new RewriteRuleTokenStream(adaptor,"token KW_GROUP");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_kwRole=new RewriteRuleSubtreeStream(adaptor,"rule kwRole");
        RewriteRuleSubtreeStream stream_kwUser=new RewriteRuleSubtreeStream(adaptor,"rule kwUser");
        msgs.push("user|group|role name");
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1071:5: ( kwUser Identifier -> ^( TOK_USER Identifier ) | KW_GROUP Identifier -> ^( TOK_GROUP Identifier ) | kwRole Identifier -> ^( TOK_ROLE Identifier ) )
            int alt127=3;
            int LA127_0 = input.LA(1);

            if ( (LA127_0==Identifier) ) {
                int LA127_1 = input.LA(2);

                if ( (LA127_1==Identifier) ) {
                    int LA127_3 = input.LA(3);

                    if ( ((input.LT(1).getText().equalsIgnoreCase("user"))) ) {
                        alt127=1;
                    }
                    else if ( ((input.LT(1).getText().equalsIgnoreCase("role"))) ) {
                        alt127=3;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("", 127, 3, input);

                        throw nvae;

                    }
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("", 127, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA127_0==KW_GROUP) ) {
                alt127=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 127, 0, input);

                throw nvae;

            }
            switch (alt127) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1071:7: kwUser Identifier
                    {
                    pushFollow(FOLLOW_kwUser_in_principalName7102);
                    kwUser431=kwUser();

                    state._fsp--;

                    stream_kwUser.add(kwUser431.getTree());

                    Identifier432=(Token)match(input,Identifier,FOLLOW_Identifier_in_principalName7104);  
                    stream_Identifier.add(Identifier432);


                    // AST REWRITE
                    // elements: Identifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1071:25: -> ^( TOK_USER Identifier )
                    {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1071:28: ^( TOK_USER Identifier )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_USER, "TOK_USER")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_Identifier.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 2 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1072:7: KW_GROUP Identifier
                    {
                    KW_GROUP433=(Token)match(input,KW_GROUP,FOLLOW_KW_GROUP_in_principalName7120);  
                    stream_KW_GROUP.add(KW_GROUP433);


                    Identifier434=(Token)match(input,Identifier,FOLLOW_Identifier_in_principalName7122);  
                    stream_Identifier.add(Identifier434);


                    // AST REWRITE
                    // elements: Identifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1072:27: -> ^( TOK_GROUP Identifier )
                    {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1072:30: ^( TOK_GROUP Identifier )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_GROUP, "TOK_GROUP")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_Identifier.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 3 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1073:7: kwRole Identifier
                    {
                    pushFollow(FOLLOW_kwRole_in_principalName7138);
                    kwRole435=kwRole();

                    state._fsp--;

                    stream_kwRole.add(kwRole435.getTree());

                    Identifier436=(Token)match(input,Identifier,FOLLOW_Identifier_in_principalName7140);  
                    stream_Identifier.add(Identifier436);


                    // AST REWRITE
                    // elements: Identifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1073:25: -> ^( TOK_ROLE Identifier )
                    {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1073:28: ^( TOK_ROLE Identifier )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_ROLE, "TOK_ROLE")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_Identifier.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop();
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "principalName"


    public static class withOption_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "withOption"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1076:1: withOption : KW_GRANT KW_OPTION -> ^( TOK_GRANT_WITH_OPTION ) ;
    public final HiveParser.withOption_return withOption() throws RecognitionException {
        HiveParser.withOption_return retval = new HiveParser.withOption_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_GRANT437=null;
        Token KW_OPTION438=null;

        CommonTree KW_GRANT437_tree=null;
        CommonTree KW_OPTION438_tree=null;
        RewriteRuleTokenStream stream_KW_OPTION=new RewriteRuleTokenStream(adaptor,"token KW_OPTION");
        RewriteRuleTokenStream stream_KW_GRANT=new RewriteRuleTokenStream(adaptor,"token KW_GRANT");

        msgs.push("grant with option");
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1079:5: ( KW_GRANT KW_OPTION -> ^( TOK_GRANT_WITH_OPTION ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1079:7: KW_GRANT KW_OPTION
            {
            KW_GRANT437=(Token)match(input,KW_GRANT,FOLLOW_KW_GRANT_in_withOption7175);  
            stream_KW_GRANT.add(KW_GRANT437);


            KW_OPTION438=(Token)match(input,KW_OPTION,FOLLOW_KW_OPTION_in_withOption7177);  
            stream_KW_OPTION.add(KW_OPTION438);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1080:5: -> ^( TOK_GRANT_WITH_OPTION )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1080:8: ^( TOK_GRANT_WITH_OPTION )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_GRANT_WITH_OPTION, "TOK_GRANT_WITH_OPTION")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop();
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "withOption"


    public static class metastoreCheck_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "metastoreCheck"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1083:1: metastoreCheck : KW_MSCK (repair= KW_REPAIR )? ( KW_TABLE table= Identifier ( partitionSpec )? ( COMMA partitionSpec )* )? -> ^( TOK_MSCK ( $repair)? ( $table ( partitionSpec )* )? ) ;
    public final HiveParser.metastoreCheck_return metastoreCheck() throws RecognitionException {
        HiveParser.metastoreCheck_return retval = new HiveParser.metastoreCheck_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token repair=null;
        Token table=null;
        Token KW_MSCK439=null;
        Token KW_TABLE440=null;
        Token COMMA442=null;
        HiveParser.partitionSpec_return partitionSpec441 =null;

        HiveParser.partitionSpec_return partitionSpec443 =null;


        CommonTree repair_tree=null;
        CommonTree table_tree=null;
        CommonTree KW_MSCK439_tree=null;
        CommonTree KW_TABLE440_tree=null;
        CommonTree COMMA442_tree=null;
        RewriteRuleTokenStream stream_KW_MSCK=new RewriteRuleTokenStream(adaptor,"token KW_MSCK");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_KW_REPAIR=new RewriteRuleTokenStream(adaptor,"token KW_REPAIR");
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
         msgs.push("metastore check statement"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1086:5: ( KW_MSCK (repair= KW_REPAIR )? ( KW_TABLE table= Identifier ( partitionSpec )? ( COMMA partitionSpec )* )? -> ^( TOK_MSCK ( $repair)? ( $table ( partitionSpec )* )? ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1086:7: KW_MSCK (repair= KW_REPAIR )? ( KW_TABLE table= Identifier ( partitionSpec )? ( COMMA partitionSpec )* )?
            {
            KW_MSCK439=(Token)match(input,KW_MSCK,FOLLOW_KW_MSCK_in_metastoreCheck7214);  
            stream_KW_MSCK.add(KW_MSCK439);


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1086:15: (repair= KW_REPAIR )?
            int alt128=2;
            int LA128_0 = input.LA(1);

            if ( (LA128_0==KW_REPAIR) ) {
                alt128=1;
            }
            switch (alt128) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1086:16: repair= KW_REPAIR
                    {
                    repair=(Token)match(input,KW_REPAIR,FOLLOW_KW_REPAIR_in_metastoreCheck7219);  
                    stream_KW_REPAIR.add(repair);


                    }
                    break;

            }


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1086:35: ( KW_TABLE table= Identifier ( partitionSpec )? ( COMMA partitionSpec )* )?
            int alt131=2;
            int LA131_0 = input.LA(1);

            if ( (LA131_0==KW_TABLE) ) {
                alt131=1;
            }
            switch (alt131) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1086:36: KW_TABLE table= Identifier ( partitionSpec )? ( COMMA partitionSpec )*
                    {
                    KW_TABLE440=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_metastoreCheck7224);  
                    stream_KW_TABLE.add(KW_TABLE440);


                    table=(Token)match(input,Identifier,FOLLOW_Identifier_in_metastoreCheck7228);  
                    stream_Identifier.add(table);


                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1086:62: ( partitionSpec )?
                    int alt129=2;
                    int LA129_0 = input.LA(1);

                    if ( (LA129_0==KW_PARTITION) ) {
                        alt129=1;
                    }
                    switch (alt129) {
                        case 1 :
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1086:62: partitionSpec
                            {
                            pushFollow(FOLLOW_partitionSpec_in_metastoreCheck7230);
                            partitionSpec441=partitionSpec();

                            state._fsp--;

                            stream_partitionSpec.add(partitionSpec441.getTree());

                            }
                            break;

                    }


                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1086:77: ( COMMA partitionSpec )*
                    loop130:
                    do {
                        int alt130=2;
                        int LA130_0 = input.LA(1);

                        if ( (LA130_0==COMMA) ) {
                            alt130=1;
                        }


                        switch (alt130) {
                    	case 1 :
                    	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1086:78: COMMA partitionSpec
                    	    {
                    	    COMMA442=(Token)match(input,COMMA,FOLLOW_COMMA_in_metastoreCheck7234);  
                    	    stream_COMMA.add(COMMA442);


                    	    pushFollow(FOLLOW_partitionSpec_in_metastoreCheck7236);
                    	    partitionSpec443=partitionSpec();

                    	    state._fsp--;

                    	    stream_partitionSpec.add(partitionSpec443.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop130;
                        }
                    } while (true);


                    }
                    break;

            }


            // AST REWRITE
            // elements: repair, partitionSpec, table
            // token labels: table, repair
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_table=new RewriteRuleTokenStream(adaptor,"token table",table);
            RewriteRuleTokenStream stream_repair=new RewriteRuleTokenStream(adaptor,"token repair",repair);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1087:5: -> ^( TOK_MSCK ( $repair)? ( $table ( partitionSpec )* )? )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1087:8: ^( TOK_MSCK ( $repair)? ( $table ( partitionSpec )* )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_MSCK, "TOK_MSCK")
                , root_1);

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1087:20: ( $repair)?
                if ( stream_repair.hasNext() ) {
                    adaptor.addChild(root_1, stream_repair.nextNode());

                }
                stream_repair.reset();

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1087:28: ( $table ( partitionSpec )* )?
                if ( stream_partitionSpec.hasNext()||stream_table.hasNext() ) {
                    adaptor.addChild(root_1, stream_table.nextNode());

                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1087:36: ( partitionSpec )*
                    while ( stream_partitionSpec.hasNext() ) {
                        adaptor.addChild(root_1, stream_partitionSpec.nextTree());

                    }
                    stream_partitionSpec.reset();

                }
                stream_partitionSpec.reset();
                stream_table.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "metastoreCheck"


    public static class createFunctionStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "createFunctionStatement"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1090:1: createFunctionStatement : KW_CREATE KW_TEMPORARY KW_FUNCTION Identifier KW_AS StringLiteral -> ^( TOK_CREATEFUNCTION Identifier StringLiteral ) ;
    public final HiveParser.createFunctionStatement_return createFunctionStatement() throws RecognitionException {
        HiveParser.createFunctionStatement_return retval = new HiveParser.createFunctionStatement_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_CREATE444=null;
        Token KW_TEMPORARY445=null;
        Token KW_FUNCTION446=null;
        Token Identifier447=null;
        Token KW_AS448=null;
        Token StringLiteral449=null;

        CommonTree KW_CREATE444_tree=null;
        CommonTree KW_TEMPORARY445_tree=null;
        CommonTree KW_FUNCTION446_tree=null;
        CommonTree Identifier447_tree=null;
        CommonTree KW_AS448_tree=null;
        CommonTree StringLiteral449_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
        RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
        RewriteRuleTokenStream stream_KW_FUNCTION=new RewriteRuleTokenStream(adaptor,"token KW_FUNCTION");
        RewriteRuleTokenStream stream_KW_TEMPORARY=new RewriteRuleTokenStream(adaptor,"token KW_TEMPORARY");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");

         msgs.push("create function statement"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1093:5: ( KW_CREATE KW_TEMPORARY KW_FUNCTION Identifier KW_AS StringLiteral -> ^( TOK_CREATEFUNCTION Identifier StringLiteral ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1093:7: KW_CREATE KW_TEMPORARY KW_FUNCTION Identifier KW_AS StringLiteral
            {
            KW_CREATE444=(Token)match(input,KW_CREATE,FOLLOW_KW_CREATE_in_createFunctionStatement7290);  
            stream_KW_CREATE.add(KW_CREATE444);


            KW_TEMPORARY445=(Token)match(input,KW_TEMPORARY,FOLLOW_KW_TEMPORARY_in_createFunctionStatement7292);  
            stream_KW_TEMPORARY.add(KW_TEMPORARY445);


            KW_FUNCTION446=(Token)match(input,KW_FUNCTION,FOLLOW_KW_FUNCTION_in_createFunctionStatement7294);  
            stream_KW_FUNCTION.add(KW_FUNCTION446);


            Identifier447=(Token)match(input,Identifier,FOLLOW_Identifier_in_createFunctionStatement7296);  
            stream_Identifier.add(Identifier447);


            KW_AS448=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_createFunctionStatement7298);  
            stream_KW_AS.add(KW_AS448);


            StringLiteral449=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_createFunctionStatement7300);  
            stream_StringLiteral.add(StringLiteral449);


            // AST REWRITE
            // elements: StringLiteral, Identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1094:5: -> ^( TOK_CREATEFUNCTION Identifier StringLiteral )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1094:8: ^( TOK_CREATEFUNCTION Identifier StringLiteral )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_CREATEFUNCTION, "TOK_CREATEFUNCTION")
                , root_1);

                adaptor.addChild(root_1, 
                stream_Identifier.nextNode()
                );

                adaptor.addChild(root_1, 
                stream_StringLiteral.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "createFunctionStatement"


    public static class dropFunctionStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "dropFunctionStatement"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1097:1: dropFunctionStatement : KW_DROP KW_TEMPORARY KW_FUNCTION ( ifExists )? Identifier -> ^( TOK_DROPFUNCTION Identifier ( ifExists )? ) ;
    public final HiveParser.dropFunctionStatement_return dropFunctionStatement() throws RecognitionException {
        HiveParser.dropFunctionStatement_return retval = new HiveParser.dropFunctionStatement_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_DROP450=null;
        Token KW_TEMPORARY451=null;
        Token KW_FUNCTION452=null;
        Token Identifier454=null;
        HiveParser.ifExists_return ifExists453 =null;


        CommonTree KW_DROP450_tree=null;
        CommonTree KW_TEMPORARY451_tree=null;
        CommonTree KW_FUNCTION452_tree=null;
        CommonTree Identifier454_tree=null;
        RewriteRuleTokenStream stream_KW_FUNCTION=new RewriteRuleTokenStream(adaptor,"token KW_FUNCTION");
        RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
        RewriteRuleTokenStream stream_KW_TEMPORARY=new RewriteRuleTokenStream(adaptor,"token KW_TEMPORARY");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_ifExists=new RewriteRuleSubtreeStream(adaptor,"rule ifExists");
         msgs.push("drop temporary function statement"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1100:5: ( KW_DROP KW_TEMPORARY KW_FUNCTION ( ifExists )? Identifier -> ^( TOK_DROPFUNCTION Identifier ( ifExists )? ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1100:7: KW_DROP KW_TEMPORARY KW_FUNCTION ( ifExists )? Identifier
            {
            KW_DROP450=(Token)match(input,KW_DROP,FOLLOW_KW_DROP_in_dropFunctionStatement7341);  
            stream_KW_DROP.add(KW_DROP450);


            KW_TEMPORARY451=(Token)match(input,KW_TEMPORARY,FOLLOW_KW_TEMPORARY_in_dropFunctionStatement7343);  
            stream_KW_TEMPORARY.add(KW_TEMPORARY451);


            KW_FUNCTION452=(Token)match(input,KW_FUNCTION,FOLLOW_KW_FUNCTION_in_dropFunctionStatement7345);  
            stream_KW_FUNCTION.add(KW_FUNCTION452);


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1100:40: ( ifExists )?
            int alt132=2;
            int LA132_0 = input.LA(1);

            if ( (LA132_0==KW_IF) ) {
                alt132=1;
            }
            switch (alt132) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1100:40: ifExists
                    {
                    pushFollow(FOLLOW_ifExists_in_dropFunctionStatement7347);
                    ifExists453=ifExists();

                    state._fsp--;

                    stream_ifExists.add(ifExists453.getTree());

                    }
                    break;

            }


            Identifier454=(Token)match(input,Identifier,FOLLOW_Identifier_in_dropFunctionStatement7350);  
            stream_Identifier.add(Identifier454);


            // AST REWRITE
            // elements: Identifier, ifExists
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1101:5: -> ^( TOK_DROPFUNCTION Identifier ( ifExists )? )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1101:8: ^( TOK_DROPFUNCTION Identifier ( ifExists )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_DROPFUNCTION, "TOK_DROPFUNCTION")
                , root_1);

                adaptor.addChild(root_1, 
                stream_Identifier.nextNode()
                );

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1101:38: ( ifExists )?
                if ( stream_ifExists.hasNext() ) {
                    adaptor.addChild(root_1, stream_ifExists.nextTree());

                }
                stream_ifExists.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "dropFunctionStatement"


    public static class createViewStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "createViewStatement"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1104:1: createViewStatement : KW_CREATE ( orReplace )? KW_VIEW ( ifNotExists )? name= tableName ( LPAREN columnNameCommentList RPAREN )? ( tableComment )? ( viewPartition )? ( tablePropertiesPrefixed )? KW_AS selectStatement -> ^( TOK_CREATEVIEW $name ( orReplace )? ( ifNotExists )? ( columnNameCommentList )? ( tableComment )? ( viewPartition )? ( tablePropertiesPrefixed )? selectStatement ) ;
    public final HiveParser.createViewStatement_return createViewStatement() throws RecognitionException {
        HiveParser.createViewStatement_return retval = new HiveParser.createViewStatement_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_CREATE455=null;
        Token KW_VIEW457=null;
        Token LPAREN459=null;
        Token RPAREN461=null;
        Token KW_AS465=null;
        HiveParser.tableName_return name =null;

        HiveParser.orReplace_return orReplace456 =null;

        HiveParser.ifNotExists_return ifNotExists458 =null;

        HiveParser.columnNameCommentList_return columnNameCommentList460 =null;

        HiveParser.tableComment_return tableComment462 =null;

        HiveParser.viewPartition_return viewPartition463 =null;

        HiveParser.tablePropertiesPrefixed_return tablePropertiesPrefixed464 =null;

        HiveParser.selectStatement_return selectStatement466 =null;


        CommonTree KW_CREATE455_tree=null;
        CommonTree KW_VIEW457_tree=null;
        CommonTree LPAREN459_tree=null;
        CommonTree RPAREN461_tree=null;
        CommonTree KW_AS465_tree=null;
        RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
        RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_KW_VIEW=new RewriteRuleTokenStream(adaptor,"token KW_VIEW");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_selectStatement=new RewriteRuleSubtreeStream(adaptor,"rule selectStatement");
        RewriteRuleSubtreeStream stream_columnNameCommentList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameCommentList");
        RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
        RewriteRuleSubtreeStream stream_orReplace=new RewriteRuleSubtreeStream(adaptor,"rule orReplace");
        RewriteRuleSubtreeStream stream_tableComment=new RewriteRuleSubtreeStream(adaptor,"rule tableComment");
        RewriteRuleSubtreeStream stream_tablePropertiesPrefixed=new RewriteRuleSubtreeStream(adaptor,"rule tablePropertiesPrefixed");
        RewriteRuleSubtreeStream stream_viewPartition=new RewriteRuleSubtreeStream(adaptor,"rule viewPartition");
        RewriteRuleSubtreeStream stream_ifNotExists=new RewriteRuleSubtreeStream(adaptor,"rule ifNotExists");

            msgs.push("create view statement");

        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1109:5: ( KW_CREATE ( orReplace )? KW_VIEW ( ifNotExists )? name= tableName ( LPAREN columnNameCommentList RPAREN )? ( tableComment )? ( viewPartition )? ( tablePropertiesPrefixed )? KW_AS selectStatement -> ^( TOK_CREATEVIEW $name ( orReplace )? ( ifNotExists )? ( columnNameCommentList )? ( tableComment )? ( viewPartition )? ( tablePropertiesPrefixed )? selectStatement ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1109:7: KW_CREATE ( orReplace )? KW_VIEW ( ifNotExists )? name= tableName ( LPAREN columnNameCommentList RPAREN )? ( tableComment )? ( viewPartition )? ( tablePropertiesPrefixed )? KW_AS selectStatement
            {
            KW_CREATE455=(Token)match(input,KW_CREATE,FOLLOW_KW_CREATE_in_createViewStatement7392);  
            stream_KW_CREATE.add(KW_CREATE455);


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1109:17: ( orReplace )?
            int alt133=2;
            int LA133_0 = input.LA(1);

            if ( (LA133_0==KW_OR) ) {
                alt133=1;
            }
            switch (alt133) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1109:18: orReplace
                    {
                    pushFollow(FOLLOW_orReplace_in_createViewStatement7395);
                    orReplace456=orReplace();

                    state._fsp--;

                    stream_orReplace.add(orReplace456.getTree());

                    }
                    break;

            }


            KW_VIEW457=(Token)match(input,KW_VIEW,FOLLOW_KW_VIEW_in_createViewStatement7399);  
            stream_KW_VIEW.add(KW_VIEW457);


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1109:38: ( ifNotExists )?
            int alt134=2;
            int LA134_0 = input.LA(1);

            if ( (LA134_0==KW_IF) ) {
                alt134=1;
            }
            switch (alt134) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1109:39: ifNotExists
                    {
                    pushFollow(FOLLOW_ifNotExists_in_createViewStatement7402);
                    ifNotExists458=ifNotExists();

                    state._fsp--;

                    stream_ifNotExists.add(ifNotExists458.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_tableName_in_createViewStatement7408);
            name=tableName();

            state._fsp--;

            stream_tableName.add(name.getTree());

            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1110:9: ( LPAREN columnNameCommentList RPAREN )?
            int alt135=2;
            int LA135_0 = input.LA(1);

            if ( (LA135_0==LPAREN) ) {
                alt135=1;
            }
            switch (alt135) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1110:10: LPAREN columnNameCommentList RPAREN
                    {
                    LPAREN459=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createViewStatement7419);  
                    stream_LPAREN.add(LPAREN459);


                    pushFollow(FOLLOW_columnNameCommentList_in_createViewStatement7421);
                    columnNameCommentList460=columnNameCommentList();

                    state._fsp--;

                    stream_columnNameCommentList.add(columnNameCommentList460.getTree());

                    RPAREN461=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createViewStatement7423);  
                    stream_RPAREN.add(RPAREN461);


                    }
                    break;

            }


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1110:48: ( tableComment )?
            int alt136=2;
            int LA136_0 = input.LA(1);

            if ( (LA136_0==KW_COMMENT) ) {
                alt136=1;
            }
            switch (alt136) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1110:48: tableComment
                    {
                    pushFollow(FOLLOW_tableComment_in_createViewStatement7427);
                    tableComment462=tableComment();

                    state._fsp--;

                    stream_tableComment.add(tableComment462.getTree());

                    }
                    break;

            }


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1110:62: ( viewPartition )?
            int alt137=2;
            int LA137_0 = input.LA(1);

            if ( (LA137_0==KW_PARTITIONED) ) {
                alt137=1;
            }
            switch (alt137) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1110:62: viewPartition
                    {
                    pushFollow(FOLLOW_viewPartition_in_createViewStatement7430);
                    viewPartition463=viewPartition();

                    state._fsp--;

                    stream_viewPartition.add(viewPartition463.getTree());

                    }
                    break;

            }


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1111:9: ( tablePropertiesPrefixed )?
            int alt138=2;
            int LA138_0 = input.LA(1);

            if ( (LA138_0==KW_TBLPROPERTIES) ) {
                alt138=1;
            }
            switch (alt138) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1111:9: tablePropertiesPrefixed
                    {
                    pushFollow(FOLLOW_tablePropertiesPrefixed_in_createViewStatement7441);
                    tablePropertiesPrefixed464=tablePropertiesPrefixed();

                    state._fsp--;

                    stream_tablePropertiesPrefixed.add(tablePropertiesPrefixed464.getTree());

                    }
                    break;

            }


            KW_AS465=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_createViewStatement7452);  
            stream_KW_AS.add(KW_AS465);


            pushFollow(FOLLOW_selectStatement_in_createViewStatement7462);
            selectStatement466=selectStatement();

            state._fsp--;

            stream_selectStatement.add(selectStatement466.getTree());

            // AST REWRITE
            // elements: tableComment, name, tablePropertiesPrefixed, viewPartition, ifNotExists, orReplace, columnNameCommentList, selectStatement
            // token labels: 
            // rule labels: retval, name
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name",name!=null?name.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1114:5: -> ^( TOK_CREATEVIEW $name ( orReplace )? ( ifNotExists )? ( columnNameCommentList )? ( tableComment )? ( viewPartition )? ( tablePropertiesPrefixed )? selectStatement )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1114:8: ^( TOK_CREATEVIEW $name ( orReplace )? ( ifNotExists )? ( columnNameCommentList )? ( tableComment )? ( viewPartition )? ( tablePropertiesPrefixed )? selectStatement )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_CREATEVIEW, "TOK_CREATEVIEW")
                , root_1);

                adaptor.addChild(root_1, stream_name.nextTree());

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1114:31: ( orReplace )?
                if ( stream_orReplace.hasNext() ) {
                    adaptor.addChild(root_1, stream_orReplace.nextTree());

                }
                stream_orReplace.reset();

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1115:10: ( ifNotExists )?
                if ( stream_ifNotExists.hasNext() ) {
                    adaptor.addChild(root_1, stream_ifNotExists.nextTree());

                }
                stream_ifNotExists.reset();

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1116:10: ( columnNameCommentList )?
                if ( stream_columnNameCommentList.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnNameCommentList.nextTree());

                }
                stream_columnNameCommentList.reset();

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1117:10: ( tableComment )?
                if ( stream_tableComment.hasNext() ) {
                    adaptor.addChild(root_1, stream_tableComment.nextTree());

                }
                stream_tableComment.reset();

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1118:10: ( viewPartition )?
                if ( stream_viewPartition.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewPartition.nextTree());

                }
                stream_viewPartition.reset();

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1119:10: ( tablePropertiesPrefixed )?
                if ( stream_tablePropertiesPrefixed.hasNext() ) {
                    adaptor.addChild(root_1, stream_tablePropertiesPrefixed.nextTree());

                }
                stream_tablePropertiesPrefixed.reset();

                adaptor.addChild(root_1, stream_selectStatement.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "createViewStatement"


    public static class viewPartition_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "viewPartition"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1124:1: viewPartition : KW_PARTITIONED KW_ON LPAREN columnNameList RPAREN -> ^( TOK_VIEWPARTCOLS columnNameList ) ;
    public final HiveParser.viewPartition_return viewPartition() throws RecognitionException {
        HiveParser.viewPartition_return retval = new HiveParser.viewPartition_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_PARTITIONED467=null;
        Token KW_ON468=null;
        Token LPAREN469=null;
        Token RPAREN471=null;
        HiveParser.columnNameList_return columnNameList470 =null;


        CommonTree KW_PARTITIONED467_tree=null;
        CommonTree KW_ON468_tree=null;
        CommonTree LPAREN469_tree=null;
        CommonTree RPAREN471_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_KW_PARTITIONED=new RewriteRuleTokenStream(adaptor,"token KW_PARTITIONED");
        RewriteRuleTokenStream stream_KW_ON=new RewriteRuleTokenStream(adaptor,"token KW_ON");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_columnNameList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameList");
         msgs.push("view partition specification"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1127:5: ( KW_PARTITIONED KW_ON LPAREN columnNameList RPAREN -> ^( TOK_VIEWPARTCOLS columnNameList ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1127:7: KW_PARTITIONED KW_ON LPAREN columnNameList RPAREN
            {
            KW_PARTITIONED467=(Token)match(input,KW_PARTITIONED,FOLLOW_KW_PARTITIONED_in_viewPartition7585);  
            stream_KW_PARTITIONED.add(KW_PARTITIONED467);


            KW_ON468=(Token)match(input,KW_ON,FOLLOW_KW_ON_in_viewPartition7587);  
            stream_KW_ON.add(KW_ON468);


            LPAREN469=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_viewPartition7589);  
            stream_LPAREN.add(LPAREN469);


            pushFollow(FOLLOW_columnNameList_in_viewPartition7591);
            columnNameList470=columnNameList();

            state._fsp--;

            stream_columnNameList.add(columnNameList470.getTree());

            RPAREN471=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_viewPartition7593);  
            stream_RPAREN.add(RPAREN471);


            // AST REWRITE
            // elements: columnNameList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1128:5: -> ^( TOK_VIEWPARTCOLS columnNameList )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1128:8: ^( TOK_VIEWPARTCOLS columnNameList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_VIEWPARTCOLS, "TOK_VIEWPARTCOLS")
                , root_1);

                adaptor.addChild(root_1, stream_columnNameList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "viewPartition"


    public static class dropViewStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "dropViewStatement"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1131:1: dropViewStatement : KW_DROP KW_VIEW ( ifExists )? viewName -> ^( TOK_DROPVIEW viewName ( ifExists )? ) ;
    public final HiveParser.dropViewStatement_return dropViewStatement() throws RecognitionException {
        HiveParser.dropViewStatement_return retval = new HiveParser.dropViewStatement_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_DROP472=null;
        Token KW_VIEW473=null;
        HiveParser.ifExists_return ifExists474 =null;

        HiveParser.viewName_return viewName475 =null;


        CommonTree KW_DROP472_tree=null;
        CommonTree KW_VIEW473_tree=null;
        RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
        RewriteRuleTokenStream stream_KW_VIEW=new RewriteRuleTokenStream(adaptor,"token KW_VIEW");
        RewriteRuleSubtreeStream stream_viewName=new RewriteRuleSubtreeStream(adaptor,"rule viewName");
        RewriteRuleSubtreeStream stream_ifExists=new RewriteRuleSubtreeStream(adaptor,"rule ifExists");
         msgs.push("drop view statement"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1134:5: ( KW_DROP KW_VIEW ( ifExists )? viewName -> ^( TOK_DROPVIEW viewName ( ifExists )? ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1134:7: KW_DROP KW_VIEW ( ifExists )? viewName
            {
            KW_DROP472=(Token)match(input,KW_DROP,FOLLOW_KW_DROP_in_dropViewStatement7632);  
            stream_KW_DROP.add(KW_DROP472);


            KW_VIEW473=(Token)match(input,KW_VIEW,FOLLOW_KW_VIEW_in_dropViewStatement7634);  
            stream_KW_VIEW.add(KW_VIEW473);


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1134:23: ( ifExists )?
            int alt139=2;
            int LA139_0 = input.LA(1);

            if ( (LA139_0==KW_IF) ) {
                alt139=1;
            }
            switch (alt139) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1134:23: ifExists
                    {
                    pushFollow(FOLLOW_ifExists_in_dropViewStatement7636);
                    ifExists474=ifExists();

                    state._fsp--;

                    stream_ifExists.add(ifExists474.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_viewName_in_dropViewStatement7639);
            viewName475=viewName();

            state._fsp--;

            stream_viewName.add(viewName475.getTree());

            // AST REWRITE
            // elements: ifExists, viewName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1134:42: -> ^( TOK_DROPVIEW viewName ( ifExists )? )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1134:45: ^( TOK_DROPVIEW viewName ( ifExists )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_DROPVIEW, "TOK_DROPVIEW")
                , root_1);

                adaptor.addChild(root_1, stream_viewName.nextTree());

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1134:69: ( ifExists )?
                if ( stream_ifExists.hasNext() ) {
                    adaptor.addChild(root_1, stream_ifExists.nextTree());

                }
                stream_ifExists.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "dropViewStatement"


    public static class showStmtIdentifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "showStmtIdentifier"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1137:1: showStmtIdentifier : ( Identifier | StringLiteral );
    public final HiveParser.showStmtIdentifier_return showStmtIdentifier() throws RecognitionException {
        HiveParser.showStmtIdentifier_return retval = new HiveParser.showStmtIdentifier_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token set476=null;

        CommonTree set476_tree=null;

         msgs.push("Identifier for show statement"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1140:5: ( Identifier | StringLiteral )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:
            {
            root_0 = (CommonTree)adaptor.nil();


            set476=(Token)input.LT(1);

            if ( input.LA(1)==Identifier||input.LA(1)==StringLiteral ) {
                input.consume();
                adaptor.addChild(root_0, 
                (CommonTree)adaptor.create(set476)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "showStmtIdentifier"


    public static class tableComment_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "tableComment"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1144:1: tableComment : KW_COMMENT comment= StringLiteral -> ^( TOK_TABLECOMMENT $comment) ;
    public final HiveParser.tableComment_return tableComment() throws RecognitionException {
        HiveParser.tableComment_return retval = new HiveParser.tableComment_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token comment=null;
        Token KW_COMMENT477=null;

        CommonTree comment_tree=null;
        CommonTree KW_COMMENT477_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_COMMENT=new RewriteRuleTokenStream(adaptor,"token KW_COMMENT");

         msgs.push("table's comment"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1147:5: ( KW_COMMENT comment= StringLiteral -> ^( TOK_TABLECOMMENT $comment) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1148:7: KW_COMMENT comment= StringLiteral
            {
            KW_COMMENT477=(Token)match(input,KW_COMMENT,FOLLOW_KW_COMMENT_in_tableComment7718);  
            stream_KW_COMMENT.add(KW_COMMENT477);


            comment=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableComment7722);  
            stream_StringLiteral.add(comment);


            // AST REWRITE
            // elements: comment
            // token labels: comment
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_comment=new RewriteRuleTokenStream(adaptor,"token comment",comment);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1148:41: -> ^( TOK_TABLECOMMENT $comment)
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1148:44: ^( TOK_TABLECOMMENT $comment)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_TABLECOMMENT, "TOK_TABLECOMMENT")
                , root_1);

                adaptor.addChild(root_1, stream_comment.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "tableComment"


    public static class tablePartition_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "tablePartition"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1151:1: tablePartition : KW_PARTITIONED KW_BY LPAREN columnNameTypeList RPAREN -> ^( TOK_TABLEPARTCOLS columnNameTypeList ) ;
    public final HiveParser.tablePartition_return tablePartition() throws RecognitionException {
        HiveParser.tablePartition_return retval = new HiveParser.tablePartition_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_PARTITIONED478=null;
        Token KW_BY479=null;
        Token LPAREN480=null;
        Token RPAREN482=null;
        HiveParser.columnNameTypeList_return columnNameTypeList481 =null;


        CommonTree KW_PARTITIONED478_tree=null;
        CommonTree KW_BY479_tree=null;
        CommonTree LPAREN480_tree=null;
        CommonTree RPAREN482_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_KW_PARTITIONED=new RewriteRuleTokenStream(adaptor,"token KW_PARTITIONED");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");
        RewriteRuleSubtreeStream stream_columnNameTypeList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameTypeList");
         msgs.push("table partition specification"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1154:5: ( KW_PARTITIONED KW_BY LPAREN columnNameTypeList RPAREN -> ^( TOK_TABLEPARTCOLS columnNameTypeList ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1154:7: KW_PARTITIONED KW_BY LPAREN columnNameTypeList RPAREN
            {
            KW_PARTITIONED478=(Token)match(input,KW_PARTITIONED,FOLLOW_KW_PARTITIONED_in_tablePartition7759);  
            stream_KW_PARTITIONED.add(KW_PARTITIONED478);


            KW_BY479=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_tablePartition7761);  
            stream_KW_BY.add(KW_BY479);


            LPAREN480=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_tablePartition7763);  
            stream_LPAREN.add(LPAREN480);


            pushFollow(FOLLOW_columnNameTypeList_in_tablePartition7765);
            columnNameTypeList481=columnNameTypeList();

            state._fsp--;

            stream_columnNameTypeList.add(columnNameTypeList481.getTree());

            RPAREN482=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_tablePartition7767);  
            stream_RPAREN.add(RPAREN482);


            // AST REWRITE
            // elements: columnNameTypeList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1155:5: -> ^( TOK_TABLEPARTCOLS columnNameTypeList )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1155:8: ^( TOK_TABLEPARTCOLS columnNameTypeList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_TABLEPARTCOLS, "TOK_TABLEPARTCOLS")
                , root_1);

                adaptor.addChild(root_1, stream_columnNameTypeList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "tablePartition"


    public static class tableBuckets_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "tableBuckets"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1158:1: tableBuckets : KW_CLUSTERED KW_BY LPAREN bucketCols= columnNameList RPAREN ( KW_SORTED KW_BY LPAREN sortCols= columnNameOrderList RPAREN )? KW_INTO num= Number KW_BUCKETS -> ^( TOK_TABLEBUCKETS $bucketCols ( $sortCols)? $num) ;
    public final HiveParser.tableBuckets_return tableBuckets() throws RecognitionException {
        HiveParser.tableBuckets_return retval = new HiveParser.tableBuckets_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token num=null;
        Token KW_CLUSTERED483=null;
        Token KW_BY484=null;
        Token LPAREN485=null;
        Token RPAREN486=null;
        Token KW_SORTED487=null;
        Token KW_BY488=null;
        Token LPAREN489=null;
        Token RPAREN490=null;
        Token KW_INTO491=null;
        Token KW_BUCKETS492=null;
        HiveParser.columnNameList_return bucketCols =null;

        HiveParser.columnNameOrderList_return sortCols =null;


        CommonTree num_tree=null;
        CommonTree KW_CLUSTERED483_tree=null;
        CommonTree KW_BY484_tree=null;
        CommonTree LPAREN485_tree=null;
        CommonTree RPAREN486_tree=null;
        CommonTree KW_SORTED487_tree=null;
        CommonTree KW_BY488_tree=null;
        CommonTree LPAREN489_tree=null;
        CommonTree RPAREN490_tree=null;
        CommonTree KW_INTO491_tree=null;
        CommonTree KW_BUCKETS492_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_KW_INTO=new RewriteRuleTokenStream(adaptor,"token KW_INTO");
        RewriteRuleTokenStream stream_Number=new RewriteRuleTokenStream(adaptor,"token Number");
        RewriteRuleTokenStream stream_KW_BUCKETS=new RewriteRuleTokenStream(adaptor,"token KW_BUCKETS");
        RewriteRuleTokenStream stream_KW_CLUSTERED=new RewriteRuleTokenStream(adaptor,"token KW_CLUSTERED");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");
        RewriteRuleTokenStream stream_KW_SORTED=new RewriteRuleTokenStream(adaptor,"token KW_SORTED");
        RewriteRuleSubtreeStream stream_columnNameList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameList");
        RewriteRuleSubtreeStream stream_columnNameOrderList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameOrderList");
         msgs.push("table buckets specification"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1161:5: ( KW_CLUSTERED KW_BY LPAREN bucketCols= columnNameList RPAREN ( KW_SORTED KW_BY LPAREN sortCols= columnNameOrderList RPAREN )? KW_INTO num= Number KW_BUCKETS -> ^( TOK_TABLEBUCKETS $bucketCols ( $sortCols)? $num) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1162:7: KW_CLUSTERED KW_BY LPAREN bucketCols= columnNameList RPAREN ( KW_SORTED KW_BY LPAREN sortCols= columnNameOrderList RPAREN )? KW_INTO num= Number KW_BUCKETS
            {
            KW_CLUSTERED483=(Token)match(input,KW_CLUSTERED,FOLLOW_KW_CLUSTERED_in_tableBuckets7812);  
            stream_KW_CLUSTERED.add(KW_CLUSTERED483);


            KW_BY484=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_tableBuckets7814);  
            stream_KW_BY.add(KW_BY484);


            LPAREN485=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_tableBuckets7816);  
            stream_LPAREN.add(LPAREN485);


            pushFollow(FOLLOW_columnNameList_in_tableBuckets7820);
            bucketCols=columnNameList();

            state._fsp--;

            stream_columnNameList.add(bucketCols.getTree());

            RPAREN486=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_tableBuckets7822);  
            stream_RPAREN.add(RPAREN486);


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1162:66: ( KW_SORTED KW_BY LPAREN sortCols= columnNameOrderList RPAREN )?
            int alt140=2;
            int LA140_0 = input.LA(1);

            if ( (LA140_0==KW_SORTED) ) {
                alt140=1;
            }
            switch (alt140) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1162:67: KW_SORTED KW_BY LPAREN sortCols= columnNameOrderList RPAREN
                    {
                    KW_SORTED487=(Token)match(input,KW_SORTED,FOLLOW_KW_SORTED_in_tableBuckets7825);  
                    stream_KW_SORTED.add(KW_SORTED487);


                    KW_BY488=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_tableBuckets7827);  
                    stream_KW_BY.add(KW_BY488);


                    LPAREN489=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_tableBuckets7829);  
                    stream_LPAREN.add(LPAREN489);


                    pushFollow(FOLLOW_columnNameOrderList_in_tableBuckets7833);
                    sortCols=columnNameOrderList();

                    state._fsp--;

                    stream_columnNameOrderList.add(sortCols.getTree());

                    RPAREN490=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_tableBuckets7835);  
                    stream_RPAREN.add(RPAREN490);


                    }
                    break;

            }


            KW_INTO491=(Token)match(input,KW_INTO,FOLLOW_KW_INTO_in_tableBuckets7839);  
            stream_KW_INTO.add(KW_INTO491);


            num=(Token)match(input,Number,FOLLOW_Number_in_tableBuckets7843);  
            stream_Number.add(num);


            KW_BUCKETS492=(Token)match(input,KW_BUCKETS,FOLLOW_KW_BUCKETS_in_tableBuckets7845);  
            stream_KW_BUCKETS.add(KW_BUCKETS492);


            // AST REWRITE
            // elements: bucketCols, sortCols, num
            // token labels: num
            // rule labels: sortCols, retval, bucketCols
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_num=new RewriteRuleTokenStream(adaptor,"token num",num);
            RewriteRuleSubtreeStream stream_sortCols=new RewriteRuleSubtreeStream(adaptor,"rule sortCols",sortCols!=null?sortCols.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_bucketCols=new RewriteRuleSubtreeStream(adaptor,"rule bucketCols",bucketCols!=null?bucketCols.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1163:5: -> ^( TOK_TABLEBUCKETS $bucketCols ( $sortCols)? $num)
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1163:8: ^( TOK_TABLEBUCKETS $bucketCols ( $sortCols)? $num)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_TABLEBUCKETS, "TOK_TABLEBUCKETS")
                , root_1);

                adaptor.addChild(root_1, stream_bucketCols.nextTree());

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1163:40: ( $sortCols)?
                if ( stream_sortCols.hasNext() ) {
                    adaptor.addChild(root_1, stream_sortCols.nextTree());

                }
                stream_sortCols.reset();

                adaptor.addChild(root_1, stream_num.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "tableBuckets"


    public static class tableSkewed_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "tableSkewed"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1166:1: tableSkewed : KW_SKEWED KW_BY LPAREN skewedCols= columnNameList RPAREN KW_ON LPAREN (skewedValues= skewedValueElement ) RPAREN ( storedAsDirs )? -> ^( TOK_TABLESKEWED $skewedCols $skewedValues ( storedAsDirs )? ) ;
    public final HiveParser.tableSkewed_return tableSkewed() throws RecognitionException {
        HiveParser.tableSkewed_return retval = new HiveParser.tableSkewed_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_SKEWED493=null;
        Token KW_BY494=null;
        Token LPAREN495=null;
        Token RPAREN496=null;
        Token KW_ON497=null;
        Token LPAREN498=null;
        Token RPAREN499=null;
        HiveParser.columnNameList_return skewedCols =null;

        HiveParser.skewedValueElement_return skewedValues =null;

        HiveParser.storedAsDirs_return storedAsDirs500 =null;


        CommonTree KW_SKEWED493_tree=null;
        CommonTree KW_BY494_tree=null;
        CommonTree LPAREN495_tree=null;
        CommonTree RPAREN496_tree=null;
        CommonTree KW_ON497_tree=null;
        CommonTree LPAREN498_tree=null;
        CommonTree RPAREN499_tree=null;
        RewriteRuleTokenStream stream_KW_SKEWED=new RewriteRuleTokenStream(adaptor,"token KW_SKEWED");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_KW_ON=new RewriteRuleTokenStream(adaptor,"token KW_ON");
        RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");
        RewriteRuleSubtreeStream stream_columnNameList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameList");
        RewriteRuleSubtreeStream stream_storedAsDirs=new RewriteRuleSubtreeStream(adaptor,"rule storedAsDirs");
        RewriteRuleSubtreeStream stream_skewedValueElement=new RewriteRuleSubtreeStream(adaptor,"rule skewedValueElement");
         msgs.push("table skewed specification"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1169:5: ( KW_SKEWED KW_BY LPAREN skewedCols= columnNameList RPAREN KW_ON LPAREN (skewedValues= skewedValueElement ) RPAREN ( storedAsDirs )? -> ^( TOK_TABLESKEWED $skewedCols $skewedValues ( storedAsDirs )? ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1170:6: KW_SKEWED KW_BY LPAREN skewedCols= columnNameList RPAREN KW_ON LPAREN (skewedValues= skewedValueElement ) RPAREN ( storedAsDirs )?
            {
            KW_SKEWED493=(Token)match(input,KW_SKEWED,FOLLOW_KW_SKEWED_in_tableSkewed7897);  
            stream_KW_SKEWED.add(KW_SKEWED493);


            KW_BY494=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_tableSkewed7899);  
            stream_KW_BY.add(KW_BY494);


            LPAREN495=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_tableSkewed7901);  
            stream_LPAREN.add(LPAREN495);


            pushFollow(FOLLOW_columnNameList_in_tableSkewed7905);
            skewedCols=columnNameList();

            state._fsp--;

            stream_columnNameList.add(skewedCols.getTree());

            RPAREN496=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_tableSkewed7907);  
            stream_RPAREN.add(RPAREN496);


            KW_ON497=(Token)match(input,KW_ON,FOLLOW_KW_ON_in_tableSkewed7909);  
            stream_KW_ON.add(KW_ON497);


            LPAREN498=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_tableSkewed7911);  
            stream_LPAREN.add(LPAREN498);


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1170:75: (skewedValues= skewedValueElement )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1170:76: skewedValues= skewedValueElement
            {
            pushFollow(FOLLOW_skewedValueElement_in_tableSkewed7916);
            skewedValues=skewedValueElement();

            state._fsp--;

            stream_skewedValueElement.add(skewedValues.getTree());

            }


            RPAREN499=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_tableSkewed7919);  
            stream_RPAREN.add(RPAREN499);


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1170:116: ( storedAsDirs )?
            int alt141=2;
            int LA141_0 = input.LA(1);

            if ( (LA141_0==KW_STORED) ) {
                int LA141_1 = input.LA(2);

                if ( (LA141_1==KW_AS) ) {
                    int LA141_7 = input.LA(3);

                    if ( (LA141_7==KW_DIRECTORIES) ) {
                        alt141=1;
                    }
                }
            }
            switch (alt141) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1170:117: storedAsDirs
                    {
                    pushFollow(FOLLOW_storedAsDirs_in_tableSkewed7922);
                    storedAsDirs500=storedAsDirs();

                    state._fsp--;

                    stream_storedAsDirs.add(storedAsDirs500.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: storedAsDirs, skewedCols, skewedValues
            // token labels: 
            // rule labels: retval, skewedValues, skewedCols
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_skewedValues=new RewriteRuleSubtreeStream(adaptor,"rule skewedValues",skewedValues!=null?skewedValues.tree:null);
            RewriteRuleSubtreeStream stream_skewedCols=new RewriteRuleSubtreeStream(adaptor,"rule skewedCols",skewedCols!=null?skewedCols.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1171:5: -> ^( TOK_TABLESKEWED $skewedCols $skewedValues ( storedAsDirs )? )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1171:8: ^( TOK_TABLESKEWED $skewedCols $skewedValues ( storedAsDirs )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_TABLESKEWED, "TOK_TABLESKEWED")
                , root_1);

                adaptor.addChild(root_1, stream_skewedCols.nextTree());

                adaptor.addChild(root_1, stream_skewedValues.nextTree());

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1171:52: ( storedAsDirs )?
                if ( stream_storedAsDirs.hasNext() ) {
                    adaptor.addChild(root_1, stream_storedAsDirs.nextTree());

                }
                stream_storedAsDirs.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "tableSkewed"


    public static class rowFormat_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rowFormat"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1174:1: rowFormat : ( rowFormatSerde -> ^( TOK_SERDE rowFormatSerde ) | rowFormatDelimited -> ^( TOK_SERDE rowFormatDelimited ) | -> ^( TOK_SERDE ) );
    public final HiveParser.rowFormat_return rowFormat() throws RecognitionException {
        HiveParser.rowFormat_return retval = new HiveParser.rowFormat_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        HiveParser.rowFormatSerde_return rowFormatSerde501 =null;

        HiveParser.rowFormatDelimited_return rowFormatDelimited502 =null;


        RewriteRuleSubtreeStream stream_rowFormatSerde=new RewriteRuleSubtreeStream(adaptor,"rule rowFormatSerde");
        RewriteRuleSubtreeStream stream_rowFormatDelimited=new RewriteRuleSubtreeStream(adaptor,"rule rowFormatDelimited");
         msgs.push("serde specification"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1177:5: ( rowFormatSerde -> ^( TOK_SERDE rowFormatSerde ) | rowFormatDelimited -> ^( TOK_SERDE rowFormatDelimited ) | -> ^( TOK_SERDE ) )
            int alt142=3;
            int LA142_0 = input.LA(1);

            if ( (LA142_0==KW_ROW) ) {
                int LA142_1 = input.LA(2);

                if ( (LA142_1==KW_FORMAT) ) {
                    int LA142_21 = input.LA(3);

                    if ( (LA142_21==KW_SERDE) ) {
                        alt142=1;
                    }
                    else if ( (LA142_21==KW_DELIMITED) ) {
                        alt142=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("", 142, 21, input);

                        throw nvae;

                    }
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("", 142, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA142_0==EOF||LA142_0==KW_CLUSTER||LA142_0==KW_DISTRIBUTE||LA142_0==KW_FROM||LA142_0==KW_GROUP||LA142_0==KW_HAVING||LA142_0==KW_INSERT||LA142_0==KW_LIMIT||LA142_0==KW_MAP||LA142_0==KW_ORDER||(LA142_0 >= KW_RECORDREADER && LA142_0 <= KW_REDUCE)||LA142_0==KW_SELECT||LA142_0==KW_SORT||LA142_0==KW_UNION||LA142_0==KW_USING||LA142_0==KW_WHERE||LA142_0==RPAREN) ) {
                alt142=3;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 142, 0, input);

                throw nvae;

            }
            switch (alt142) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1177:7: rowFormatSerde
                    {
                    pushFollow(FOLLOW_rowFormatSerde_in_rowFormat7970);
                    rowFormatSerde501=rowFormatSerde();

                    state._fsp--;

                    stream_rowFormatSerde.add(rowFormatSerde501.getTree());

                    // AST REWRITE
                    // elements: rowFormatSerde
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1177:22: -> ^( TOK_SERDE rowFormatSerde )
                    {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1177:25: ^( TOK_SERDE rowFormatSerde )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_SERDE, "TOK_SERDE")
                        , root_1);

                        adaptor.addChild(root_1, stream_rowFormatSerde.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 2 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1178:7: rowFormatDelimited
                    {
                    pushFollow(FOLLOW_rowFormatDelimited_in_rowFormat7986);
                    rowFormatDelimited502=rowFormatDelimited();

                    state._fsp--;

                    stream_rowFormatDelimited.add(rowFormatDelimited502.getTree());

                    // AST REWRITE
                    // elements: rowFormatDelimited
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1178:26: -> ^( TOK_SERDE rowFormatDelimited )
                    {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1178:29: ^( TOK_SERDE rowFormatDelimited )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_SERDE, "TOK_SERDE")
                        , root_1);

                        adaptor.addChild(root_1, stream_rowFormatDelimited.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 3 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1179:9: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1179:9: -> ^( TOK_SERDE )
                    {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1179:12: ^( TOK_SERDE )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_SERDE, "TOK_SERDE")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rowFormat"


    public static class recordReader_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "recordReader"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1182:1: recordReader : ( KW_RECORDREADER StringLiteral -> ^( TOK_RECORDREADER StringLiteral ) | -> ^( TOK_RECORDREADER ) );
    public final HiveParser.recordReader_return recordReader() throws RecognitionException {
        HiveParser.recordReader_return retval = new HiveParser.recordReader_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_RECORDREADER503=null;
        Token StringLiteral504=null;

        CommonTree KW_RECORDREADER503_tree=null;
        CommonTree StringLiteral504_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_RECORDREADER=new RewriteRuleTokenStream(adaptor,"token KW_RECORDREADER");

         msgs.push("record reader specification"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1185:5: ( KW_RECORDREADER StringLiteral -> ^( TOK_RECORDREADER StringLiteral ) | -> ^( TOK_RECORDREADER ) )
            int alt143=2;
            int LA143_0 = input.LA(1);

            if ( (LA143_0==KW_RECORDREADER) ) {
                alt143=1;
            }
            else if ( (LA143_0==EOF||LA143_0==KW_CLUSTER||LA143_0==KW_DISTRIBUTE||LA143_0==KW_FROM||LA143_0==KW_GROUP||LA143_0==KW_HAVING||LA143_0==KW_INSERT||LA143_0==KW_LIMIT||LA143_0==KW_MAP||LA143_0==KW_ORDER||LA143_0==KW_REDUCE||LA143_0==KW_SELECT||LA143_0==KW_SORT||LA143_0==KW_UNION||LA143_0==KW_WHERE||LA143_0==RPAREN) ) {
                alt143=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 143, 0, input);

                throw nvae;

            }
            switch (alt143) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1185:7: KW_RECORDREADER StringLiteral
                    {
                    KW_RECORDREADER503=(Token)match(input,KW_RECORDREADER,FOLLOW_KW_RECORDREADER_in_recordReader8035);  
                    stream_KW_RECORDREADER.add(KW_RECORDREADER503);


                    StringLiteral504=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_recordReader8037);  
                    stream_StringLiteral.add(StringLiteral504);


                    // AST REWRITE
                    // elements: StringLiteral
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1185:37: -> ^( TOK_RECORDREADER StringLiteral )
                    {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1185:40: ^( TOK_RECORDREADER StringLiteral )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_RECORDREADER, "TOK_RECORDREADER")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_StringLiteral.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 2 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1186:9: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1186:9: -> ^( TOK_RECORDREADER )
                    {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1186:12: ^( TOK_RECORDREADER )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_RECORDREADER, "TOK_RECORDREADER")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "recordReader"


    public static class recordWriter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "recordWriter"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1189:1: recordWriter : ( KW_RECORDWRITER StringLiteral -> ^( TOK_RECORDWRITER StringLiteral ) | -> ^( TOK_RECORDWRITER ) );
    public final HiveParser.recordWriter_return recordWriter() throws RecognitionException {
        HiveParser.recordWriter_return retval = new HiveParser.recordWriter_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_RECORDWRITER505=null;
        Token StringLiteral506=null;

        CommonTree KW_RECORDWRITER505_tree=null;
        CommonTree StringLiteral506_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_RECORDWRITER=new RewriteRuleTokenStream(adaptor,"token KW_RECORDWRITER");

         msgs.push("record writer specification"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1192:5: ( KW_RECORDWRITER StringLiteral -> ^( TOK_RECORDWRITER StringLiteral ) | -> ^( TOK_RECORDWRITER ) )
            int alt144=2;
            int LA144_0 = input.LA(1);

            if ( (LA144_0==KW_RECORDWRITER) ) {
                alt144=1;
            }
            else if ( (LA144_0==KW_USING) ) {
                alt144=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 144, 0, input);

                throw nvae;

            }
            switch (alt144) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1192:7: KW_RECORDWRITER StringLiteral
                    {
                    KW_RECORDWRITER505=(Token)match(input,KW_RECORDWRITER,FOLLOW_KW_RECORDWRITER_in_recordWriter8086);  
                    stream_KW_RECORDWRITER.add(KW_RECORDWRITER505);


                    StringLiteral506=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_recordWriter8088);  
                    stream_StringLiteral.add(StringLiteral506);


                    // AST REWRITE
                    // elements: StringLiteral
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1192:37: -> ^( TOK_RECORDWRITER StringLiteral )
                    {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1192:40: ^( TOK_RECORDWRITER StringLiteral )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_RECORDWRITER, "TOK_RECORDWRITER")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_StringLiteral.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 2 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1193:9: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1193:9: -> ^( TOK_RECORDWRITER )
                    {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1193:12: ^( TOK_RECORDWRITER )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_RECORDWRITER, "TOK_RECORDWRITER")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "recordWriter"


    public static class rowFormatSerde_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rowFormatSerde"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1196:1: rowFormatSerde : KW_ROW KW_FORMAT KW_SERDE name= StringLiteral ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )? -> ^( TOK_SERDENAME $name ( $serdeprops)? ) ;
    public final HiveParser.rowFormatSerde_return rowFormatSerde() throws RecognitionException {
        HiveParser.rowFormatSerde_return retval = new HiveParser.rowFormatSerde_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token name=null;
        Token KW_ROW507=null;
        Token KW_FORMAT508=null;
        Token KW_SERDE509=null;
        Token KW_WITH510=null;
        Token KW_SERDEPROPERTIES511=null;
        HiveParser.tableProperties_return serdeprops =null;


        CommonTree name_tree=null;
        CommonTree KW_ROW507_tree=null;
        CommonTree KW_FORMAT508_tree=null;
        CommonTree KW_SERDE509_tree=null;
        CommonTree KW_WITH510_tree=null;
        CommonTree KW_SERDEPROPERTIES511_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_ROW=new RewriteRuleTokenStream(adaptor,"token KW_ROW");
        RewriteRuleTokenStream stream_KW_FORMAT=new RewriteRuleTokenStream(adaptor,"token KW_FORMAT");
        RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");
        RewriteRuleTokenStream stream_KW_SERDE=new RewriteRuleTokenStream(adaptor,"token KW_SERDE");
        RewriteRuleTokenStream stream_KW_SERDEPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_SERDEPROPERTIES");
        RewriteRuleSubtreeStream stream_tableProperties=new RewriteRuleSubtreeStream(adaptor,"rule tableProperties");
         msgs.push("serde format specification"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1199:5: ( KW_ROW KW_FORMAT KW_SERDE name= StringLiteral ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )? -> ^( TOK_SERDENAME $name ( $serdeprops)? ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1199:7: KW_ROW KW_FORMAT KW_SERDE name= StringLiteral ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )?
            {
            KW_ROW507=(Token)match(input,KW_ROW,FOLLOW_KW_ROW_in_rowFormatSerde8137);  
            stream_KW_ROW.add(KW_ROW507);


            KW_FORMAT508=(Token)match(input,KW_FORMAT,FOLLOW_KW_FORMAT_in_rowFormatSerde8139);  
            stream_KW_FORMAT.add(KW_FORMAT508);


            KW_SERDE509=(Token)match(input,KW_SERDE,FOLLOW_KW_SERDE_in_rowFormatSerde8141);  
            stream_KW_SERDE.add(KW_SERDE509);


            name=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_rowFormatSerde8145);  
            stream_StringLiteral.add(name);


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1199:52: ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )?
            int alt145=2;
            int LA145_0 = input.LA(1);

            if ( (LA145_0==KW_WITH) ) {
                alt145=1;
            }
            switch (alt145) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1199:53: KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties
                    {
                    KW_WITH510=(Token)match(input,KW_WITH,FOLLOW_KW_WITH_in_rowFormatSerde8148);  
                    stream_KW_WITH.add(KW_WITH510);


                    KW_SERDEPROPERTIES511=(Token)match(input,KW_SERDEPROPERTIES,FOLLOW_KW_SERDEPROPERTIES_in_rowFormatSerde8150);  
                    stream_KW_SERDEPROPERTIES.add(KW_SERDEPROPERTIES511);


                    pushFollow(FOLLOW_tableProperties_in_rowFormatSerde8154);
                    serdeprops=tableProperties();

                    state._fsp--;

                    stream_tableProperties.add(serdeprops.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: serdeprops, name
            // token labels: name
            // rule labels: serdeprops, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleSubtreeStream stream_serdeprops=new RewriteRuleSubtreeStream(adaptor,"rule serdeprops",serdeprops!=null?serdeprops.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1200:5: -> ^( TOK_SERDENAME $name ( $serdeprops)? )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1200:8: ^( TOK_SERDENAME $name ( $serdeprops)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_SERDENAME, "TOK_SERDENAME")
                , root_1);

                adaptor.addChild(root_1, stream_name.nextNode());

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1200:31: ( $serdeprops)?
                if ( stream_serdeprops.hasNext() ) {
                    adaptor.addChild(root_1, stream_serdeprops.nextTree());

                }
                stream_serdeprops.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rowFormatSerde"


    public static class rowFormatDelimited_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rowFormatDelimited"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1203:1: rowFormatDelimited : KW_ROW KW_FORMAT KW_DELIMITED ( tableRowFormatFieldIdentifier )? ( tableRowFormatCollItemsIdentifier )? ( tableRowFormatMapKeysIdentifier )? ( tableRowFormatLinesIdentifier )? -> ^( TOK_SERDEPROPS ( tableRowFormatFieldIdentifier )? ( tableRowFormatCollItemsIdentifier )? ( tableRowFormatMapKeysIdentifier )? ( tableRowFormatLinesIdentifier )? ) ;
    public final HiveParser.rowFormatDelimited_return rowFormatDelimited() throws RecognitionException {
        HiveParser.rowFormatDelimited_return retval = new HiveParser.rowFormatDelimited_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_ROW512=null;
        Token KW_FORMAT513=null;
        Token KW_DELIMITED514=null;
        HiveParser.tableRowFormatFieldIdentifier_return tableRowFormatFieldIdentifier515 =null;

        HiveParser.tableRowFormatCollItemsIdentifier_return tableRowFormatCollItemsIdentifier516 =null;

        HiveParser.tableRowFormatMapKeysIdentifier_return tableRowFormatMapKeysIdentifier517 =null;

        HiveParser.tableRowFormatLinesIdentifier_return tableRowFormatLinesIdentifier518 =null;


        CommonTree KW_ROW512_tree=null;
        CommonTree KW_FORMAT513_tree=null;
        CommonTree KW_DELIMITED514_tree=null;
        RewriteRuleTokenStream stream_KW_DELIMITED=new RewriteRuleTokenStream(adaptor,"token KW_DELIMITED");
        RewriteRuleTokenStream stream_KW_ROW=new RewriteRuleTokenStream(adaptor,"token KW_ROW");
        RewriteRuleTokenStream stream_KW_FORMAT=new RewriteRuleTokenStream(adaptor,"token KW_FORMAT");
        RewriteRuleSubtreeStream stream_tableRowFormatMapKeysIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule tableRowFormatMapKeysIdentifier");
        RewriteRuleSubtreeStream stream_tableRowFormatFieldIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule tableRowFormatFieldIdentifier");
        RewriteRuleSubtreeStream stream_tableRowFormatCollItemsIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule tableRowFormatCollItemsIdentifier");
        RewriteRuleSubtreeStream stream_tableRowFormatLinesIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule tableRowFormatLinesIdentifier");
         msgs.push("serde properties specification"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1206:5: ( KW_ROW KW_FORMAT KW_DELIMITED ( tableRowFormatFieldIdentifier )? ( tableRowFormatCollItemsIdentifier )? ( tableRowFormatMapKeysIdentifier )? ( tableRowFormatLinesIdentifier )? -> ^( TOK_SERDEPROPS ( tableRowFormatFieldIdentifier )? ( tableRowFormatCollItemsIdentifier )? ( tableRowFormatMapKeysIdentifier )? ( tableRowFormatLinesIdentifier )? ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1207:7: KW_ROW KW_FORMAT KW_DELIMITED ( tableRowFormatFieldIdentifier )? ( tableRowFormatCollItemsIdentifier )? ( tableRowFormatMapKeysIdentifier )? ( tableRowFormatLinesIdentifier )?
            {
            KW_ROW512=(Token)match(input,KW_ROW,FOLLOW_KW_ROW_in_rowFormatDelimited8206);  
            stream_KW_ROW.add(KW_ROW512);


            KW_FORMAT513=(Token)match(input,KW_FORMAT,FOLLOW_KW_FORMAT_in_rowFormatDelimited8208);  
            stream_KW_FORMAT.add(KW_FORMAT513);


            KW_DELIMITED514=(Token)match(input,KW_DELIMITED,FOLLOW_KW_DELIMITED_in_rowFormatDelimited8210);  
            stream_KW_DELIMITED.add(KW_DELIMITED514);


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1207:37: ( tableRowFormatFieldIdentifier )?
            int alt146=2;
            int LA146_0 = input.LA(1);

            if ( (LA146_0==KW_FIELDS) ) {
                alt146=1;
            }
            switch (alt146) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1207:37: tableRowFormatFieldIdentifier
                    {
                    pushFollow(FOLLOW_tableRowFormatFieldIdentifier_in_rowFormatDelimited8212);
                    tableRowFormatFieldIdentifier515=tableRowFormatFieldIdentifier();

                    state._fsp--;

                    stream_tableRowFormatFieldIdentifier.add(tableRowFormatFieldIdentifier515.getTree());

                    }
                    break;

            }


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1207:68: ( tableRowFormatCollItemsIdentifier )?
            int alt147=2;
            int LA147_0 = input.LA(1);

            if ( (LA147_0==KW_COLLECTION) ) {
                alt147=1;
            }
            switch (alt147) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1207:68: tableRowFormatCollItemsIdentifier
                    {
                    pushFollow(FOLLOW_tableRowFormatCollItemsIdentifier_in_rowFormatDelimited8215);
                    tableRowFormatCollItemsIdentifier516=tableRowFormatCollItemsIdentifier();

                    state._fsp--;

                    stream_tableRowFormatCollItemsIdentifier.add(tableRowFormatCollItemsIdentifier516.getTree());

                    }
                    break;

            }


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1207:103: ( tableRowFormatMapKeysIdentifier )?
            int alt148=2;
            int LA148_0 = input.LA(1);

            if ( (LA148_0==KW_MAP) ) {
                int LA148_1 = input.LA(2);

                if ( (LA148_1==KW_KEYS) ) {
                    alt148=1;
                }
            }
            switch (alt148) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1207:103: tableRowFormatMapKeysIdentifier
                    {
                    pushFollow(FOLLOW_tableRowFormatMapKeysIdentifier_in_rowFormatDelimited8218);
                    tableRowFormatMapKeysIdentifier517=tableRowFormatMapKeysIdentifier();

                    state._fsp--;

                    stream_tableRowFormatMapKeysIdentifier.add(tableRowFormatMapKeysIdentifier517.getTree());

                    }
                    break;

            }


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1207:136: ( tableRowFormatLinesIdentifier )?
            int alt149=2;
            int LA149_0 = input.LA(1);

            if ( (LA149_0==KW_LINES) ) {
                alt149=1;
            }
            switch (alt149) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1207:136: tableRowFormatLinesIdentifier
                    {
                    pushFollow(FOLLOW_tableRowFormatLinesIdentifier_in_rowFormatDelimited8221);
                    tableRowFormatLinesIdentifier518=tableRowFormatLinesIdentifier();

                    state._fsp--;

                    stream_tableRowFormatLinesIdentifier.add(tableRowFormatLinesIdentifier518.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: tableRowFormatCollItemsIdentifier, tableRowFormatLinesIdentifier, tableRowFormatMapKeysIdentifier, tableRowFormatFieldIdentifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1208:5: -> ^( TOK_SERDEPROPS ( tableRowFormatFieldIdentifier )? ( tableRowFormatCollItemsIdentifier )? ( tableRowFormatMapKeysIdentifier )? ( tableRowFormatLinesIdentifier )? )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1208:8: ^( TOK_SERDEPROPS ( tableRowFormatFieldIdentifier )? ( tableRowFormatCollItemsIdentifier )? ( tableRowFormatMapKeysIdentifier )? ( tableRowFormatLinesIdentifier )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_SERDEPROPS, "TOK_SERDEPROPS")
                , root_1);

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1208:25: ( tableRowFormatFieldIdentifier )?
                if ( stream_tableRowFormatFieldIdentifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_tableRowFormatFieldIdentifier.nextTree());

                }
                stream_tableRowFormatFieldIdentifier.reset();

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1208:56: ( tableRowFormatCollItemsIdentifier )?
                if ( stream_tableRowFormatCollItemsIdentifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_tableRowFormatCollItemsIdentifier.nextTree());

                }
                stream_tableRowFormatCollItemsIdentifier.reset();

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1208:91: ( tableRowFormatMapKeysIdentifier )?
                if ( stream_tableRowFormatMapKeysIdentifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_tableRowFormatMapKeysIdentifier.nextTree());

                }
                stream_tableRowFormatMapKeysIdentifier.reset();

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1208:124: ( tableRowFormatLinesIdentifier )?
                if ( stream_tableRowFormatLinesIdentifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_tableRowFormatLinesIdentifier.nextTree());

                }
                stream_tableRowFormatLinesIdentifier.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rowFormatDelimited"


    public static class tableRowFormat_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "tableRowFormat"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1211:1: tableRowFormat : ( rowFormatDelimited -> ^( TOK_TABLEROWFORMAT rowFormatDelimited ) | rowFormatSerde -> ^( TOK_TABLESERIALIZER rowFormatSerde ) );
    public final HiveParser.tableRowFormat_return tableRowFormat() throws RecognitionException {
        HiveParser.tableRowFormat_return retval = new HiveParser.tableRowFormat_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        HiveParser.rowFormatDelimited_return rowFormatDelimited519 =null;

        HiveParser.rowFormatSerde_return rowFormatSerde520 =null;


        RewriteRuleSubtreeStream stream_rowFormatSerde=new RewriteRuleSubtreeStream(adaptor,"rule rowFormatSerde");
        RewriteRuleSubtreeStream stream_rowFormatDelimited=new RewriteRuleSubtreeStream(adaptor,"rule rowFormatDelimited");
         msgs.push("table row format specification"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1214:5: ( rowFormatDelimited -> ^( TOK_TABLEROWFORMAT rowFormatDelimited ) | rowFormatSerde -> ^( TOK_TABLESERIALIZER rowFormatSerde ) )
            int alt150=2;
            int LA150_0 = input.LA(1);

            if ( (LA150_0==KW_ROW) ) {
                int LA150_1 = input.LA(2);

                if ( (LA150_1==KW_FORMAT) ) {
                    int LA150_2 = input.LA(3);

                    if ( (LA150_2==KW_DELIMITED) ) {
                        alt150=1;
                    }
                    else if ( (LA150_2==KW_SERDE) ) {
                        alt150=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("", 150, 2, input);

                        throw nvae;

                    }
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("", 150, 1, input);

                    throw nvae;

                }
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 150, 0, input);

                throw nvae;

            }
            switch (alt150) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1215:7: rowFormatDelimited
                    {
                    pushFollow(FOLLOW_rowFormatDelimited_in_tableRowFormat8277);
                    rowFormatDelimited519=rowFormatDelimited();

                    state._fsp--;

                    stream_rowFormatDelimited.add(rowFormatDelimited519.getTree());

                    // AST REWRITE
                    // elements: rowFormatDelimited
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1216:5: -> ^( TOK_TABLEROWFORMAT rowFormatDelimited )
                    {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1216:8: ^( TOK_TABLEROWFORMAT rowFormatDelimited )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_TABLEROWFORMAT, "TOK_TABLEROWFORMAT")
                        , root_1);

                        adaptor.addChild(root_1, stream_rowFormatDelimited.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 2 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1217:7: rowFormatSerde
                    {
                    pushFollow(FOLLOW_rowFormatSerde_in_tableRowFormat8297);
                    rowFormatSerde520=rowFormatSerde();

                    state._fsp--;

                    stream_rowFormatSerde.add(rowFormatSerde520.getTree());

                    // AST REWRITE
                    // elements: rowFormatSerde
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1218:5: -> ^( TOK_TABLESERIALIZER rowFormatSerde )
                    {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1218:8: ^( TOK_TABLESERIALIZER rowFormatSerde )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_TABLESERIALIZER, "TOK_TABLESERIALIZER")
                        , root_1);

                        adaptor.addChild(root_1, stream_rowFormatSerde.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "tableRowFormat"


    public static class tablePropertiesPrefixed_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "tablePropertiesPrefixed"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1221:1: tablePropertiesPrefixed : KW_TBLPROPERTIES ! tableProperties ;
    public final HiveParser.tablePropertiesPrefixed_return tablePropertiesPrefixed() throws RecognitionException {
        HiveParser.tablePropertiesPrefixed_return retval = new HiveParser.tablePropertiesPrefixed_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_TBLPROPERTIES521=null;
        HiveParser.tableProperties_return tableProperties522 =null;


        CommonTree KW_TBLPROPERTIES521_tree=null;

         msgs.push("table properties with prefix"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1224:5: ( KW_TBLPROPERTIES ! tableProperties )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1225:9: KW_TBLPROPERTIES ! tableProperties
            {
            root_0 = (CommonTree)adaptor.nil();


            KW_TBLPROPERTIES521=(Token)match(input,KW_TBLPROPERTIES,FOLLOW_KW_TBLPROPERTIES_in_tablePropertiesPrefixed8344); 

            pushFollow(FOLLOW_tableProperties_in_tablePropertiesPrefixed8347);
            tableProperties522=tableProperties();

            state._fsp--;

            adaptor.addChild(root_0, tableProperties522.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "tablePropertiesPrefixed"


    public static class tableProperties_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "tableProperties"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1228:1: tableProperties : LPAREN tablePropertiesList RPAREN -> ^( TOK_TABLEPROPERTIES tablePropertiesList ) ;
    public final HiveParser.tableProperties_return tableProperties() throws RecognitionException {
        HiveParser.tableProperties_return retval = new HiveParser.tableProperties_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token LPAREN523=null;
        Token RPAREN525=null;
        HiveParser.tablePropertiesList_return tablePropertiesList524 =null;


        CommonTree LPAREN523_tree=null;
        CommonTree RPAREN525_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_tablePropertiesList=new RewriteRuleSubtreeStream(adaptor,"rule tablePropertiesList");
         msgs.push("table properties"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1231:5: ( LPAREN tablePropertiesList RPAREN -> ^( TOK_TABLEPROPERTIES tablePropertiesList ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1232:7: LPAREN tablePropertiesList RPAREN
            {
            LPAREN523=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_tableProperties8380);  
            stream_LPAREN.add(LPAREN523);


            pushFollow(FOLLOW_tablePropertiesList_in_tableProperties8382);
            tablePropertiesList524=tablePropertiesList();

            state._fsp--;

            stream_tablePropertiesList.add(tablePropertiesList524.getTree());

            RPAREN525=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_tableProperties8384);  
            stream_RPAREN.add(RPAREN525);


            // AST REWRITE
            // elements: tablePropertiesList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1232:41: -> ^( TOK_TABLEPROPERTIES tablePropertiesList )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1232:44: ^( TOK_TABLEPROPERTIES tablePropertiesList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_TABLEPROPERTIES, "TOK_TABLEPROPERTIES")
                , root_1);

                adaptor.addChild(root_1, stream_tablePropertiesList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "tableProperties"


    public static class tablePropertiesList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "tablePropertiesList"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1235:1: tablePropertiesList : keyValueProperty ( COMMA keyValueProperty )* -> ^( TOK_TABLEPROPLIST ( keyValueProperty )+ ) ;
    public final HiveParser.tablePropertiesList_return tablePropertiesList() throws RecognitionException {
        HiveParser.tablePropertiesList_return retval = new HiveParser.tablePropertiesList_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token COMMA527=null;
        HiveParser.keyValueProperty_return keyValueProperty526 =null;

        HiveParser.keyValueProperty_return keyValueProperty528 =null;


        CommonTree COMMA527_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_keyValueProperty=new RewriteRuleSubtreeStream(adaptor,"rule keyValueProperty");
         msgs.push("table properties list"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1238:5: ( keyValueProperty ( COMMA keyValueProperty )* -> ^( TOK_TABLEPROPLIST ( keyValueProperty )+ ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1239:7: keyValueProperty ( COMMA keyValueProperty )*
            {
            pushFollow(FOLLOW_keyValueProperty_in_tablePropertiesList8425);
            keyValueProperty526=keyValueProperty();

            state._fsp--;

            stream_keyValueProperty.add(keyValueProperty526.getTree());

            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1239:24: ( COMMA keyValueProperty )*
            loop151:
            do {
                int alt151=2;
                int LA151_0 = input.LA(1);

                if ( (LA151_0==COMMA) ) {
                    alt151=1;
                }


                switch (alt151) {
            	case 1 :
            	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1239:25: COMMA keyValueProperty
            	    {
            	    COMMA527=(Token)match(input,COMMA,FOLLOW_COMMA_in_tablePropertiesList8428);  
            	    stream_COMMA.add(COMMA527);


            	    pushFollow(FOLLOW_keyValueProperty_in_tablePropertiesList8430);
            	    keyValueProperty528=keyValueProperty();

            	    state._fsp--;

            	    stream_keyValueProperty.add(keyValueProperty528.getTree());

            	    }
            	    break;

            	default :
            	    break loop151;
                }
            } while (true);


            // AST REWRITE
            // elements: keyValueProperty
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1239:50: -> ^( TOK_TABLEPROPLIST ( keyValueProperty )+ )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1239:53: ^( TOK_TABLEPROPLIST ( keyValueProperty )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_TABLEPROPLIST, "TOK_TABLEPROPLIST")
                , root_1);

                if ( !(stream_keyValueProperty.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_keyValueProperty.hasNext() ) {
                    adaptor.addChild(root_1, stream_keyValueProperty.nextTree());

                }
                stream_keyValueProperty.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "tablePropertiesList"


    public static class keyValueProperty_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyValueProperty"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1242:1: keyValueProperty : key= StringLiteral EQUAL value= StringLiteral -> ^( TOK_TABLEPROPERTY $key $value) ;
    public final HiveParser.keyValueProperty_return keyValueProperty() throws RecognitionException {
        HiveParser.keyValueProperty_return retval = new HiveParser.keyValueProperty_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token key=null;
        Token value=null;
        Token EQUAL529=null;

        CommonTree key_tree=null;
        CommonTree value_tree=null;
        CommonTree EQUAL529_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");

         msgs.push("specifying key/value property"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1245:5: (key= StringLiteral EQUAL value= StringLiteral -> ^( TOK_TABLEPROPERTY $key $value) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1246:7: key= StringLiteral EQUAL value= StringLiteral
            {
            key=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_keyValueProperty8476);  
            stream_StringLiteral.add(key);


            EQUAL529=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_keyValueProperty8478);  
            stream_EQUAL.add(EQUAL529);


            value=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_keyValueProperty8482);  
            stream_StringLiteral.add(value);


            // AST REWRITE
            // elements: value, key
            // token labels: value, key
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_value=new RewriteRuleTokenStream(adaptor,"token value",value);
            RewriteRuleTokenStream stream_key=new RewriteRuleTokenStream(adaptor,"token key",key);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1246:51: -> ^( TOK_TABLEPROPERTY $key $value)
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1246:54: ^( TOK_TABLEPROPERTY $key $value)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_TABLEPROPERTY, "TOK_TABLEPROPERTY")
                , root_1);

                adaptor.addChild(root_1, stream_key.nextNode());

                adaptor.addChild(root_1, stream_value.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "keyValueProperty"


    public static class tableRowFormatFieldIdentifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "tableRowFormatFieldIdentifier"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1249:1: tableRowFormatFieldIdentifier : KW_FIELDS KW_TERMINATED KW_BY fldIdnt= StringLiteral ( KW_ESCAPED KW_BY fldEscape= StringLiteral )? -> ^( TOK_TABLEROWFORMATFIELD $fldIdnt ( $fldEscape)? ) ;
    public final HiveParser.tableRowFormatFieldIdentifier_return tableRowFormatFieldIdentifier() throws RecognitionException {
        HiveParser.tableRowFormatFieldIdentifier_return retval = new HiveParser.tableRowFormatFieldIdentifier_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token fldIdnt=null;
        Token fldEscape=null;
        Token KW_FIELDS530=null;
        Token KW_TERMINATED531=null;
        Token KW_BY532=null;
        Token KW_ESCAPED533=null;
        Token KW_BY534=null;

        CommonTree fldIdnt_tree=null;
        CommonTree fldEscape_tree=null;
        CommonTree KW_FIELDS530_tree=null;
        CommonTree KW_TERMINATED531_tree=null;
        CommonTree KW_BY532_tree=null;
        CommonTree KW_ESCAPED533_tree=null;
        CommonTree KW_BY534_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_ESCAPED=new RewriteRuleTokenStream(adaptor,"token KW_ESCAPED");
        RewriteRuleTokenStream stream_KW_FIELDS=new RewriteRuleTokenStream(adaptor,"token KW_FIELDS");
        RewriteRuleTokenStream stream_KW_TERMINATED=new RewriteRuleTokenStream(adaptor,"token KW_TERMINATED");
        RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");

         msgs.push("table row format's field separator"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1252:5: ( KW_FIELDS KW_TERMINATED KW_BY fldIdnt= StringLiteral ( KW_ESCAPED KW_BY fldEscape= StringLiteral )? -> ^( TOK_TABLEROWFORMATFIELD $fldIdnt ( $fldEscape)? ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1253:7: KW_FIELDS KW_TERMINATED KW_BY fldIdnt= StringLiteral ( KW_ESCAPED KW_BY fldEscape= StringLiteral )?
            {
            KW_FIELDS530=(Token)match(input,KW_FIELDS,FOLLOW_KW_FIELDS_in_tableRowFormatFieldIdentifier8527);  
            stream_KW_FIELDS.add(KW_FIELDS530);


            KW_TERMINATED531=(Token)match(input,KW_TERMINATED,FOLLOW_KW_TERMINATED_in_tableRowFormatFieldIdentifier8529);  
            stream_KW_TERMINATED.add(KW_TERMINATED531);


            KW_BY532=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_tableRowFormatFieldIdentifier8531);  
            stream_KW_BY.add(KW_BY532);


            fldIdnt=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableRowFormatFieldIdentifier8535);  
            stream_StringLiteral.add(fldIdnt);


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1253:59: ( KW_ESCAPED KW_BY fldEscape= StringLiteral )?
            int alt152=2;
            int LA152_0 = input.LA(1);

            if ( (LA152_0==KW_ESCAPED) ) {
                alt152=1;
            }
            switch (alt152) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1253:60: KW_ESCAPED KW_BY fldEscape= StringLiteral
                    {
                    KW_ESCAPED533=(Token)match(input,KW_ESCAPED,FOLLOW_KW_ESCAPED_in_tableRowFormatFieldIdentifier8538);  
                    stream_KW_ESCAPED.add(KW_ESCAPED533);


                    KW_BY534=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_tableRowFormatFieldIdentifier8540);  
                    stream_KW_BY.add(KW_BY534);


                    fldEscape=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableRowFormatFieldIdentifier8544);  
                    stream_StringLiteral.add(fldEscape);


                    }
                    break;

            }


            // AST REWRITE
            // elements: fldIdnt, fldEscape
            // token labels: fldEscape, fldIdnt
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_fldEscape=new RewriteRuleTokenStream(adaptor,"token fldEscape",fldEscape);
            RewriteRuleTokenStream stream_fldIdnt=new RewriteRuleTokenStream(adaptor,"token fldIdnt",fldIdnt);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1254:5: -> ^( TOK_TABLEROWFORMATFIELD $fldIdnt ( $fldEscape)? )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1254:8: ^( TOK_TABLEROWFORMATFIELD $fldIdnt ( $fldEscape)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_TABLEROWFORMATFIELD, "TOK_TABLEROWFORMATFIELD")
                , root_1);

                adaptor.addChild(root_1, stream_fldIdnt.nextNode());

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1254:44: ( $fldEscape)?
                if ( stream_fldEscape.hasNext() ) {
                    adaptor.addChild(root_1, stream_fldEscape.nextNode());

                }
                stream_fldEscape.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "tableRowFormatFieldIdentifier"


    public static class tableRowFormatCollItemsIdentifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "tableRowFormatCollItemsIdentifier"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1257:1: tableRowFormatCollItemsIdentifier : KW_COLLECTION KW_ITEMS KW_TERMINATED KW_BY collIdnt= StringLiteral -> ^( TOK_TABLEROWFORMATCOLLITEMS $collIdnt) ;
    public final HiveParser.tableRowFormatCollItemsIdentifier_return tableRowFormatCollItemsIdentifier() throws RecognitionException {
        HiveParser.tableRowFormatCollItemsIdentifier_return retval = new HiveParser.tableRowFormatCollItemsIdentifier_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token collIdnt=null;
        Token KW_COLLECTION535=null;
        Token KW_ITEMS536=null;
        Token KW_TERMINATED537=null;
        Token KW_BY538=null;

        CommonTree collIdnt_tree=null;
        CommonTree KW_COLLECTION535_tree=null;
        CommonTree KW_ITEMS536_tree=null;
        CommonTree KW_TERMINATED537_tree=null;
        CommonTree KW_BY538_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_ITEMS=new RewriteRuleTokenStream(adaptor,"token KW_ITEMS");
        RewriteRuleTokenStream stream_KW_COLLECTION=new RewriteRuleTokenStream(adaptor,"token KW_COLLECTION");
        RewriteRuleTokenStream stream_KW_TERMINATED=new RewriteRuleTokenStream(adaptor,"token KW_TERMINATED");
        RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");

         msgs.push("table row format's column separator"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1260:5: ( KW_COLLECTION KW_ITEMS KW_TERMINATED KW_BY collIdnt= StringLiteral -> ^( TOK_TABLEROWFORMATCOLLITEMS $collIdnt) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1261:7: KW_COLLECTION KW_ITEMS KW_TERMINATED KW_BY collIdnt= StringLiteral
            {
            KW_COLLECTION535=(Token)match(input,KW_COLLECTION,FOLLOW_KW_COLLECTION_in_tableRowFormatCollItemsIdentifier8596);  
            stream_KW_COLLECTION.add(KW_COLLECTION535);


            KW_ITEMS536=(Token)match(input,KW_ITEMS,FOLLOW_KW_ITEMS_in_tableRowFormatCollItemsIdentifier8598);  
            stream_KW_ITEMS.add(KW_ITEMS536);


            KW_TERMINATED537=(Token)match(input,KW_TERMINATED,FOLLOW_KW_TERMINATED_in_tableRowFormatCollItemsIdentifier8600);  
            stream_KW_TERMINATED.add(KW_TERMINATED537);


            KW_BY538=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_tableRowFormatCollItemsIdentifier8602);  
            stream_KW_BY.add(KW_BY538);


            collIdnt=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableRowFormatCollItemsIdentifier8606);  
            stream_StringLiteral.add(collIdnt);


            // AST REWRITE
            // elements: collIdnt
            // token labels: collIdnt
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_collIdnt=new RewriteRuleTokenStream(adaptor,"token collIdnt",collIdnt);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1262:5: -> ^( TOK_TABLEROWFORMATCOLLITEMS $collIdnt)
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1262:8: ^( TOK_TABLEROWFORMATCOLLITEMS $collIdnt)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_TABLEROWFORMATCOLLITEMS, "TOK_TABLEROWFORMATCOLLITEMS")
                , root_1);

                adaptor.addChild(root_1, stream_collIdnt.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "tableRowFormatCollItemsIdentifier"


    public static class tableRowFormatMapKeysIdentifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "tableRowFormatMapKeysIdentifier"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1265:1: tableRowFormatMapKeysIdentifier : KW_MAP KW_KEYS KW_TERMINATED KW_BY mapKeysIdnt= StringLiteral -> ^( TOK_TABLEROWFORMATMAPKEYS $mapKeysIdnt) ;
    public final HiveParser.tableRowFormatMapKeysIdentifier_return tableRowFormatMapKeysIdentifier() throws RecognitionException {
        HiveParser.tableRowFormatMapKeysIdentifier_return retval = new HiveParser.tableRowFormatMapKeysIdentifier_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token mapKeysIdnt=null;
        Token KW_MAP539=null;
        Token KW_KEYS540=null;
        Token KW_TERMINATED541=null;
        Token KW_BY542=null;

        CommonTree mapKeysIdnt_tree=null;
        CommonTree KW_MAP539_tree=null;
        CommonTree KW_KEYS540_tree=null;
        CommonTree KW_TERMINATED541_tree=null;
        CommonTree KW_BY542_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_KEYS=new RewriteRuleTokenStream(adaptor,"token KW_KEYS");
        RewriteRuleTokenStream stream_KW_MAP=new RewriteRuleTokenStream(adaptor,"token KW_MAP");
        RewriteRuleTokenStream stream_KW_TERMINATED=new RewriteRuleTokenStream(adaptor,"token KW_TERMINATED");
        RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");

         msgs.push("table row format's map key separator"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1268:5: ( KW_MAP KW_KEYS KW_TERMINATED KW_BY mapKeysIdnt= StringLiteral -> ^( TOK_TABLEROWFORMATMAPKEYS $mapKeysIdnt) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1269:7: KW_MAP KW_KEYS KW_TERMINATED KW_BY mapKeysIdnt= StringLiteral
            {
            KW_MAP539=(Token)match(input,KW_MAP,FOLLOW_KW_MAP_in_tableRowFormatMapKeysIdentifier8652);  
            stream_KW_MAP.add(KW_MAP539);


            KW_KEYS540=(Token)match(input,KW_KEYS,FOLLOW_KW_KEYS_in_tableRowFormatMapKeysIdentifier8654);  
            stream_KW_KEYS.add(KW_KEYS540);


            KW_TERMINATED541=(Token)match(input,KW_TERMINATED,FOLLOW_KW_TERMINATED_in_tableRowFormatMapKeysIdentifier8656);  
            stream_KW_TERMINATED.add(KW_TERMINATED541);


            KW_BY542=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_tableRowFormatMapKeysIdentifier8658);  
            stream_KW_BY.add(KW_BY542);


            mapKeysIdnt=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableRowFormatMapKeysIdentifier8662);  
            stream_StringLiteral.add(mapKeysIdnt);


            // AST REWRITE
            // elements: mapKeysIdnt
            // token labels: mapKeysIdnt
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_mapKeysIdnt=new RewriteRuleTokenStream(adaptor,"token mapKeysIdnt",mapKeysIdnt);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1270:5: -> ^( TOK_TABLEROWFORMATMAPKEYS $mapKeysIdnt)
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1270:8: ^( TOK_TABLEROWFORMATMAPKEYS $mapKeysIdnt)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_TABLEROWFORMATMAPKEYS, "TOK_TABLEROWFORMATMAPKEYS")
                , root_1);

                adaptor.addChild(root_1, stream_mapKeysIdnt.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "tableRowFormatMapKeysIdentifier"


    public static class tableRowFormatLinesIdentifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "tableRowFormatLinesIdentifier"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1273:1: tableRowFormatLinesIdentifier : KW_LINES KW_TERMINATED KW_BY linesIdnt= StringLiteral -> ^( TOK_TABLEROWFORMATLINES $linesIdnt) ;
    public final HiveParser.tableRowFormatLinesIdentifier_return tableRowFormatLinesIdentifier() throws RecognitionException {
        HiveParser.tableRowFormatLinesIdentifier_return retval = new HiveParser.tableRowFormatLinesIdentifier_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token linesIdnt=null;
        Token KW_LINES543=null;
        Token KW_TERMINATED544=null;
        Token KW_BY545=null;

        CommonTree linesIdnt_tree=null;
        CommonTree KW_LINES543_tree=null;
        CommonTree KW_TERMINATED544_tree=null;
        CommonTree KW_BY545_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_LINES=new RewriteRuleTokenStream(adaptor,"token KW_LINES");
        RewriteRuleTokenStream stream_KW_TERMINATED=new RewriteRuleTokenStream(adaptor,"token KW_TERMINATED");
        RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");

         msgs.push("table row format's line separator"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1276:5: ( KW_LINES KW_TERMINATED KW_BY linesIdnt= StringLiteral -> ^( TOK_TABLEROWFORMATLINES $linesIdnt) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1277:7: KW_LINES KW_TERMINATED KW_BY linesIdnt= StringLiteral
            {
            KW_LINES543=(Token)match(input,KW_LINES,FOLLOW_KW_LINES_in_tableRowFormatLinesIdentifier8708);  
            stream_KW_LINES.add(KW_LINES543);


            KW_TERMINATED544=(Token)match(input,KW_TERMINATED,FOLLOW_KW_TERMINATED_in_tableRowFormatLinesIdentifier8710);  
            stream_KW_TERMINATED.add(KW_TERMINATED544);


            KW_BY545=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_tableRowFormatLinesIdentifier8712);  
            stream_KW_BY.add(KW_BY545);


            linesIdnt=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableRowFormatLinesIdentifier8716);  
            stream_StringLiteral.add(linesIdnt);


            // AST REWRITE
            // elements: linesIdnt
            // token labels: linesIdnt
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_linesIdnt=new RewriteRuleTokenStream(adaptor,"token linesIdnt",linesIdnt);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1278:5: -> ^( TOK_TABLEROWFORMATLINES $linesIdnt)
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1278:8: ^( TOK_TABLEROWFORMATLINES $linesIdnt)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_TABLEROWFORMATLINES, "TOK_TABLEROWFORMATLINES")
                , root_1);

                adaptor.addChild(root_1, stream_linesIdnt.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "tableRowFormatLinesIdentifier"


    public static class tableFileFormat_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "tableFileFormat"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1281:1: tableFileFormat : ( KW_STORED KW_AS KW_SEQUENCEFILE -> TOK_TBLSEQUENCEFILE | KW_STORED KW_AS KW_TEXTFILE -> TOK_TBLTEXTFILE | KW_STORED KW_AS KW_RCFILE -> TOK_TBLRCFILE | KW_STORED KW_AS KW_INPUTFORMAT inFmt= StringLiteral KW_OUTPUTFORMAT outFmt= StringLiteral ( KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral )? -> ^( TOK_TABLEFILEFORMAT $inFmt $outFmt ( $inDriver)? ( $outDriver)? ) | KW_STORED KW_BY storageHandler= StringLiteral ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )? -> ^( TOK_STORAGEHANDLER $storageHandler ( $serdeprops)? ) | KW_STORED KW_AS genericSpec= Identifier -> ^( TOK_FILEFORMAT_GENERIC $genericSpec) );
    public final HiveParser.tableFileFormat_return tableFileFormat() throws RecognitionException {
        HiveParser.tableFileFormat_return retval = new HiveParser.tableFileFormat_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token inFmt=null;
        Token outFmt=null;
        Token inDriver=null;
        Token outDriver=null;
        Token storageHandler=null;
        Token genericSpec=null;
        Token KW_STORED546=null;
        Token KW_AS547=null;
        Token KW_SEQUENCEFILE548=null;
        Token KW_STORED549=null;
        Token KW_AS550=null;
        Token KW_TEXTFILE551=null;
        Token KW_STORED552=null;
        Token KW_AS553=null;
        Token KW_RCFILE554=null;
        Token KW_STORED555=null;
        Token KW_AS556=null;
        Token KW_INPUTFORMAT557=null;
        Token KW_OUTPUTFORMAT558=null;
        Token KW_INPUTDRIVER559=null;
        Token KW_OUTPUTDRIVER560=null;
        Token KW_STORED561=null;
        Token KW_BY562=null;
        Token KW_WITH563=null;
        Token KW_SERDEPROPERTIES564=null;
        Token KW_STORED565=null;
        Token KW_AS566=null;
        HiveParser.tableProperties_return serdeprops =null;


        CommonTree inFmt_tree=null;
        CommonTree outFmt_tree=null;
        CommonTree inDriver_tree=null;
        CommonTree outDriver_tree=null;
        CommonTree storageHandler_tree=null;
        CommonTree genericSpec_tree=null;
        CommonTree KW_STORED546_tree=null;
        CommonTree KW_AS547_tree=null;
        CommonTree KW_SEQUENCEFILE548_tree=null;
        CommonTree KW_STORED549_tree=null;
        CommonTree KW_AS550_tree=null;
        CommonTree KW_TEXTFILE551_tree=null;
        CommonTree KW_STORED552_tree=null;
        CommonTree KW_AS553_tree=null;
        CommonTree KW_RCFILE554_tree=null;
        CommonTree KW_STORED555_tree=null;
        CommonTree KW_AS556_tree=null;
        CommonTree KW_INPUTFORMAT557_tree=null;
        CommonTree KW_OUTPUTFORMAT558_tree=null;
        CommonTree KW_INPUTDRIVER559_tree=null;
        CommonTree KW_OUTPUTDRIVER560_tree=null;
        CommonTree KW_STORED561_tree=null;
        CommonTree KW_BY562_tree=null;
        CommonTree KW_WITH563_tree=null;
        CommonTree KW_SERDEPROPERTIES564_tree=null;
        CommonTree KW_STORED565_tree=null;
        CommonTree KW_AS566_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_INPUTDRIVER=new RewriteRuleTokenStream(adaptor,"token KW_INPUTDRIVER");
        RewriteRuleTokenStream stream_KW_OUTPUTFORMAT=new RewriteRuleTokenStream(adaptor,"token KW_OUTPUTFORMAT");
        RewriteRuleTokenStream stream_KW_TEXTFILE=new RewriteRuleTokenStream(adaptor,"token KW_TEXTFILE");
        RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");
        RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
        RewriteRuleTokenStream stream_KW_RCFILE=new RewriteRuleTokenStream(adaptor,"token KW_RCFILE");
        RewriteRuleTokenStream stream_KW_INPUTFORMAT=new RewriteRuleTokenStream(adaptor,"token KW_INPUTFORMAT");
        RewriteRuleTokenStream stream_KW_STORED=new RewriteRuleTokenStream(adaptor,"token KW_STORED");
        RewriteRuleTokenStream stream_KW_OUTPUTDRIVER=new RewriteRuleTokenStream(adaptor,"token KW_OUTPUTDRIVER");
        RewriteRuleTokenStream stream_KW_SEQUENCEFILE=new RewriteRuleTokenStream(adaptor,"token KW_SEQUENCEFILE");
        RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_KW_SERDEPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_SERDEPROPERTIES");
        RewriteRuleSubtreeStream stream_tableProperties=new RewriteRuleSubtreeStream(adaptor,"rule tableProperties");
         msgs.push("table file format specification"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1284:5: ( KW_STORED KW_AS KW_SEQUENCEFILE -> TOK_TBLSEQUENCEFILE | KW_STORED KW_AS KW_TEXTFILE -> TOK_TBLTEXTFILE | KW_STORED KW_AS KW_RCFILE -> TOK_TBLRCFILE | KW_STORED KW_AS KW_INPUTFORMAT inFmt= StringLiteral KW_OUTPUTFORMAT outFmt= StringLiteral ( KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral )? -> ^( TOK_TABLEFILEFORMAT $inFmt $outFmt ( $inDriver)? ( $outDriver)? ) | KW_STORED KW_BY storageHandler= StringLiteral ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )? -> ^( TOK_STORAGEHANDLER $storageHandler ( $serdeprops)? ) | KW_STORED KW_AS genericSpec= Identifier -> ^( TOK_FILEFORMAT_GENERIC $genericSpec) )
            int alt155=6;
            int LA155_0 = input.LA(1);

            if ( (LA155_0==KW_STORED) ) {
                int LA155_1 = input.LA(2);

                if ( (LA155_1==KW_AS) ) {
                    switch ( input.LA(3) ) {
                    case KW_SEQUENCEFILE:
                        {
                        alt155=1;
                        }
                        break;
                    case KW_TEXTFILE:
                        {
                        alt155=2;
                        }
                        break;
                    case KW_RCFILE:
                        {
                        alt155=3;
                        }
                        break;
                    case KW_INPUTFORMAT:
                        {
                        alt155=4;
                        }
                        break;
                    case Identifier:
                        {
                        alt155=6;
                        }
                        break;
                    default:
                        NoViableAltException nvae =
                            new NoViableAltException("", 155, 2, input);

                        throw nvae;

                    }

                }
                else if ( (LA155_1==KW_BY) ) {
                    alt155=5;
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("", 155, 1, input);

                    throw nvae;

                }
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 155, 0, input);

                throw nvae;

            }
            switch (alt155) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1285:7: KW_STORED KW_AS KW_SEQUENCEFILE
                    {
                    KW_STORED546=(Token)match(input,KW_STORED,FOLLOW_KW_STORED_in_tableFileFormat8762);  
                    stream_KW_STORED.add(KW_STORED546);


                    KW_AS547=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_tableFileFormat8764);  
                    stream_KW_AS.add(KW_AS547);


                    KW_SEQUENCEFILE548=(Token)match(input,KW_SEQUENCEFILE,FOLLOW_KW_SEQUENCEFILE_in_tableFileFormat8766);  
                    stream_KW_SEQUENCEFILE.add(KW_SEQUENCEFILE548);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1285:40: -> TOK_TBLSEQUENCEFILE
                    {
                        adaptor.addChild(root_0, 
                        (CommonTree)adaptor.create(TOK_TBLSEQUENCEFILE, "TOK_TBLSEQUENCEFILE")
                        );

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 2 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1286:9: KW_STORED KW_AS KW_TEXTFILE
                    {
                    KW_STORED549=(Token)match(input,KW_STORED,FOLLOW_KW_STORED_in_tableFileFormat8781);  
                    stream_KW_STORED.add(KW_STORED549);


                    KW_AS550=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_tableFileFormat8783);  
                    stream_KW_AS.add(KW_AS550);


                    KW_TEXTFILE551=(Token)match(input,KW_TEXTFILE,FOLLOW_KW_TEXTFILE_in_tableFileFormat8785);  
                    stream_KW_TEXTFILE.add(KW_TEXTFILE551);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1286:38: -> TOK_TBLTEXTFILE
                    {
                        adaptor.addChild(root_0, 
                        (CommonTree)adaptor.create(TOK_TBLTEXTFILE, "TOK_TBLTEXTFILE")
                        );

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 3 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1287:9: KW_STORED KW_AS KW_RCFILE
                    {
                    KW_STORED552=(Token)match(input,KW_STORED,FOLLOW_KW_STORED_in_tableFileFormat8800);  
                    stream_KW_STORED.add(KW_STORED552);


                    KW_AS553=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_tableFileFormat8802);  
                    stream_KW_AS.add(KW_AS553);


                    KW_RCFILE554=(Token)match(input,KW_RCFILE,FOLLOW_KW_RCFILE_in_tableFileFormat8804);  
                    stream_KW_RCFILE.add(KW_RCFILE554);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1287:36: -> TOK_TBLRCFILE
                    {
                        adaptor.addChild(root_0, 
                        (CommonTree)adaptor.create(TOK_TBLRCFILE, "TOK_TBLRCFILE")
                        );

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 4 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1288:9: KW_STORED KW_AS KW_INPUTFORMAT inFmt= StringLiteral KW_OUTPUTFORMAT outFmt= StringLiteral ( KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral )?
                    {
                    KW_STORED555=(Token)match(input,KW_STORED,FOLLOW_KW_STORED_in_tableFileFormat8819);  
                    stream_KW_STORED.add(KW_STORED555);


                    KW_AS556=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_tableFileFormat8821);  
                    stream_KW_AS.add(KW_AS556);


                    KW_INPUTFORMAT557=(Token)match(input,KW_INPUTFORMAT,FOLLOW_KW_INPUTFORMAT_in_tableFileFormat8823);  
                    stream_KW_INPUTFORMAT.add(KW_INPUTFORMAT557);


                    inFmt=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableFileFormat8827);  
                    stream_StringLiteral.add(inFmt);


                    KW_OUTPUTFORMAT558=(Token)match(input,KW_OUTPUTFORMAT,FOLLOW_KW_OUTPUTFORMAT_in_tableFileFormat8829);  
                    stream_KW_OUTPUTFORMAT.add(KW_OUTPUTFORMAT558);


                    outFmt=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableFileFormat8833);  
                    stream_StringLiteral.add(outFmt);


                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1288:97: ( KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral )?
                    int alt153=2;
                    int LA153_0 = input.LA(1);

                    if ( (LA153_0==KW_INPUTDRIVER) ) {
                        alt153=1;
                    }
                    switch (alt153) {
                        case 1 :
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1288:98: KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral
                            {
                            KW_INPUTDRIVER559=(Token)match(input,KW_INPUTDRIVER,FOLLOW_KW_INPUTDRIVER_in_tableFileFormat8836);  
                            stream_KW_INPUTDRIVER.add(KW_INPUTDRIVER559);


                            inDriver=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableFileFormat8840);  
                            stream_StringLiteral.add(inDriver);


                            KW_OUTPUTDRIVER560=(Token)match(input,KW_OUTPUTDRIVER,FOLLOW_KW_OUTPUTDRIVER_in_tableFileFormat8842);  
                            stream_KW_OUTPUTDRIVER.add(KW_OUTPUTDRIVER560);


                            outDriver=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableFileFormat8846);  
                            stream_StringLiteral.add(outDriver);


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: inDriver, outDriver, outFmt, inFmt
                    // token labels: outDriver, outFmt, inDriver, inFmt
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_outDriver=new RewriteRuleTokenStream(adaptor,"token outDriver",outDriver);
                    RewriteRuleTokenStream stream_outFmt=new RewriteRuleTokenStream(adaptor,"token outFmt",outFmt);
                    RewriteRuleTokenStream stream_inDriver=new RewriteRuleTokenStream(adaptor,"token inDriver",inDriver);
                    RewriteRuleTokenStream stream_inFmt=new RewriteRuleTokenStream(adaptor,"token inFmt",inFmt);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1289:7: -> ^( TOK_TABLEFILEFORMAT $inFmt $outFmt ( $inDriver)? ( $outDriver)? )
                    {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1289:10: ^( TOK_TABLEFILEFORMAT $inFmt $outFmt ( $inDriver)? ( $outDriver)? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_TABLEFILEFORMAT, "TOK_TABLEFILEFORMAT")
                        , root_1);

                        adaptor.addChild(root_1, stream_inFmt.nextNode());

                        adaptor.addChild(root_1, stream_outFmt.nextNode());

                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1289:48: ( $inDriver)?
                        if ( stream_inDriver.hasNext() ) {
                            adaptor.addChild(root_1, stream_inDriver.nextNode());

                        }
                        stream_inDriver.reset();

                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1289:59: ( $outDriver)?
                        if ( stream_outDriver.hasNext() ) {
                            adaptor.addChild(root_1, stream_outDriver.nextNode());

                        }
                        stream_outDriver.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 5 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1290:9: KW_STORED KW_BY storageHandler= StringLiteral ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )?
                    {
                    KW_STORED561=(Token)match(input,KW_STORED,FOLLOW_KW_STORED_in_tableFileFormat8884);  
                    stream_KW_STORED.add(KW_STORED561);


                    KW_BY562=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_tableFileFormat8886);  
                    stream_KW_BY.add(KW_BY562);


                    storageHandler=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableFileFormat8890);  
                    stream_StringLiteral.add(storageHandler);


                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1291:10: ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )?
                    int alt154=2;
                    int LA154_0 = input.LA(1);

                    if ( (LA154_0==KW_WITH) ) {
                        alt154=1;
                    }
                    switch (alt154) {
                        case 1 :
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1291:11: KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties
                            {
                            KW_WITH563=(Token)match(input,KW_WITH,FOLLOW_KW_WITH_in_tableFileFormat8902);  
                            stream_KW_WITH.add(KW_WITH563);


                            KW_SERDEPROPERTIES564=(Token)match(input,KW_SERDEPROPERTIES,FOLLOW_KW_SERDEPROPERTIES_in_tableFileFormat8904);  
                            stream_KW_SERDEPROPERTIES.add(KW_SERDEPROPERTIES564);


                            pushFollow(FOLLOW_tableProperties_in_tableFileFormat8908);
                            serdeprops=tableProperties();

                            state._fsp--;

                            stream_tableProperties.add(serdeprops.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: storageHandler, serdeprops
                    // token labels: storageHandler
                    // rule labels: serdeprops, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_storageHandler=new RewriteRuleTokenStream(adaptor,"token storageHandler",storageHandler);
                    RewriteRuleSubtreeStream stream_serdeprops=new RewriteRuleSubtreeStream(adaptor,"rule serdeprops",serdeprops!=null?serdeprops.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1292:7: -> ^( TOK_STORAGEHANDLER $storageHandler ( $serdeprops)? )
                    {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1292:10: ^( TOK_STORAGEHANDLER $storageHandler ( $serdeprops)? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_STORAGEHANDLER, "TOK_STORAGEHANDLER")
                        , root_1);

                        adaptor.addChild(root_1, stream_storageHandler.nextNode());

                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1292:48: ( $serdeprops)?
                        if ( stream_serdeprops.hasNext() ) {
                            adaptor.addChild(root_1, stream_serdeprops.nextTree());

                        }
                        stream_serdeprops.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 6 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1293:9: KW_STORED KW_AS genericSpec= Identifier
                    {
                    KW_STORED565=(Token)match(input,KW_STORED,FOLLOW_KW_STORED_in_tableFileFormat8939);  
                    stream_KW_STORED.add(KW_STORED565);


                    KW_AS566=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_tableFileFormat8941);  
                    stream_KW_AS.add(KW_AS566);


                    genericSpec=(Token)match(input,Identifier,FOLLOW_Identifier_in_tableFileFormat8945);  
                    stream_Identifier.add(genericSpec);


                    // AST REWRITE
                    // elements: genericSpec
                    // token labels: genericSpec
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_genericSpec=new RewriteRuleTokenStream(adaptor,"token genericSpec",genericSpec);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1294:7: -> ^( TOK_FILEFORMAT_GENERIC $genericSpec)
                    {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1294:10: ^( TOK_FILEFORMAT_GENERIC $genericSpec)
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_FILEFORMAT_GENERIC, "TOK_FILEFORMAT_GENERIC")
                        , root_1);

                        adaptor.addChild(root_1, stream_genericSpec.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "tableFileFormat"


    public static class tableLocation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "tableLocation"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1297:1: tableLocation : KW_LOCATION locn= StringLiteral -> ^( TOK_TABLELOCATION $locn) ;
    public final HiveParser.tableLocation_return tableLocation() throws RecognitionException {
        HiveParser.tableLocation_return retval = new HiveParser.tableLocation_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token locn=null;
        Token KW_LOCATION567=null;

        CommonTree locn_tree=null;
        CommonTree KW_LOCATION567_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_LOCATION=new RewriteRuleTokenStream(adaptor,"token KW_LOCATION");

         msgs.push("table location specification"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1300:5: ( KW_LOCATION locn= StringLiteral -> ^( TOK_TABLELOCATION $locn) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1301:7: KW_LOCATION locn= StringLiteral
            {
            KW_LOCATION567=(Token)match(input,KW_LOCATION,FOLLOW_KW_LOCATION_in_tableLocation8993);  
            stream_KW_LOCATION.add(KW_LOCATION567);


            locn=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableLocation8997);  
            stream_StringLiteral.add(locn);


            // AST REWRITE
            // elements: locn
            // token labels: locn
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_locn=new RewriteRuleTokenStream(adaptor,"token locn",locn);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1301:38: -> ^( TOK_TABLELOCATION $locn)
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1301:41: ^( TOK_TABLELOCATION $locn)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_TABLELOCATION, "TOK_TABLELOCATION")
                , root_1);

                adaptor.addChild(root_1, stream_locn.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "tableLocation"


    public static class columnNameTypeList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "columnNameTypeList"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1304:1: columnNameTypeList : columnNameType ( COMMA columnNameType )* -> ^( TOK_TABCOLLIST ( columnNameType )+ ) ;
    public final HiveParser.columnNameTypeList_return columnNameTypeList() throws RecognitionException {
        HiveParser.columnNameTypeList_return retval = new HiveParser.columnNameTypeList_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token COMMA569=null;
        HiveParser.columnNameType_return columnNameType568 =null;

        HiveParser.columnNameType_return columnNameType570 =null;


        CommonTree COMMA569_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_columnNameType=new RewriteRuleSubtreeStream(adaptor,"rule columnNameType");
         msgs.push("column name type list"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1307:5: ( columnNameType ( COMMA columnNameType )* -> ^( TOK_TABCOLLIST ( columnNameType )+ ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1307:7: columnNameType ( COMMA columnNameType )*
            {
            pushFollow(FOLLOW_columnNameType_in_columnNameTypeList9033);
            columnNameType568=columnNameType();

            state._fsp--;

            stream_columnNameType.add(columnNameType568.getTree());

            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1307:22: ( COMMA columnNameType )*
            loop156:
            do {
                int alt156=2;
                int LA156_0 = input.LA(1);

                if ( (LA156_0==COMMA) ) {
                    alt156=1;
                }


                switch (alt156) {
            	case 1 :
            	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1307:23: COMMA columnNameType
            	    {
            	    COMMA569=(Token)match(input,COMMA,FOLLOW_COMMA_in_columnNameTypeList9036);  
            	    stream_COMMA.add(COMMA569);


            	    pushFollow(FOLLOW_columnNameType_in_columnNameTypeList9038);
            	    columnNameType570=columnNameType();

            	    state._fsp--;

            	    stream_columnNameType.add(columnNameType570.getTree());

            	    }
            	    break;

            	default :
            	    break loop156;
                }
            } while (true);


            // AST REWRITE
            // elements: columnNameType
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1307:46: -> ^( TOK_TABCOLLIST ( columnNameType )+ )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1307:49: ^( TOK_TABCOLLIST ( columnNameType )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_TABCOLLIST, "TOK_TABCOLLIST")
                , root_1);

                if ( !(stream_columnNameType.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_columnNameType.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnNameType.nextTree());

                }
                stream_columnNameType.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "columnNameTypeList"


    public static class columnNameColonTypeList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "columnNameColonTypeList"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1310:1: columnNameColonTypeList : columnNameColonType ( COMMA columnNameColonType )* -> ^( TOK_TABCOLLIST ( columnNameColonType )+ ) ;
    public final HiveParser.columnNameColonTypeList_return columnNameColonTypeList() throws RecognitionException {
        HiveParser.columnNameColonTypeList_return retval = new HiveParser.columnNameColonTypeList_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token COMMA572=null;
        HiveParser.columnNameColonType_return columnNameColonType571 =null;

        HiveParser.columnNameColonType_return columnNameColonType573 =null;


        CommonTree COMMA572_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_columnNameColonType=new RewriteRuleSubtreeStream(adaptor,"rule columnNameColonType");
         msgs.push("column name type list"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1313:5: ( columnNameColonType ( COMMA columnNameColonType )* -> ^( TOK_TABCOLLIST ( columnNameColonType )+ ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1313:7: columnNameColonType ( COMMA columnNameColonType )*
            {
            pushFollow(FOLLOW_columnNameColonType_in_columnNameColonTypeList9076);
            columnNameColonType571=columnNameColonType();

            state._fsp--;

            stream_columnNameColonType.add(columnNameColonType571.getTree());

            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1313:27: ( COMMA columnNameColonType )*
            loop157:
            do {
                int alt157=2;
                int LA157_0 = input.LA(1);

                if ( (LA157_0==COMMA) ) {
                    alt157=1;
                }


                switch (alt157) {
            	case 1 :
            	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1313:28: COMMA columnNameColonType
            	    {
            	    COMMA572=(Token)match(input,COMMA,FOLLOW_COMMA_in_columnNameColonTypeList9079);  
            	    stream_COMMA.add(COMMA572);


            	    pushFollow(FOLLOW_columnNameColonType_in_columnNameColonTypeList9081);
            	    columnNameColonType573=columnNameColonType();

            	    state._fsp--;

            	    stream_columnNameColonType.add(columnNameColonType573.getTree());

            	    }
            	    break;

            	default :
            	    break loop157;
                }
            } while (true);


            // AST REWRITE
            // elements: columnNameColonType
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1313:56: -> ^( TOK_TABCOLLIST ( columnNameColonType )+ )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1313:59: ^( TOK_TABCOLLIST ( columnNameColonType )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_TABCOLLIST, "TOK_TABCOLLIST")
                , root_1);

                if ( !(stream_columnNameColonType.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_columnNameColonType.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnNameColonType.nextTree());

                }
                stream_columnNameColonType.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "columnNameColonTypeList"


    public static class columnNameList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "columnNameList"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1316:1: columnNameList : columnName ( COMMA columnName )* -> ^( TOK_TABCOLNAME ( columnName )+ ) ;
    public final HiveParser.columnNameList_return columnNameList() throws RecognitionException {
        HiveParser.columnNameList_return retval = new HiveParser.columnNameList_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token COMMA575=null;
        HiveParser.columnName_return columnName574 =null;

        HiveParser.columnName_return columnName576 =null;


        CommonTree COMMA575_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_columnName=new RewriteRuleSubtreeStream(adaptor,"rule columnName");
         msgs.push("column name list"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1319:5: ( columnName ( COMMA columnName )* -> ^( TOK_TABCOLNAME ( columnName )+ ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1319:7: columnName ( COMMA columnName )*
            {
            pushFollow(FOLLOW_columnName_in_columnNameList9119);
            columnName574=columnName();

            state._fsp--;

            stream_columnName.add(columnName574.getTree());

            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1319:18: ( COMMA columnName )*
            loop158:
            do {
                int alt158=2;
                int LA158_0 = input.LA(1);

                if ( (LA158_0==COMMA) ) {
                    alt158=1;
                }


                switch (alt158) {
            	case 1 :
            	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1319:19: COMMA columnName
            	    {
            	    COMMA575=(Token)match(input,COMMA,FOLLOW_COMMA_in_columnNameList9122);  
            	    stream_COMMA.add(COMMA575);


            	    pushFollow(FOLLOW_columnName_in_columnNameList9124);
            	    columnName576=columnName();

            	    state._fsp--;

            	    stream_columnName.add(columnName576.getTree());

            	    }
            	    break;

            	default :
            	    break loop158;
                }
            } while (true);


            // AST REWRITE
            // elements: columnName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1319:38: -> ^( TOK_TABCOLNAME ( columnName )+ )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1319:41: ^( TOK_TABCOLNAME ( columnName )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_TABCOLNAME, "TOK_TABCOLNAME")
                , root_1);

                if ( !(stream_columnName.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_columnName.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnName.nextTree());

                }
                stream_columnName.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "columnNameList"


    public static class columnName_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "columnName"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1322:1: columnName : Identifier ;
    public final HiveParser.columnName_return columnName() throws RecognitionException {
        HiveParser.columnName_return retval = new HiveParser.columnName_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token Identifier577=null;

        CommonTree Identifier577_tree=null;

         msgs.push("column name"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1325:5: ( Identifier )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1326:7: Identifier
            {
            root_0 = (CommonTree)adaptor.nil();


            Identifier577=(Token)match(input,Identifier,FOLLOW_Identifier_in_columnName9168); 
            Identifier577_tree = 
            (CommonTree)adaptor.create(Identifier577)
            ;
            adaptor.addChild(root_0, Identifier577_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "columnName"


    public static class columnNameOrderList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "columnNameOrderList"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1329:1: columnNameOrderList : columnNameOrder ( COMMA columnNameOrder )* -> ^( TOK_TABCOLNAME ( columnNameOrder )+ ) ;
    public final HiveParser.columnNameOrderList_return columnNameOrderList() throws RecognitionException {
        HiveParser.columnNameOrderList_return retval = new HiveParser.columnNameOrderList_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token COMMA579=null;
        HiveParser.columnNameOrder_return columnNameOrder578 =null;

        HiveParser.columnNameOrder_return columnNameOrder580 =null;


        CommonTree COMMA579_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_columnNameOrder=new RewriteRuleSubtreeStream(adaptor,"rule columnNameOrder");
         msgs.push("column name order list"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1332:5: ( columnNameOrder ( COMMA columnNameOrder )* -> ^( TOK_TABCOLNAME ( columnNameOrder )+ ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1332:7: columnNameOrder ( COMMA columnNameOrder )*
            {
            pushFollow(FOLLOW_columnNameOrder_in_columnNameOrderList9195);
            columnNameOrder578=columnNameOrder();

            state._fsp--;

            stream_columnNameOrder.add(columnNameOrder578.getTree());

            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1332:23: ( COMMA columnNameOrder )*
            loop159:
            do {
                int alt159=2;
                int LA159_0 = input.LA(1);

                if ( (LA159_0==COMMA) ) {
                    alt159=1;
                }


                switch (alt159) {
            	case 1 :
            	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1332:24: COMMA columnNameOrder
            	    {
            	    COMMA579=(Token)match(input,COMMA,FOLLOW_COMMA_in_columnNameOrderList9198);  
            	    stream_COMMA.add(COMMA579);


            	    pushFollow(FOLLOW_columnNameOrder_in_columnNameOrderList9200);
            	    columnNameOrder580=columnNameOrder();

            	    state._fsp--;

            	    stream_columnNameOrder.add(columnNameOrder580.getTree());

            	    }
            	    break;

            	default :
            	    break loop159;
                }
            } while (true);


            // AST REWRITE
            // elements: columnNameOrder
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1332:48: -> ^( TOK_TABCOLNAME ( columnNameOrder )+ )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1332:51: ^( TOK_TABCOLNAME ( columnNameOrder )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_TABCOLNAME, "TOK_TABCOLNAME")
                , root_1);

                if ( !(stream_columnNameOrder.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_columnNameOrder.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnNameOrder.nextTree());

                }
                stream_columnNameOrder.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "columnNameOrderList"


    public static class skewedValueElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "skewedValueElement"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1335:1: skewedValueElement : ( skewedColumnValues | skewedColumnValuePairList );
    public final HiveParser.skewedValueElement_return skewedValueElement() throws RecognitionException {
        HiveParser.skewedValueElement_return retval = new HiveParser.skewedValueElement_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        HiveParser.skewedColumnValues_return skewedColumnValues581 =null;

        HiveParser.skewedColumnValuePairList_return skewedColumnValuePairList582 =null;



         msgs.push("skewed value element"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1338:5: ( skewedColumnValues | skewedColumnValuePairList )
            int alt160=2;
            int LA160_0 = input.LA(1);

            if ( (LA160_0==BigintLiteral||LA160_0==CharSetName||LA160_0==KW_FALSE||LA160_0==KW_TRUE||LA160_0==Number||(LA160_0 >= SmallintLiteral && LA160_0 <= StringLiteral)||LA160_0==TinyintLiteral) ) {
                alt160=1;
            }
            else if ( (LA160_0==LPAREN) ) {
                alt160=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 160, 0, input);

                throw nvae;

            }
            switch (alt160) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1339:7: skewedColumnValues
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_skewedColumnValues_in_skewedValueElement9245);
                    skewedColumnValues581=skewedColumnValues();

                    state._fsp--;

                    adaptor.addChild(root_0, skewedColumnValues581.getTree());

                    }
                    break;
                case 2 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1340:8: skewedColumnValuePairList
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_skewedColumnValuePairList_in_skewedValueElement9254);
                    skewedColumnValuePairList582=skewedColumnValuePairList();

                    state._fsp--;

                    adaptor.addChild(root_0, skewedColumnValuePairList582.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "skewedValueElement"


    public static class skewedColumnValuePairList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "skewedColumnValuePairList"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1343:1: skewedColumnValuePairList : skewedColumnValuePair ( COMMA skewedColumnValuePair )* -> ^( TOK_TABCOLVALUE_PAIR ( skewedColumnValuePair )+ ) ;
    public final HiveParser.skewedColumnValuePairList_return skewedColumnValuePairList() throws RecognitionException {
        HiveParser.skewedColumnValuePairList_return retval = new HiveParser.skewedColumnValuePairList_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token COMMA584=null;
        HiveParser.skewedColumnValuePair_return skewedColumnValuePair583 =null;

        HiveParser.skewedColumnValuePair_return skewedColumnValuePair585 =null;


        CommonTree COMMA584_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_skewedColumnValuePair=new RewriteRuleSubtreeStream(adaptor,"rule skewedColumnValuePair");
         msgs.push("column value pair list"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1346:5: ( skewedColumnValuePair ( COMMA skewedColumnValuePair )* -> ^( TOK_TABCOLVALUE_PAIR ( skewedColumnValuePair )+ ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1346:7: skewedColumnValuePair ( COMMA skewedColumnValuePair )*
            {
            pushFollow(FOLLOW_skewedColumnValuePair_in_skewedColumnValuePairList9281);
            skewedColumnValuePair583=skewedColumnValuePair();

            state._fsp--;

            stream_skewedColumnValuePair.add(skewedColumnValuePair583.getTree());

            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1346:29: ( COMMA skewedColumnValuePair )*
            loop161:
            do {
                int alt161=2;
                int LA161_0 = input.LA(1);

                if ( (LA161_0==COMMA) ) {
                    alt161=1;
                }


                switch (alt161) {
            	case 1 :
            	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1346:30: COMMA skewedColumnValuePair
            	    {
            	    COMMA584=(Token)match(input,COMMA,FOLLOW_COMMA_in_skewedColumnValuePairList9284);  
            	    stream_COMMA.add(COMMA584);


            	    pushFollow(FOLLOW_skewedColumnValuePair_in_skewedColumnValuePairList9286);
            	    skewedColumnValuePair585=skewedColumnValuePair();

            	    state._fsp--;

            	    stream_skewedColumnValuePair.add(skewedColumnValuePair585.getTree());

            	    }
            	    break;

            	default :
            	    break loop161;
                }
            } while (true);


            // AST REWRITE
            // elements: skewedColumnValuePair
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1346:60: -> ^( TOK_TABCOLVALUE_PAIR ( skewedColumnValuePair )+ )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1346:63: ^( TOK_TABCOLVALUE_PAIR ( skewedColumnValuePair )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_TABCOLVALUE_PAIR, "TOK_TABCOLVALUE_PAIR")
                , root_1);

                if ( !(stream_skewedColumnValuePair.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_skewedColumnValuePair.hasNext() ) {
                    adaptor.addChild(root_1, stream_skewedColumnValuePair.nextTree());

                }
                stream_skewedColumnValuePair.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "skewedColumnValuePairList"


    public static class skewedColumnValuePair_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "skewedColumnValuePair"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1349:1: skewedColumnValuePair : LPAREN colValues= skewedColumnValues RPAREN -> ^( TOK_TABCOLVALUES $colValues) ;
    public final HiveParser.skewedColumnValuePair_return skewedColumnValuePair() throws RecognitionException {
        HiveParser.skewedColumnValuePair_return retval = new HiveParser.skewedColumnValuePair_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token LPAREN586=null;
        Token RPAREN587=null;
        HiveParser.skewedColumnValues_return colValues =null;


        CommonTree LPAREN586_tree=null;
        CommonTree RPAREN587_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_skewedColumnValues=new RewriteRuleSubtreeStream(adaptor,"rule skewedColumnValues");
         msgs.push("column value pair"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1352:5: ( LPAREN colValues= skewedColumnValues RPAREN -> ^( TOK_TABCOLVALUES $colValues) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1353:7: LPAREN colValues= skewedColumnValues RPAREN
            {
            LPAREN586=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_skewedColumnValuePair9331);  
            stream_LPAREN.add(LPAREN586);


            pushFollow(FOLLOW_skewedColumnValues_in_skewedColumnValuePair9335);
            colValues=skewedColumnValues();

            state._fsp--;

            stream_skewedColumnValues.add(colValues.getTree());

            RPAREN587=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_skewedColumnValuePair9337);  
            stream_RPAREN.add(RPAREN587);


            // AST REWRITE
            // elements: colValues
            // token labels: 
            // rule labels: retval, colValues
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_colValues=new RewriteRuleSubtreeStream(adaptor,"rule colValues",colValues!=null?colValues.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1354:7: -> ^( TOK_TABCOLVALUES $colValues)
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1354:10: ^( TOK_TABCOLVALUES $colValues)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_TABCOLVALUES, "TOK_TABCOLVALUES")
                , root_1);

                adaptor.addChild(root_1, stream_colValues.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "skewedColumnValuePair"


    public static class skewedColumnValues_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "skewedColumnValues"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1357:1: skewedColumnValues : skewedColumnValue ( COMMA skewedColumnValue )* -> ^( TOK_TABCOLVALUE ( skewedColumnValue )+ ) ;
    public final HiveParser.skewedColumnValues_return skewedColumnValues() throws RecognitionException {
        HiveParser.skewedColumnValues_return retval = new HiveParser.skewedColumnValues_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token COMMA589=null;
        HiveParser.skewedColumnValue_return skewedColumnValue588 =null;

        HiveParser.skewedColumnValue_return skewedColumnValue590 =null;


        CommonTree COMMA589_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_skewedColumnValue=new RewriteRuleSubtreeStream(adaptor,"rule skewedColumnValue");
         msgs.push("column values"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1360:5: ( skewedColumnValue ( COMMA skewedColumnValue )* -> ^( TOK_TABCOLVALUE ( skewedColumnValue )+ ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1360:7: skewedColumnValue ( COMMA skewedColumnValue )*
            {
            pushFollow(FOLLOW_skewedColumnValue_in_skewedColumnValues9380);
            skewedColumnValue588=skewedColumnValue();

            state._fsp--;

            stream_skewedColumnValue.add(skewedColumnValue588.getTree());

            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1360:25: ( COMMA skewedColumnValue )*
            loop162:
            do {
                int alt162=2;
                int LA162_0 = input.LA(1);

                if ( (LA162_0==COMMA) ) {
                    alt162=1;
                }


                switch (alt162) {
            	case 1 :
            	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1360:26: COMMA skewedColumnValue
            	    {
            	    COMMA589=(Token)match(input,COMMA,FOLLOW_COMMA_in_skewedColumnValues9383);  
            	    stream_COMMA.add(COMMA589);


            	    pushFollow(FOLLOW_skewedColumnValue_in_skewedColumnValues9385);
            	    skewedColumnValue590=skewedColumnValue();

            	    state._fsp--;

            	    stream_skewedColumnValue.add(skewedColumnValue590.getTree());

            	    }
            	    break;

            	default :
            	    break loop162;
                }
            } while (true);


            // AST REWRITE
            // elements: skewedColumnValue
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1360:52: -> ^( TOK_TABCOLVALUE ( skewedColumnValue )+ )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1360:55: ^( TOK_TABCOLVALUE ( skewedColumnValue )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_TABCOLVALUE, "TOK_TABCOLVALUE")
                , root_1);

                if ( !(stream_skewedColumnValue.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_skewedColumnValue.hasNext() ) {
                    adaptor.addChild(root_1, stream_skewedColumnValue.nextTree());

                }
                stream_skewedColumnValue.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "skewedColumnValues"


    public static class skewedColumnValue_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "skewedColumnValue"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1363:1: skewedColumnValue : constant ;
    public final HiveParser.skewedColumnValue_return skewedColumnValue() throws RecognitionException {
        HiveParser.skewedColumnValue_return retval = new HiveParser.skewedColumnValue_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        HiveParser.constant_return constant591 =null;



         msgs.push("column value"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1366:5: ( constant )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1367:7: constant
            {
            root_0 = (CommonTree)adaptor.nil();


            pushFollow(FOLLOW_constant_in_skewedColumnValue9429);
            constant591=constant();

            state._fsp--;

            adaptor.addChild(root_0, constant591.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "skewedColumnValue"


    public static class skewedValueLocationElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "skewedValueLocationElement"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1370:1: skewedValueLocationElement : ( skewedColumnValue | skewedColumnValuePair );
    public final HiveParser.skewedValueLocationElement_return skewedValueLocationElement() throws RecognitionException {
        HiveParser.skewedValueLocationElement_return retval = new HiveParser.skewedValueLocationElement_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        HiveParser.skewedColumnValue_return skewedColumnValue592 =null;

        HiveParser.skewedColumnValuePair_return skewedColumnValuePair593 =null;



         msgs.push("skewed value location element"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1373:5: ( skewedColumnValue | skewedColumnValuePair )
            int alt163=2;
            int LA163_0 = input.LA(1);

            if ( (LA163_0==BigintLiteral||LA163_0==CharSetName||LA163_0==KW_FALSE||LA163_0==KW_TRUE||LA163_0==Number||(LA163_0 >= SmallintLiteral && LA163_0 <= StringLiteral)||LA163_0==TinyintLiteral) ) {
                alt163=1;
            }
            else if ( (LA163_0==LPAREN) ) {
                alt163=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 163, 0, input);

                throw nvae;

            }
            switch (alt163) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1374:7: skewedColumnValue
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_skewedColumnValue_in_skewedValueLocationElement9463);
                    skewedColumnValue592=skewedColumnValue();

                    state._fsp--;

                    adaptor.addChild(root_0, skewedColumnValue592.getTree());

                    }
                    break;
                case 2 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1375:8: skewedColumnValuePair
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_skewedColumnValuePair_in_skewedValueLocationElement9472);
                    skewedColumnValuePair593=skewedColumnValuePair();

                    state._fsp--;

                    adaptor.addChild(root_0, skewedColumnValuePair593.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "skewedValueLocationElement"


    public static class columnNameOrder_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "columnNameOrder"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1378:1: columnNameOrder : Identifier (asc= KW_ASC |desc= KW_DESC )? -> {$desc == null}? ^( TOK_TABSORTCOLNAMEASC Identifier ) -> ^( TOK_TABSORTCOLNAMEDESC Identifier ) ;
    public final HiveParser.columnNameOrder_return columnNameOrder() throws RecognitionException {
        HiveParser.columnNameOrder_return retval = new HiveParser.columnNameOrder_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token asc=null;
        Token desc=null;
        Token Identifier594=null;

        CommonTree asc_tree=null;
        CommonTree desc_tree=null;
        CommonTree Identifier594_tree=null;
        RewriteRuleTokenStream stream_KW_DESC=new RewriteRuleTokenStream(adaptor,"token KW_DESC");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_KW_ASC=new RewriteRuleTokenStream(adaptor,"token KW_ASC");

         msgs.push("column name order"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1381:5: ( Identifier (asc= KW_ASC |desc= KW_DESC )? -> {$desc == null}? ^( TOK_TABSORTCOLNAMEASC Identifier ) -> ^( TOK_TABSORTCOLNAMEDESC Identifier ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1381:7: Identifier (asc= KW_ASC |desc= KW_DESC )?
            {
            Identifier594=(Token)match(input,Identifier,FOLLOW_Identifier_in_columnNameOrder9503);  
            stream_Identifier.add(Identifier594);


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1381:18: (asc= KW_ASC |desc= KW_DESC )?
            int alt164=3;
            int LA164_0 = input.LA(1);

            if ( (LA164_0==KW_ASC) ) {
                alt164=1;
            }
            else if ( (LA164_0==KW_DESC) ) {
                alt164=2;
            }
            switch (alt164) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1381:19: asc= KW_ASC
                    {
                    asc=(Token)match(input,KW_ASC,FOLLOW_KW_ASC_in_columnNameOrder9508);  
                    stream_KW_ASC.add(asc);


                    }
                    break;
                case 2 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1381:32: desc= KW_DESC
                    {
                    desc=(Token)match(input,KW_DESC,FOLLOW_KW_DESC_in_columnNameOrder9514);  
                    stream_KW_DESC.add(desc);


                    }
                    break;

            }


            // AST REWRITE
            // elements: Identifier, Identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1382:5: -> {$desc == null}? ^( TOK_TABSORTCOLNAMEASC Identifier )
            if (desc == null) {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1382:25: ^( TOK_TABSORTCOLNAMEASC Identifier )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_TABSORTCOLNAMEASC, "TOK_TABSORTCOLNAMEASC")
                , root_1);

                adaptor.addChild(root_1, 
                stream_Identifier.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 1383:5: -> ^( TOK_TABSORTCOLNAMEDESC Identifier )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1383:25: ^( TOK_TABSORTCOLNAMEDESC Identifier )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_TABSORTCOLNAMEDESC, "TOK_TABSORTCOLNAMEDESC")
                , root_1);

                adaptor.addChild(root_1, 
                stream_Identifier.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "columnNameOrder"


    public static class columnNameCommentList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "columnNameCommentList"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1386:1: columnNameCommentList : columnNameComment ( COMMA columnNameComment )* -> ^( TOK_TABCOLNAME ( columnNameComment )+ ) ;
    public final HiveParser.columnNameCommentList_return columnNameCommentList() throws RecognitionException {
        HiveParser.columnNameCommentList_return retval = new HiveParser.columnNameCommentList_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token COMMA596=null;
        HiveParser.columnNameComment_return columnNameComment595 =null;

        HiveParser.columnNameComment_return columnNameComment597 =null;


        CommonTree COMMA596_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_columnNameComment=new RewriteRuleSubtreeStream(adaptor,"rule columnNameComment");
         msgs.push("column name comment list"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1389:5: ( columnNameComment ( COMMA columnNameComment )* -> ^( TOK_TABCOLNAME ( columnNameComment )+ ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1389:7: columnNameComment ( COMMA columnNameComment )*
            {
            pushFollow(FOLLOW_columnNameComment_in_columnNameCommentList9586);
            columnNameComment595=columnNameComment();

            state._fsp--;

            stream_columnNameComment.add(columnNameComment595.getTree());

            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1389:25: ( COMMA columnNameComment )*
            loop165:
            do {
                int alt165=2;
                int LA165_0 = input.LA(1);

                if ( (LA165_0==COMMA) ) {
                    alt165=1;
                }


                switch (alt165) {
            	case 1 :
            	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1389:26: COMMA columnNameComment
            	    {
            	    COMMA596=(Token)match(input,COMMA,FOLLOW_COMMA_in_columnNameCommentList9589);  
            	    stream_COMMA.add(COMMA596);


            	    pushFollow(FOLLOW_columnNameComment_in_columnNameCommentList9591);
            	    columnNameComment597=columnNameComment();

            	    state._fsp--;

            	    stream_columnNameComment.add(columnNameComment597.getTree());

            	    }
            	    break;

            	default :
            	    break loop165;
                }
            } while (true);


            // AST REWRITE
            // elements: columnNameComment
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1389:52: -> ^( TOK_TABCOLNAME ( columnNameComment )+ )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1389:55: ^( TOK_TABCOLNAME ( columnNameComment )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_TABCOLNAME, "TOK_TABCOLNAME")
                , root_1);

                if ( !(stream_columnNameComment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_columnNameComment.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnNameComment.nextTree());

                }
                stream_columnNameComment.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "columnNameCommentList"


    public static class columnNameComment_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "columnNameComment"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1392:1: columnNameComment : colName= Identifier ( KW_COMMENT comment= StringLiteral )? -> ^( TOK_TABCOL $colName TOK_NULL ( $comment)? ) ;
    public final HiveParser.columnNameComment_return columnNameComment() throws RecognitionException {
        HiveParser.columnNameComment_return retval = new HiveParser.columnNameComment_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token colName=null;
        Token comment=null;
        Token KW_COMMENT598=null;

        CommonTree colName_tree=null;
        CommonTree comment_tree=null;
        CommonTree KW_COMMENT598_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_COMMENT=new RewriteRuleTokenStream(adaptor,"token KW_COMMENT");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");

         msgs.push("column name comment"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1395:5: (colName= Identifier ( KW_COMMENT comment= StringLiteral )? -> ^( TOK_TABCOL $colName TOK_NULL ( $comment)? ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1395:7: colName= Identifier ( KW_COMMENT comment= StringLiteral )?
            {
            colName=(Token)match(input,Identifier,FOLLOW_Identifier_in_columnNameComment9631);  
            stream_Identifier.add(colName);


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1395:26: ( KW_COMMENT comment= StringLiteral )?
            int alt166=2;
            int LA166_0 = input.LA(1);

            if ( (LA166_0==KW_COMMENT) ) {
                alt166=1;
            }
            switch (alt166) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1395:27: KW_COMMENT comment= StringLiteral
                    {
                    KW_COMMENT598=(Token)match(input,KW_COMMENT,FOLLOW_KW_COMMENT_in_columnNameComment9634);  
                    stream_KW_COMMENT.add(KW_COMMENT598);


                    comment=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_columnNameComment9638);  
                    stream_StringLiteral.add(comment);


                    }
                    break;

            }


            // AST REWRITE
            // elements: comment, colName
            // token labels: comment, colName
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_comment=new RewriteRuleTokenStream(adaptor,"token comment",comment);
            RewriteRuleTokenStream stream_colName=new RewriteRuleTokenStream(adaptor,"token colName",colName);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1396:5: -> ^( TOK_TABCOL $colName TOK_NULL ( $comment)? )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1396:8: ^( TOK_TABCOL $colName TOK_NULL ( $comment)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_TABCOL, "TOK_TABCOL")
                , root_1);

                adaptor.addChild(root_1, stream_colName.nextNode());

                adaptor.addChild(root_1, 
                (CommonTree)adaptor.create(TOK_NULL, "TOK_NULL")
                );

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1396:40: ( $comment)?
                if ( stream_comment.hasNext() ) {
                    adaptor.addChild(root_1, stream_comment.nextNode());

                }
                stream_comment.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "columnNameComment"


    public static class columnRefOrder_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "columnRefOrder"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1399:1: columnRefOrder : expression (asc= KW_ASC |desc= KW_DESC )? -> {$desc == null}? ^( TOK_TABSORTCOLNAMEASC expression ) -> ^( TOK_TABSORTCOLNAMEDESC expression ) ;
    public final HiveParser.columnRefOrder_return columnRefOrder() throws RecognitionException {
        HiveParser.columnRefOrder_return retval = new HiveParser.columnRefOrder_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token asc=null;
        Token desc=null;
        HiveParser.expression_return expression599 =null;


        CommonTree asc_tree=null;
        CommonTree desc_tree=null;
        RewriteRuleTokenStream stream_KW_DESC=new RewriteRuleTokenStream(adaptor,"token KW_DESC");
        RewriteRuleTokenStream stream_KW_ASC=new RewriteRuleTokenStream(adaptor,"token KW_ASC");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
         msgs.push("column order"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1402:5: ( expression (asc= KW_ASC |desc= KW_DESC )? -> {$desc == null}? ^( TOK_TABSORTCOLNAMEASC expression ) -> ^( TOK_TABSORTCOLNAMEDESC expression ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1402:7: expression (asc= KW_ASC |desc= KW_DESC )?
            {
            pushFollow(FOLLOW_expression_in_columnRefOrder9686);
            expression599=expression();

            state._fsp--;

            stream_expression.add(expression599.getTree());

            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1402:18: (asc= KW_ASC |desc= KW_DESC )?
            int alt167=3;
            int LA167_0 = input.LA(1);

            if ( (LA167_0==KW_ASC) ) {
                alt167=1;
            }
            else if ( (LA167_0==KW_DESC) ) {
                alt167=2;
            }
            switch (alt167) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1402:19: asc= KW_ASC
                    {
                    asc=(Token)match(input,KW_ASC,FOLLOW_KW_ASC_in_columnRefOrder9691);  
                    stream_KW_ASC.add(asc);


                    }
                    break;
                case 2 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1402:32: desc= KW_DESC
                    {
                    desc=(Token)match(input,KW_DESC,FOLLOW_KW_DESC_in_columnRefOrder9697);  
                    stream_KW_DESC.add(desc);


                    }
                    break;

            }


            // AST REWRITE
            // elements: expression, expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1403:5: -> {$desc == null}? ^( TOK_TABSORTCOLNAMEASC expression )
            if (desc == null) {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1403:25: ^( TOK_TABSORTCOLNAMEASC expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_TABSORTCOLNAMEASC, "TOK_TABSORTCOLNAMEASC")
                , root_1);

                adaptor.addChild(root_1, stream_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 1404:5: -> ^( TOK_TABSORTCOLNAMEDESC expression )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1404:25: ^( TOK_TABSORTCOLNAMEDESC expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_TABSORTCOLNAMEDESC, "TOK_TABSORTCOLNAMEDESC")
                , root_1);

                adaptor.addChild(root_1, stream_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "columnRefOrder"


    public static class columnNameType_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "columnNameType"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1407:1: columnNameType : colName= Identifier colType ( KW_COMMENT comment= StringLiteral )? -> {$comment == null}? ^( TOK_TABCOL $colName colType ) -> ^( TOK_TABCOL $colName colType $comment) ;
    public final HiveParser.columnNameType_return columnNameType() throws RecognitionException {
        HiveParser.columnNameType_return retval = new HiveParser.columnNameType_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token colName=null;
        Token comment=null;
        Token KW_COMMENT601=null;
        HiveParser.colType_return colType600 =null;


        CommonTree colName_tree=null;
        CommonTree comment_tree=null;
        CommonTree KW_COMMENT601_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_COMMENT=new RewriteRuleTokenStream(adaptor,"token KW_COMMENT");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_colType=new RewriteRuleSubtreeStream(adaptor,"rule colType");
         msgs.push("column specification"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1410:5: (colName= Identifier colType ( KW_COMMENT comment= StringLiteral )? -> {$comment == null}? ^( TOK_TABCOL $colName colType ) -> ^( TOK_TABCOL $colName colType $comment) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1410:7: colName= Identifier colType ( KW_COMMENT comment= StringLiteral )?
            {
            colName=(Token)match(input,Identifier,FOLLOW_Identifier_in_columnNameType9771);  
            stream_Identifier.add(colName);


            pushFollow(FOLLOW_colType_in_columnNameType9773);
            colType600=colType();

            state._fsp--;

            stream_colType.add(colType600.getTree());

            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1410:34: ( KW_COMMENT comment= StringLiteral )?
            int alt168=2;
            int LA168_0 = input.LA(1);

            if ( (LA168_0==KW_COMMENT) ) {
                alt168=1;
            }
            switch (alt168) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1410:35: KW_COMMENT comment= StringLiteral
                    {
                    KW_COMMENT601=(Token)match(input,KW_COMMENT,FOLLOW_KW_COMMENT_in_columnNameType9776);  
                    stream_KW_COMMENT.add(KW_COMMENT601);


                    comment=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_columnNameType9780);  
                    stream_StringLiteral.add(comment);


                    }
                    break;

            }


            // AST REWRITE
            // elements: colType, comment, colName, colType, colName
            // token labels: comment, colName
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_comment=new RewriteRuleTokenStream(adaptor,"token comment",comment);
            RewriteRuleTokenStream stream_colName=new RewriteRuleTokenStream(adaptor,"token colName",colName);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1411:5: -> {$comment == null}? ^( TOK_TABCOL $colName colType )
            if (comment == null) {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1411:28: ^( TOK_TABCOL $colName colType )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_TABCOL, "TOK_TABCOL")
                , root_1);

                adaptor.addChild(root_1, stream_colName.nextNode());

                adaptor.addChild(root_1, stream_colType.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 1412:5: -> ^( TOK_TABCOL $colName colType $comment)
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1412:28: ^( TOK_TABCOL $colName colType $comment)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_TABCOL, "TOK_TABCOL")
                , root_1);

                adaptor.addChild(root_1, stream_colName.nextNode());

                adaptor.addChild(root_1, stream_colType.nextTree());

                adaptor.addChild(root_1, stream_comment.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "columnNameType"


    public static class columnNameColonType_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "columnNameColonType"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1415:1: columnNameColonType : colName= Identifier COLON colType ( KW_COMMENT comment= StringLiteral )? -> {$comment == null}? ^( TOK_TABCOL $colName colType ) -> ^( TOK_TABCOL $colName colType $comment) ;
    public final HiveParser.columnNameColonType_return columnNameColonType() throws RecognitionException {
        HiveParser.columnNameColonType_return retval = new HiveParser.columnNameColonType_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token colName=null;
        Token comment=null;
        Token COLON602=null;
        Token KW_COMMENT604=null;
        HiveParser.colType_return colType603 =null;


        CommonTree colName_tree=null;
        CommonTree comment_tree=null;
        CommonTree COLON602_tree=null;
        CommonTree KW_COMMENT604_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_COMMENT=new RewriteRuleTokenStream(adaptor,"token KW_COMMENT");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_colType=new RewriteRuleSubtreeStream(adaptor,"rule colType");
         msgs.push("column specification"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1418:5: (colName= Identifier COLON colType ( KW_COMMENT comment= StringLiteral )? -> {$comment == null}? ^( TOK_TABCOL $colName colType ) -> ^( TOK_TABCOL $colName colType $comment) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1418:7: colName= Identifier COLON colType ( KW_COMMENT comment= StringLiteral )?
            {
            colName=(Token)match(input,Identifier,FOLLOW_Identifier_in_columnNameColonType9866);  
            stream_Identifier.add(colName);


            COLON602=(Token)match(input,COLON,FOLLOW_COLON_in_columnNameColonType9868);  
            stream_COLON.add(COLON602);


            pushFollow(FOLLOW_colType_in_columnNameColonType9870);
            colType603=colType();

            state._fsp--;

            stream_colType.add(colType603.getTree());

            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1418:40: ( KW_COMMENT comment= StringLiteral )?
            int alt169=2;
            int LA169_0 = input.LA(1);

            if ( (LA169_0==KW_COMMENT) ) {
                alt169=1;
            }
            switch (alt169) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1418:41: KW_COMMENT comment= StringLiteral
                    {
                    KW_COMMENT604=(Token)match(input,KW_COMMENT,FOLLOW_KW_COMMENT_in_columnNameColonType9873);  
                    stream_KW_COMMENT.add(KW_COMMENT604);


                    comment=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_columnNameColonType9877);  
                    stream_StringLiteral.add(comment);


                    }
                    break;

            }


            // AST REWRITE
            // elements: colType, comment, colName, colType, colName
            // token labels: comment, colName
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_comment=new RewriteRuleTokenStream(adaptor,"token comment",comment);
            RewriteRuleTokenStream stream_colName=new RewriteRuleTokenStream(adaptor,"token colName",colName);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1419:5: -> {$comment == null}? ^( TOK_TABCOL $colName colType )
            if (comment == null) {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1419:28: ^( TOK_TABCOL $colName colType )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_TABCOL, "TOK_TABCOL")
                , root_1);

                adaptor.addChild(root_1, stream_colName.nextNode());

                adaptor.addChild(root_1, stream_colType.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 1420:5: -> ^( TOK_TABCOL $colName colType $comment)
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1420:28: ^( TOK_TABCOL $colName colType $comment)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_TABCOL, "TOK_TABCOL")
                , root_1);

                adaptor.addChild(root_1, stream_colName.nextNode());

                adaptor.addChild(root_1, stream_colType.nextTree());

                adaptor.addChild(root_1, stream_comment.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "columnNameColonType"


    public static class colType_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "colType"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1423:1: colType : type ;
    public final HiveParser.colType_return colType() throws RecognitionException {
        HiveParser.colType_return retval = new HiveParser.colType_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        HiveParser.type_return type605 =null;



         msgs.push("column type"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1426:5: ( type )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1426:7: type
            {
            root_0 = (CommonTree)adaptor.nil();


            pushFollow(FOLLOW_type_in_colType9961);
            type605=type();

            state._fsp--;

            adaptor.addChild(root_0, type605.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "colType"


    public static class colTypeList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "colTypeList"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1429:1: colTypeList : colType ( COMMA colType )* -> ^( TOK_COLTYPELIST ( colType )+ ) ;
    public final HiveParser.colTypeList_return colTypeList() throws RecognitionException {
        HiveParser.colTypeList_return retval = new HiveParser.colTypeList_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token COMMA607=null;
        HiveParser.colType_return colType606 =null;

        HiveParser.colType_return colType608 =null;


        CommonTree COMMA607_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_colType=new RewriteRuleSubtreeStream(adaptor,"rule colType");
         msgs.push("column type list"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1432:5: ( colType ( COMMA colType )* -> ^( TOK_COLTYPELIST ( colType )+ ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1432:7: colType ( COMMA colType )*
            {
            pushFollow(FOLLOW_colType_in_colTypeList9988);
            colType606=colType();

            state._fsp--;

            stream_colType.add(colType606.getTree());

            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1432:15: ( COMMA colType )*
            loop170:
            do {
                int alt170=2;
                int LA170_0 = input.LA(1);

                if ( (LA170_0==COMMA) ) {
                    alt170=1;
                }


                switch (alt170) {
            	case 1 :
            	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1432:16: COMMA colType
            	    {
            	    COMMA607=(Token)match(input,COMMA,FOLLOW_COMMA_in_colTypeList9991);  
            	    stream_COMMA.add(COMMA607);


            	    pushFollow(FOLLOW_colType_in_colTypeList9993);
            	    colType608=colType();

            	    state._fsp--;

            	    stream_colType.add(colType608.getTree());

            	    }
            	    break;

            	default :
            	    break loop170;
                }
            } while (true);


            // AST REWRITE
            // elements: colType
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1432:32: -> ^( TOK_COLTYPELIST ( colType )+ )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1432:35: ^( TOK_COLTYPELIST ( colType )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_COLTYPELIST, "TOK_COLTYPELIST")
                , root_1);

                if ( !(stream_colType.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_colType.hasNext() ) {
                    adaptor.addChild(root_1, stream_colType.nextTree());

                }
                stream_colType.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "colTypeList"


    public static class type_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1435:1: type : ( primitiveType | listType | structType | mapType | unionType );
    public final HiveParser.type_return type() throws RecognitionException {
        HiveParser.type_return retval = new HiveParser.type_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        HiveParser.primitiveType_return primitiveType609 =null;

        HiveParser.listType_return listType610 =null;

        HiveParser.structType_return structType611 =null;

        HiveParser.mapType_return mapType612 =null;

        HiveParser.unionType_return unionType613 =null;



        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1436:5: ( primitiveType | listType | structType | mapType | unionType )
            int alt171=5;
            switch ( input.LA(1) ) {
            case KW_BIGINT:
            case KW_BINARY:
            case KW_BOOLEAN:
            case KW_DATE:
            case KW_DATETIME:
            case KW_DECIMAL:
            case KW_DOUBLE:
            case KW_FLOAT:
            case KW_INT:
            case KW_SMALLINT:
            case KW_STRING:
            case KW_TIMESTAMP:
            case KW_TINYINT:
                {
                alt171=1;
                }
                break;
            case KW_ARRAY:
                {
                alt171=2;
                }
                break;
            case KW_STRUCT:
                {
                alt171=3;
                }
                break;
            case KW_MAP:
                {
                alt171=4;
                }
                break;
            case KW_UNIONTYPE:
                {
                alt171=5;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 171, 0, input);

                throw nvae;

            }

            switch (alt171) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1436:7: primitiveType
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_primitiveType_in_type10021);
                    primitiveType609=primitiveType();

                    state._fsp--;

                    adaptor.addChild(root_0, primitiveType609.getTree());

                    }
                    break;
                case 2 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1437:7: listType
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_listType_in_type10029);
                    listType610=listType();

                    state._fsp--;

                    adaptor.addChild(root_0, listType610.getTree());

                    }
                    break;
                case 3 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1438:7: structType
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_structType_in_type10037);
                    structType611=structType();

                    state._fsp--;

                    adaptor.addChild(root_0, structType611.getTree());

                    }
                    break;
                case 4 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1439:7: mapType
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_mapType_in_type10045);
                    mapType612=mapType();

                    state._fsp--;

                    adaptor.addChild(root_0, mapType612.getTree());

                    }
                    break;
                case 5 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1440:7: unionType
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_unionType_in_type10053);
                    unionType613=unionType();

                    state._fsp--;

                    adaptor.addChild(root_0, unionType613.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type"


    public static class primitiveType_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "primitiveType"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1442:1: primitiveType : ( KW_TINYINT -> TOK_TINYINT | KW_SMALLINT -> TOK_SMALLINT | KW_INT -> TOK_INT | KW_BIGINT -> TOK_BIGINT | KW_BOOLEAN -> TOK_BOOLEAN | KW_FLOAT -> TOK_FLOAT | KW_DOUBLE -> TOK_DOUBLE | KW_DATE -> TOK_DATE | KW_DATETIME -> TOK_DATETIME | KW_TIMESTAMP -> TOK_TIMESTAMP | KW_STRING -> TOK_STRING | KW_BINARY -> TOK_BINARY | KW_DECIMAL -> TOK_DECIMAL );
    public final HiveParser.primitiveType_return primitiveType() throws RecognitionException {
        HiveParser.primitiveType_return retval = new HiveParser.primitiveType_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_TINYINT614=null;
        Token KW_SMALLINT615=null;
        Token KW_INT616=null;
        Token KW_BIGINT617=null;
        Token KW_BOOLEAN618=null;
        Token KW_FLOAT619=null;
        Token KW_DOUBLE620=null;
        Token KW_DATE621=null;
        Token KW_DATETIME622=null;
        Token KW_TIMESTAMP623=null;
        Token KW_STRING624=null;
        Token KW_BINARY625=null;
        Token KW_DECIMAL626=null;

        CommonTree KW_TINYINT614_tree=null;
        CommonTree KW_SMALLINT615_tree=null;
        CommonTree KW_INT616_tree=null;
        CommonTree KW_BIGINT617_tree=null;
        CommonTree KW_BOOLEAN618_tree=null;
        CommonTree KW_FLOAT619_tree=null;
        CommonTree KW_DOUBLE620_tree=null;
        CommonTree KW_DATE621_tree=null;
        CommonTree KW_DATETIME622_tree=null;
        CommonTree KW_TIMESTAMP623_tree=null;
        CommonTree KW_STRING624_tree=null;
        CommonTree KW_BINARY625_tree=null;
        CommonTree KW_DECIMAL626_tree=null;
        RewriteRuleTokenStream stream_KW_DATETIME=new RewriteRuleTokenStream(adaptor,"token KW_DATETIME");
        RewriteRuleTokenStream stream_KW_DATE=new RewriteRuleTokenStream(adaptor,"token KW_DATE");
        RewriteRuleTokenStream stream_KW_TIMESTAMP=new RewriteRuleTokenStream(adaptor,"token KW_TIMESTAMP");
        RewriteRuleTokenStream stream_KW_STRING=new RewriteRuleTokenStream(adaptor,"token KW_STRING");
        RewriteRuleTokenStream stream_KW_SMALLINT=new RewriteRuleTokenStream(adaptor,"token KW_SMALLINT");
        RewriteRuleTokenStream stream_KW_INT=new RewriteRuleTokenStream(adaptor,"token KW_INT");
        RewriteRuleTokenStream stream_KW_BINARY=new RewriteRuleTokenStream(adaptor,"token KW_BINARY");
        RewriteRuleTokenStream stream_KW_DECIMAL=new RewriteRuleTokenStream(adaptor,"token KW_DECIMAL");
        RewriteRuleTokenStream stream_KW_BOOLEAN=new RewriteRuleTokenStream(adaptor,"token KW_BOOLEAN");
        RewriteRuleTokenStream stream_KW_FLOAT=new RewriteRuleTokenStream(adaptor,"token KW_FLOAT");
        RewriteRuleTokenStream stream_KW_DOUBLE=new RewriteRuleTokenStream(adaptor,"token KW_DOUBLE");
        RewriteRuleTokenStream stream_KW_BIGINT=new RewriteRuleTokenStream(adaptor,"token KW_BIGINT");
        RewriteRuleTokenStream stream_KW_TINYINT=new RewriteRuleTokenStream(adaptor,"token KW_TINYINT");

         msgs.push("primitive type specification"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1445:5: ( KW_TINYINT -> TOK_TINYINT | KW_SMALLINT -> TOK_SMALLINT | KW_INT -> TOK_INT | KW_BIGINT -> TOK_BIGINT | KW_BOOLEAN -> TOK_BOOLEAN | KW_FLOAT -> TOK_FLOAT | KW_DOUBLE -> TOK_DOUBLE | KW_DATE -> TOK_DATE | KW_DATETIME -> TOK_DATETIME | KW_TIMESTAMP -> TOK_TIMESTAMP | KW_STRING -> TOK_STRING | KW_BINARY -> TOK_BINARY | KW_DECIMAL -> TOK_DECIMAL )
            int alt172=13;
            switch ( input.LA(1) ) {
            case KW_TINYINT:
                {
                alt172=1;
                }
                break;
            case KW_SMALLINT:
                {
                alt172=2;
                }
                break;
            case KW_INT:
                {
                alt172=3;
                }
                break;
            case KW_BIGINT:
                {
                alt172=4;
                }
                break;
            case KW_BOOLEAN:
                {
                alt172=5;
                }
                break;
            case KW_FLOAT:
                {
                alt172=6;
                }
                break;
            case KW_DOUBLE:
                {
                alt172=7;
                }
                break;
            case KW_DATE:
                {
                alt172=8;
                }
                break;
            case KW_DATETIME:
                {
                alt172=9;
                }
                break;
            case KW_TIMESTAMP:
                {
                alt172=10;
                }
                break;
            case KW_STRING:
                {
                alt172=11;
                }
                break;
            case KW_BINARY:
                {
                alt172=12;
                }
                break;
            case KW_DECIMAL:
                {
                alt172=13;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 172, 0, input);

                throw nvae;

            }

            switch (alt172) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1445:7: KW_TINYINT
                    {
                    KW_TINYINT614=(Token)match(input,KW_TINYINT,FOLLOW_KW_TINYINT_in_primitiveType10075);  
                    stream_KW_TINYINT.add(KW_TINYINT614);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1445:24: -> TOK_TINYINT
                    {
                        adaptor.addChild(root_0, 
                        (CommonTree)adaptor.create(TOK_TINYINT, "TOK_TINYINT")
                        );

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 2 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1446:7: KW_SMALLINT
                    {
                    KW_SMALLINT615=(Token)match(input,KW_SMALLINT,FOLLOW_KW_SMALLINT_in_primitiveType10096);  
                    stream_KW_SMALLINT.add(KW_SMALLINT615);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1446:24: -> TOK_SMALLINT
                    {
                        adaptor.addChild(root_0, 
                        (CommonTree)adaptor.create(TOK_SMALLINT, "TOK_SMALLINT")
                        );

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 3 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1447:7: KW_INT
                    {
                    KW_INT616=(Token)match(input,KW_INT,FOLLOW_KW_INT_in_primitiveType10116);  
                    stream_KW_INT.add(KW_INT616);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1447:24: -> TOK_INT
                    {
                        adaptor.addChild(root_0, 
                        (CommonTree)adaptor.create(TOK_INT, "TOK_INT")
                        );

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 4 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1448:7: KW_BIGINT
                    {
                    KW_BIGINT617=(Token)match(input,KW_BIGINT,FOLLOW_KW_BIGINT_in_primitiveType10141);  
                    stream_KW_BIGINT.add(KW_BIGINT617);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1448:24: -> TOK_BIGINT
                    {
                        adaptor.addChild(root_0, 
                        (CommonTree)adaptor.create(TOK_BIGINT, "TOK_BIGINT")
                        );

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 5 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1449:7: KW_BOOLEAN
                    {
                    KW_BOOLEAN618=(Token)match(input,KW_BOOLEAN,FOLLOW_KW_BOOLEAN_in_primitiveType10163);  
                    stream_KW_BOOLEAN.add(KW_BOOLEAN618);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1449:24: -> TOK_BOOLEAN
                    {
                        adaptor.addChild(root_0, 
                        (CommonTree)adaptor.create(TOK_BOOLEAN, "TOK_BOOLEAN")
                        );

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 6 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1450:7: KW_FLOAT
                    {
                    KW_FLOAT619=(Token)match(input,KW_FLOAT,FOLLOW_KW_FLOAT_in_primitiveType10184);  
                    stream_KW_FLOAT.add(KW_FLOAT619);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1450:24: -> TOK_FLOAT
                    {
                        adaptor.addChild(root_0, 
                        (CommonTree)adaptor.create(TOK_FLOAT, "TOK_FLOAT")
                        );

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 7 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1451:7: KW_DOUBLE
                    {
                    KW_DOUBLE620=(Token)match(input,KW_DOUBLE,FOLLOW_KW_DOUBLE_in_primitiveType10207);  
                    stream_KW_DOUBLE.add(KW_DOUBLE620);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1451:24: -> TOK_DOUBLE
                    {
                        adaptor.addChild(root_0, 
                        (CommonTree)adaptor.create(TOK_DOUBLE, "TOK_DOUBLE")
                        );

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 8 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1452:7: KW_DATE
                    {
                    KW_DATE621=(Token)match(input,KW_DATE,FOLLOW_KW_DATE_in_primitiveType10229);  
                    stream_KW_DATE.add(KW_DATE621);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1452:24: -> TOK_DATE
                    {
                        adaptor.addChild(root_0, 
                        (CommonTree)adaptor.create(TOK_DATE, "TOK_DATE")
                        );

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 9 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1453:7: KW_DATETIME
                    {
                    KW_DATETIME622=(Token)match(input,KW_DATETIME,FOLLOW_KW_DATETIME_in_primitiveType10253);  
                    stream_KW_DATETIME.add(KW_DATETIME622);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1453:24: -> TOK_DATETIME
                    {
                        adaptor.addChild(root_0, 
                        (CommonTree)adaptor.create(TOK_DATETIME, "TOK_DATETIME")
                        );

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 10 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1454:7: KW_TIMESTAMP
                    {
                    KW_TIMESTAMP623=(Token)match(input,KW_TIMESTAMP,FOLLOW_KW_TIMESTAMP_in_primitiveType10273);  
                    stream_KW_TIMESTAMP.add(KW_TIMESTAMP623);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1454:24: -> TOK_TIMESTAMP
                    {
                        adaptor.addChild(root_0, 
                        (CommonTree)adaptor.create(TOK_TIMESTAMP, "TOK_TIMESTAMP")
                        );

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 11 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1455:7: KW_STRING
                    {
                    KW_STRING624=(Token)match(input,KW_STRING,FOLLOW_KW_STRING_in_primitiveType10292);  
                    stream_KW_STRING.add(KW_STRING624);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1455:24: -> TOK_STRING
                    {
                        adaptor.addChild(root_0, 
                        (CommonTree)adaptor.create(TOK_STRING, "TOK_STRING")
                        );

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 12 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1456:7: KW_BINARY
                    {
                    KW_BINARY625=(Token)match(input,KW_BINARY,FOLLOW_KW_BINARY_in_primitiveType10314);  
                    stream_KW_BINARY.add(KW_BINARY625);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1456:24: -> TOK_BINARY
                    {
                        adaptor.addChild(root_0, 
                        (CommonTree)adaptor.create(TOK_BINARY, "TOK_BINARY")
                        );

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 13 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1457:7: KW_DECIMAL
                    {
                    KW_DECIMAL626=(Token)match(input,KW_DECIMAL,FOLLOW_KW_DECIMAL_in_primitiveType10336);  
                    stream_KW_DECIMAL.add(KW_DECIMAL626);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1457:24: -> TOK_DECIMAL
                    {
                        adaptor.addChild(root_0, 
                        (CommonTree)adaptor.create(TOK_DECIMAL, "TOK_DECIMAL")
                        );

                    }


                    retval.tree = root_0;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "primitiveType"


    public static class listType_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "listType"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1460:1: listType : KW_ARRAY LESSTHAN type GREATERTHAN -> ^( TOK_LIST type ) ;
    public final HiveParser.listType_return listType() throws RecognitionException {
        HiveParser.listType_return retval = new HiveParser.listType_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_ARRAY627=null;
        Token LESSTHAN628=null;
        Token GREATERTHAN630=null;
        HiveParser.type_return type629 =null;


        CommonTree KW_ARRAY627_tree=null;
        CommonTree LESSTHAN628_tree=null;
        CommonTree GREATERTHAN630_tree=null;
        RewriteRuleTokenStream stream_LESSTHAN=new RewriteRuleTokenStream(adaptor,"token LESSTHAN");
        RewriteRuleTokenStream stream_KW_ARRAY=new RewriteRuleTokenStream(adaptor,"token KW_ARRAY");
        RewriteRuleTokenStream stream_GREATERTHAN=new RewriteRuleTokenStream(adaptor,"token GREATERTHAN");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
         msgs.push("list type"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1463:5: ( KW_ARRAY LESSTHAN type GREATERTHAN -> ^( TOK_LIST type ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1463:7: KW_ARRAY LESSTHAN type GREATERTHAN
            {
            KW_ARRAY627=(Token)match(input,KW_ARRAY,FOLLOW_KW_ARRAY_in_listType10376);  
            stream_KW_ARRAY.add(KW_ARRAY627);


            LESSTHAN628=(Token)match(input,LESSTHAN,FOLLOW_LESSTHAN_in_listType10378);  
            stream_LESSTHAN.add(LESSTHAN628);


            pushFollow(FOLLOW_type_in_listType10380);
            type629=type();

            state._fsp--;

            stream_type.add(type629.getTree());

            GREATERTHAN630=(Token)match(input,GREATERTHAN,FOLLOW_GREATERTHAN_in_listType10382);  
            stream_GREATERTHAN.add(GREATERTHAN630);


            // AST REWRITE
            // elements: type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1463:44: -> ^( TOK_LIST type )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1463:47: ^( TOK_LIST type )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_LIST, "TOK_LIST")
                , root_1);

                adaptor.addChild(root_1, stream_type.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "listType"


    public static class structType_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "structType"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1466:1: structType : KW_STRUCT LESSTHAN columnNameColonTypeList GREATERTHAN -> ^( TOK_STRUCT columnNameColonTypeList ) ;
    public final HiveParser.structType_return structType() throws RecognitionException {
        HiveParser.structType_return retval = new HiveParser.structType_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_STRUCT631=null;
        Token LESSTHAN632=null;
        Token GREATERTHAN634=null;
        HiveParser.columnNameColonTypeList_return columnNameColonTypeList633 =null;


        CommonTree KW_STRUCT631_tree=null;
        CommonTree LESSTHAN632_tree=null;
        CommonTree GREATERTHAN634_tree=null;
        RewriteRuleTokenStream stream_LESSTHAN=new RewriteRuleTokenStream(adaptor,"token LESSTHAN");
        RewriteRuleTokenStream stream_KW_STRUCT=new RewriteRuleTokenStream(adaptor,"token KW_STRUCT");
        RewriteRuleTokenStream stream_GREATERTHAN=new RewriteRuleTokenStream(adaptor,"token GREATERTHAN");
        RewriteRuleSubtreeStream stream_columnNameColonTypeList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameColonTypeList");
         msgs.push("struct type"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1469:5: ( KW_STRUCT LESSTHAN columnNameColonTypeList GREATERTHAN -> ^( TOK_STRUCT columnNameColonTypeList ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1469:7: KW_STRUCT LESSTHAN columnNameColonTypeList GREATERTHAN
            {
            KW_STRUCT631=(Token)match(input,KW_STRUCT,FOLLOW_KW_STRUCT_in_structType10419);  
            stream_KW_STRUCT.add(KW_STRUCT631);


            LESSTHAN632=(Token)match(input,LESSTHAN,FOLLOW_LESSTHAN_in_structType10421);  
            stream_LESSTHAN.add(LESSTHAN632);


            pushFollow(FOLLOW_columnNameColonTypeList_in_structType10423);
            columnNameColonTypeList633=columnNameColonTypeList();

            state._fsp--;

            stream_columnNameColonTypeList.add(columnNameColonTypeList633.getTree());

            GREATERTHAN634=(Token)match(input,GREATERTHAN,FOLLOW_GREATERTHAN_in_structType10425);  
            stream_GREATERTHAN.add(GREATERTHAN634);


            // AST REWRITE
            // elements: columnNameColonTypeList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1469:62: -> ^( TOK_STRUCT columnNameColonTypeList )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1469:65: ^( TOK_STRUCT columnNameColonTypeList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_STRUCT, "TOK_STRUCT")
                , root_1);

                adaptor.addChild(root_1, stream_columnNameColonTypeList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "structType"


    public static class mapType_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "mapType"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1472:1: mapType : KW_MAP LESSTHAN left= primitiveType COMMA right= type GREATERTHAN -> ^( TOK_MAP $left $right) ;
    public final HiveParser.mapType_return mapType() throws RecognitionException {
        HiveParser.mapType_return retval = new HiveParser.mapType_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_MAP635=null;
        Token LESSTHAN636=null;
        Token COMMA637=null;
        Token GREATERTHAN638=null;
        HiveParser.primitiveType_return left =null;

        HiveParser.type_return right =null;


        CommonTree KW_MAP635_tree=null;
        CommonTree LESSTHAN636_tree=null;
        CommonTree COMMA637_tree=null;
        CommonTree GREATERTHAN638_tree=null;
        RewriteRuleTokenStream stream_LESSTHAN=new RewriteRuleTokenStream(adaptor,"token LESSTHAN");
        RewriteRuleTokenStream stream_KW_MAP=new RewriteRuleTokenStream(adaptor,"token KW_MAP");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_GREATERTHAN=new RewriteRuleTokenStream(adaptor,"token GREATERTHAN");
        RewriteRuleSubtreeStream stream_primitiveType=new RewriteRuleSubtreeStream(adaptor,"rule primitiveType");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
         msgs.push("map type"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1475:5: ( KW_MAP LESSTHAN left= primitiveType COMMA right= type GREATERTHAN -> ^( TOK_MAP $left $right) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1475:7: KW_MAP LESSTHAN left= primitiveType COMMA right= type GREATERTHAN
            {
            KW_MAP635=(Token)match(input,KW_MAP,FOLLOW_KW_MAP_in_mapType10460);  
            stream_KW_MAP.add(KW_MAP635);


            LESSTHAN636=(Token)match(input,LESSTHAN,FOLLOW_LESSTHAN_in_mapType10462);  
            stream_LESSTHAN.add(LESSTHAN636);


            pushFollow(FOLLOW_primitiveType_in_mapType10466);
            left=primitiveType();

            state._fsp--;

            stream_primitiveType.add(left.getTree());

            COMMA637=(Token)match(input,COMMA,FOLLOW_COMMA_in_mapType10468);  
            stream_COMMA.add(COMMA637);


            pushFollow(FOLLOW_type_in_mapType10472);
            right=type();

            state._fsp--;

            stream_type.add(right.getTree());

            GREATERTHAN638=(Token)match(input,GREATERTHAN,FOLLOW_GREATERTHAN_in_mapType10474);  
            stream_GREATERTHAN.add(GREATERTHAN638);


            // AST REWRITE
            // elements: right, left
            // token labels: 
            // rule labels: retval, left, right
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_left=new RewriteRuleSubtreeStream(adaptor,"rule left",left!=null?left.tree:null);
            RewriteRuleSubtreeStream stream_right=new RewriteRuleSubtreeStream(adaptor,"rule right",right!=null?right.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1476:5: -> ^( TOK_MAP $left $right)
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1476:8: ^( TOK_MAP $left $right)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_MAP, "TOK_MAP")
                , root_1);

                adaptor.addChild(root_1, stream_left.nextTree());

                adaptor.addChild(root_1, stream_right.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "mapType"


    public static class unionType_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "unionType"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1479:1: unionType : KW_UNIONTYPE LESSTHAN colTypeList GREATERTHAN -> ^( TOK_UNIONTYPE colTypeList ) ;
    public final HiveParser.unionType_return unionType() throws RecognitionException {
        HiveParser.unionType_return retval = new HiveParser.unionType_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_UNIONTYPE639=null;
        Token LESSTHAN640=null;
        Token GREATERTHAN642=null;
        HiveParser.colTypeList_return colTypeList641 =null;


        CommonTree KW_UNIONTYPE639_tree=null;
        CommonTree LESSTHAN640_tree=null;
        CommonTree GREATERTHAN642_tree=null;
        RewriteRuleTokenStream stream_LESSTHAN=new RewriteRuleTokenStream(adaptor,"token LESSTHAN");
        RewriteRuleTokenStream stream_KW_UNIONTYPE=new RewriteRuleTokenStream(adaptor,"token KW_UNIONTYPE");
        RewriteRuleTokenStream stream_GREATERTHAN=new RewriteRuleTokenStream(adaptor,"token GREATERTHAN");
        RewriteRuleSubtreeStream stream_colTypeList=new RewriteRuleSubtreeStream(adaptor,"rule colTypeList");
         msgs.push("uniontype type"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1482:5: ( KW_UNIONTYPE LESSTHAN colTypeList GREATERTHAN -> ^( TOK_UNIONTYPE colTypeList ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1482:7: KW_UNIONTYPE LESSTHAN colTypeList GREATERTHAN
            {
            KW_UNIONTYPE639=(Token)match(input,KW_UNIONTYPE,FOLLOW_KW_UNIONTYPE_in_unionType10517);  
            stream_KW_UNIONTYPE.add(KW_UNIONTYPE639);


            LESSTHAN640=(Token)match(input,LESSTHAN,FOLLOW_LESSTHAN_in_unionType10519);  
            stream_LESSTHAN.add(LESSTHAN640);


            pushFollow(FOLLOW_colTypeList_in_unionType10521);
            colTypeList641=colTypeList();

            state._fsp--;

            stream_colTypeList.add(colTypeList641.getTree());

            GREATERTHAN642=(Token)match(input,GREATERTHAN,FOLLOW_GREATERTHAN_in_unionType10523);  
            stream_GREATERTHAN.add(GREATERTHAN642);


            // AST REWRITE
            // elements: colTypeList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1482:53: -> ^( TOK_UNIONTYPE colTypeList )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1482:56: ^( TOK_UNIONTYPE colTypeList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_UNIONTYPE, "TOK_UNIONTYPE")
                , root_1);

                adaptor.addChild(root_1, stream_colTypeList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "unionType"


    public static class queryOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "queryOperator"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1485:1: queryOperator : KW_UNION KW_ALL -> ^( TOK_UNION ) ;
    public final HiveParser.queryOperator_return queryOperator() throws RecognitionException {
        HiveParser.queryOperator_return retval = new HiveParser.queryOperator_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_UNION643=null;
        Token KW_ALL644=null;

        CommonTree KW_UNION643_tree=null;
        CommonTree KW_ALL644_tree=null;
        RewriteRuleTokenStream stream_KW_ALL=new RewriteRuleTokenStream(adaptor,"token KW_ALL");
        RewriteRuleTokenStream stream_KW_UNION=new RewriteRuleTokenStream(adaptor,"token KW_UNION");

         msgs.push("query operator"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1488:5: ( KW_UNION KW_ALL -> ^( TOK_UNION ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1488:7: KW_UNION KW_ALL
            {
            KW_UNION643=(Token)match(input,KW_UNION,FOLLOW_KW_UNION_in_queryOperator10558);  
            stream_KW_UNION.add(KW_UNION643);


            KW_ALL644=(Token)match(input,KW_ALL,FOLLOW_KW_ALL_in_queryOperator10560);  
            stream_KW_ALL.add(KW_ALL644);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1488:23: -> ^( TOK_UNION )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1488:26: ^( TOK_UNION )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_UNION, "TOK_UNION")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "queryOperator"


    public static class queryStatementExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "queryStatementExpression"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1492:1: queryStatementExpression : queryStatement ( queryOperator ^ queryStatement )* ;
    public final HiveParser.queryStatementExpression_return queryStatementExpression() throws RecognitionException {
        HiveParser.queryStatementExpression_return retval = new HiveParser.queryStatementExpression_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        HiveParser.queryStatement_return queryStatement645 =null;

        HiveParser.queryOperator_return queryOperator646 =null;

        HiveParser.queryStatement_return queryStatement647 =null;



        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1493:5: ( queryStatement ( queryOperator ^ queryStatement )* )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1493:7: queryStatement ( queryOperator ^ queryStatement )*
            {
            root_0 = (CommonTree)adaptor.nil();


            pushFollow(FOLLOW_queryStatement_in_queryStatementExpression10584);
            queryStatement645=queryStatement();

            state._fsp--;

            adaptor.addChild(root_0, queryStatement645.getTree());

            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1493:22: ( queryOperator ^ queryStatement )*
            loop173:
            do {
                int alt173=2;
                int LA173_0 = input.LA(1);

                if ( (LA173_0==KW_UNION) ) {
                    alt173=1;
                }


                switch (alt173) {
            	case 1 :
            	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1493:23: queryOperator ^ queryStatement
            	    {
            	    pushFollow(FOLLOW_queryOperator_in_queryStatementExpression10587);
            	    queryOperator646=queryOperator();

            	    state._fsp--;

            	    root_0 = (CommonTree)adaptor.becomeRoot(queryOperator646.getTree(), root_0);

            	    pushFollow(FOLLOW_queryStatement_in_queryStatementExpression10590);
            	    queryStatement647=queryStatement();

            	    state._fsp--;

            	    adaptor.addChild(root_0, queryStatement647.getTree());

            	    }
            	    break;

            	default :
            	    break loop173;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "queryStatementExpression"


    public static class queryStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "queryStatement"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1496:1: queryStatement : ( fromClause (b+= body )+ -> ^( TOK_QUERY fromClause ( body )+ ) | regular_body );
    public final HiveParser.queryStatement_return queryStatement() throws RecognitionException {
        HiveParser.queryStatement_return retval = new HiveParser.queryStatement_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        List list_b=null;
        HiveParser.fromClause_return fromClause648 =null;

        HiveParser.regular_body_return regular_body649 =null;

        RuleReturnScope b = null;
        RewriteRuleSubtreeStream stream_body=new RewriteRuleSubtreeStream(adaptor,"rule body");
        RewriteRuleSubtreeStream stream_fromClause=new RewriteRuleSubtreeStream(adaptor,"rule fromClause");
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1497:5: ( fromClause (b+= body )+ -> ^( TOK_QUERY fromClause ( body )+ ) | regular_body )
            int alt175=2;
            int LA175_0 = input.LA(1);

            if ( (LA175_0==KW_FROM) ) {
                alt175=1;
            }
            else if ( (LA175_0==KW_INSERT||LA175_0==KW_MAP||LA175_0==KW_REDUCE||LA175_0==KW_SELECT) ) {
                alt175=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 175, 0, input);

                throw nvae;

            }
            switch (alt175) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1498:5: fromClause (b+= body )+
                    {
                    pushFollow(FOLLOW_fromClause_in_queryStatement10613);
                    fromClause648=fromClause();

                    state._fsp--;

                    stream_fromClause.add(fromClause648.getTree());

                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1499:5: (b+= body )+
                    int cnt174=0;
                    loop174:
                    do {
                        int alt174=2;
                        int LA174_0 = input.LA(1);

                        if ( (LA174_0==KW_INSERT||LA174_0==KW_MAP||LA174_0==KW_REDUCE||LA174_0==KW_SELECT) ) {
                            alt174=1;
                        }


                        switch (alt174) {
                    	case 1 :
                    	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1499:7: b+= body
                    	    {
                    	    pushFollow(FOLLOW_body_in_queryStatement10623);
                    	    b=body();

                    	    state._fsp--;

                    	    stream_body.add(b.getTree());
                    	    if (list_b==null) list_b=new ArrayList();
                    	    list_b.add(b.getTree());


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt174 >= 1 ) break loop174;
                                EarlyExitException eee =
                                    new EarlyExitException(174, input);
                                throw eee;
                        }
                        cnt174++;
                    } while (true);


                    // AST REWRITE
                    // elements: fromClause, body
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1499:18: -> ^( TOK_QUERY fromClause ( body )+ )
                    {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1499:21: ^( TOK_QUERY fromClause ( body )+ )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_QUERY, "TOK_QUERY")
                        , root_1);

                        adaptor.addChild(root_1, stream_fromClause.nextTree());

                        if ( !(stream_body.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_body.hasNext() ) {
                            adaptor.addChild(root_1, stream_body.nextTree());

                        }
                        stream_body.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 2 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1500:7: regular_body
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_regular_body_in_queryStatement10645);
                    regular_body649=regular_body();

                    state._fsp--;

                    adaptor.addChild(root_0, regular_body649.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "queryStatement"


    public static class regular_body_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "regular_body"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1503:1: regular_body : ( insertClause selectClause fromClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? -> ^( TOK_QUERY fromClause ^( TOK_INSERT insertClause selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? ) ) | selectStatement );
    public final HiveParser.regular_body_return regular_body() throws RecognitionException {
        HiveParser.regular_body_return retval = new HiveParser.regular_body_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        HiveParser.insertClause_return insertClause650 =null;

        HiveParser.selectClause_return selectClause651 =null;

        HiveParser.fromClause_return fromClause652 =null;

        HiveParser.whereClause_return whereClause653 =null;

        HiveParser.groupByClause_return groupByClause654 =null;

        HiveParser.havingClause_return havingClause655 =null;

        HiveParser.orderByClause_return orderByClause656 =null;

        HiveParser.clusterByClause_return clusterByClause657 =null;

        HiveParser.distributeByClause_return distributeByClause658 =null;

        HiveParser.sortByClause_return sortByClause659 =null;

        HiveParser.limitClause_return limitClause660 =null;

        HiveParser.selectStatement_return selectStatement661 =null;


        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_clusterByClause=new RewriteRuleSubtreeStream(adaptor,"rule clusterByClause");
        RewriteRuleSubtreeStream stream_distributeByClause=new RewriteRuleSubtreeStream(adaptor,"rule distributeByClause");
        RewriteRuleSubtreeStream stream_limitClause=new RewriteRuleSubtreeStream(adaptor,"rule limitClause");
        RewriteRuleSubtreeStream stream_orderByClause=new RewriteRuleSubtreeStream(adaptor,"rule orderByClause");
        RewriteRuleSubtreeStream stream_sortByClause=new RewriteRuleSubtreeStream(adaptor,"rule sortByClause");
        RewriteRuleSubtreeStream stream_insertClause=new RewriteRuleSubtreeStream(adaptor,"rule insertClause");
        RewriteRuleSubtreeStream stream_groupByClause=new RewriteRuleSubtreeStream(adaptor,"rule groupByClause");
        RewriteRuleSubtreeStream stream_havingClause=new RewriteRuleSubtreeStream(adaptor,"rule havingClause");
        RewriteRuleSubtreeStream stream_selectClause=new RewriteRuleSubtreeStream(adaptor,"rule selectClause");
        RewriteRuleSubtreeStream stream_fromClause=new RewriteRuleSubtreeStream(adaptor,"rule fromClause");
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1504:4: ( insertClause selectClause fromClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? -> ^( TOK_QUERY fromClause ^( TOK_INSERT insertClause selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? ) ) | selectStatement )
            int alt184=2;
            int LA184_0 = input.LA(1);

            if ( (LA184_0==KW_INSERT) ) {
                alt184=1;
            }
            else if ( (LA184_0==KW_MAP||LA184_0==KW_REDUCE||LA184_0==KW_SELECT) ) {
                alt184=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 184, 0, input);

                throw nvae;

            }
            switch (alt184) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1505:4: insertClause selectClause fromClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )?
                    {
                    pushFollow(FOLLOW_insertClause_in_regular_body10664);
                    insertClause650=insertClause();

                    state._fsp--;

                    stream_insertClause.add(insertClause650.getTree());

                    pushFollow(FOLLOW_selectClause_in_regular_body10669);
                    selectClause651=selectClause();

                    state._fsp--;

                    stream_selectClause.add(selectClause651.getTree());

                    pushFollow(FOLLOW_fromClause_in_regular_body10674);
                    fromClause652=fromClause();

                    state._fsp--;

                    stream_fromClause.add(fromClause652.getTree());

                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1508:4: ( whereClause )?
                    int alt176=2;
                    int LA176_0 = input.LA(1);

                    if ( (LA176_0==KW_WHERE) ) {
                        alt176=1;
                    }
                    switch (alt176) {
                        case 1 :
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1508:4: whereClause
                            {
                            pushFollow(FOLLOW_whereClause_in_regular_body10679);
                            whereClause653=whereClause();

                            state._fsp--;

                            stream_whereClause.add(whereClause653.getTree());

                            }
                            break;

                    }


                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1509:4: ( groupByClause )?
                    int alt177=2;
                    int LA177_0 = input.LA(1);

                    if ( (LA177_0==KW_GROUP) ) {
                        alt177=1;
                    }
                    switch (alt177) {
                        case 1 :
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1509:4: groupByClause
                            {
                            pushFollow(FOLLOW_groupByClause_in_regular_body10685);
                            groupByClause654=groupByClause();

                            state._fsp--;

                            stream_groupByClause.add(groupByClause654.getTree());

                            }
                            break;

                    }


                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1510:4: ( havingClause )?
                    int alt178=2;
                    int LA178_0 = input.LA(1);

                    if ( (LA178_0==KW_HAVING) ) {
                        alt178=1;
                    }
                    switch (alt178) {
                        case 1 :
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1510:4: havingClause
                            {
                            pushFollow(FOLLOW_havingClause_in_regular_body10691);
                            havingClause655=havingClause();

                            state._fsp--;

                            stream_havingClause.add(havingClause655.getTree());

                            }
                            break;

                    }


                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1511:4: ( orderByClause )?
                    int alt179=2;
                    int LA179_0 = input.LA(1);

                    if ( (LA179_0==KW_ORDER) ) {
                        alt179=1;
                    }
                    switch (alt179) {
                        case 1 :
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1511:4: orderByClause
                            {
                            pushFollow(FOLLOW_orderByClause_in_regular_body10697);
                            orderByClause656=orderByClause();

                            state._fsp--;

                            stream_orderByClause.add(orderByClause656.getTree());

                            }
                            break;

                    }


                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1512:4: ( clusterByClause )?
                    int alt180=2;
                    int LA180_0 = input.LA(1);

                    if ( (LA180_0==KW_CLUSTER) ) {
                        alt180=1;
                    }
                    switch (alt180) {
                        case 1 :
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1512:4: clusterByClause
                            {
                            pushFollow(FOLLOW_clusterByClause_in_regular_body10703);
                            clusterByClause657=clusterByClause();

                            state._fsp--;

                            stream_clusterByClause.add(clusterByClause657.getTree());

                            }
                            break;

                    }


                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1513:4: ( distributeByClause )?
                    int alt181=2;
                    int LA181_0 = input.LA(1);

                    if ( (LA181_0==KW_DISTRIBUTE) ) {
                        alt181=1;
                    }
                    switch (alt181) {
                        case 1 :
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1513:4: distributeByClause
                            {
                            pushFollow(FOLLOW_distributeByClause_in_regular_body10709);
                            distributeByClause658=distributeByClause();

                            state._fsp--;

                            stream_distributeByClause.add(distributeByClause658.getTree());

                            }
                            break;

                    }


                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1514:4: ( sortByClause )?
                    int alt182=2;
                    int LA182_0 = input.LA(1);

                    if ( (LA182_0==KW_SORT) ) {
                        alt182=1;
                    }
                    switch (alt182) {
                        case 1 :
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1514:4: sortByClause
                            {
                            pushFollow(FOLLOW_sortByClause_in_regular_body10715);
                            sortByClause659=sortByClause();

                            state._fsp--;

                            stream_sortByClause.add(sortByClause659.getTree());

                            }
                            break;

                    }


                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1515:4: ( limitClause )?
                    int alt183=2;
                    int LA183_0 = input.LA(1);

                    if ( (LA183_0==KW_LIMIT) ) {
                        alt183=1;
                    }
                    switch (alt183) {
                        case 1 :
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1515:4: limitClause
                            {
                            pushFollow(FOLLOW_limitClause_in_regular_body10721);
                            limitClause660=limitClause();

                            state._fsp--;

                            stream_limitClause.add(limitClause660.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: sortByClause, distributeByClause, havingClause, limitClause, groupByClause, clusterByClause, fromClause, whereClause, insertClause, orderByClause, selectClause
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1515:17: -> ^( TOK_QUERY fromClause ^( TOK_INSERT insertClause selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? ) )
                    {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1515:20: ^( TOK_QUERY fromClause ^( TOK_INSERT insertClause selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? ) )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_QUERY, "TOK_QUERY")
                        , root_1);

                        adaptor.addChild(root_1, stream_fromClause.nextTree());

                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1515:43: ^( TOK_INSERT insertClause selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_INSERT, "TOK_INSERT")
                        , root_2);

                        adaptor.addChild(root_2, stream_insertClause.nextTree());

                        adaptor.addChild(root_2, stream_selectClause.nextTree());

                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1516:35: ( whereClause )?
                        if ( stream_whereClause.hasNext() ) {
                            adaptor.addChild(root_2, stream_whereClause.nextTree());

                        }
                        stream_whereClause.reset();

                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1516:48: ( groupByClause )?
                        if ( stream_groupByClause.hasNext() ) {
                            adaptor.addChild(root_2, stream_groupByClause.nextTree());

                        }
                        stream_groupByClause.reset();

                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1516:63: ( havingClause )?
                        if ( stream_havingClause.hasNext() ) {
                            adaptor.addChild(root_2, stream_havingClause.nextTree());

                        }
                        stream_havingClause.reset();

                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1516:77: ( orderByClause )?
                        if ( stream_orderByClause.hasNext() ) {
                            adaptor.addChild(root_2, stream_orderByClause.nextTree());

                        }
                        stream_orderByClause.reset();

                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1516:92: ( clusterByClause )?
                        if ( stream_clusterByClause.hasNext() ) {
                            adaptor.addChild(root_2, stream_clusterByClause.nextTree());

                        }
                        stream_clusterByClause.reset();

                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1517:22: ( distributeByClause )?
                        if ( stream_distributeByClause.hasNext() ) {
                            adaptor.addChild(root_2, stream_distributeByClause.nextTree());

                        }
                        stream_distributeByClause.reset();

                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1517:42: ( sortByClause )?
                        if ( stream_sortByClause.hasNext() ) {
                            adaptor.addChild(root_2, stream_sortByClause.nextTree());

                        }
                        stream_sortByClause.reset();

                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1517:56: ( limitClause )?
                        if ( stream_limitClause.hasNext() ) {
                            adaptor.addChild(root_2, stream_limitClause.nextTree());

                        }
                        stream_limitClause.reset();

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 2 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1519:4: selectStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_selectStatement_in_regular_body10814);
                    selectStatement661=selectStatement();

                    state._fsp--;

                    adaptor.addChild(root_0, selectStatement661.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "regular_body"


    public static class selectStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "selectStatement"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1522:1: selectStatement : selectClause fromClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? -> ^( TOK_QUERY fromClause ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? ) ) ;
    public final HiveParser.selectStatement_return selectStatement() throws RecognitionException {
        HiveParser.selectStatement_return retval = new HiveParser.selectStatement_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        HiveParser.selectClause_return selectClause662 =null;

        HiveParser.fromClause_return fromClause663 =null;

        HiveParser.whereClause_return whereClause664 =null;

        HiveParser.groupByClause_return groupByClause665 =null;

        HiveParser.havingClause_return havingClause666 =null;

        HiveParser.orderByClause_return orderByClause667 =null;

        HiveParser.clusterByClause_return clusterByClause668 =null;

        HiveParser.distributeByClause_return distributeByClause669 =null;

        HiveParser.sortByClause_return sortByClause670 =null;

        HiveParser.limitClause_return limitClause671 =null;


        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_clusterByClause=new RewriteRuleSubtreeStream(adaptor,"rule clusterByClause");
        RewriteRuleSubtreeStream stream_distributeByClause=new RewriteRuleSubtreeStream(adaptor,"rule distributeByClause");
        RewriteRuleSubtreeStream stream_limitClause=new RewriteRuleSubtreeStream(adaptor,"rule limitClause");
        RewriteRuleSubtreeStream stream_orderByClause=new RewriteRuleSubtreeStream(adaptor,"rule orderByClause");
        RewriteRuleSubtreeStream stream_sortByClause=new RewriteRuleSubtreeStream(adaptor,"rule sortByClause");
        RewriteRuleSubtreeStream stream_groupByClause=new RewriteRuleSubtreeStream(adaptor,"rule groupByClause");
        RewriteRuleSubtreeStream stream_havingClause=new RewriteRuleSubtreeStream(adaptor,"rule havingClause");
        RewriteRuleSubtreeStream stream_selectClause=new RewriteRuleSubtreeStream(adaptor,"rule selectClause");
        RewriteRuleSubtreeStream stream_fromClause=new RewriteRuleSubtreeStream(adaptor,"rule fromClause");
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1523:4: ( selectClause fromClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? -> ^( TOK_QUERY fromClause ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? ) ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1524:4: selectClause fromClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )?
            {
            pushFollow(FOLLOW_selectClause_in_selectStatement10832);
            selectClause662=selectClause();

            state._fsp--;

            stream_selectClause.add(selectClause662.getTree());

            pushFollow(FOLLOW_fromClause_in_selectStatement10837);
            fromClause663=fromClause();

            state._fsp--;

            stream_fromClause.add(fromClause663.getTree());

            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1526:4: ( whereClause )?
            int alt185=2;
            int LA185_0 = input.LA(1);

            if ( (LA185_0==KW_WHERE) ) {
                alt185=1;
            }
            switch (alt185) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1526:4: whereClause
                    {
                    pushFollow(FOLLOW_whereClause_in_selectStatement10842);
                    whereClause664=whereClause();

                    state._fsp--;

                    stream_whereClause.add(whereClause664.getTree());

                    }
                    break;

            }


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1527:4: ( groupByClause )?
            int alt186=2;
            int LA186_0 = input.LA(1);

            if ( (LA186_0==KW_GROUP) ) {
                alt186=1;
            }
            switch (alt186) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1527:4: groupByClause
                    {
                    pushFollow(FOLLOW_groupByClause_in_selectStatement10848);
                    groupByClause665=groupByClause();

                    state._fsp--;

                    stream_groupByClause.add(groupByClause665.getTree());

                    }
                    break;

            }


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1528:4: ( havingClause )?
            int alt187=2;
            int LA187_0 = input.LA(1);

            if ( (LA187_0==KW_HAVING) ) {
                alt187=1;
            }
            switch (alt187) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1528:4: havingClause
                    {
                    pushFollow(FOLLOW_havingClause_in_selectStatement10854);
                    havingClause666=havingClause();

                    state._fsp--;

                    stream_havingClause.add(havingClause666.getTree());

                    }
                    break;

            }


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1529:4: ( orderByClause )?
            int alt188=2;
            int LA188_0 = input.LA(1);

            if ( (LA188_0==KW_ORDER) ) {
                alt188=1;
            }
            switch (alt188) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1529:4: orderByClause
                    {
                    pushFollow(FOLLOW_orderByClause_in_selectStatement10860);
                    orderByClause667=orderByClause();

                    state._fsp--;

                    stream_orderByClause.add(orderByClause667.getTree());

                    }
                    break;

            }


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1530:4: ( clusterByClause )?
            int alt189=2;
            int LA189_0 = input.LA(1);

            if ( (LA189_0==KW_CLUSTER) ) {
                alt189=1;
            }
            switch (alt189) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1530:4: clusterByClause
                    {
                    pushFollow(FOLLOW_clusterByClause_in_selectStatement10866);
                    clusterByClause668=clusterByClause();

                    state._fsp--;

                    stream_clusterByClause.add(clusterByClause668.getTree());

                    }
                    break;

            }


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1531:4: ( distributeByClause )?
            int alt190=2;
            int LA190_0 = input.LA(1);

            if ( (LA190_0==KW_DISTRIBUTE) ) {
                alt190=1;
            }
            switch (alt190) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1531:4: distributeByClause
                    {
                    pushFollow(FOLLOW_distributeByClause_in_selectStatement10872);
                    distributeByClause669=distributeByClause();

                    state._fsp--;

                    stream_distributeByClause.add(distributeByClause669.getTree());

                    }
                    break;

            }


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1532:4: ( sortByClause )?
            int alt191=2;
            int LA191_0 = input.LA(1);

            if ( (LA191_0==KW_SORT) ) {
                alt191=1;
            }
            switch (alt191) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1532:4: sortByClause
                    {
                    pushFollow(FOLLOW_sortByClause_in_selectStatement10878);
                    sortByClause670=sortByClause();

                    state._fsp--;

                    stream_sortByClause.add(sortByClause670.getTree());

                    }
                    break;

            }


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1533:4: ( limitClause )?
            int alt192=2;
            int LA192_0 = input.LA(1);

            if ( (LA192_0==KW_LIMIT) ) {
                alt192=1;
            }
            switch (alt192) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1533:4: limitClause
                    {
                    pushFollow(FOLLOW_limitClause_in_selectStatement10884);
                    limitClause671=limitClause();

                    state._fsp--;

                    stream_limitClause.add(limitClause671.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: clusterByClause, havingClause, selectClause, sortByClause, whereClause, distributeByClause, fromClause, limitClause, groupByClause, orderByClause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1533:17: -> ^( TOK_QUERY fromClause ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? ) )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1533:20: ^( TOK_QUERY fromClause ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_QUERY, "TOK_QUERY")
                , root_1);

                adaptor.addChild(root_1, stream_fromClause.nextTree());

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1533:43: ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_INSERT, "TOK_INSERT")
                , root_2);

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1533:56: ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) )
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_DESTINATION, "TOK_DESTINATION")
                , root_3);

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1533:74: ^( TOK_DIR TOK_TMP_FILE )
                {
                CommonTree root_4 = (CommonTree)adaptor.nil();
                root_4 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_DIR, "TOK_DIR")
                , root_4);

                adaptor.addChild(root_4, 
                (CommonTree)adaptor.create(TOK_TMP_FILE, "TOK_TMP_FILE")
                );

                adaptor.addChild(root_3, root_4);
                }

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_2, stream_selectClause.nextTree());

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1534:35: ( whereClause )?
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_2, stream_whereClause.nextTree());

                }
                stream_whereClause.reset();

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1534:48: ( groupByClause )?
                if ( stream_groupByClause.hasNext() ) {
                    adaptor.addChild(root_2, stream_groupByClause.nextTree());

                }
                stream_groupByClause.reset();

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1534:63: ( havingClause )?
                if ( stream_havingClause.hasNext() ) {
                    adaptor.addChild(root_2, stream_havingClause.nextTree());

                }
                stream_havingClause.reset();

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1534:77: ( orderByClause )?
                if ( stream_orderByClause.hasNext() ) {
                    adaptor.addChild(root_2, stream_orderByClause.nextTree());

                }
                stream_orderByClause.reset();

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1534:92: ( clusterByClause )?
                if ( stream_clusterByClause.hasNext() ) {
                    adaptor.addChild(root_2, stream_clusterByClause.nextTree());

                }
                stream_clusterByClause.reset();

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1535:22: ( distributeByClause )?
                if ( stream_distributeByClause.hasNext() ) {
                    adaptor.addChild(root_2, stream_distributeByClause.nextTree());

                }
                stream_distributeByClause.reset();

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1535:42: ( sortByClause )?
                if ( stream_sortByClause.hasNext() ) {
                    adaptor.addChild(root_2, stream_sortByClause.nextTree());

                }
                stream_sortByClause.reset();

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1535:56: ( limitClause )?
                if ( stream_limitClause.hasNext() ) {
                    adaptor.addChild(root_2, stream_limitClause.nextTree());

                }
                stream_limitClause.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "selectStatement"


    public static class body_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "body"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1539:1: body : ( insertClause selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? -> ^( TOK_INSERT ( insertClause )? selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? ) | selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? -> ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? ) );
    public final HiveParser.body_return body() throws RecognitionException {
        HiveParser.body_return retval = new HiveParser.body_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        HiveParser.insertClause_return insertClause672 =null;

        HiveParser.selectClause_return selectClause673 =null;

        HiveParser.whereClause_return whereClause674 =null;

        HiveParser.groupByClause_return groupByClause675 =null;

        HiveParser.havingClause_return havingClause676 =null;

        HiveParser.orderByClause_return orderByClause677 =null;

        HiveParser.clusterByClause_return clusterByClause678 =null;

        HiveParser.distributeByClause_return distributeByClause679 =null;

        HiveParser.sortByClause_return sortByClause680 =null;

        HiveParser.limitClause_return limitClause681 =null;

        HiveParser.selectClause_return selectClause682 =null;

        HiveParser.whereClause_return whereClause683 =null;

        HiveParser.groupByClause_return groupByClause684 =null;

        HiveParser.havingClause_return havingClause685 =null;

        HiveParser.orderByClause_return orderByClause686 =null;

        HiveParser.clusterByClause_return clusterByClause687 =null;

        HiveParser.distributeByClause_return distributeByClause688 =null;

        HiveParser.sortByClause_return sortByClause689 =null;

        HiveParser.limitClause_return limitClause690 =null;


        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_clusterByClause=new RewriteRuleSubtreeStream(adaptor,"rule clusterByClause");
        RewriteRuleSubtreeStream stream_distributeByClause=new RewriteRuleSubtreeStream(adaptor,"rule distributeByClause");
        RewriteRuleSubtreeStream stream_limitClause=new RewriteRuleSubtreeStream(adaptor,"rule limitClause");
        RewriteRuleSubtreeStream stream_orderByClause=new RewriteRuleSubtreeStream(adaptor,"rule orderByClause");
        RewriteRuleSubtreeStream stream_sortByClause=new RewriteRuleSubtreeStream(adaptor,"rule sortByClause");
        RewriteRuleSubtreeStream stream_insertClause=new RewriteRuleSubtreeStream(adaptor,"rule insertClause");
        RewriteRuleSubtreeStream stream_groupByClause=new RewriteRuleSubtreeStream(adaptor,"rule groupByClause");
        RewriteRuleSubtreeStream stream_havingClause=new RewriteRuleSubtreeStream(adaptor,"rule havingClause");
        RewriteRuleSubtreeStream stream_selectClause=new RewriteRuleSubtreeStream(adaptor,"rule selectClause");
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1540:4: ( insertClause selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? -> ^( TOK_INSERT ( insertClause )? selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? ) | selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? -> ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? ) )
            int alt209=2;
            int LA209_0 = input.LA(1);

            if ( (LA209_0==KW_INSERT) ) {
                alt209=1;
            }
            else if ( (LA209_0==KW_MAP||LA209_0==KW_REDUCE||LA209_0==KW_SELECT) ) {
                alt209=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 209, 0, input);

                throw nvae;

            }
            switch (alt209) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1541:4: insertClause selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )?
                    {
                    pushFollow(FOLLOW_insertClause_in_body10994);
                    insertClause672=insertClause();

                    state._fsp--;

                    stream_insertClause.add(insertClause672.getTree());

                    pushFollow(FOLLOW_selectClause_in_body10999);
                    selectClause673=selectClause();

                    state._fsp--;

                    stream_selectClause.add(selectClause673.getTree());

                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1543:4: ( whereClause )?
                    int alt193=2;
                    int LA193_0 = input.LA(1);

                    if ( (LA193_0==KW_WHERE) ) {
                        alt193=1;
                    }
                    switch (alt193) {
                        case 1 :
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1543:4: whereClause
                            {
                            pushFollow(FOLLOW_whereClause_in_body11004);
                            whereClause674=whereClause();

                            state._fsp--;

                            stream_whereClause.add(whereClause674.getTree());

                            }
                            break;

                    }


                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1544:4: ( groupByClause )?
                    int alt194=2;
                    int LA194_0 = input.LA(1);

                    if ( (LA194_0==KW_GROUP) ) {
                        alt194=1;
                    }
                    switch (alt194) {
                        case 1 :
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1544:4: groupByClause
                            {
                            pushFollow(FOLLOW_groupByClause_in_body11010);
                            groupByClause675=groupByClause();

                            state._fsp--;

                            stream_groupByClause.add(groupByClause675.getTree());

                            }
                            break;

                    }


                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1545:4: ( havingClause )?
                    int alt195=2;
                    int LA195_0 = input.LA(1);

                    if ( (LA195_0==KW_HAVING) ) {
                        alt195=1;
                    }
                    switch (alt195) {
                        case 1 :
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1545:4: havingClause
                            {
                            pushFollow(FOLLOW_havingClause_in_body11016);
                            havingClause676=havingClause();

                            state._fsp--;

                            stream_havingClause.add(havingClause676.getTree());

                            }
                            break;

                    }


                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1546:4: ( orderByClause )?
                    int alt196=2;
                    int LA196_0 = input.LA(1);

                    if ( (LA196_0==KW_ORDER) ) {
                        alt196=1;
                    }
                    switch (alt196) {
                        case 1 :
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1546:4: orderByClause
                            {
                            pushFollow(FOLLOW_orderByClause_in_body11022);
                            orderByClause677=orderByClause();

                            state._fsp--;

                            stream_orderByClause.add(orderByClause677.getTree());

                            }
                            break;

                    }


                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1547:4: ( clusterByClause )?
                    int alt197=2;
                    int LA197_0 = input.LA(1);

                    if ( (LA197_0==KW_CLUSTER) ) {
                        alt197=1;
                    }
                    switch (alt197) {
                        case 1 :
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1547:4: clusterByClause
                            {
                            pushFollow(FOLLOW_clusterByClause_in_body11028);
                            clusterByClause678=clusterByClause();

                            state._fsp--;

                            stream_clusterByClause.add(clusterByClause678.getTree());

                            }
                            break;

                    }


                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1548:4: ( distributeByClause )?
                    int alt198=2;
                    int LA198_0 = input.LA(1);

                    if ( (LA198_0==KW_DISTRIBUTE) ) {
                        alt198=1;
                    }
                    switch (alt198) {
                        case 1 :
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1548:4: distributeByClause
                            {
                            pushFollow(FOLLOW_distributeByClause_in_body11034);
                            distributeByClause679=distributeByClause();

                            state._fsp--;

                            stream_distributeByClause.add(distributeByClause679.getTree());

                            }
                            break;

                    }


                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1549:4: ( sortByClause )?
                    int alt199=2;
                    int LA199_0 = input.LA(1);

                    if ( (LA199_0==KW_SORT) ) {
                        alt199=1;
                    }
                    switch (alt199) {
                        case 1 :
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1549:4: sortByClause
                            {
                            pushFollow(FOLLOW_sortByClause_in_body11040);
                            sortByClause680=sortByClause();

                            state._fsp--;

                            stream_sortByClause.add(sortByClause680.getTree());

                            }
                            break;

                    }


                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1550:4: ( limitClause )?
                    int alt200=2;
                    int LA200_0 = input.LA(1);

                    if ( (LA200_0==KW_LIMIT) ) {
                        alt200=1;
                    }
                    switch (alt200) {
                        case 1 :
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1550:4: limitClause
                            {
                            pushFollow(FOLLOW_limitClause_in_body11046);
                            limitClause681=limitClause();

                            state._fsp--;

                            stream_limitClause.add(limitClause681.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: limitClause, insertClause, selectClause, groupByClause, clusterByClause, distributeByClause, whereClause, havingClause, orderByClause, sortByClause
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1550:17: -> ^( TOK_INSERT ( insertClause )? selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? )
                    {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1550:20: ^( TOK_INSERT ( insertClause )? selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_INSERT, "TOK_INSERT")
                        , root_1);

                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1550:33: ( insertClause )?
                        if ( stream_insertClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_insertClause.nextTree());

                        }
                        stream_insertClause.reset();

                        adaptor.addChild(root_1, stream_selectClause.nextTree());

                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1551:35: ( whereClause )?
                        if ( stream_whereClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_whereClause.nextTree());

                        }
                        stream_whereClause.reset();

                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1551:48: ( groupByClause )?
                        if ( stream_groupByClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_groupByClause.nextTree());

                        }
                        stream_groupByClause.reset();

                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1551:63: ( havingClause )?
                        if ( stream_havingClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_havingClause.nextTree());

                        }
                        stream_havingClause.reset();

                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1551:77: ( orderByClause )?
                        if ( stream_orderByClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_orderByClause.nextTree());

                        }
                        stream_orderByClause.reset();

                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1551:92: ( clusterByClause )?
                        if ( stream_clusterByClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_clusterByClause.nextTree());

                        }
                        stream_clusterByClause.reset();

                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1552:22: ( distributeByClause )?
                        if ( stream_distributeByClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_distributeByClause.nextTree());

                        }
                        stream_distributeByClause.reset();

                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1552:42: ( sortByClause )?
                        if ( stream_sortByClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_sortByClause.nextTree());

                        }
                        stream_sortByClause.reset();

                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1552:56: ( limitClause )?
                        if ( stream_limitClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_limitClause.nextTree());

                        }
                        stream_limitClause.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 2 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1554:4: selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )?
                    {
                    pushFollow(FOLLOW_selectClause_in_body11134);
                    selectClause682=selectClause();

                    state._fsp--;

                    stream_selectClause.add(selectClause682.getTree());

                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1555:4: ( whereClause )?
                    int alt201=2;
                    int LA201_0 = input.LA(1);

                    if ( (LA201_0==KW_WHERE) ) {
                        alt201=1;
                    }
                    switch (alt201) {
                        case 1 :
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1555:4: whereClause
                            {
                            pushFollow(FOLLOW_whereClause_in_body11139);
                            whereClause683=whereClause();

                            state._fsp--;

                            stream_whereClause.add(whereClause683.getTree());

                            }
                            break;

                    }


                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1556:4: ( groupByClause )?
                    int alt202=2;
                    int LA202_0 = input.LA(1);

                    if ( (LA202_0==KW_GROUP) ) {
                        alt202=1;
                    }
                    switch (alt202) {
                        case 1 :
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1556:4: groupByClause
                            {
                            pushFollow(FOLLOW_groupByClause_in_body11145);
                            groupByClause684=groupByClause();

                            state._fsp--;

                            stream_groupByClause.add(groupByClause684.getTree());

                            }
                            break;

                    }


                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1557:4: ( havingClause )?
                    int alt203=2;
                    int LA203_0 = input.LA(1);

                    if ( (LA203_0==KW_HAVING) ) {
                        alt203=1;
                    }
                    switch (alt203) {
                        case 1 :
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1557:4: havingClause
                            {
                            pushFollow(FOLLOW_havingClause_in_body11151);
                            havingClause685=havingClause();

                            state._fsp--;

                            stream_havingClause.add(havingClause685.getTree());

                            }
                            break;

                    }


                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1558:4: ( orderByClause )?
                    int alt204=2;
                    int LA204_0 = input.LA(1);

                    if ( (LA204_0==KW_ORDER) ) {
                        alt204=1;
                    }
                    switch (alt204) {
                        case 1 :
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1558:4: orderByClause
                            {
                            pushFollow(FOLLOW_orderByClause_in_body11157);
                            orderByClause686=orderByClause();

                            state._fsp--;

                            stream_orderByClause.add(orderByClause686.getTree());

                            }
                            break;

                    }


                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1559:4: ( clusterByClause )?
                    int alt205=2;
                    int LA205_0 = input.LA(1);

                    if ( (LA205_0==KW_CLUSTER) ) {
                        alt205=1;
                    }
                    switch (alt205) {
                        case 1 :
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1559:4: clusterByClause
                            {
                            pushFollow(FOLLOW_clusterByClause_in_body11163);
                            clusterByClause687=clusterByClause();

                            state._fsp--;

                            stream_clusterByClause.add(clusterByClause687.getTree());

                            }
                            break;

                    }


                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1560:4: ( distributeByClause )?
                    int alt206=2;
                    int LA206_0 = input.LA(1);

                    if ( (LA206_0==KW_DISTRIBUTE) ) {
                        alt206=1;
                    }
                    switch (alt206) {
                        case 1 :
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1560:4: distributeByClause
                            {
                            pushFollow(FOLLOW_distributeByClause_in_body11169);
                            distributeByClause688=distributeByClause();

                            state._fsp--;

                            stream_distributeByClause.add(distributeByClause688.getTree());

                            }
                            break;

                    }


                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1561:4: ( sortByClause )?
                    int alt207=2;
                    int LA207_0 = input.LA(1);

                    if ( (LA207_0==KW_SORT) ) {
                        alt207=1;
                    }
                    switch (alt207) {
                        case 1 :
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1561:4: sortByClause
                            {
                            pushFollow(FOLLOW_sortByClause_in_body11175);
                            sortByClause689=sortByClause();

                            state._fsp--;

                            stream_sortByClause.add(sortByClause689.getTree());

                            }
                            break;

                    }


                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1562:4: ( limitClause )?
                    int alt208=2;
                    int LA208_0 = input.LA(1);

                    if ( (LA208_0==KW_LIMIT) ) {
                        alt208=1;
                    }
                    switch (alt208) {
                        case 1 :
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1562:4: limitClause
                            {
                            pushFollow(FOLLOW_limitClause_in_body11181);
                            limitClause690=limitClause();

                            state._fsp--;

                            stream_limitClause.add(limitClause690.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: sortByClause, clusterByClause, selectClause, limitClause, distributeByClause, groupByClause, orderByClause, havingClause, whereClause
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1562:17: -> ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? )
                    {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1562:20: ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_INSERT, "TOK_INSERT")
                        , root_1);

                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1562:33: ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_DESTINATION, "TOK_DESTINATION")
                        , root_2);

                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1562:51: ^( TOK_DIR TOK_TMP_FILE )
                        {
                        CommonTree root_3 = (CommonTree)adaptor.nil();
                        root_3 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_DIR, "TOK_DIR")
                        , root_3);

                        adaptor.addChild(root_3, 
                        (CommonTree)adaptor.create(TOK_TMP_FILE, "TOK_TMP_FILE")
                        );

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_1, stream_selectClause.nextTree());

                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1563:35: ( whereClause )?
                        if ( stream_whereClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_whereClause.nextTree());

                        }
                        stream_whereClause.reset();

                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1563:48: ( groupByClause )?
                        if ( stream_groupByClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_groupByClause.nextTree());

                        }
                        stream_groupByClause.reset();

                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1563:63: ( havingClause )?
                        if ( stream_havingClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_havingClause.nextTree());

                        }
                        stream_havingClause.reset();

                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1563:77: ( orderByClause )?
                        if ( stream_orderByClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_orderByClause.nextTree());

                        }
                        stream_orderByClause.reset();

                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1563:92: ( clusterByClause )?
                        if ( stream_clusterByClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_clusterByClause.nextTree());

                        }
                        stream_clusterByClause.reset();

                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1564:22: ( distributeByClause )?
                        if ( stream_distributeByClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_distributeByClause.nextTree());

                        }
                        stream_distributeByClause.reset();

                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1564:42: ( sortByClause )?
                        if ( stream_sortByClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_sortByClause.nextTree());

                        }
                        stream_sortByClause.reset();

                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1564:56: ( limitClause )?
                        if ( stream_limitClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_limitClause.nextTree());

                        }
                        stream_limitClause.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "body"


    public static class insertClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "insertClause"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1567:1: insertClause : ( KW_INSERT KW_OVERWRITE destination ( ifNotExists )? -> ^( TOK_DESTINATION destination ( ifNotExists )? ) | KW_INSERT KW_INTO KW_TABLE tableOrPartition -> ^( TOK_INSERT_INTO tableOrPartition ) );
    public final HiveParser.insertClause_return insertClause() throws RecognitionException {
        HiveParser.insertClause_return retval = new HiveParser.insertClause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_INSERT691=null;
        Token KW_OVERWRITE692=null;
        Token KW_INSERT695=null;
        Token KW_INTO696=null;
        Token KW_TABLE697=null;
        HiveParser.destination_return destination693 =null;

        HiveParser.ifNotExists_return ifNotExists694 =null;

        HiveParser.tableOrPartition_return tableOrPartition698 =null;


        CommonTree KW_INSERT691_tree=null;
        CommonTree KW_OVERWRITE692_tree=null;
        CommonTree KW_INSERT695_tree=null;
        CommonTree KW_INTO696_tree=null;
        CommonTree KW_TABLE697_tree=null;
        RewriteRuleTokenStream stream_KW_INTO=new RewriteRuleTokenStream(adaptor,"token KW_INTO");
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleTokenStream stream_KW_OVERWRITE=new RewriteRuleTokenStream(adaptor,"token KW_OVERWRITE");
        RewriteRuleTokenStream stream_KW_INSERT=new RewriteRuleTokenStream(adaptor,"token KW_INSERT");
        RewriteRuleSubtreeStream stream_tableOrPartition=new RewriteRuleSubtreeStream(adaptor,"rule tableOrPartition");
        RewriteRuleSubtreeStream stream_ifNotExists=new RewriteRuleSubtreeStream(adaptor,"rule ifNotExists");
        RewriteRuleSubtreeStream stream_destination=new RewriteRuleSubtreeStream(adaptor,"rule destination");
         msgs.push("insert clause"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1570:4: ( KW_INSERT KW_OVERWRITE destination ( ifNotExists )? -> ^( TOK_DESTINATION destination ( ifNotExists )? ) | KW_INSERT KW_INTO KW_TABLE tableOrPartition -> ^( TOK_INSERT_INTO tableOrPartition ) )
            int alt211=2;
            int LA211_0 = input.LA(1);

            if ( (LA211_0==KW_INSERT) ) {
                int LA211_1 = input.LA(2);

                if ( (LA211_1==KW_OVERWRITE) ) {
                    alt211=1;
                }
                else if ( (LA211_1==KW_INTO) ) {
                    alt211=2;
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("", 211, 1, input);

                    throw nvae;

                }
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 211, 0, input);

                throw nvae;

            }
            switch (alt211) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1571:6: KW_INSERT KW_OVERWRITE destination ( ifNotExists )?
                    {
                    KW_INSERT691=(Token)match(input,KW_INSERT,FOLLOW_KW_INSERT_in_insertClause11296);  
                    stream_KW_INSERT.add(KW_INSERT691);


                    KW_OVERWRITE692=(Token)match(input,KW_OVERWRITE,FOLLOW_KW_OVERWRITE_in_insertClause11298);  
                    stream_KW_OVERWRITE.add(KW_OVERWRITE692);


                    pushFollow(FOLLOW_destination_in_insertClause11300);
                    destination693=destination();

                    state._fsp--;

                    stream_destination.add(destination693.getTree());

                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1571:41: ( ifNotExists )?
                    int alt210=2;
                    int LA210_0 = input.LA(1);

                    if ( (LA210_0==KW_IF) ) {
                        alt210=1;
                    }
                    switch (alt210) {
                        case 1 :
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1571:41: ifNotExists
                            {
                            pushFollow(FOLLOW_ifNotExists_in_insertClause11302);
                            ifNotExists694=ifNotExists();

                            state._fsp--;

                            stream_ifNotExists.add(ifNotExists694.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: destination, ifNotExists
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1571:54: -> ^( TOK_DESTINATION destination ( ifNotExists )? )
                    {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1571:57: ^( TOK_DESTINATION destination ( ifNotExists )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_DESTINATION, "TOK_DESTINATION")
                        , root_1);

                        adaptor.addChild(root_1, stream_destination.nextTree());

                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1571:87: ( ifNotExists )?
                        if ( stream_ifNotExists.hasNext() ) {
                            adaptor.addChild(root_1, stream_ifNotExists.nextTree());

                        }
                        stream_ifNotExists.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 2 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1572:6: KW_INSERT KW_INTO KW_TABLE tableOrPartition
                    {
                    KW_INSERT695=(Token)match(input,KW_INSERT,FOLLOW_KW_INSERT_in_insertClause11321);  
                    stream_KW_INSERT.add(KW_INSERT695);


                    KW_INTO696=(Token)match(input,KW_INTO,FOLLOW_KW_INTO_in_insertClause11323);  
                    stream_KW_INTO.add(KW_INTO696);


                    KW_TABLE697=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_insertClause11325);  
                    stream_KW_TABLE.add(KW_TABLE697);


                    pushFollow(FOLLOW_tableOrPartition_in_insertClause11327);
                    tableOrPartition698=tableOrPartition();

                    state._fsp--;

                    stream_tableOrPartition.add(tableOrPartition698.getTree());

                    // AST REWRITE
                    // elements: tableOrPartition
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1573:8: -> ^( TOK_INSERT_INTO tableOrPartition )
                    {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1573:11: ^( TOK_INSERT_INTO tableOrPartition )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_INSERT_INTO, "TOK_INSERT_INTO")
                        , root_1);

                        adaptor.addChild(root_1, stream_tableOrPartition.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "insertClause"


    public static class destination_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "destination"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1576:1: destination : ( KW_LOCAL KW_DIRECTORY StringLiteral -> ^( TOK_LOCAL_DIR StringLiteral ) | KW_DIRECTORY StringLiteral -> ^( TOK_DIR StringLiteral ) | KW_TABLE tableOrPartition -> tableOrPartition );
    public final HiveParser.destination_return destination() throws RecognitionException {
        HiveParser.destination_return retval = new HiveParser.destination_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_LOCAL699=null;
        Token KW_DIRECTORY700=null;
        Token StringLiteral701=null;
        Token KW_DIRECTORY702=null;
        Token StringLiteral703=null;
        Token KW_TABLE704=null;
        HiveParser.tableOrPartition_return tableOrPartition705 =null;


        CommonTree KW_LOCAL699_tree=null;
        CommonTree KW_DIRECTORY700_tree=null;
        CommonTree StringLiteral701_tree=null;
        CommonTree KW_DIRECTORY702_tree=null;
        CommonTree StringLiteral703_tree=null;
        CommonTree KW_TABLE704_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_DIRECTORY=new RewriteRuleTokenStream(adaptor,"token KW_DIRECTORY");
        RewriteRuleTokenStream stream_KW_LOCAL=new RewriteRuleTokenStream(adaptor,"token KW_LOCAL");
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleSubtreeStream stream_tableOrPartition=new RewriteRuleSubtreeStream(adaptor,"rule tableOrPartition");
         msgs.push("destination specification"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1579:4: ( KW_LOCAL KW_DIRECTORY StringLiteral -> ^( TOK_LOCAL_DIR StringLiteral ) | KW_DIRECTORY StringLiteral -> ^( TOK_DIR StringLiteral ) | KW_TABLE tableOrPartition -> tableOrPartition )
            int alt212=3;
            switch ( input.LA(1) ) {
            case KW_LOCAL:
                {
                alt212=1;
                }
                break;
            case KW_DIRECTORY:
                {
                alt212=2;
                }
                break;
            case KW_TABLE:
                {
                alt212=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 212, 0, input);

                throw nvae;

            }

            switch (alt212) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1580:6: KW_LOCAL KW_DIRECTORY StringLiteral
                    {
                    KW_LOCAL699=(Token)match(input,KW_LOCAL,FOLLOW_KW_LOCAL_in_destination11372);  
                    stream_KW_LOCAL.add(KW_LOCAL699);


                    KW_DIRECTORY700=(Token)match(input,KW_DIRECTORY,FOLLOW_KW_DIRECTORY_in_destination11374);  
                    stream_KW_DIRECTORY.add(KW_DIRECTORY700);


                    StringLiteral701=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_destination11376);  
                    stream_StringLiteral.add(StringLiteral701);


                    // AST REWRITE
                    // elements: StringLiteral
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1580:42: -> ^( TOK_LOCAL_DIR StringLiteral )
                    {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1580:45: ^( TOK_LOCAL_DIR StringLiteral )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_LOCAL_DIR, "TOK_LOCAL_DIR")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_StringLiteral.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 2 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1581:6: KW_DIRECTORY StringLiteral
                    {
                    KW_DIRECTORY702=(Token)match(input,KW_DIRECTORY,FOLLOW_KW_DIRECTORY_in_destination11391);  
                    stream_KW_DIRECTORY.add(KW_DIRECTORY702);


                    StringLiteral703=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_destination11393);  
                    stream_StringLiteral.add(StringLiteral703);


                    // AST REWRITE
                    // elements: StringLiteral
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1581:33: -> ^( TOK_DIR StringLiteral )
                    {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1581:36: ^( TOK_DIR StringLiteral )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_DIR, "TOK_DIR")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_StringLiteral.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 3 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1582:6: KW_TABLE tableOrPartition
                    {
                    KW_TABLE704=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_destination11408);  
                    stream_KW_TABLE.add(KW_TABLE704);


                    pushFollow(FOLLOW_tableOrPartition_in_destination11410);
                    tableOrPartition705=tableOrPartition();

                    state._fsp--;

                    stream_tableOrPartition.add(tableOrPartition705.getTree());

                    // AST REWRITE
                    // elements: tableOrPartition
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1582:32: -> tableOrPartition
                    {
                        adaptor.addChild(root_0, stream_tableOrPartition.nextTree());

                    }


                    retval.tree = root_0;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "destination"


    public static class limitClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "limitClause"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1585:1: limitClause : KW_LIMIT num= Number -> ^( TOK_LIMIT $num) ;
    public final HiveParser.limitClause_return limitClause() throws RecognitionException {
        HiveParser.limitClause_return retval = new HiveParser.limitClause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token num=null;
        Token KW_LIMIT706=null;

        CommonTree num_tree=null;
        CommonTree KW_LIMIT706_tree=null;
        RewriteRuleTokenStream stream_Number=new RewriteRuleTokenStream(adaptor,"token Number");
        RewriteRuleTokenStream stream_KW_LIMIT=new RewriteRuleTokenStream(adaptor,"token KW_LIMIT");

         msgs.push("limit clause"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1588:4: ( KW_LIMIT num= Number -> ^( TOK_LIMIT $num) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1589:4: KW_LIMIT num= Number
            {
            KW_LIMIT706=(Token)match(input,KW_LIMIT,FOLLOW_KW_LIMIT_in_limitClause11442);  
            stream_KW_LIMIT.add(KW_LIMIT706);


            num=(Token)match(input,Number,FOLLOW_Number_in_limitClause11446);  
            stream_Number.add(num);


            // AST REWRITE
            // elements: num
            // token labels: num
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_num=new RewriteRuleTokenStream(adaptor,"token num",num);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1589:24: -> ^( TOK_LIMIT $num)
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1589:27: ^( TOK_LIMIT $num)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_LIMIT, "TOK_LIMIT")
                , root_1);

                adaptor.addChild(root_1, stream_num.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "limitClause"


    public static class selectClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "selectClause"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1594:1: selectClause : ( KW_SELECT ( hintClause )? ( ( ( KW_ALL |dist= KW_DISTINCT )? selectList ) | (transform= KW_TRANSFORM selectTrfmClause ) ) -> {$transform == null && $dist == null}? ^( TOK_SELECT ( hintClause )? selectList ) -> {$transform == null && $dist != null}? ^( TOK_SELECTDI ( hintClause )? selectList ) -> ^( TOK_SELECT ( hintClause )? ^( TOK_SELEXPR selectTrfmClause ) ) | trfmClause -> ^( TOK_SELECT ^( TOK_SELEXPR trfmClause ) ) );
    public final HiveParser.selectClause_return selectClause() throws RecognitionException {
        HiveParser.selectClause_return retval = new HiveParser.selectClause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token dist=null;
        Token transform=null;
        Token KW_SELECT707=null;
        Token KW_ALL709=null;
        HiveParser.hintClause_return hintClause708 =null;

        HiveParser.selectList_return selectList710 =null;

        HiveParser.selectTrfmClause_return selectTrfmClause711 =null;

        HiveParser.trfmClause_return trfmClause712 =null;


        CommonTree dist_tree=null;
        CommonTree transform_tree=null;
        CommonTree KW_SELECT707_tree=null;
        CommonTree KW_ALL709_tree=null;
        RewriteRuleTokenStream stream_KW_ALL=new RewriteRuleTokenStream(adaptor,"token KW_ALL");
        RewriteRuleTokenStream stream_KW_SELECT=new RewriteRuleTokenStream(adaptor,"token KW_SELECT");
        RewriteRuleTokenStream stream_KW_TRANSFORM=new RewriteRuleTokenStream(adaptor,"token KW_TRANSFORM");
        RewriteRuleTokenStream stream_KW_DISTINCT=new RewriteRuleTokenStream(adaptor,"token KW_DISTINCT");
        RewriteRuleSubtreeStream stream_selectList=new RewriteRuleSubtreeStream(adaptor,"rule selectList");
        RewriteRuleSubtreeStream stream_hintClause=new RewriteRuleSubtreeStream(adaptor,"rule hintClause");
        RewriteRuleSubtreeStream stream_trfmClause=new RewriteRuleSubtreeStream(adaptor,"rule trfmClause");
        RewriteRuleSubtreeStream stream_selectTrfmClause=new RewriteRuleSubtreeStream(adaptor,"rule selectTrfmClause");
         msgs.push("select clause"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1597:5: ( KW_SELECT ( hintClause )? ( ( ( KW_ALL |dist= KW_DISTINCT )? selectList ) | (transform= KW_TRANSFORM selectTrfmClause ) ) -> {$transform == null && $dist == null}? ^( TOK_SELECT ( hintClause )? selectList ) -> {$transform == null && $dist != null}? ^( TOK_SELECTDI ( hintClause )? selectList ) -> ^( TOK_SELECT ( hintClause )? ^( TOK_SELEXPR selectTrfmClause ) ) | trfmClause -> ^( TOK_SELECT ^( TOK_SELEXPR trfmClause ) ) )
            int alt216=2;
            int LA216_0 = input.LA(1);

            if ( (LA216_0==KW_SELECT) ) {
                alt216=1;
            }
            else if ( (LA216_0==KW_MAP||LA216_0==KW_REDUCE) ) {
                alt216=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 216, 0, input);

                throw nvae;

            }
            switch (alt216) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1598:5: KW_SELECT ( hintClause )? ( ( ( KW_ALL |dist= KW_DISTINCT )? selectList ) | (transform= KW_TRANSFORM selectTrfmClause ) )
                    {
                    KW_SELECT707=(Token)match(input,KW_SELECT,FOLLOW_KW_SELECT_in_selectClause11487);  
                    stream_KW_SELECT.add(KW_SELECT707);


                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1598:15: ( hintClause )?
                    int alt213=2;
                    int LA213_0 = input.LA(1);

                    if ( (LA213_0==DIVIDE) ) {
                        alt213=1;
                    }
                    switch (alt213) {
                        case 1 :
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1598:15: hintClause
                            {
                            pushFollow(FOLLOW_hintClause_in_selectClause11489);
                            hintClause708=hintClause();

                            state._fsp--;

                            stream_hintClause.add(hintClause708.getTree());

                            }
                            break;

                    }


                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1598:27: ( ( ( KW_ALL |dist= KW_DISTINCT )? selectList ) | (transform= KW_TRANSFORM selectTrfmClause ) )
                    int alt215=2;
                    int LA215_0 = input.LA(1);

                    if ( (LA215_0==BigintLiteral||LA215_0==CharSetName||LA215_0==Identifier||LA215_0==KW_ALL||LA215_0==KW_ARRAY||(LA215_0 >= KW_CASE && LA215_0 <= KW_CAST)||LA215_0==KW_DISTINCT||LA215_0==KW_FALSE||LA215_0==KW_IF||LA215_0==KW_MAP||LA215_0==KW_NOT||LA215_0==KW_NULL||LA215_0==KW_STRUCT||LA215_0==KW_TRUE||LA215_0==KW_UNIONTYPE||LA215_0==LPAREN||LA215_0==MINUS||(LA215_0 >= Number && LA215_0 <= PLUS)||(LA215_0 >= STAR && LA215_0 <= TILDE)||LA215_0==TinyintLiteral) ) {
                        alt215=1;
                    }
                    else if ( (LA215_0==KW_TRANSFORM) ) {
                        alt215=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("", 215, 0, input);

                        throw nvae;

                    }
                    switch (alt215) {
                        case 1 :
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1598:28: ( ( KW_ALL |dist= KW_DISTINCT )? selectList )
                            {
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1598:28: ( ( KW_ALL |dist= KW_DISTINCT )? selectList )
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1598:29: ( KW_ALL |dist= KW_DISTINCT )? selectList
                            {
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1598:29: ( KW_ALL |dist= KW_DISTINCT )?
                            int alt214=3;
                            int LA214_0 = input.LA(1);

                            if ( (LA214_0==KW_ALL) ) {
                                alt214=1;
                            }
                            else if ( (LA214_0==KW_DISTINCT) ) {
                                alt214=2;
                            }
                            switch (alt214) {
                                case 1 :
                                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1598:30: KW_ALL
                                    {
                                    KW_ALL709=(Token)match(input,KW_ALL,FOLLOW_KW_ALL_in_selectClause11495);  
                                    stream_KW_ALL.add(KW_ALL709);


                                    }
                                    break;
                                case 2 :
                                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1598:39: dist= KW_DISTINCT
                                    {
                                    dist=(Token)match(input,KW_DISTINCT,FOLLOW_KW_DISTINCT_in_selectClause11501);  
                                    stream_KW_DISTINCT.add(dist);


                                    }
                                    break;

                            }


                            pushFollow(FOLLOW_selectList_in_selectClause11505);
                            selectList710=selectList();

                            state._fsp--;

                            stream_selectList.add(selectList710.getTree());

                            }


                            }
                            break;
                        case 2 :
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1599:29: (transform= KW_TRANSFORM selectTrfmClause )
                            {
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1599:29: (transform= KW_TRANSFORM selectTrfmClause )
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1599:30: transform= KW_TRANSFORM selectTrfmClause
                            {
                            transform=(Token)match(input,KW_TRANSFORM,FOLLOW_KW_TRANSFORM_in_selectClause11539);  
                            stream_KW_TRANSFORM.add(transform);


                            pushFollow(FOLLOW_selectTrfmClause_in_selectClause11541);
                            selectTrfmClause711=selectTrfmClause();

                            state._fsp--;

                            stream_selectTrfmClause.add(selectTrfmClause711.getTree());

                            }


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: selectList, hintClause, selectTrfmClause, selectList, hintClause, hintClause
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1600:6: -> {$transform == null && $dist == null}? ^( TOK_SELECT ( hintClause )? selectList )
                    if (transform == null && dist == null) {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1600:48: ^( TOK_SELECT ( hintClause )? selectList )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_SELECT, "TOK_SELECT")
                        , root_1);

                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1600:61: ( hintClause )?
                        if ( stream_hintClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_hintClause.nextTree());

                        }
                        stream_hintClause.reset();

                        adaptor.addChild(root_1, stream_selectList.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    else // 1601:6: -> {$transform == null && $dist != null}? ^( TOK_SELECTDI ( hintClause )? selectList )
                    if (transform == null && dist != null) {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1601:48: ^( TOK_SELECTDI ( hintClause )? selectList )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_SELECTDI, "TOK_SELECTDI")
                        , root_1);

                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1601:63: ( hintClause )?
                        if ( stream_hintClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_hintClause.nextTree());

                        }
                        stream_hintClause.reset();

                        adaptor.addChild(root_1, stream_selectList.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    else // 1602:6: -> ^( TOK_SELECT ( hintClause )? ^( TOK_SELEXPR selectTrfmClause ) )
                    {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1602:9: ^( TOK_SELECT ( hintClause )? ^( TOK_SELEXPR selectTrfmClause ) )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_SELECT, "TOK_SELECT")
                        , root_1);

                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1602:22: ( hintClause )?
                        if ( stream_hintClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_hintClause.nextTree());

                        }
                        stream_hintClause.reset();

                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1602:34: ^( TOK_SELEXPR selectTrfmClause )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_SELEXPR, "TOK_SELEXPR")
                        , root_2);

                        adaptor.addChild(root_2, stream_selectTrfmClause.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 2 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1604:5: trfmClause
                    {
                    pushFollow(FOLLOW_trfmClause_in_selectClause11612);
                    trfmClause712=trfmClause();

                    state._fsp--;

                    stream_trfmClause.add(trfmClause712.getTree());

                    // AST REWRITE
                    // elements: trfmClause
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1604:17: -> ^( TOK_SELECT ^( TOK_SELEXPR trfmClause ) )
                    {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1604:19: ^( TOK_SELECT ^( TOK_SELEXPR trfmClause ) )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_SELECT, "TOK_SELECT")
                        , root_1);

                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1604:32: ^( TOK_SELEXPR trfmClause )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_SELEXPR, "TOK_SELEXPR")
                        , root_2);

                        adaptor.addChild(root_2, stream_trfmClause.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "selectClause"


    public static class selectList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "selectList"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1607:1: selectList : selectItem ( COMMA selectItem )* -> ( selectItem )+ ;
    public final HiveParser.selectList_return selectList() throws RecognitionException {
        HiveParser.selectList_return retval = new HiveParser.selectList_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token COMMA714=null;
        HiveParser.selectItem_return selectItem713 =null;

        HiveParser.selectItem_return selectItem715 =null;


        CommonTree COMMA714_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_selectItem=new RewriteRuleSubtreeStream(adaptor,"rule selectItem");
         msgs.push("select list"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1610:5: ( selectItem ( COMMA selectItem )* -> ( selectItem )+ )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1611:5: selectItem ( COMMA selectItem )*
            {
            pushFollow(FOLLOW_selectItem_in_selectList11655);
            selectItem713=selectItem();

            state._fsp--;

            stream_selectItem.add(selectItem713.getTree());

            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1611:16: ( COMMA selectItem )*
            loop217:
            do {
                int alt217=2;
                int LA217_0 = input.LA(1);

                if ( (LA217_0==COMMA) ) {
                    alt217=1;
                }


                switch (alt217) {
            	case 1 :
            	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1611:18: COMMA selectItem
            	    {
            	    COMMA714=(Token)match(input,COMMA,FOLLOW_COMMA_in_selectList11659);  
            	    stream_COMMA.add(COMMA714);


            	    pushFollow(FOLLOW_selectItem_in_selectList11662);
            	    selectItem715=selectItem();

            	    state._fsp--;

            	    stream_selectItem.add(selectItem715.getTree());

            	    }
            	    break;

            	default :
            	    break loop217;
                }
            } while (true);


            // AST REWRITE
            // elements: selectItem
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1611:39: -> ( selectItem )+
            {
                if ( !(stream_selectItem.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_selectItem.hasNext() ) {
                    adaptor.addChild(root_0, stream_selectItem.nextTree());

                }
                stream_selectItem.reset();

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "selectList"


    public static class selectTrfmClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "selectTrfmClause"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1614:1: selectTrfmClause : LPAREN selectExpressionList RPAREN inSerde= rowFormat inRec= recordWriter KW_USING StringLiteral ( KW_AS ( ( LPAREN ( aliasList | columnNameTypeList ) RPAREN ) | ( aliasList | columnNameTypeList ) ) )? outSerde= rowFormat outRec= recordReader -> ^( TOK_TRANSFORM selectExpressionList $inSerde $inRec StringLiteral $outSerde $outRec ( aliasList )? ( columnNameTypeList )? ) ;
    public final HiveParser.selectTrfmClause_return selectTrfmClause() throws RecognitionException {
        HiveParser.selectTrfmClause_return retval = new HiveParser.selectTrfmClause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token LPAREN716=null;
        Token RPAREN718=null;
        Token KW_USING719=null;
        Token StringLiteral720=null;
        Token KW_AS721=null;
        Token LPAREN722=null;
        Token RPAREN725=null;
        HiveParser.rowFormat_return inSerde =null;

        HiveParser.recordWriter_return inRec =null;

        HiveParser.rowFormat_return outSerde =null;

        HiveParser.recordReader_return outRec =null;

        HiveParser.selectExpressionList_return selectExpressionList717 =null;

        HiveParser.aliasList_return aliasList723 =null;

        HiveParser.columnNameTypeList_return columnNameTypeList724 =null;

        HiveParser.aliasList_return aliasList726 =null;

        HiveParser.columnNameTypeList_return columnNameTypeList727 =null;


        CommonTree LPAREN716_tree=null;
        CommonTree RPAREN718_tree=null;
        CommonTree KW_USING719_tree=null;
        CommonTree StringLiteral720_tree=null;
        CommonTree KW_AS721_tree=null;
        CommonTree LPAREN722_tree=null;
        CommonTree RPAREN725_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_KW_USING=new RewriteRuleTokenStream(adaptor,"token KW_USING");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_rowFormat=new RewriteRuleSubtreeStream(adaptor,"rule rowFormat");
        RewriteRuleSubtreeStream stream_columnNameTypeList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameTypeList");
        RewriteRuleSubtreeStream stream_recordReader=new RewriteRuleSubtreeStream(adaptor,"rule recordReader");
        RewriteRuleSubtreeStream stream_aliasList=new RewriteRuleSubtreeStream(adaptor,"rule aliasList");
        RewriteRuleSubtreeStream stream_selectExpressionList=new RewriteRuleSubtreeStream(adaptor,"rule selectExpressionList");
        RewriteRuleSubtreeStream stream_recordWriter=new RewriteRuleSubtreeStream(adaptor,"rule recordWriter");
         msgs.push("transform clause"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1617:5: ( LPAREN selectExpressionList RPAREN inSerde= rowFormat inRec= recordWriter KW_USING StringLiteral ( KW_AS ( ( LPAREN ( aliasList | columnNameTypeList ) RPAREN ) | ( aliasList | columnNameTypeList ) ) )? outSerde= rowFormat outRec= recordReader -> ^( TOK_TRANSFORM selectExpressionList $inSerde $inRec StringLiteral $outSerde $outRec ( aliasList )? ( columnNameTypeList )? ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1618:5: LPAREN selectExpressionList RPAREN inSerde= rowFormat inRec= recordWriter KW_USING StringLiteral ( KW_AS ( ( LPAREN ( aliasList | columnNameTypeList ) RPAREN ) | ( aliasList | columnNameTypeList ) ) )? outSerde= rowFormat outRec= recordReader
            {
            LPAREN716=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_selectTrfmClause11701);  
            stream_LPAREN.add(LPAREN716);


            pushFollow(FOLLOW_selectExpressionList_in_selectTrfmClause11703);
            selectExpressionList717=selectExpressionList();

            state._fsp--;

            stream_selectExpressionList.add(selectExpressionList717.getTree());

            RPAREN718=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_selectTrfmClause11705);  
            stream_RPAREN.add(RPAREN718);


            pushFollow(FOLLOW_rowFormat_in_selectTrfmClause11713);
            inSerde=rowFormat();

            state._fsp--;

            stream_rowFormat.add(inSerde.getTree());

            pushFollow(FOLLOW_recordWriter_in_selectTrfmClause11717);
            inRec=recordWriter();

            state._fsp--;

            stream_recordWriter.add(inRec.getTree());

            KW_USING719=(Token)match(input,KW_USING,FOLLOW_KW_USING_in_selectTrfmClause11723);  
            stream_KW_USING.add(KW_USING719);


            StringLiteral720=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_selectTrfmClause11725);  
            stream_StringLiteral.add(StringLiteral720);


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1621:5: ( KW_AS ( ( LPAREN ( aliasList | columnNameTypeList ) RPAREN ) | ( aliasList | columnNameTypeList ) ) )?
            int alt221=2;
            int LA221_0 = input.LA(1);

            if ( (LA221_0==KW_AS) ) {
                alt221=1;
            }
            switch (alt221) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1621:7: KW_AS ( ( LPAREN ( aliasList | columnNameTypeList ) RPAREN ) | ( aliasList | columnNameTypeList ) )
                    {
                    KW_AS721=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_selectTrfmClause11733);  
                    stream_KW_AS.add(KW_AS721);


                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1621:13: ( ( LPAREN ( aliasList | columnNameTypeList ) RPAREN ) | ( aliasList | columnNameTypeList ) )
                    int alt220=2;
                    int LA220_0 = input.LA(1);

                    if ( (LA220_0==LPAREN) ) {
                        alt220=1;
                    }
                    else if ( (LA220_0==Identifier) ) {
                        alt220=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("", 220, 0, input);

                        throw nvae;

                    }
                    switch (alt220) {
                        case 1 :
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1621:14: ( LPAREN ( aliasList | columnNameTypeList ) RPAREN )
                            {
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1621:14: ( LPAREN ( aliasList | columnNameTypeList ) RPAREN )
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1621:15: LPAREN ( aliasList | columnNameTypeList ) RPAREN
                            {
                            LPAREN722=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_selectTrfmClause11737);  
                            stream_LPAREN.add(LPAREN722);


                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1621:22: ( aliasList | columnNameTypeList )
                            int alt218=2;
                            int LA218_0 = input.LA(1);

                            if ( (LA218_0==Identifier) ) {
                                int LA218_1 = input.LA(2);

                                if ( (LA218_1==COMMA||LA218_1==RPAREN) ) {
                                    alt218=1;
                                }
                                else if ( (LA218_1==KW_ARRAY||(LA218_1 >= KW_BIGINT && LA218_1 <= KW_BOOLEAN)||(LA218_1 >= KW_DATE && LA218_1 <= KW_DATETIME)||LA218_1==KW_DECIMAL||LA218_1==KW_DOUBLE||LA218_1==KW_FLOAT||LA218_1==KW_INT||LA218_1==KW_MAP||LA218_1==KW_SMALLINT||(LA218_1 >= KW_STRING && LA218_1 <= KW_STRUCT)||(LA218_1 >= KW_TIMESTAMP && LA218_1 <= KW_TINYINT)||LA218_1==KW_UNIONTYPE) ) {
                                    alt218=2;
                                }
                                else {
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 218, 1, input);

                                    throw nvae;

                                }
                            }
                            else {
                                NoViableAltException nvae =
                                    new NoViableAltException("", 218, 0, input);

                                throw nvae;

                            }
                            switch (alt218) {
                                case 1 :
                                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1621:23: aliasList
                                    {
                                    pushFollow(FOLLOW_aliasList_in_selectTrfmClause11740);
                                    aliasList723=aliasList();

                                    state._fsp--;

                                    stream_aliasList.add(aliasList723.getTree());

                                    }
                                    break;
                                case 2 :
                                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1621:35: columnNameTypeList
                                    {
                                    pushFollow(FOLLOW_columnNameTypeList_in_selectTrfmClause11744);
                                    columnNameTypeList724=columnNameTypeList();

                                    state._fsp--;

                                    stream_columnNameTypeList.add(columnNameTypeList724.getTree());

                                    }
                                    break;

                            }


                            RPAREN725=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_selectTrfmClause11747);  
                            stream_RPAREN.add(RPAREN725);


                            }


                            }
                            break;
                        case 2 :
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1621:65: ( aliasList | columnNameTypeList )
                            {
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1621:65: ( aliasList | columnNameTypeList )
                            int alt219=2;
                            int LA219_0 = input.LA(1);

                            if ( (LA219_0==Identifier) ) {
                                switch ( input.LA(2) ) {
                                case EOF:
                                case COMMA:
                                case KW_CLUSTER:
                                case KW_DISTRIBUTE:
                                case KW_FROM:
                                case KW_GROUP:
                                case KW_HAVING:
                                case KW_INSERT:
                                case KW_LIMIT:
                                case KW_ORDER:
                                case KW_RECORDREADER:
                                case KW_REDUCE:
                                case KW_ROW:
                                case KW_SELECT:
                                case KW_SORT:
                                case KW_UNION:
                                case KW_WHERE:
                                case RPAREN:
                                    {
                                    alt219=1;
                                    }
                                    break;
                                case KW_MAP:
                                    {
                                    int LA219_19 = input.LA(3);

                                    if ( (LA219_19==LESSTHAN) ) {
                                        alt219=2;
                                    }
                                    else if ( (LA219_19==BigintLiteral||LA219_19==CharSetName||LA219_19==Identifier||LA219_19==KW_ARRAY||(LA219_19 >= KW_CASE && LA219_19 <= KW_CAST)||LA219_19==KW_FALSE||LA219_19==KW_IF||LA219_19==KW_MAP||LA219_19==KW_NOT||LA219_19==KW_NULL||LA219_19==KW_STRUCT||LA219_19==KW_TRUE||LA219_19==KW_UNIONTYPE||LA219_19==LPAREN||LA219_19==MINUS||(LA219_19 >= Number && LA219_19 <= PLUS)||(LA219_19 >= STAR && LA219_19 <= TILDE)||LA219_19==TinyintLiteral) ) {
                                        alt219=1;
                                    }
                                    else {
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 219, 19, input);

                                        throw nvae;

                                    }
                                    }
                                    break;
                                case KW_ARRAY:
                                case KW_BIGINT:
                                case KW_BINARY:
                                case KW_BOOLEAN:
                                case KW_DATE:
                                case KW_DATETIME:
                                case KW_DECIMAL:
                                case KW_DOUBLE:
                                case KW_FLOAT:
                                case KW_INT:
                                case KW_SMALLINT:
                                case KW_STRING:
                                case KW_STRUCT:
                                case KW_TIMESTAMP:
                                case KW_TINYINT:
                                case KW_UNIONTYPE:
                                    {
                                    alt219=2;
                                    }
                                    break;
                                default:
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 219, 1, input);

                                    throw nvae;

                                }

                            }
                            else {
                                NoViableAltException nvae =
                                    new NoViableAltException("", 219, 0, input);

                                throw nvae;

                            }
                            switch (alt219) {
                                case 1 :
                                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1621:66: aliasList
                                    {
                                    pushFollow(FOLLOW_aliasList_in_selectTrfmClause11753);
                                    aliasList726=aliasList();

                                    state._fsp--;

                                    stream_aliasList.add(aliasList726.getTree());

                                    }
                                    break;
                                case 2 :
                                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1621:78: columnNameTypeList
                                    {
                                    pushFollow(FOLLOW_columnNameTypeList_in_selectTrfmClause11757);
                                    columnNameTypeList727=columnNameTypeList();

                                    state._fsp--;

                                    stream_columnNameTypeList.add(columnNameTypeList727.getTree());

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;

            }


            pushFollow(FOLLOW_rowFormat_in_selectTrfmClause11769);
            outSerde=rowFormat();

            state._fsp--;

            stream_rowFormat.add(outSerde.getTree());

            pushFollow(FOLLOW_recordReader_in_selectTrfmClause11773);
            outRec=recordReader();

            state._fsp--;

            stream_recordReader.add(outRec.getTree());

            // AST REWRITE
            // elements: aliasList, outSerde, inSerde, selectExpressionList, StringLiteral, inRec, columnNameTypeList, outRec
            // token labels: 
            // rule labels: retval, inRec, inSerde, outRec, outSerde
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_inRec=new RewriteRuleSubtreeStream(adaptor,"rule inRec",inRec!=null?inRec.tree:null);
            RewriteRuleSubtreeStream stream_inSerde=new RewriteRuleSubtreeStream(adaptor,"rule inSerde",inSerde!=null?inSerde.tree:null);
            RewriteRuleSubtreeStream stream_outRec=new RewriteRuleSubtreeStream(adaptor,"rule outRec",outRec!=null?outRec.tree:null);
            RewriteRuleSubtreeStream stream_outSerde=new RewriteRuleSubtreeStream(adaptor,"rule outSerde",outSerde!=null?outSerde.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1623:5: -> ^( TOK_TRANSFORM selectExpressionList $inSerde $inRec StringLiteral $outSerde $outRec ( aliasList )? ( columnNameTypeList )? )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1623:8: ^( TOK_TRANSFORM selectExpressionList $inSerde $inRec StringLiteral $outSerde $outRec ( aliasList )? ( columnNameTypeList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_TRANSFORM, "TOK_TRANSFORM")
                , root_1);

                adaptor.addChild(root_1, stream_selectExpressionList.nextTree());

                adaptor.addChild(root_1, stream_inSerde.nextTree());

                adaptor.addChild(root_1, stream_inRec.nextTree());

                adaptor.addChild(root_1, 
                stream_StringLiteral.nextNode()
                );

                adaptor.addChild(root_1, stream_outSerde.nextTree());

                adaptor.addChild(root_1, stream_outRec.nextTree());

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1623:93: ( aliasList )?
                if ( stream_aliasList.hasNext() ) {
                    adaptor.addChild(root_1, stream_aliasList.nextTree());

                }
                stream_aliasList.reset();

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1623:104: ( columnNameTypeList )?
                if ( stream_columnNameTypeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnNameTypeList.nextTree());

                }
                stream_columnNameTypeList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "selectTrfmClause"


    public static class hintClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "hintClause"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1626:1: hintClause : DIVIDE STAR PLUS hintList STAR DIVIDE -> ^( TOK_HINTLIST hintList ) ;
    public final HiveParser.hintClause_return hintClause() throws RecognitionException {
        HiveParser.hintClause_return retval = new HiveParser.hintClause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token DIVIDE728=null;
        Token STAR729=null;
        Token PLUS730=null;
        Token STAR732=null;
        Token DIVIDE733=null;
        HiveParser.hintList_return hintList731 =null;


        CommonTree DIVIDE728_tree=null;
        CommonTree STAR729_tree=null;
        CommonTree PLUS730_tree=null;
        CommonTree STAR732_tree=null;
        CommonTree DIVIDE733_tree=null;
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DIVIDE=new RewriteRuleTokenStream(adaptor,"token DIVIDE");
        RewriteRuleSubtreeStream stream_hintList=new RewriteRuleSubtreeStream(adaptor,"rule hintList");
         msgs.push("hint clause"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1629:5: ( DIVIDE STAR PLUS hintList STAR DIVIDE -> ^( TOK_HINTLIST hintList ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1630:5: DIVIDE STAR PLUS hintList STAR DIVIDE
            {
            DIVIDE728=(Token)match(input,DIVIDE,FOLLOW_DIVIDE_in_hintClause11836);  
            stream_DIVIDE.add(DIVIDE728);


            STAR729=(Token)match(input,STAR,FOLLOW_STAR_in_hintClause11838);  
            stream_STAR.add(STAR729);


            PLUS730=(Token)match(input,PLUS,FOLLOW_PLUS_in_hintClause11840);  
            stream_PLUS.add(PLUS730);


            pushFollow(FOLLOW_hintList_in_hintClause11842);
            hintList731=hintList();

            state._fsp--;

            stream_hintList.add(hintList731.getTree());

            STAR732=(Token)match(input,STAR,FOLLOW_STAR_in_hintClause11844);  
            stream_STAR.add(STAR732);


            DIVIDE733=(Token)match(input,DIVIDE,FOLLOW_DIVIDE_in_hintClause11846);  
            stream_DIVIDE.add(DIVIDE733);


            // AST REWRITE
            // elements: hintList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1630:43: -> ^( TOK_HINTLIST hintList )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1630:46: ^( TOK_HINTLIST hintList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_HINTLIST, "TOK_HINTLIST")
                , root_1);

                adaptor.addChild(root_1, stream_hintList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "hintClause"


    public static class hintList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "hintList"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1633:1: hintList : hintItem ( COMMA hintItem )* -> ( hintItem )+ ;
    public final HiveParser.hintList_return hintList() throws RecognitionException {
        HiveParser.hintList_return retval = new HiveParser.hintList_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token COMMA735=null;
        HiveParser.hintItem_return hintItem734 =null;

        HiveParser.hintItem_return hintItem736 =null;


        CommonTree COMMA735_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_hintItem=new RewriteRuleSubtreeStream(adaptor,"rule hintItem");
         msgs.push("hint list"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1636:5: ( hintItem ( COMMA hintItem )* -> ( hintItem )+ )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1637:5: hintItem ( COMMA hintItem )*
            {
            pushFollow(FOLLOW_hintItem_in_hintList11885);
            hintItem734=hintItem();

            state._fsp--;

            stream_hintItem.add(hintItem734.getTree());

            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1637:14: ( COMMA hintItem )*
            loop222:
            do {
                int alt222=2;
                int LA222_0 = input.LA(1);

                if ( (LA222_0==COMMA) ) {
                    alt222=1;
                }


                switch (alt222) {
            	case 1 :
            	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1637:15: COMMA hintItem
            	    {
            	    COMMA735=(Token)match(input,COMMA,FOLLOW_COMMA_in_hintList11888);  
            	    stream_COMMA.add(COMMA735);


            	    pushFollow(FOLLOW_hintItem_in_hintList11890);
            	    hintItem736=hintItem();

            	    state._fsp--;

            	    stream_hintItem.add(hintItem736.getTree());

            	    }
            	    break;

            	default :
            	    break loop222;
                }
            } while (true);


            // AST REWRITE
            // elements: hintItem
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1637:32: -> ( hintItem )+
            {
                if ( !(stream_hintItem.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_hintItem.hasNext() ) {
                    adaptor.addChild(root_0, stream_hintItem.nextTree());

                }
                stream_hintItem.reset();

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "hintList"


    public static class hintItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "hintItem"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1640:1: hintItem : hintName ( LPAREN hintArgs RPAREN )? -> ^( TOK_HINT hintName ( hintArgs )? ) ;
    public final HiveParser.hintItem_return hintItem() throws RecognitionException {
        HiveParser.hintItem_return retval = new HiveParser.hintItem_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token LPAREN738=null;
        Token RPAREN740=null;
        HiveParser.hintName_return hintName737 =null;

        HiveParser.hintArgs_return hintArgs739 =null;


        CommonTree LPAREN738_tree=null;
        CommonTree RPAREN740_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_hintName=new RewriteRuleSubtreeStream(adaptor,"rule hintName");
        RewriteRuleSubtreeStream stream_hintArgs=new RewriteRuleSubtreeStream(adaptor,"rule hintArgs");
         msgs.push("hint item"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1643:5: ( hintName ( LPAREN hintArgs RPAREN )? -> ^( TOK_HINT hintName ( hintArgs )? ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1644:5: hintName ( LPAREN hintArgs RPAREN )?
            {
            pushFollow(FOLLOW_hintName_in_hintItem11928);
            hintName737=hintName();

            state._fsp--;

            stream_hintName.add(hintName737.getTree());

            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1644:14: ( LPAREN hintArgs RPAREN )?
            int alt223=2;
            int LA223_0 = input.LA(1);

            if ( (LA223_0==LPAREN) ) {
                alt223=1;
            }
            switch (alt223) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1644:15: LPAREN hintArgs RPAREN
                    {
                    LPAREN738=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_hintItem11931);  
                    stream_LPAREN.add(LPAREN738);


                    pushFollow(FOLLOW_hintArgs_in_hintItem11933);
                    hintArgs739=hintArgs();

                    state._fsp--;

                    stream_hintArgs.add(hintArgs739.getTree());

                    RPAREN740=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_hintItem11935);  
                    stream_RPAREN.add(RPAREN740);


                    }
                    break;

            }


            // AST REWRITE
            // elements: hintArgs, hintName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1644:40: -> ^( TOK_HINT hintName ( hintArgs )? )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1644:43: ^( TOK_HINT hintName ( hintArgs )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_HINT, "TOK_HINT")
                , root_1);

                adaptor.addChild(root_1, stream_hintName.nextTree());

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1644:63: ( hintArgs )?
                if ( stream_hintArgs.hasNext() ) {
                    adaptor.addChild(root_1, stream_hintArgs.nextTree());

                }
                stream_hintArgs.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "hintItem"


    public static class hintName_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "hintName"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1647:1: hintName : ( KW_MAPJOIN -> TOK_MAPJOIN | KW_STREAMTABLE -> TOK_STREAMTABLE | KW_HOLD_DDLTIME -> TOK_HOLD_DDLTIME );
    public final HiveParser.hintName_return hintName() throws RecognitionException {
        HiveParser.hintName_return retval = new HiveParser.hintName_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_MAPJOIN741=null;
        Token KW_STREAMTABLE742=null;
        Token KW_HOLD_DDLTIME743=null;

        CommonTree KW_MAPJOIN741_tree=null;
        CommonTree KW_STREAMTABLE742_tree=null;
        CommonTree KW_HOLD_DDLTIME743_tree=null;
        RewriteRuleTokenStream stream_KW_HOLD_DDLTIME=new RewriteRuleTokenStream(adaptor,"token KW_HOLD_DDLTIME");
        RewriteRuleTokenStream stream_KW_MAPJOIN=new RewriteRuleTokenStream(adaptor,"token KW_MAPJOIN");
        RewriteRuleTokenStream stream_KW_STREAMTABLE=new RewriteRuleTokenStream(adaptor,"token KW_STREAMTABLE");

         msgs.push("hint name"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1650:5: ( KW_MAPJOIN -> TOK_MAPJOIN | KW_STREAMTABLE -> TOK_STREAMTABLE | KW_HOLD_DDLTIME -> TOK_HOLD_DDLTIME )
            int alt224=3;
            switch ( input.LA(1) ) {
            case KW_MAPJOIN:
                {
                alt224=1;
                }
                break;
            case KW_STREAMTABLE:
                {
                alt224=2;
                }
                break;
            case KW_HOLD_DDLTIME:
                {
                alt224=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 224, 0, input);

                throw nvae;

            }

            switch (alt224) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1651:5: KW_MAPJOIN
                    {
                    KW_MAPJOIN741=(Token)match(input,KW_MAPJOIN,FOLLOW_KW_MAPJOIN_in_hintName11979);  
                    stream_KW_MAPJOIN.add(KW_MAPJOIN741);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1651:16: -> TOK_MAPJOIN
                    {
                        adaptor.addChild(root_0, 
                        (CommonTree)adaptor.create(TOK_MAPJOIN, "TOK_MAPJOIN")
                        );

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 2 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1652:7: KW_STREAMTABLE
                    {
                    KW_STREAMTABLE742=(Token)match(input,KW_STREAMTABLE,FOLLOW_KW_STREAMTABLE_in_hintName11991);  
                    stream_KW_STREAMTABLE.add(KW_STREAMTABLE742);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1652:22: -> TOK_STREAMTABLE
                    {
                        adaptor.addChild(root_0, 
                        (CommonTree)adaptor.create(TOK_STREAMTABLE, "TOK_STREAMTABLE")
                        );

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 3 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1653:7: KW_HOLD_DDLTIME
                    {
                    KW_HOLD_DDLTIME743=(Token)match(input,KW_HOLD_DDLTIME,FOLLOW_KW_HOLD_DDLTIME_in_hintName12003);  
                    stream_KW_HOLD_DDLTIME.add(KW_HOLD_DDLTIME743);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1653:23: -> TOK_HOLD_DDLTIME
                    {
                        adaptor.addChild(root_0, 
                        (CommonTree)adaptor.create(TOK_HOLD_DDLTIME, "TOK_HOLD_DDLTIME")
                        );

                    }


                    retval.tree = root_0;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "hintName"


    public static class hintArgs_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "hintArgs"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1656:1: hintArgs : hintArgName ( COMMA hintArgName )* -> ^( TOK_HINTARGLIST ( hintArgName )+ ) ;
    public final HiveParser.hintArgs_return hintArgs() throws RecognitionException {
        HiveParser.hintArgs_return retval = new HiveParser.hintArgs_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token COMMA745=null;
        HiveParser.hintArgName_return hintArgName744 =null;

        HiveParser.hintArgName_return hintArgName746 =null;


        CommonTree COMMA745_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_hintArgName=new RewriteRuleSubtreeStream(adaptor,"rule hintArgName");
         msgs.push("hint arguments"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1659:5: ( hintArgName ( COMMA hintArgName )* -> ^( TOK_HINTARGLIST ( hintArgName )+ ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1660:5: hintArgName ( COMMA hintArgName )*
            {
            pushFollow(FOLLOW_hintArgName_in_hintArgs12038);
            hintArgName744=hintArgName();

            state._fsp--;

            stream_hintArgName.add(hintArgName744.getTree());

            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1660:17: ( COMMA hintArgName )*
            loop225:
            do {
                int alt225=2;
                int LA225_0 = input.LA(1);

                if ( (LA225_0==COMMA) ) {
                    alt225=1;
                }


                switch (alt225) {
            	case 1 :
            	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1660:18: COMMA hintArgName
            	    {
            	    COMMA745=(Token)match(input,COMMA,FOLLOW_COMMA_in_hintArgs12041);  
            	    stream_COMMA.add(COMMA745);


            	    pushFollow(FOLLOW_hintArgName_in_hintArgs12043);
            	    hintArgName746=hintArgName();

            	    state._fsp--;

            	    stream_hintArgName.add(hintArgName746.getTree());

            	    }
            	    break;

            	default :
            	    break loop225;
                }
            } while (true);


            // AST REWRITE
            // elements: hintArgName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1660:38: -> ^( TOK_HINTARGLIST ( hintArgName )+ )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1660:41: ^( TOK_HINTARGLIST ( hintArgName )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_HINTARGLIST, "TOK_HINTARGLIST")
                , root_1);

                if ( !(stream_hintArgName.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_hintArgName.hasNext() ) {
                    adaptor.addChild(root_1, stream_hintArgName.nextTree());

                }
                stream_hintArgName.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "hintArgs"


    public static class hintArgName_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "hintArgName"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1663:1: hintArgName : Identifier ;
    public final HiveParser.hintArgName_return hintArgName() throws RecognitionException {
        HiveParser.hintArgName_return retval = new HiveParser.hintArgName_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token Identifier747=null;

        CommonTree Identifier747_tree=null;

         msgs.push("hint argument name"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1666:5: ( Identifier )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1667:5: Identifier
            {
            root_0 = (CommonTree)adaptor.nil();


            Identifier747=(Token)match(input,Identifier,FOLLOW_Identifier_in_hintArgName12085); 
            Identifier747_tree = 
            (CommonTree)adaptor.create(Identifier747)
            ;
            adaptor.addChild(root_0, Identifier747_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "hintArgName"


    public static class selectItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "selectItem"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1670:1: selectItem : ( selectExpression ( ( ( KW_AS )? Identifier ) | ( KW_AS LPAREN Identifier ( COMMA Identifier )* RPAREN ) )? ) -> ^( TOK_SELEXPR selectExpression ( Identifier )* ) ;
    public final HiveParser.selectItem_return selectItem() throws RecognitionException {
        HiveParser.selectItem_return retval = new HiveParser.selectItem_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_AS749=null;
        Token Identifier750=null;
        Token KW_AS751=null;
        Token LPAREN752=null;
        Token Identifier753=null;
        Token COMMA754=null;
        Token Identifier755=null;
        Token RPAREN756=null;
        HiveParser.selectExpression_return selectExpression748 =null;


        CommonTree KW_AS749_tree=null;
        CommonTree Identifier750_tree=null;
        CommonTree KW_AS751_tree=null;
        CommonTree LPAREN752_tree=null;
        CommonTree Identifier753_tree=null;
        CommonTree COMMA754_tree=null;
        CommonTree Identifier755_tree=null;
        CommonTree RPAREN756_tree=null;
        RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_selectExpression=new RewriteRuleSubtreeStream(adaptor,"rule selectExpression");
         msgs.push("selection target"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1673:5: ( ( selectExpression ( ( ( KW_AS )? Identifier ) | ( KW_AS LPAREN Identifier ( COMMA Identifier )* RPAREN ) )? ) -> ^( TOK_SELEXPR selectExpression ( Identifier )* ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1674:5: ( selectExpression ( ( ( KW_AS )? Identifier ) | ( KW_AS LPAREN Identifier ( COMMA Identifier )* RPAREN ) )? )
            {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1674:5: ( selectExpression ( ( ( KW_AS )? Identifier ) | ( KW_AS LPAREN Identifier ( COMMA Identifier )* RPAREN ) )? )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1674:7: selectExpression ( ( ( KW_AS )? Identifier ) | ( KW_AS LPAREN Identifier ( COMMA Identifier )* RPAREN ) )?
            {
            pushFollow(FOLLOW_selectExpression_in_selectItem12118);
            selectExpression748=selectExpression();

            state._fsp--;

            stream_selectExpression.add(selectExpression748.getTree());

            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1674:25: ( ( ( KW_AS )? Identifier ) | ( KW_AS LPAREN Identifier ( COMMA Identifier )* RPAREN ) )?
            int alt228=3;
            int LA228_0 = input.LA(1);

            if ( (LA228_0==KW_AS) ) {
                int LA228_1 = input.LA(2);

                if ( (LA228_1==LPAREN) ) {
                    alt228=2;
                }
                else if ( (LA228_1==Identifier) ) {
                    alt228=1;
                }
            }
            else if ( (LA228_0==Identifier) ) {
                alt228=1;
            }
            switch (alt228) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1674:26: ( ( KW_AS )? Identifier )
                    {
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1674:26: ( ( KW_AS )? Identifier )
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1674:27: ( KW_AS )? Identifier
                    {
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1674:27: ( KW_AS )?
                    int alt226=2;
                    int LA226_0 = input.LA(1);

                    if ( (LA226_0==KW_AS) ) {
                        alt226=1;
                    }
                    switch (alt226) {
                        case 1 :
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1674:27: KW_AS
                            {
                            KW_AS749=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_selectItem12123);  
                            stream_KW_AS.add(KW_AS749);


                            }
                            break;

                    }


                    Identifier750=(Token)match(input,Identifier,FOLLOW_Identifier_in_selectItem12126);  
                    stream_Identifier.add(Identifier750);


                    }


                    }
                    break;
                case 2 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1674:48: ( KW_AS LPAREN Identifier ( COMMA Identifier )* RPAREN )
                    {
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1674:48: ( KW_AS LPAREN Identifier ( COMMA Identifier )* RPAREN )
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1674:49: KW_AS LPAREN Identifier ( COMMA Identifier )* RPAREN
                    {
                    KW_AS751=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_selectItem12132);  
                    stream_KW_AS.add(KW_AS751);


                    LPAREN752=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_selectItem12134);  
                    stream_LPAREN.add(LPAREN752);


                    Identifier753=(Token)match(input,Identifier,FOLLOW_Identifier_in_selectItem12136);  
                    stream_Identifier.add(Identifier753);


                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1674:73: ( COMMA Identifier )*
                    loop227:
                    do {
                        int alt227=2;
                        int LA227_0 = input.LA(1);

                        if ( (LA227_0==COMMA) ) {
                            alt227=1;
                        }


                        switch (alt227) {
                    	case 1 :
                    	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1674:74: COMMA Identifier
                    	    {
                    	    COMMA754=(Token)match(input,COMMA,FOLLOW_COMMA_in_selectItem12139);  
                    	    stream_COMMA.add(COMMA754);


                    	    Identifier755=(Token)match(input,Identifier,FOLLOW_Identifier_in_selectItem12141);  
                    	    stream_Identifier.add(Identifier755);


                    	    }
                    	    break;

                    	default :
                    	    break loop227;
                        }
                    } while (true);


                    RPAREN756=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_selectItem12145);  
                    stream_RPAREN.add(RPAREN756);


                    }


                    }
                    break;

            }


            }


            // AST REWRITE
            // elements: selectExpression, Identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1674:104: -> ^( TOK_SELEXPR selectExpression ( Identifier )* )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1674:107: ^( TOK_SELEXPR selectExpression ( Identifier )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_SELEXPR, "TOK_SELEXPR")
                , root_1);

                adaptor.addChild(root_1, stream_selectExpression.nextTree());

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1674:138: ( Identifier )*
                while ( stream_Identifier.hasNext() ) {
                    adaptor.addChild(root_1, 
                    stream_Identifier.nextNode()
                    );

                }
                stream_Identifier.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "selectItem"


    public static class trfmClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "trfmClause"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1677:1: trfmClause : ( KW_MAP selectExpressionList | KW_REDUCE selectExpressionList ) inSerde= rowFormat inRec= recordWriter KW_USING StringLiteral ( KW_AS ( ( LPAREN ( aliasList | columnNameTypeList ) RPAREN ) | ( aliasList | columnNameTypeList ) ) )? outSerde= rowFormat outRec= recordReader -> ^( TOK_TRANSFORM selectExpressionList $inSerde $inRec StringLiteral $outSerde $outRec ( aliasList )? ( columnNameTypeList )? ) ;
    public final HiveParser.trfmClause_return trfmClause() throws RecognitionException {
        HiveParser.trfmClause_return retval = new HiveParser.trfmClause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_MAP757=null;
        Token KW_REDUCE759=null;
        Token KW_USING761=null;
        Token StringLiteral762=null;
        Token KW_AS763=null;
        Token LPAREN764=null;
        Token RPAREN767=null;
        HiveParser.rowFormat_return inSerde =null;

        HiveParser.recordWriter_return inRec =null;

        HiveParser.rowFormat_return outSerde =null;

        HiveParser.recordReader_return outRec =null;

        HiveParser.selectExpressionList_return selectExpressionList758 =null;

        HiveParser.selectExpressionList_return selectExpressionList760 =null;

        HiveParser.aliasList_return aliasList765 =null;

        HiveParser.columnNameTypeList_return columnNameTypeList766 =null;

        HiveParser.aliasList_return aliasList768 =null;

        HiveParser.columnNameTypeList_return columnNameTypeList769 =null;


        CommonTree KW_MAP757_tree=null;
        CommonTree KW_REDUCE759_tree=null;
        CommonTree KW_USING761_tree=null;
        CommonTree StringLiteral762_tree=null;
        CommonTree KW_AS763_tree=null;
        CommonTree LPAREN764_tree=null;
        CommonTree RPAREN767_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_KW_REDUCE=new RewriteRuleTokenStream(adaptor,"token KW_REDUCE");
        RewriteRuleTokenStream stream_KW_USING=new RewriteRuleTokenStream(adaptor,"token KW_USING");
        RewriteRuleTokenStream stream_KW_MAP=new RewriteRuleTokenStream(adaptor,"token KW_MAP");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_rowFormat=new RewriteRuleSubtreeStream(adaptor,"rule rowFormat");
        RewriteRuleSubtreeStream stream_columnNameTypeList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameTypeList");
        RewriteRuleSubtreeStream stream_recordReader=new RewriteRuleSubtreeStream(adaptor,"rule recordReader");
        RewriteRuleSubtreeStream stream_aliasList=new RewriteRuleSubtreeStream(adaptor,"rule aliasList");
        RewriteRuleSubtreeStream stream_selectExpressionList=new RewriteRuleSubtreeStream(adaptor,"rule selectExpressionList");
        RewriteRuleSubtreeStream stream_recordWriter=new RewriteRuleSubtreeStream(adaptor,"rule recordWriter");
         msgs.push("transform clause"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1680:5: ( ( KW_MAP selectExpressionList | KW_REDUCE selectExpressionList ) inSerde= rowFormat inRec= recordWriter KW_USING StringLiteral ( KW_AS ( ( LPAREN ( aliasList | columnNameTypeList ) RPAREN ) | ( aliasList | columnNameTypeList ) ) )? outSerde= rowFormat outRec= recordReader -> ^( TOK_TRANSFORM selectExpressionList $inSerde $inRec StringLiteral $outSerde $outRec ( aliasList )? ( columnNameTypeList )? ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1681:5: ( KW_MAP selectExpressionList | KW_REDUCE selectExpressionList ) inSerde= rowFormat inRec= recordWriter KW_USING StringLiteral ( KW_AS ( ( LPAREN ( aliasList | columnNameTypeList ) RPAREN ) | ( aliasList | columnNameTypeList ) ) )? outSerde= rowFormat outRec= recordReader
            {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1681:5: ( KW_MAP selectExpressionList | KW_REDUCE selectExpressionList )
            int alt229=2;
            int LA229_0 = input.LA(1);

            if ( (LA229_0==KW_MAP) ) {
                alt229=1;
            }
            else if ( (LA229_0==KW_REDUCE) ) {
                alt229=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 229, 0, input);

                throw nvae;

            }
            switch (alt229) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1681:9: KW_MAP selectExpressionList
                    {
                    KW_MAP757=(Token)match(input,KW_MAP,FOLLOW_KW_MAP_in_trfmClause12195);  
                    stream_KW_MAP.add(KW_MAP757);


                    pushFollow(FOLLOW_selectExpressionList_in_trfmClause12200);
                    selectExpressionList758=selectExpressionList();

                    state._fsp--;

                    stream_selectExpressionList.add(selectExpressionList758.getTree());

                    }
                    break;
                case 2 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1682:9: KW_REDUCE selectExpressionList
                    {
                    KW_REDUCE759=(Token)match(input,KW_REDUCE,FOLLOW_KW_REDUCE_in_trfmClause12210);  
                    stream_KW_REDUCE.add(KW_REDUCE759);


                    pushFollow(FOLLOW_selectExpressionList_in_trfmClause12212);
                    selectExpressionList760=selectExpressionList();

                    state._fsp--;

                    stream_selectExpressionList.add(selectExpressionList760.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_rowFormat_in_trfmClause12222);
            inSerde=rowFormat();

            state._fsp--;

            stream_rowFormat.add(inSerde.getTree());

            pushFollow(FOLLOW_recordWriter_in_trfmClause12226);
            inRec=recordWriter();

            state._fsp--;

            stream_recordWriter.add(inRec.getTree());

            KW_USING761=(Token)match(input,KW_USING,FOLLOW_KW_USING_in_trfmClause12232);  
            stream_KW_USING.add(KW_USING761);


            StringLiteral762=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_trfmClause12234);  
            stream_StringLiteral.add(StringLiteral762);


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1685:5: ( KW_AS ( ( LPAREN ( aliasList | columnNameTypeList ) RPAREN ) | ( aliasList | columnNameTypeList ) ) )?
            int alt233=2;
            int LA233_0 = input.LA(1);

            if ( (LA233_0==KW_AS) ) {
                alt233=1;
            }
            switch (alt233) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1685:7: KW_AS ( ( LPAREN ( aliasList | columnNameTypeList ) RPAREN ) | ( aliasList | columnNameTypeList ) )
                    {
                    KW_AS763=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_trfmClause12242);  
                    stream_KW_AS.add(KW_AS763);


                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1685:13: ( ( LPAREN ( aliasList | columnNameTypeList ) RPAREN ) | ( aliasList | columnNameTypeList ) )
                    int alt232=2;
                    int LA232_0 = input.LA(1);

                    if ( (LA232_0==LPAREN) ) {
                        alt232=1;
                    }
                    else if ( (LA232_0==Identifier) ) {
                        alt232=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("", 232, 0, input);

                        throw nvae;

                    }
                    switch (alt232) {
                        case 1 :
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1685:14: ( LPAREN ( aliasList | columnNameTypeList ) RPAREN )
                            {
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1685:14: ( LPAREN ( aliasList | columnNameTypeList ) RPAREN )
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1685:15: LPAREN ( aliasList | columnNameTypeList ) RPAREN
                            {
                            LPAREN764=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_trfmClause12246);  
                            stream_LPAREN.add(LPAREN764);


                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1685:22: ( aliasList | columnNameTypeList )
                            int alt230=2;
                            int LA230_0 = input.LA(1);

                            if ( (LA230_0==Identifier) ) {
                                int LA230_1 = input.LA(2);

                                if ( (LA230_1==COMMA||LA230_1==RPAREN) ) {
                                    alt230=1;
                                }
                                else if ( (LA230_1==KW_ARRAY||(LA230_1 >= KW_BIGINT && LA230_1 <= KW_BOOLEAN)||(LA230_1 >= KW_DATE && LA230_1 <= KW_DATETIME)||LA230_1==KW_DECIMAL||LA230_1==KW_DOUBLE||LA230_1==KW_FLOAT||LA230_1==KW_INT||LA230_1==KW_MAP||LA230_1==KW_SMALLINT||(LA230_1 >= KW_STRING && LA230_1 <= KW_STRUCT)||(LA230_1 >= KW_TIMESTAMP && LA230_1 <= KW_TINYINT)||LA230_1==KW_UNIONTYPE) ) {
                                    alt230=2;
                                }
                                else {
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 230, 1, input);

                                    throw nvae;

                                }
                            }
                            else {
                                NoViableAltException nvae =
                                    new NoViableAltException("", 230, 0, input);

                                throw nvae;

                            }
                            switch (alt230) {
                                case 1 :
                                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1685:23: aliasList
                                    {
                                    pushFollow(FOLLOW_aliasList_in_trfmClause12249);
                                    aliasList765=aliasList();

                                    state._fsp--;

                                    stream_aliasList.add(aliasList765.getTree());

                                    }
                                    break;
                                case 2 :
                                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1685:35: columnNameTypeList
                                    {
                                    pushFollow(FOLLOW_columnNameTypeList_in_trfmClause12253);
                                    columnNameTypeList766=columnNameTypeList();

                                    state._fsp--;

                                    stream_columnNameTypeList.add(columnNameTypeList766.getTree());

                                    }
                                    break;

                            }


                            RPAREN767=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_trfmClause12256);  
                            stream_RPAREN.add(RPAREN767);


                            }


                            }
                            break;
                        case 2 :
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1685:65: ( aliasList | columnNameTypeList )
                            {
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1685:65: ( aliasList | columnNameTypeList )
                            int alt231=2;
                            int LA231_0 = input.LA(1);

                            if ( (LA231_0==Identifier) ) {
                                switch ( input.LA(2) ) {
                                case EOF:
                                case COMMA:
                                case KW_CLUSTER:
                                case KW_DISTRIBUTE:
                                case KW_FROM:
                                case KW_GROUP:
                                case KW_HAVING:
                                case KW_INSERT:
                                case KW_LIMIT:
                                case KW_ORDER:
                                case KW_RECORDREADER:
                                case KW_REDUCE:
                                case KW_ROW:
                                case KW_SELECT:
                                case KW_SORT:
                                case KW_UNION:
                                case KW_WHERE:
                                case RPAREN:
                                    {
                                    alt231=1;
                                    }
                                    break;
                                case KW_MAP:
                                    {
                                    int LA231_19 = input.LA(3);

                                    if ( (LA231_19==LESSTHAN) ) {
                                        alt231=2;
                                    }
                                    else if ( (LA231_19==BigintLiteral||LA231_19==CharSetName||LA231_19==Identifier||LA231_19==KW_ARRAY||(LA231_19 >= KW_CASE && LA231_19 <= KW_CAST)||LA231_19==KW_FALSE||LA231_19==KW_IF||LA231_19==KW_MAP||LA231_19==KW_NOT||LA231_19==KW_NULL||LA231_19==KW_STRUCT||LA231_19==KW_TRUE||LA231_19==KW_UNIONTYPE||LA231_19==LPAREN||LA231_19==MINUS||(LA231_19 >= Number && LA231_19 <= PLUS)||(LA231_19 >= STAR && LA231_19 <= TILDE)||LA231_19==TinyintLiteral) ) {
                                        alt231=1;
                                    }
                                    else {
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 231, 19, input);

                                        throw nvae;

                                    }
                                    }
                                    break;
                                case KW_ARRAY:
                                case KW_BIGINT:
                                case KW_BINARY:
                                case KW_BOOLEAN:
                                case KW_DATE:
                                case KW_DATETIME:
                                case KW_DECIMAL:
                                case KW_DOUBLE:
                                case KW_FLOAT:
                                case KW_INT:
                                case KW_SMALLINT:
                                case KW_STRING:
                                case KW_STRUCT:
                                case KW_TIMESTAMP:
                                case KW_TINYINT:
                                case KW_UNIONTYPE:
                                    {
                                    alt231=2;
                                    }
                                    break;
                                default:
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 231, 1, input);

                                    throw nvae;

                                }

                            }
                            else {
                                NoViableAltException nvae =
                                    new NoViableAltException("", 231, 0, input);

                                throw nvae;

                            }
                            switch (alt231) {
                                case 1 :
                                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1685:66: aliasList
                                    {
                                    pushFollow(FOLLOW_aliasList_in_trfmClause12262);
                                    aliasList768=aliasList();

                                    state._fsp--;

                                    stream_aliasList.add(aliasList768.getTree());

                                    }
                                    break;
                                case 2 :
                                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1685:78: columnNameTypeList
                                    {
                                    pushFollow(FOLLOW_columnNameTypeList_in_trfmClause12266);
                                    columnNameTypeList769=columnNameTypeList();

                                    state._fsp--;

                                    stream_columnNameTypeList.add(columnNameTypeList769.getTree());

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;

            }


            pushFollow(FOLLOW_rowFormat_in_trfmClause12278);
            outSerde=rowFormat();

            state._fsp--;

            stream_rowFormat.add(outSerde.getTree());

            pushFollow(FOLLOW_recordReader_in_trfmClause12282);
            outRec=recordReader();

            state._fsp--;

            stream_recordReader.add(outRec.getTree());

            // AST REWRITE
            // elements: columnNameTypeList, outRec, aliasList, outSerde, StringLiteral, inSerde, selectExpressionList, inRec
            // token labels: 
            // rule labels: retval, inRec, inSerde, outRec, outSerde
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_inRec=new RewriteRuleSubtreeStream(adaptor,"rule inRec",inRec!=null?inRec.tree:null);
            RewriteRuleSubtreeStream stream_inSerde=new RewriteRuleSubtreeStream(adaptor,"rule inSerde",inSerde!=null?inSerde.tree:null);
            RewriteRuleSubtreeStream stream_outRec=new RewriteRuleSubtreeStream(adaptor,"rule outRec",outRec!=null?outRec.tree:null);
            RewriteRuleSubtreeStream stream_outSerde=new RewriteRuleSubtreeStream(adaptor,"rule outSerde",outSerde!=null?outSerde.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1687:5: -> ^( TOK_TRANSFORM selectExpressionList $inSerde $inRec StringLiteral $outSerde $outRec ( aliasList )? ( columnNameTypeList )? )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1687:8: ^( TOK_TRANSFORM selectExpressionList $inSerde $inRec StringLiteral $outSerde $outRec ( aliasList )? ( columnNameTypeList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_TRANSFORM, "TOK_TRANSFORM")
                , root_1);

                adaptor.addChild(root_1, stream_selectExpressionList.nextTree());

                adaptor.addChild(root_1, stream_inSerde.nextTree());

                adaptor.addChild(root_1, stream_inRec.nextTree());

                adaptor.addChild(root_1, 
                stream_StringLiteral.nextNode()
                );

                adaptor.addChild(root_1, stream_outSerde.nextTree());

                adaptor.addChild(root_1, stream_outRec.nextTree());

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1687:93: ( aliasList )?
                if ( stream_aliasList.hasNext() ) {
                    adaptor.addChild(root_1, stream_aliasList.nextTree());

                }
                stream_aliasList.reset();

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1687:104: ( columnNameTypeList )?
                if ( stream_columnNameTypeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnNameTypeList.nextTree());

                }
                stream_columnNameTypeList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "trfmClause"


    public static class selectExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "selectExpression"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1690:1: selectExpression : ( expression | tableAllColumns );
    public final HiveParser.selectExpression_return selectExpression() throws RecognitionException {
        HiveParser.selectExpression_return retval = new HiveParser.selectExpression_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        HiveParser.expression_return expression770 =null;

        HiveParser.tableAllColumns_return tableAllColumns771 =null;



         msgs.push("select expression"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1693:5: ( expression | tableAllColumns )
            int alt234=2;
            alt234 = dfa234.predict(input);
            switch (alt234) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1694:5: expression
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_expression_in_selectExpression12345);
                    expression770=expression();

                    state._fsp--;

                    adaptor.addChild(root_0, expression770.getTree());

                    }
                    break;
                case 2 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1694:18: tableAllColumns
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_tableAllColumns_in_selectExpression12349);
                    tableAllColumns771=tableAllColumns();

                    state._fsp--;

                    adaptor.addChild(root_0, tableAllColumns771.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "selectExpression"


    public static class selectExpressionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "selectExpressionList"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1697:1: selectExpressionList : selectExpression ( COMMA selectExpression )* -> ^( TOK_EXPLIST ( selectExpression )+ ) ;
    public final HiveParser.selectExpressionList_return selectExpressionList() throws RecognitionException {
        HiveParser.selectExpressionList_return retval = new HiveParser.selectExpressionList_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token COMMA773=null;
        HiveParser.selectExpression_return selectExpression772 =null;

        HiveParser.selectExpression_return selectExpression774 =null;


        CommonTree COMMA773_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_selectExpression=new RewriteRuleSubtreeStream(adaptor,"rule selectExpression");
         msgs.push("select expression list"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1700:5: ( selectExpression ( COMMA selectExpression )* -> ^( TOK_EXPLIST ( selectExpression )+ ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1701:5: selectExpression ( COMMA selectExpression )*
            {
            pushFollow(FOLLOW_selectExpression_in_selectExpressionList12380);
            selectExpression772=selectExpression();

            state._fsp--;

            stream_selectExpression.add(selectExpression772.getTree());

            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1701:22: ( COMMA selectExpression )*
            loop235:
            do {
                int alt235=2;
                int LA235_0 = input.LA(1);

                if ( (LA235_0==COMMA) ) {
                    alt235=1;
                }


                switch (alt235) {
            	case 1 :
            	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1701:23: COMMA selectExpression
            	    {
            	    COMMA773=(Token)match(input,COMMA,FOLLOW_COMMA_in_selectExpressionList12383);  
            	    stream_COMMA.add(COMMA773);


            	    pushFollow(FOLLOW_selectExpression_in_selectExpressionList12385);
            	    selectExpression774=selectExpression();

            	    state._fsp--;

            	    stream_selectExpression.add(selectExpression774.getTree());

            	    }
            	    break;

            	default :
            	    break loop235;
                }
            } while (true);


            // AST REWRITE
            // elements: selectExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1701:48: -> ^( TOK_EXPLIST ( selectExpression )+ )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1701:51: ^( TOK_EXPLIST ( selectExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_EXPLIST, "TOK_EXPLIST")
                , root_1);

                if ( !(stream_selectExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_selectExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_selectExpression.nextTree());

                }
                stream_selectExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "selectExpressionList"


    public static class tableAllColumns_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "tableAllColumns"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1707:1: tableAllColumns : ( STAR -> ^( TOK_ALLCOLREF ) | tableName DOT STAR -> ^( TOK_ALLCOLREF tableName ) );
    public final HiveParser.tableAllColumns_return tableAllColumns() throws RecognitionException {
        HiveParser.tableAllColumns_return retval = new HiveParser.tableAllColumns_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token STAR775=null;
        Token DOT777=null;
        Token STAR778=null;
        HiveParser.tableName_return tableName776 =null;


        CommonTree STAR775_tree=null;
        CommonTree DOT777_tree=null;
        CommonTree STAR778_tree=null;
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1708:5: ( STAR -> ^( TOK_ALLCOLREF ) | tableName DOT STAR -> ^( TOK_ALLCOLREF tableName ) )
            int alt236=2;
            int LA236_0 = input.LA(1);

            if ( (LA236_0==STAR) ) {
                alt236=1;
            }
            else if ( (LA236_0==Identifier) ) {
                alt236=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 236, 0, input);

                throw nvae;

            }
            switch (alt236) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1708:7: STAR
                    {
                    STAR775=(Token)match(input,STAR,FOLLOW_STAR_in_tableAllColumns12416);  
                    stream_STAR.add(STAR775);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1709:9: -> ^( TOK_ALLCOLREF )
                    {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1709:12: ^( TOK_ALLCOLREF )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_ALLCOLREF, "TOK_ALLCOLREF")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 2 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1710:7: tableName DOT STAR
                    {
                    pushFollow(FOLLOW_tableName_in_tableAllColumns12438);
                    tableName776=tableName();

                    state._fsp--;

                    stream_tableName.add(tableName776.getTree());

                    DOT777=(Token)match(input,DOT,FOLLOW_DOT_in_tableAllColumns12440);  
                    stream_DOT.add(DOT777);


                    STAR778=(Token)match(input,STAR,FOLLOW_STAR_in_tableAllColumns12442);  
                    stream_STAR.add(STAR778);


                    // AST REWRITE
                    // elements: tableName
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1711:9: -> ^( TOK_ALLCOLREF tableName )
                    {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1711:12: ^( TOK_ALLCOLREF tableName )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_ALLCOLREF, "TOK_ALLCOLREF")
                        , root_1);

                        adaptor.addChild(root_1, stream_tableName.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "tableAllColumns"


    public static class tableOrColumn_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "tableOrColumn"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1715:1: tableOrColumn : Identifier -> ^( TOK_TABLE_OR_COL Identifier ) ;
    public final HiveParser.tableOrColumn_return tableOrColumn() throws RecognitionException {
        HiveParser.tableOrColumn_return retval = new HiveParser.tableOrColumn_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token Identifier779=null;

        CommonTree Identifier779_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");

         msgs.push("table or column identifier"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1718:5: ( Identifier -> ^( TOK_TABLE_OR_COL Identifier ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1719:5: Identifier
            {
            Identifier779=(Token)match(input,Identifier,FOLLOW_Identifier_in_tableOrColumn12490);  
            stream_Identifier.add(Identifier779);


            // AST REWRITE
            // elements: Identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1719:16: -> ^( TOK_TABLE_OR_COL Identifier )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1719:19: ^( TOK_TABLE_OR_COL Identifier )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_TABLE_OR_COL, "TOK_TABLE_OR_COL")
                , root_1);

                adaptor.addChild(root_1, 
                stream_Identifier.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "tableOrColumn"


    public static class expressionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expressionList"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1722:1: expressionList : expression ( COMMA expression )* -> ^( TOK_EXPLIST ( expression )+ ) ;
    public final HiveParser.expressionList_return expressionList() throws RecognitionException {
        HiveParser.expressionList_return retval = new HiveParser.expressionList_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token COMMA781=null;
        HiveParser.expression_return expression780 =null;

        HiveParser.expression_return expression782 =null;


        CommonTree COMMA781_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
         msgs.push("expression list"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1725:5: ( expression ( COMMA expression )* -> ^( TOK_EXPLIST ( expression )+ ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1726:5: expression ( COMMA expression )*
            {
            pushFollow(FOLLOW_expression_in_expressionList12529);
            expression780=expression();

            state._fsp--;

            stream_expression.add(expression780.getTree());

            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1726:16: ( COMMA expression )*
            loop237:
            do {
                int alt237=2;
                int LA237_0 = input.LA(1);

                if ( (LA237_0==COMMA) ) {
                    alt237=1;
                }


                switch (alt237) {
            	case 1 :
            	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1726:17: COMMA expression
            	    {
            	    COMMA781=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionList12532);  
            	    stream_COMMA.add(COMMA781);


            	    pushFollow(FOLLOW_expression_in_expressionList12534);
            	    expression782=expression();

            	    state._fsp--;

            	    stream_expression.add(expression782.getTree());

            	    }
            	    break;

            	default :
            	    break loop237;
                }
            } while (true);


            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1726:36: -> ^( TOK_EXPLIST ( expression )+ )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1726:39: ^( TOK_EXPLIST ( expression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_EXPLIST, "TOK_EXPLIST")
                , root_1);

                if ( !(stream_expression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expressionList"


    public static class aliasList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "aliasList"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1729:1: aliasList : Identifier ( COMMA Identifier )* -> ^( TOK_ALIASLIST ( Identifier )+ ) ;
    public final HiveParser.aliasList_return aliasList() throws RecognitionException {
        HiveParser.aliasList_return retval = new HiveParser.aliasList_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token Identifier783=null;
        Token COMMA784=null;
        Token Identifier785=null;

        CommonTree Identifier783_tree=null;
        CommonTree COMMA784_tree=null;
        CommonTree Identifier785_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");

         msgs.push("alias list"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1732:5: ( Identifier ( COMMA Identifier )* -> ^( TOK_ALIASLIST ( Identifier )+ ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1733:5: Identifier ( COMMA Identifier )*
            {
            Identifier783=(Token)match(input,Identifier,FOLLOW_Identifier_in_aliasList12576);  
            stream_Identifier.add(Identifier783);


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1733:16: ( COMMA Identifier )*
            loop238:
            do {
                int alt238=2;
                int LA238_0 = input.LA(1);

                if ( (LA238_0==COMMA) ) {
                    alt238=1;
                }


                switch (alt238) {
            	case 1 :
            	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1733:17: COMMA Identifier
            	    {
            	    COMMA784=(Token)match(input,COMMA,FOLLOW_COMMA_in_aliasList12579);  
            	    stream_COMMA.add(COMMA784);


            	    Identifier785=(Token)match(input,Identifier,FOLLOW_Identifier_in_aliasList12581);  
            	    stream_Identifier.add(Identifier785);


            	    }
            	    break;

            	default :
            	    break loop238;
                }
            } while (true);


            // AST REWRITE
            // elements: Identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1733:36: -> ^( TOK_ALIASLIST ( Identifier )+ )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1733:39: ^( TOK_ALIASLIST ( Identifier )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_ALIASLIST, "TOK_ALIASLIST")
                , root_1);

                if ( !(stream_Identifier.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_Identifier.hasNext() ) {
                    adaptor.addChild(root_1, 
                    stream_Identifier.nextNode()
                    );

                }
                stream_Identifier.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "aliasList"


    public static class fromClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fromClause"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1738:1: fromClause : KW_FROM joinSource -> ^( TOK_FROM joinSource ) ;
    public final HiveParser.fromClause_return fromClause() throws RecognitionException {
        HiveParser.fromClause_return retval = new HiveParser.fromClause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_FROM786=null;
        HiveParser.joinSource_return joinSource787 =null;


        CommonTree KW_FROM786_tree=null;
        RewriteRuleTokenStream stream_KW_FROM=new RewriteRuleTokenStream(adaptor,"token KW_FROM");
        RewriteRuleSubtreeStream stream_joinSource=new RewriteRuleSubtreeStream(adaptor,"rule joinSource");
         msgs.push("from clause"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1741:5: ( KW_FROM joinSource -> ^( TOK_FROM joinSource ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1742:5: KW_FROM joinSource
            {
            KW_FROM786=(Token)match(input,KW_FROM,FOLLOW_KW_FROM_in_fromClause12625);  
            stream_KW_FROM.add(KW_FROM786);


            pushFollow(FOLLOW_joinSource_in_fromClause12627);
            joinSource787=joinSource();

            state._fsp--;

            stream_joinSource.add(joinSource787.getTree());

            // AST REWRITE
            // elements: joinSource
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1742:24: -> ^( TOK_FROM joinSource )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1742:27: ^( TOK_FROM joinSource )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_FROM, "TOK_FROM")
                , root_1);

                adaptor.addChild(root_1, stream_joinSource.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "fromClause"


    public static class joinSource_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "joinSource"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1745:1: joinSource : ( fromSource ( joinToken ^ fromSource ( KW_ON ! expression )? )* | uniqueJoinToken ^ uniqueJoinSource ( COMMA ! uniqueJoinSource )+ );
    public final HiveParser.joinSource_return joinSource() throws RecognitionException {
        HiveParser.joinSource_return retval = new HiveParser.joinSource_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_ON791=null;
        Token COMMA795=null;
        HiveParser.fromSource_return fromSource788 =null;

        HiveParser.joinToken_return joinToken789 =null;

        HiveParser.fromSource_return fromSource790 =null;

        HiveParser.expression_return expression792 =null;

        HiveParser.uniqueJoinToken_return uniqueJoinToken793 =null;

        HiveParser.uniqueJoinSource_return uniqueJoinSource794 =null;

        HiveParser.uniqueJoinSource_return uniqueJoinSource796 =null;


        CommonTree KW_ON791_tree=null;
        CommonTree COMMA795_tree=null;

         msgs.push("join source"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1748:5: ( fromSource ( joinToken ^ fromSource ( KW_ON ! expression )? )* | uniqueJoinToken ^ uniqueJoinSource ( COMMA ! uniqueJoinSource )+ )
            int alt242=2;
            int LA242_0 = input.LA(1);

            if ( (LA242_0==Identifier||LA242_0==LPAREN) ) {
                alt242=1;
            }
            else if ( (LA242_0==KW_UNIQUEJOIN) ) {
                alt242=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 242, 0, input);

                throw nvae;

            }
            switch (alt242) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1748:7: fromSource ( joinToken ^ fromSource ( KW_ON ! expression )? )*
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_fromSource_in_joinSource12662);
                    fromSource788=fromSource();

                    state._fsp--;

                    adaptor.addChild(root_0, fromSource788.getTree());

                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1748:18: ( joinToken ^ fromSource ( KW_ON ! expression )? )*
                    loop240:
                    do {
                        int alt240=2;
                        int LA240_0 = input.LA(1);

                        if ( (LA240_0==Identifier||LA240_0==KW_CROSS||LA240_0==KW_FULL||LA240_0==KW_JOIN||LA240_0==KW_LEFT||LA240_0==KW_RIGHT) ) {
                            alt240=1;
                        }


                        switch (alt240) {
                    	case 1 :
                    	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1748:20: joinToken ^ fromSource ( KW_ON ! expression )?
                    	    {
                    	    pushFollow(FOLLOW_joinToken_in_joinSource12666);
                    	    joinToken789=joinToken();

                    	    state._fsp--;

                    	    root_0 = (CommonTree)adaptor.becomeRoot(joinToken789.getTree(), root_0);

                    	    pushFollow(FOLLOW_fromSource_in_joinSource12669);
                    	    fromSource790=fromSource();

                    	    state._fsp--;

                    	    adaptor.addChild(root_0, fromSource790.getTree());

                    	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1748:42: ( KW_ON ! expression )?
                    	    int alt239=2;
                    	    int LA239_0 = input.LA(1);

                    	    if ( (LA239_0==KW_ON) ) {
                    	        alt239=1;
                    	    }
                    	    switch (alt239) {
                    	        case 1 :
                    	            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1748:43: KW_ON ! expression
                    	            {
                    	            KW_ON791=(Token)match(input,KW_ON,FOLLOW_KW_ON_in_joinSource12672); 

                    	            pushFollow(FOLLOW_expression_in_joinSource12675);
                    	            expression792=expression();

                    	            state._fsp--;

                    	            adaptor.addChild(root_0, expression792.getTree());

                    	            }
                    	            break;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop240;
                        }
                    } while (true);


                    }
                    break;
                case 2 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1749:7: uniqueJoinToken ^ uniqueJoinSource ( COMMA ! uniqueJoinSource )+
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_uniqueJoinToken_in_joinSource12688);
                    uniqueJoinToken793=uniqueJoinToken();

                    state._fsp--;

                    root_0 = (CommonTree)adaptor.becomeRoot(uniqueJoinToken793.getTree(), root_0);

                    pushFollow(FOLLOW_uniqueJoinSource_in_joinSource12691);
                    uniqueJoinSource794=uniqueJoinSource();

                    state._fsp--;

                    adaptor.addChild(root_0, uniqueJoinSource794.getTree());

                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1749:41: ( COMMA ! uniqueJoinSource )+
                    int cnt241=0;
                    loop241:
                    do {
                        int alt241=2;
                        int LA241_0 = input.LA(1);

                        if ( (LA241_0==COMMA) ) {
                            alt241=1;
                        }


                        switch (alt241) {
                    	case 1 :
                    	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1749:42: COMMA ! uniqueJoinSource
                    	    {
                    	    COMMA795=(Token)match(input,COMMA,FOLLOW_COMMA_in_joinSource12694); 

                    	    pushFollow(FOLLOW_uniqueJoinSource_in_joinSource12697);
                    	    uniqueJoinSource796=uniqueJoinSource();

                    	    state._fsp--;

                    	    adaptor.addChild(root_0, uniqueJoinSource796.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt241 >= 1 ) break loop241;
                                EarlyExitException eee =
                                    new EarlyExitException(241, input);
                                throw eee;
                        }
                        cnt241++;
                    } while (true);


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "joinSource"


    public static class uniqueJoinSource_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "uniqueJoinSource"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1752:1: uniqueJoinSource : ( KW_PRESERVE )? fromSource uniqueJoinExpr ;
    public final HiveParser.uniqueJoinSource_return uniqueJoinSource() throws RecognitionException {
        HiveParser.uniqueJoinSource_return retval = new HiveParser.uniqueJoinSource_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_PRESERVE797=null;
        HiveParser.fromSource_return fromSource798 =null;

        HiveParser.uniqueJoinExpr_return uniqueJoinExpr799 =null;


        CommonTree KW_PRESERVE797_tree=null;

         msgs.push("join source"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1755:5: ( ( KW_PRESERVE )? fromSource uniqueJoinExpr )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1755:7: ( KW_PRESERVE )? fromSource uniqueJoinExpr
            {
            root_0 = (CommonTree)adaptor.nil();


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1755:7: ( KW_PRESERVE )?
            int alt243=2;
            int LA243_0 = input.LA(1);

            if ( (LA243_0==KW_PRESERVE) ) {
                alt243=1;
            }
            switch (alt243) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1755:7: KW_PRESERVE
                    {
                    KW_PRESERVE797=(Token)match(input,KW_PRESERVE,FOLLOW_KW_PRESERVE_in_uniqueJoinSource12726); 
                    KW_PRESERVE797_tree = 
                    (CommonTree)adaptor.create(KW_PRESERVE797)
                    ;
                    adaptor.addChild(root_0, KW_PRESERVE797_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_fromSource_in_uniqueJoinSource12729);
            fromSource798=fromSource();

            state._fsp--;

            adaptor.addChild(root_0, fromSource798.getTree());

            pushFollow(FOLLOW_uniqueJoinExpr_in_uniqueJoinSource12731);
            uniqueJoinExpr799=uniqueJoinExpr();

            state._fsp--;

            adaptor.addChild(root_0, uniqueJoinExpr799.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "uniqueJoinSource"


    public static class uniqueJoinExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "uniqueJoinExpr"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1758:1: uniqueJoinExpr : LPAREN e1+= expression ( COMMA e1+= expression )* RPAREN -> ^( TOK_EXPLIST ( $e1)* ) ;
    public final HiveParser.uniqueJoinExpr_return uniqueJoinExpr() throws RecognitionException {
        HiveParser.uniqueJoinExpr_return retval = new HiveParser.uniqueJoinExpr_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token LPAREN800=null;
        Token COMMA801=null;
        Token RPAREN802=null;
        List list_e1=null;
        RuleReturnScope e1 = null;
        CommonTree LPAREN800_tree=null;
        CommonTree COMMA801_tree=null;
        CommonTree RPAREN802_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
         msgs.push("unique join expression list"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1761:5: ( LPAREN e1+= expression ( COMMA e1+= expression )* RPAREN -> ^( TOK_EXPLIST ( $e1)* ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1761:7: LPAREN e1+= expression ( COMMA e1+= expression )* RPAREN
            {
            LPAREN800=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_uniqueJoinExpr12758);  
            stream_LPAREN.add(LPAREN800);


            pushFollow(FOLLOW_expression_in_uniqueJoinExpr12762);
            e1=expression();

            state._fsp--;

            stream_expression.add(e1.getTree());
            if (list_e1==null) list_e1=new ArrayList();
            list_e1.add(e1.getTree());


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1761:29: ( COMMA e1+= expression )*
            loop244:
            do {
                int alt244=2;
                int LA244_0 = input.LA(1);

                if ( (LA244_0==COMMA) ) {
                    alt244=1;
                }


                switch (alt244) {
            	case 1 :
            	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1761:30: COMMA e1+= expression
            	    {
            	    COMMA801=(Token)match(input,COMMA,FOLLOW_COMMA_in_uniqueJoinExpr12765);  
            	    stream_COMMA.add(COMMA801);


            	    pushFollow(FOLLOW_expression_in_uniqueJoinExpr12769);
            	    e1=expression();

            	    state._fsp--;

            	    stream_expression.add(e1.getTree());
            	    if (list_e1==null) list_e1=new ArrayList();
            	    list_e1.add(e1.getTree());


            	    }
            	    break;

            	default :
            	    break loop244;
                }
            } while (true);


            RPAREN802=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_uniqueJoinExpr12773);  
            stream_RPAREN.add(RPAREN802);


            // AST REWRITE
            // elements: e1
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: e1
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_e1=new RewriteRuleSubtreeStream(adaptor,"token e1",list_e1);
            root_0 = (CommonTree)adaptor.nil();
            // 1762:7: -> ^( TOK_EXPLIST ( $e1)* )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1762:10: ^( TOK_EXPLIST ( $e1)* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_EXPLIST, "TOK_EXPLIST")
                , root_1);

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1762:25: ( $e1)*
                while ( stream_e1.hasNext() ) {
                    adaptor.addChild(root_1, stream_e1.nextTree());

                }
                stream_e1.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "uniqueJoinExpr"


    public static class uniqueJoinToken_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "uniqueJoinToken"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1765:1: uniqueJoinToken : KW_UNIQUEJOIN -> TOK_UNIQUEJOIN ;
    public final HiveParser.uniqueJoinToken_return uniqueJoinToken() throws RecognitionException {
        HiveParser.uniqueJoinToken_return retval = new HiveParser.uniqueJoinToken_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_UNIQUEJOIN803=null;

        CommonTree KW_UNIQUEJOIN803_tree=null;
        RewriteRuleTokenStream stream_KW_UNIQUEJOIN=new RewriteRuleTokenStream(adaptor,"token KW_UNIQUEJOIN");

         msgs.push("unique join"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1768:5: ( KW_UNIQUEJOIN -> TOK_UNIQUEJOIN )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1768:7: KW_UNIQUEJOIN
            {
            KW_UNIQUEJOIN803=(Token)match(input,KW_UNIQUEJOIN,FOLLOW_KW_UNIQUEJOIN_in_uniqueJoinToken12816);  
            stream_KW_UNIQUEJOIN.add(KW_UNIQUEJOIN803);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1768:21: -> TOK_UNIQUEJOIN
            {
                adaptor.addChild(root_0, 
                (CommonTree)adaptor.create(TOK_UNIQUEJOIN, "TOK_UNIQUEJOIN")
                );

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "uniqueJoinToken"


    public static class joinToken_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "joinToken"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1770:1: joinToken : ( KW_JOIN -> TOK_JOIN | kwInner KW_JOIN -> TOK_JOIN | KW_CROSS KW_JOIN -> TOK_CROSSJOIN | KW_LEFT KW_OUTER KW_JOIN -> TOK_LEFTOUTERJOIN | KW_RIGHT KW_OUTER KW_JOIN -> TOK_RIGHTOUTERJOIN | KW_FULL KW_OUTER KW_JOIN -> TOK_FULLOUTERJOIN | KW_LEFT KW_SEMI KW_JOIN -> TOK_LEFTSEMIJOIN );
    public final HiveParser.joinToken_return joinToken() throws RecognitionException {
        HiveParser.joinToken_return retval = new HiveParser.joinToken_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_JOIN804=null;
        Token KW_JOIN806=null;
        Token KW_CROSS807=null;
        Token KW_JOIN808=null;
        Token KW_LEFT809=null;
        Token KW_OUTER810=null;
        Token KW_JOIN811=null;
        Token KW_RIGHT812=null;
        Token KW_OUTER813=null;
        Token KW_JOIN814=null;
        Token KW_FULL815=null;
        Token KW_OUTER816=null;
        Token KW_JOIN817=null;
        Token KW_LEFT818=null;
        Token KW_SEMI819=null;
        Token KW_JOIN820=null;
        HiveParser.kwInner_return kwInner805 =null;


        CommonTree KW_JOIN804_tree=null;
        CommonTree KW_JOIN806_tree=null;
        CommonTree KW_CROSS807_tree=null;
        CommonTree KW_JOIN808_tree=null;
        CommonTree KW_LEFT809_tree=null;
        CommonTree KW_OUTER810_tree=null;
        CommonTree KW_JOIN811_tree=null;
        CommonTree KW_RIGHT812_tree=null;
        CommonTree KW_OUTER813_tree=null;
        CommonTree KW_JOIN814_tree=null;
        CommonTree KW_FULL815_tree=null;
        CommonTree KW_OUTER816_tree=null;
        CommonTree KW_JOIN817_tree=null;
        CommonTree KW_LEFT818_tree=null;
        CommonTree KW_SEMI819_tree=null;
        CommonTree KW_JOIN820_tree=null;
        RewriteRuleTokenStream stream_KW_RIGHT=new RewriteRuleTokenStream(adaptor,"token KW_RIGHT");
        RewriteRuleTokenStream stream_KW_OUTER=new RewriteRuleTokenStream(adaptor,"token KW_OUTER");
        RewriteRuleTokenStream stream_KW_JOIN=new RewriteRuleTokenStream(adaptor,"token KW_JOIN");
        RewriteRuleTokenStream stream_KW_LEFT=new RewriteRuleTokenStream(adaptor,"token KW_LEFT");
        RewriteRuleTokenStream stream_KW_CROSS=new RewriteRuleTokenStream(adaptor,"token KW_CROSS");
        RewriteRuleTokenStream stream_KW_SEMI=new RewriteRuleTokenStream(adaptor,"token KW_SEMI");
        RewriteRuleTokenStream stream_KW_FULL=new RewriteRuleTokenStream(adaptor,"token KW_FULL");
        RewriteRuleSubtreeStream stream_kwInner=new RewriteRuleSubtreeStream(adaptor,"rule kwInner");
         msgs.push("join type specifier"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1773:5: ( KW_JOIN -> TOK_JOIN | kwInner KW_JOIN -> TOK_JOIN | KW_CROSS KW_JOIN -> TOK_CROSSJOIN | KW_LEFT KW_OUTER KW_JOIN -> TOK_LEFTOUTERJOIN | KW_RIGHT KW_OUTER KW_JOIN -> TOK_RIGHTOUTERJOIN | KW_FULL KW_OUTER KW_JOIN -> TOK_FULLOUTERJOIN | KW_LEFT KW_SEMI KW_JOIN -> TOK_LEFTSEMIJOIN )
            int alt245=7;
            switch ( input.LA(1) ) {
            case KW_JOIN:
                {
                alt245=1;
                }
                break;
            case Identifier:
                {
                alt245=2;
                }
                break;
            case KW_CROSS:
                {
                alt245=3;
                }
                break;
            case KW_LEFT:
                {
                int LA245_4 = input.LA(2);

                if ( (LA245_4==KW_OUTER) ) {
                    alt245=4;
                }
                else if ( (LA245_4==KW_SEMI) ) {
                    alt245=7;
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("", 245, 4, input);

                    throw nvae;

                }
                }
                break;
            case KW_RIGHT:
                {
                alt245=5;
                }
                break;
            case KW_FULL:
                {
                alt245=6;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 245, 0, input);

                throw nvae;

            }

            switch (alt245) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1774:7: KW_JOIN
                    {
                    KW_JOIN804=(Token)match(input,KW_JOIN,FOLLOW_KW_JOIN_in_joinToken12848);  
                    stream_KW_JOIN.add(KW_JOIN804);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1774:35: -> TOK_JOIN
                    {
                        adaptor.addChild(root_0, 
                        (CommonTree)adaptor.create(TOK_JOIN, "TOK_JOIN")
                        );

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 2 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1775:7: kwInner KW_JOIN
                    {
                    pushFollow(FOLLOW_kwInner_in_joinToken12880);
                    kwInner805=kwInner();

                    state._fsp--;

                    stream_kwInner.add(kwInner805.getTree());

                    KW_JOIN806=(Token)match(input,KW_JOIN,FOLLOW_KW_JOIN_in_joinToken12883);  
                    stream_KW_JOIN.add(KW_JOIN806);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1775:35: -> TOK_JOIN
                    {
                        adaptor.addChild(root_0, 
                        (CommonTree)adaptor.create(TOK_JOIN, "TOK_JOIN")
                        );

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 3 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1776:7: KW_CROSS KW_JOIN
                    {
                    KW_CROSS807=(Token)match(input,KW_CROSS,FOLLOW_KW_CROSS_in_joinToken12906);  
                    stream_KW_CROSS.add(KW_CROSS807);


                    KW_JOIN808=(Token)match(input,KW_JOIN,FOLLOW_KW_JOIN_in_joinToken12908);  
                    stream_KW_JOIN.add(KW_JOIN808);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1776:35: -> TOK_CROSSJOIN
                    {
                        adaptor.addChild(root_0, 
                        (CommonTree)adaptor.create(TOK_CROSSJOIN, "TOK_CROSSJOIN")
                        );

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 4 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1777:7: KW_LEFT KW_OUTER KW_JOIN
                    {
                    KW_LEFT809=(Token)match(input,KW_LEFT,FOLLOW_KW_LEFT_in_joinToken12931);  
                    stream_KW_LEFT.add(KW_LEFT809);


                    KW_OUTER810=(Token)match(input,KW_OUTER,FOLLOW_KW_OUTER_in_joinToken12934);  
                    stream_KW_OUTER.add(KW_OUTER810);


                    KW_JOIN811=(Token)match(input,KW_JOIN,FOLLOW_KW_JOIN_in_joinToken12936);  
                    stream_KW_JOIN.add(KW_JOIN811);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1777:35: -> TOK_LEFTOUTERJOIN
                    {
                        adaptor.addChild(root_0, 
                        (CommonTree)adaptor.create(TOK_LEFTOUTERJOIN, "TOK_LEFTOUTERJOIN")
                        );

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 5 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1778:7: KW_RIGHT KW_OUTER KW_JOIN
                    {
                    KW_RIGHT812=(Token)match(input,KW_RIGHT,FOLLOW_KW_RIGHT_in_joinToken12950);  
                    stream_KW_RIGHT.add(KW_RIGHT812);


                    KW_OUTER813=(Token)match(input,KW_OUTER,FOLLOW_KW_OUTER_in_joinToken12952);  
                    stream_KW_OUTER.add(KW_OUTER813);


                    KW_JOIN814=(Token)match(input,KW_JOIN,FOLLOW_KW_JOIN_in_joinToken12954);  
                    stream_KW_JOIN.add(KW_JOIN814);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1778:35: -> TOK_RIGHTOUTERJOIN
                    {
                        adaptor.addChild(root_0, 
                        (CommonTree)adaptor.create(TOK_RIGHTOUTERJOIN, "TOK_RIGHTOUTERJOIN")
                        );

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 6 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1779:7: KW_FULL KW_OUTER KW_JOIN
                    {
                    KW_FULL815=(Token)match(input,KW_FULL,FOLLOW_KW_FULL_in_joinToken12968);  
                    stream_KW_FULL.add(KW_FULL815);


                    KW_OUTER816=(Token)match(input,KW_OUTER,FOLLOW_KW_OUTER_in_joinToken12971);  
                    stream_KW_OUTER.add(KW_OUTER816);


                    KW_JOIN817=(Token)match(input,KW_JOIN,FOLLOW_KW_JOIN_in_joinToken12973);  
                    stream_KW_JOIN.add(KW_JOIN817);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1779:35: -> TOK_FULLOUTERJOIN
                    {
                        adaptor.addChild(root_0, 
                        (CommonTree)adaptor.create(TOK_FULLOUTERJOIN, "TOK_FULLOUTERJOIN")
                        );

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 7 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1780:7: KW_LEFT KW_SEMI KW_JOIN
                    {
                    KW_LEFT818=(Token)match(input,KW_LEFT,FOLLOW_KW_LEFT_in_joinToken12987);  
                    stream_KW_LEFT.add(KW_LEFT818);


                    KW_SEMI819=(Token)match(input,KW_SEMI,FOLLOW_KW_SEMI_in_joinToken12990);  
                    stream_KW_SEMI.add(KW_SEMI819);


                    KW_JOIN820=(Token)match(input,KW_JOIN,FOLLOW_KW_JOIN_in_joinToken12993);  
                    stream_KW_JOIN.add(KW_JOIN820);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1780:35: -> TOK_LEFTSEMIJOIN
                    {
                        adaptor.addChild(root_0, 
                        (CommonTree)adaptor.create(TOK_LEFTSEMIJOIN, "TOK_LEFTSEMIJOIN")
                        );

                    }


                    retval.tree = root_0;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "joinToken"


    public static class lateralView_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "lateralView"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1783:1: lateralView : KW_LATERAL KW_VIEW function tableAlias KW_AS Identifier ( COMMA Identifier )* -> ^( TOK_LATERAL_VIEW ^( TOK_SELECT ^( TOK_SELEXPR function ( Identifier )+ tableAlias ) ) ) ;
    public final HiveParser.lateralView_return lateralView() throws RecognitionException {
        HiveParser.lateralView_return retval = new HiveParser.lateralView_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_LATERAL821=null;
        Token KW_VIEW822=null;
        Token KW_AS825=null;
        Token Identifier826=null;
        Token COMMA827=null;
        Token Identifier828=null;
        HiveParser.function_return function823 =null;

        HiveParser.tableAlias_return tableAlias824 =null;


        CommonTree KW_LATERAL821_tree=null;
        CommonTree KW_VIEW822_tree=null;
        CommonTree KW_AS825_tree=null;
        CommonTree Identifier826_tree=null;
        CommonTree COMMA827_tree=null;
        CommonTree Identifier828_tree=null;
        RewriteRuleTokenStream stream_KW_LATERAL=new RewriteRuleTokenStream(adaptor,"token KW_LATERAL");
        RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
        RewriteRuleTokenStream stream_KW_VIEW=new RewriteRuleTokenStream(adaptor,"token KW_VIEW");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_tableAlias=new RewriteRuleSubtreeStream(adaptor,"rule tableAlias");
        RewriteRuleSubtreeStream stream_function=new RewriteRuleSubtreeStream(adaptor,"rule function");
        msgs.push("lateral view"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1786:2: ( KW_LATERAL KW_VIEW function tableAlias KW_AS Identifier ( COMMA Identifier )* -> ^( TOK_LATERAL_VIEW ^( TOK_SELECT ^( TOK_SELEXPR function ( Identifier )+ tableAlias ) ) ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1787:2: KW_LATERAL KW_VIEW function tableAlias KW_AS Identifier ( COMMA Identifier )*
            {
            KW_LATERAL821=(Token)match(input,KW_LATERAL,FOLLOW_KW_LATERAL_in_lateralView13024);  
            stream_KW_LATERAL.add(KW_LATERAL821);


            KW_VIEW822=(Token)match(input,KW_VIEW,FOLLOW_KW_VIEW_in_lateralView13026);  
            stream_KW_VIEW.add(KW_VIEW822);


            pushFollow(FOLLOW_function_in_lateralView13028);
            function823=function();

            state._fsp--;

            stream_function.add(function823.getTree());

            pushFollow(FOLLOW_tableAlias_in_lateralView13030);
            tableAlias824=tableAlias();

            state._fsp--;

            stream_tableAlias.add(tableAlias824.getTree());

            KW_AS825=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_lateralView13032);  
            stream_KW_AS.add(KW_AS825);


            Identifier826=(Token)match(input,Identifier,FOLLOW_Identifier_in_lateralView13034);  
            stream_Identifier.add(Identifier826);


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1787:58: ( COMMA Identifier )*
            loop246:
            do {
                int alt246=2;
                int LA246_0 = input.LA(1);

                if ( (LA246_0==COMMA) ) {
                    alt246=1;
                }


                switch (alt246) {
            	case 1 :
            	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1787:59: COMMA Identifier
            	    {
            	    COMMA827=(Token)match(input,COMMA,FOLLOW_COMMA_in_lateralView13037);  
            	    stream_COMMA.add(COMMA827);


            	    Identifier828=(Token)match(input,Identifier,FOLLOW_Identifier_in_lateralView13039);  
            	    stream_Identifier.add(Identifier828);


            	    }
            	    break;

            	default :
            	    break loop246;
                }
            } while (true);


            // AST REWRITE
            // elements: tableAlias, Identifier, function
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1787:78: -> ^( TOK_LATERAL_VIEW ^( TOK_SELECT ^( TOK_SELEXPR function ( Identifier )+ tableAlias ) ) )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1787:81: ^( TOK_LATERAL_VIEW ^( TOK_SELECT ^( TOK_SELEXPR function ( Identifier )+ tableAlias ) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_LATERAL_VIEW, "TOK_LATERAL_VIEW")
                , root_1);

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1787:100: ^( TOK_SELECT ^( TOK_SELEXPR function ( Identifier )+ tableAlias ) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_SELECT, "TOK_SELECT")
                , root_2);

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1787:113: ^( TOK_SELEXPR function ( Identifier )+ tableAlias )
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_SELEXPR, "TOK_SELEXPR")
                , root_3);

                adaptor.addChild(root_3, stream_function.nextTree());

                if ( !(stream_Identifier.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_Identifier.hasNext() ) {
                    adaptor.addChild(root_3, 
                    stream_Identifier.nextNode()
                    );

                }
                stream_Identifier.reset();

                adaptor.addChild(root_3, stream_tableAlias.nextTree());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "lateralView"


    public static class tableAlias_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "tableAlias"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1790:1: tableAlias : Identifier -> ^( TOK_TABALIAS Identifier ) ;
    public final HiveParser.tableAlias_return tableAlias() throws RecognitionException {
        HiveParser.tableAlias_return retval = new HiveParser.tableAlias_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token Identifier829=null;

        CommonTree Identifier829_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");

        msgs.push("table alias"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1793:5: ( Identifier -> ^( TOK_TABALIAS Identifier ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1794:5: Identifier
            {
            Identifier829=(Token)match(input,Identifier,FOLLOW_Identifier_in_tableAlias13090);  
            stream_Identifier.add(Identifier829);


            // AST REWRITE
            // elements: Identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1794:16: -> ^( TOK_TABALIAS Identifier )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1794:19: ^( TOK_TABALIAS Identifier )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_TABALIAS, "TOK_TABALIAS")
                , root_1);

                adaptor.addChild(root_1, 
                stream_Identifier.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "tableAlias"


    public static class fromSource_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fromSource"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1797:1: fromSource : ( tableSource | subQuerySource ) ( lateralView ^)* ;
    public final HiveParser.fromSource_return fromSource() throws RecognitionException {
        HiveParser.fromSource_return retval = new HiveParser.fromSource_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        HiveParser.tableSource_return tableSource830 =null;

        HiveParser.subQuerySource_return subQuerySource831 =null;

        HiveParser.lateralView_return lateralView832 =null;



         msgs.push("from source"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1800:5: ( ( tableSource | subQuerySource ) ( lateralView ^)* )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1801:5: ( tableSource | subQuerySource ) ( lateralView ^)*
            {
            root_0 = (CommonTree)adaptor.nil();


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1801:5: ( tableSource | subQuerySource )
            int alt247=2;
            int LA247_0 = input.LA(1);

            if ( (LA247_0==Identifier) ) {
                alt247=1;
            }
            else if ( (LA247_0==LPAREN) ) {
                alt247=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 247, 0, input);

                throw nvae;

            }
            switch (alt247) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1801:6: tableSource
                    {
                    pushFollow(FOLLOW_tableSource_in_fromSource13130);
                    tableSource830=tableSource();

                    state._fsp--;

                    adaptor.addChild(root_0, tableSource830.getTree());

                    }
                    break;
                case 2 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1801:20: subQuerySource
                    {
                    pushFollow(FOLLOW_subQuerySource_in_fromSource13134);
                    subQuerySource831=subQuerySource();

                    state._fsp--;

                    adaptor.addChild(root_0, subQuerySource831.getTree());

                    }
                    break;

            }


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1801:36: ( lateralView ^)*
            loop248:
            do {
                int alt248=2;
                int LA248_0 = input.LA(1);

                if ( (LA248_0==KW_LATERAL) ) {
                    alt248=1;
                }


                switch (alt248) {
            	case 1 :
            	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1801:37: lateralView ^
            	    {
            	    pushFollow(FOLLOW_lateralView_in_fromSource13138);
            	    lateralView832=lateralView();

            	    state._fsp--;

            	    root_0 = (CommonTree)adaptor.becomeRoot(lateralView832.getTree(), root_0);

            	    }
            	    break;

            	default :
            	    break loop248;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "fromSource"


    public static class tableBucketSample_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "tableBucketSample"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1804:1: tableBucketSample : KW_TABLESAMPLE LPAREN KW_BUCKET (numerator= Number ) KW_OUT KW_OF (denominator= Number ) ( KW_ON expr+= expression ( COMMA expr+= expression )* )? RPAREN -> ^( TOK_TABLEBUCKETSAMPLE $numerator $denominator ( $expr)* ) ;
    public final HiveParser.tableBucketSample_return tableBucketSample() throws RecognitionException {
        HiveParser.tableBucketSample_return retval = new HiveParser.tableBucketSample_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token numerator=null;
        Token denominator=null;
        Token KW_TABLESAMPLE833=null;
        Token LPAREN834=null;
        Token KW_BUCKET835=null;
        Token KW_OUT836=null;
        Token KW_OF837=null;
        Token KW_ON838=null;
        Token COMMA839=null;
        Token RPAREN840=null;
        List list_expr=null;
        RuleReturnScope expr = null;
        CommonTree numerator_tree=null;
        CommonTree denominator_tree=null;
        CommonTree KW_TABLESAMPLE833_tree=null;
        CommonTree LPAREN834_tree=null;
        CommonTree KW_BUCKET835_tree=null;
        CommonTree KW_OUT836_tree=null;
        CommonTree KW_OF837_tree=null;
        CommonTree KW_ON838_tree=null;
        CommonTree COMMA839_tree=null;
        CommonTree RPAREN840_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_KW_OUT=new RewriteRuleTokenStream(adaptor,"token KW_OUT");
        RewriteRuleTokenStream stream_KW_OF=new RewriteRuleTokenStream(adaptor,"token KW_OF");
        RewriteRuleTokenStream stream_Number=new RewriteRuleTokenStream(adaptor,"token Number");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_KW_BUCKET=new RewriteRuleTokenStream(adaptor,"token KW_BUCKET");
        RewriteRuleTokenStream stream_KW_TABLESAMPLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLESAMPLE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_KW_ON=new RewriteRuleTokenStream(adaptor,"token KW_ON");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
         msgs.push("table bucket sample specification"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1807:5: ( KW_TABLESAMPLE LPAREN KW_BUCKET (numerator= Number ) KW_OUT KW_OF (denominator= Number ) ( KW_ON expr+= expression ( COMMA expr+= expression )* )? RPAREN -> ^( TOK_TABLEBUCKETSAMPLE $numerator $denominator ( $expr)* ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1808:5: KW_TABLESAMPLE LPAREN KW_BUCKET (numerator= Number ) KW_OUT KW_OF (denominator= Number ) ( KW_ON expr+= expression ( COMMA expr+= expression )* )? RPAREN
            {
            KW_TABLESAMPLE833=(Token)match(input,KW_TABLESAMPLE,FOLLOW_KW_TABLESAMPLE_in_tableBucketSample13172);  
            stream_KW_TABLESAMPLE.add(KW_TABLESAMPLE833);


            LPAREN834=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_tableBucketSample13174);  
            stream_LPAREN.add(LPAREN834);


            KW_BUCKET835=(Token)match(input,KW_BUCKET,FOLLOW_KW_BUCKET_in_tableBucketSample13176);  
            stream_KW_BUCKET.add(KW_BUCKET835);


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1808:37: (numerator= Number )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1808:38: numerator= Number
            {
            numerator=(Token)match(input,Number,FOLLOW_Number_in_tableBucketSample13181);  
            stream_Number.add(numerator);


            }


            KW_OUT836=(Token)match(input,KW_OUT,FOLLOW_KW_OUT_in_tableBucketSample13184);  
            stream_KW_OUT.add(KW_OUT836);


            KW_OF837=(Token)match(input,KW_OF,FOLLOW_KW_OF_in_tableBucketSample13186);  
            stream_KW_OF.add(KW_OF837);


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1808:69: (denominator= Number )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1808:70: denominator= Number
            {
            denominator=(Token)match(input,Number,FOLLOW_Number_in_tableBucketSample13191);  
            stream_Number.add(denominator);


            }


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1808:90: ( KW_ON expr+= expression ( COMMA expr+= expression )* )?
            int alt250=2;
            int LA250_0 = input.LA(1);

            if ( (LA250_0==KW_ON) ) {
                alt250=1;
            }
            switch (alt250) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1808:91: KW_ON expr+= expression ( COMMA expr+= expression )*
                    {
                    KW_ON838=(Token)match(input,KW_ON,FOLLOW_KW_ON_in_tableBucketSample13195);  
                    stream_KW_ON.add(KW_ON838);


                    pushFollow(FOLLOW_expression_in_tableBucketSample13199);
                    expr=expression();

                    state._fsp--;

                    stream_expression.add(expr.getTree());
                    if (list_expr==null) list_expr=new ArrayList();
                    list_expr.add(expr.getTree());


                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1808:114: ( COMMA expr+= expression )*
                    loop249:
                    do {
                        int alt249=2;
                        int LA249_0 = input.LA(1);

                        if ( (LA249_0==COMMA) ) {
                            alt249=1;
                        }


                        switch (alt249) {
                    	case 1 :
                    	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1808:115: COMMA expr+= expression
                    	    {
                    	    COMMA839=(Token)match(input,COMMA,FOLLOW_COMMA_in_tableBucketSample13202);  
                    	    stream_COMMA.add(COMMA839);


                    	    pushFollow(FOLLOW_expression_in_tableBucketSample13206);
                    	    expr=expression();

                    	    state._fsp--;

                    	    stream_expression.add(expr.getTree());
                    	    if (list_expr==null) list_expr=new ArrayList();
                    	    list_expr.add(expr.getTree());


                    	    }
                    	    break;

                    	default :
                    	    break loop249;
                        }
                    } while (true);


                    }
                    break;

            }


            RPAREN840=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_tableBucketSample13212);  
            stream_RPAREN.add(RPAREN840);


            // AST REWRITE
            // elements: numerator, expr, denominator
            // token labels: denominator, numerator
            // rule labels: retval
            // token list labels: 
            // rule list labels: expr
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_denominator=new RewriteRuleTokenStream(adaptor,"token denominator",denominator);
            RewriteRuleTokenStream stream_numerator=new RewriteRuleTokenStream(adaptor,"token numerator",numerator);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"token expr",list_expr);
            root_0 = (CommonTree)adaptor.nil();
            // 1808:149: -> ^( TOK_TABLEBUCKETSAMPLE $numerator $denominator ( $expr)* )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1808:152: ^( TOK_TABLEBUCKETSAMPLE $numerator $denominator ( $expr)* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_TABLEBUCKETSAMPLE, "TOK_TABLEBUCKETSAMPLE")
                , root_1);

                adaptor.addChild(root_1, stream_numerator.nextNode());

                adaptor.addChild(root_1, stream_denominator.nextNode());

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1808:201: ( $expr)*
                while ( stream_expr.hasNext() ) {
                    adaptor.addChild(root_1, stream_expr.nextTree());

                }
                stream_expr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "tableBucketSample"


    public static class splitSample_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "splitSample"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1811:1: splitSample : KW_TABLESAMPLE LPAREN (numerator= Number ) KW_PERCENT RPAREN -> ^( TOK_TABLESPLITSAMPLE $numerator) ;
    public final HiveParser.splitSample_return splitSample() throws RecognitionException {
        HiveParser.splitSample_return retval = new HiveParser.splitSample_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token numerator=null;
        Token KW_TABLESAMPLE841=null;
        Token LPAREN842=null;
        Token KW_PERCENT843=null;
        Token RPAREN844=null;

        CommonTree numerator_tree=null;
        CommonTree KW_TABLESAMPLE841_tree=null;
        CommonTree LPAREN842_tree=null;
        CommonTree KW_PERCENT843_tree=null;
        CommonTree RPAREN844_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_Number=new RewriteRuleTokenStream(adaptor,"token Number");
        RewriteRuleTokenStream stream_KW_TABLESAMPLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLESAMPLE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_KW_PERCENT=new RewriteRuleTokenStream(adaptor,"token KW_PERCENT");

         msgs.push("table split sample specification"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1814:5: ( KW_TABLESAMPLE LPAREN (numerator= Number ) KW_PERCENT RPAREN -> ^( TOK_TABLESPLITSAMPLE $numerator) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1815:5: KW_TABLESAMPLE LPAREN (numerator= Number ) KW_PERCENT RPAREN
            {
            KW_TABLESAMPLE841=(Token)match(input,KW_TABLESAMPLE,FOLLOW_KW_TABLESAMPLE_in_splitSample13259);  
            stream_KW_TABLESAMPLE.add(KW_TABLESAMPLE841);


            LPAREN842=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_splitSample13261);  
            stream_LPAREN.add(LPAREN842);


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1815:28: (numerator= Number )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1815:29: numerator= Number
            {
            numerator=(Token)match(input,Number,FOLLOW_Number_in_splitSample13267);  
            stream_Number.add(numerator);


            }


            KW_PERCENT843=(Token)match(input,KW_PERCENT,FOLLOW_KW_PERCENT_in_splitSample13270);  
            stream_KW_PERCENT.add(KW_PERCENT843);


            RPAREN844=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_splitSample13272);  
            stream_RPAREN.add(RPAREN844);


            // AST REWRITE
            // elements: numerator
            // token labels: numerator
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_numerator=new RewriteRuleTokenStream(adaptor,"token numerator",numerator);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1815:65: -> ^( TOK_TABLESPLITSAMPLE $numerator)
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1815:68: ^( TOK_TABLESPLITSAMPLE $numerator)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_TABLESPLITSAMPLE, "TOK_TABLESPLITSAMPLE")
                , root_1);

                adaptor.addChild(root_1, stream_numerator.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "splitSample"


    public static class tableSample_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "tableSample"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1818:1: tableSample : ( tableBucketSample | splitSample );
    public final HiveParser.tableSample_return tableSample() throws RecognitionException {
        HiveParser.tableSample_return retval = new HiveParser.tableSample_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        HiveParser.tableBucketSample_return tableBucketSample845 =null;

        HiveParser.splitSample_return splitSample846 =null;



         msgs.push("table sample specification"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1821:5: ( tableBucketSample | splitSample )
            int alt251=2;
            int LA251_0 = input.LA(1);

            if ( (LA251_0==KW_TABLESAMPLE) ) {
                int LA251_1 = input.LA(2);

                if ( (LA251_1==LPAREN) ) {
                    int LA251_2 = input.LA(3);

                    if ( (LA251_2==KW_BUCKET) ) {
                        alt251=1;
                    }
                    else if ( (LA251_2==Number) ) {
                        alt251=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("", 251, 2, input);

                        throw nvae;

                    }
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("", 251, 1, input);

                    throw nvae;

                }
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 251, 0, input);

                throw nvae;

            }
            switch (alt251) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1822:5: tableBucketSample
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_tableBucketSample_in_tableSample13312);
                    tableBucketSample845=tableBucketSample();

                    state._fsp--;

                    adaptor.addChild(root_0, tableBucketSample845.getTree());

                    }
                    break;
                case 2 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1823:5: splitSample
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_splitSample_in_tableSample13320);
                    splitSample846=splitSample();

                    state._fsp--;

                    adaptor.addChild(root_0, splitSample846.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "tableSample"


    public static class tableSource_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "tableSource"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1826:1: tableSource : tabname= tableName (ts= tableSample )? (alias= Identifier )? -> ^( TOK_TABREF $tabname ( $ts)? ( $alias)? ) ;
    public final HiveParser.tableSource_return tableSource() throws RecognitionException {
        HiveParser.tableSource_return retval = new HiveParser.tableSource_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token alias=null;
        HiveParser.tableName_return tabname =null;

        HiveParser.tableSample_return ts =null;


        CommonTree alias_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
        RewriteRuleSubtreeStream stream_tableSample=new RewriteRuleSubtreeStream(adaptor,"rule tableSample");
         msgs.push("table source"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1829:5: (tabname= tableName (ts= tableSample )? (alias= Identifier )? -> ^( TOK_TABREF $tabname ( $ts)? ( $alias)? ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1829:7: tabname= tableName (ts= tableSample )? (alias= Identifier )?
            {
            pushFollow(FOLLOW_tableName_in_tableSource13349);
            tabname=tableName();

            state._fsp--;

            stream_tableName.add(tabname.getTree());

            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1829:25: (ts= tableSample )?
            int alt252=2;
            int LA252_0 = input.LA(1);

            if ( (LA252_0==KW_TABLESAMPLE) ) {
                alt252=1;
            }
            switch (alt252) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1829:26: ts= tableSample
                    {
                    pushFollow(FOLLOW_tableSample_in_tableSource13354);
                    ts=tableSample();

                    state._fsp--;

                    stream_tableSample.add(ts.getTree());

                    }
                    break;

            }


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1829:43: (alias= Identifier )?
            int alt253=2;
            int LA253_0 = input.LA(1);

            if ( (LA253_0==Identifier) ) {
                int LA253_1 = input.LA(2);

                if ( (LA253_1==EOF||LA253_1==Identifier||LA253_1==KW_CLUSTER||LA253_1==KW_CROSS||LA253_1==KW_DISTRIBUTE||LA253_1==KW_FULL||LA253_1==KW_GROUP||LA253_1==KW_HAVING||LA253_1==KW_INSERT||(LA253_1 >= KW_LATERAL && LA253_1 <= KW_LEFT)||LA253_1==KW_LIMIT||LA253_1==KW_MAP||LA253_1==KW_ON||LA253_1==KW_ORDER||LA253_1==KW_REDUCE||LA253_1==KW_RIGHT||LA253_1==KW_SELECT||LA253_1==KW_SORT||LA253_1==KW_UNION||LA253_1==KW_WHERE||LA253_1==LPAREN||LA253_1==RPAREN) ) {
                    alt253=1;
                }
                else if ( (LA253_1==KW_JOIN) ) {
                    int LA253_26 = input.LA(3);

                    if ( (!(((input.LT(1).getText().equalsIgnoreCase("inner"))))) ) {
                        alt253=1;
                    }
                }
            }
            switch (alt253) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1829:44: alias= Identifier
                    {
                    alias=(Token)match(input,Identifier,FOLLOW_Identifier_in_tableSource13361);  
                    stream_Identifier.add(alias);


                    }
                    break;

            }


            // AST REWRITE
            // elements: alias, ts, tabname
            // token labels: alias
            // rule labels: retval, ts, tabname
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_alias=new RewriteRuleTokenStream(adaptor,"token alias",alias);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_ts=new RewriteRuleSubtreeStream(adaptor,"rule ts",ts!=null?ts.tree:null);
            RewriteRuleSubtreeStream stream_tabname=new RewriteRuleSubtreeStream(adaptor,"rule tabname",tabname!=null?tabname.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1830:5: -> ^( TOK_TABREF $tabname ( $ts)? ( $alias)? )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1830:8: ^( TOK_TABREF $tabname ( $ts)? ( $alias)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_TABREF, "TOK_TABREF")
                , root_1);

                adaptor.addChild(root_1, stream_tabname.nextTree());

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1830:31: ( $ts)?
                if ( stream_ts.hasNext() ) {
                    adaptor.addChild(root_1, stream_ts.nextTree());

                }
                stream_ts.reset();

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1830:36: ( $alias)?
                if ( stream_alias.hasNext() ) {
                    adaptor.addChild(root_1, stream_alias.nextNode());

                }
                stream_alias.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "tableSource"


    public static class tableName_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "tableName"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1833:1: tableName : (db= Identifier DOT )? tab= Identifier -> ^( TOK_TABNAME ( $db)? $tab) ;
    public final HiveParser.tableName_return tableName() throws RecognitionException {
        HiveParser.tableName_return retval = new HiveParser.tableName_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token db=null;
        Token tab=null;
        Token DOT847=null;

        CommonTree db_tree=null;
        CommonTree tab_tree=null;
        CommonTree DOT847_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");

         msgs.push("table name"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1836:5: ( (db= Identifier DOT )? tab= Identifier -> ^( TOK_TABNAME ( $db)? $tab) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1836:7: (db= Identifier DOT )? tab= Identifier
            {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1836:7: (db= Identifier DOT )?
            int alt254=2;
            int LA254_0 = input.LA(1);

            if ( (LA254_0==Identifier) ) {
                int LA254_1 = input.LA(2);

                if ( (LA254_1==DOT) ) {
                    int LA254_2 = input.LA(3);

                    if ( (LA254_2==Identifier) ) {
                        alt254=1;
                    }
                }
            }
            switch (alt254) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1836:8: db= Identifier DOT
                    {
                    db=(Token)match(input,Identifier,FOLLOW_Identifier_in_tableName13414);  
                    stream_Identifier.add(db);


                    DOT847=(Token)match(input,DOT,FOLLOW_DOT_in_tableName13416);  
                    stream_DOT.add(DOT847);


                    }
                    break;

            }


            tab=(Token)match(input,Identifier,FOLLOW_Identifier_in_tableName13422);  
            stream_Identifier.add(tab);


            // AST REWRITE
            // elements: tab, db
            // token labels: db, tab
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_db=new RewriteRuleTokenStream(adaptor,"token db",db);
            RewriteRuleTokenStream stream_tab=new RewriteRuleTokenStream(adaptor,"token tab",tab);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1837:5: -> ^( TOK_TABNAME ( $db)? $tab)
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1837:8: ^( TOK_TABNAME ( $db)? $tab)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_TABNAME, "TOK_TABNAME")
                , root_1);

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1837:23: ( $db)?
                if ( stream_db.hasNext() ) {
                    adaptor.addChild(root_1, stream_db.nextNode());

                }
                stream_db.reset();

                adaptor.addChild(root_1, stream_tab.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "tableName"


    public static class viewName_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "viewName"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1840:1: viewName : (db= Identifier DOT )? view= Identifier -> ^( TOK_TABNAME ( $db)? $view) ;
    public final HiveParser.viewName_return viewName() throws RecognitionException {
        HiveParser.viewName_return retval = new HiveParser.viewName_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token db=null;
        Token view=null;
        Token DOT848=null;

        CommonTree db_tree=null;
        CommonTree view_tree=null;
        CommonTree DOT848_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");

         msgs.push("view name"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1843:5: ( (db= Identifier DOT )? view= Identifier -> ^( TOK_TABNAME ( $db)? $view) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1844:5: (db= Identifier DOT )? view= Identifier
            {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1844:5: (db= Identifier DOT )?
            int alt255=2;
            int LA255_0 = input.LA(1);

            if ( (LA255_0==Identifier) ) {
                int LA255_1 = input.LA(2);

                if ( (LA255_1==DOT) ) {
                    alt255=1;
                }
            }
            switch (alt255) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1844:6: db= Identifier DOT
                    {
                    db=(Token)match(input,Identifier,FOLLOW_Identifier_in_viewName13473);  
                    stream_Identifier.add(db);


                    DOT848=(Token)match(input,DOT,FOLLOW_DOT_in_viewName13475);  
                    stream_DOT.add(DOT848);


                    }
                    break;

            }


            view=(Token)match(input,Identifier,FOLLOW_Identifier_in_viewName13481);  
            stream_Identifier.add(view);


            // AST REWRITE
            // elements: view, db
            // token labels: db, view
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_db=new RewriteRuleTokenStream(adaptor,"token db",db);
            RewriteRuleTokenStream stream_view=new RewriteRuleTokenStream(adaptor,"token view",view);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1845:5: -> ^( TOK_TABNAME ( $db)? $view)
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1845:8: ^( TOK_TABNAME ( $db)? $view)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_TABNAME, "TOK_TABNAME")
                , root_1);

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1845:23: ( $db)?
                if ( stream_db.hasNext() ) {
                    adaptor.addChild(root_1, stream_db.nextNode());

                }
                stream_db.reset();

                adaptor.addChild(root_1, stream_view.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "viewName"


    public static class subQuerySource_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "subQuerySource"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1848:1: subQuerySource : LPAREN queryStatementExpression RPAREN Identifier -> ^( TOK_SUBQUERY queryStatementExpression Identifier ) ;
    public final HiveParser.subQuerySource_return subQuerySource() throws RecognitionException {
        HiveParser.subQuerySource_return retval = new HiveParser.subQuerySource_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token LPAREN849=null;
        Token RPAREN851=null;
        Token Identifier852=null;
        HiveParser.queryStatementExpression_return queryStatementExpression850 =null;


        CommonTree LPAREN849_tree=null;
        CommonTree RPAREN851_tree=null;
        CommonTree Identifier852_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_queryStatementExpression=new RewriteRuleSubtreeStream(adaptor,"rule queryStatementExpression");
         msgs.push("subquery source"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1851:5: ( LPAREN queryStatementExpression RPAREN Identifier -> ^( TOK_SUBQUERY queryStatementExpression Identifier ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1852:5: LPAREN queryStatementExpression RPAREN Identifier
            {
            LPAREN849=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_subQuerySource13529);  
            stream_LPAREN.add(LPAREN849);


            pushFollow(FOLLOW_queryStatementExpression_in_subQuerySource13531);
            queryStatementExpression850=queryStatementExpression();

            state._fsp--;

            stream_queryStatementExpression.add(queryStatementExpression850.getTree());

            RPAREN851=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_subQuerySource13533);  
            stream_RPAREN.add(RPAREN851);


            Identifier852=(Token)match(input,Identifier,FOLLOW_Identifier_in_subQuerySource13535);  
            stream_Identifier.add(Identifier852);


            // AST REWRITE
            // elements: Identifier, queryStatementExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1852:55: -> ^( TOK_SUBQUERY queryStatementExpression Identifier )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1852:58: ^( TOK_SUBQUERY queryStatementExpression Identifier )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_SUBQUERY, "TOK_SUBQUERY")
                , root_1);

                adaptor.addChild(root_1, stream_queryStatementExpression.nextTree());

                adaptor.addChild(root_1, 
                stream_Identifier.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "subQuerySource"


    public static class whereClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "whereClause"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1857:1: whereClause : KW_WHERE searchCondition -> ^( TOK_WHERE searchCondition ) ;
    public final HiveParser.whereClause_return whereClause() throws RecognitionException {
        HiveParser.whereClause_return retval = new HiveParser.whereClause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_WHERE853=null;
        HiveParser.searchCondition_return searchCondition854 =null;


        CommonTree KW_WHERE853_tree=null;
        RewriteRuleTokenStream stream_KW_WHERE=new RewriteRuleTokenStream(adaptor,"token KW_WHERE");
        RewriteRuleSubtreeStream stream_searchCondition=new RewriteRuleSubtreeStream(adaptor,"rule searchCondition");
         msgs.push("where clause"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1860:5: ( KW_WHERE searchCondition -> ^( TOK_WHERE searchCondition ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1861:5: KW_WHERE searchCondition
            {
            KW_WHERE853=(Token)match(input,KW_WHERE,FOLLOW_KW_WHERE_in_whereClause13578);  
            stream_KW_WHERE.add(KW_WHERE853);


            pushFollow(FOLLOW_searchCondition_in_whereClause13580);
            searchCondition854=searchCondition();

            state._fsp--;

            stream_searchCondition.add(searchCondition854.getTree());

            // AST REWRITE
            // elements: searchCondition
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1861:30: -> ^( TOK_WHERE searchCondition )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1861:33: ^( TOK_WHERE searchCondition )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_WHERE, "TOK_WHERE")
                , root_1);

                adaptor.addChild(root_1, stream_searchCondition.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "whereClause"


    public static class searchCondition_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "searchCondition"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1864:1: searchCondition : expression ;
    public final HiveParser.searchCondition_return searchCondition() throws RecognitionException {
        HiveParser.searchCondition_return retval = new HiveParser.searchCondition_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        HiveParser.expression_return expression855 =null;



         msgs.push("search condition"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1867:5: ( expression )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1868:5: expression
            {
            root_0 = (CommonTree)adaptor.nil();


            pushFollow(FOLLOW_expression_in_searchCondition13619);
            expression855=expression();

            state._fsp--;

            adaptor.addChild(root_0, expression855.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "searchCondition"


    public static class groupByClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "groupByClause"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1874:1: groupByClause : KW_GROUP KW_BY groupByExpression ( COMMA groupByExpression )* ( (rollup= KW_WITH KW_ROLLUP ) | (cube= KW_WITH KW_CUBE ) )? (sets= KW_GROUPING KW_SETS LPAREN groupingSetExpression ( COMMA groupingSetExpression )* RPAREN )? -> {rollup != null}? ^( TOK_ROLLUP_GROUPBY ( groupByExpression )+ ) -> {cube != null}? ^( TOK_CUBE_GROUPBY ( groupByExpression )+ ) -> {sets != null}? ^( TOK_GROUPING_SETS ( groupByExpression )+ ( groupingSetExpression )+ ) -> ^( TOK_GROUPBY ( groupByExpression )+ ) ;
    public final HiveParser.groupByClause_return groupByClause() throws RecognitionException {
        HiveParser.groupByClause_return retval = new HiveParser.groupByClause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token rollup=null;
        Token cube=null;
        Token sets=null;
        Token KW_GROUP856=null;
        Token KW_BY857=null;
        Token COMMA859=null;
        Token KW_ROLLUP861=null;
        Token KW_CUBE862=null;
        Token KW_SETS863=null;
        Token LPAREN864=null;
        Token COMMA866=null;
        Token RPAREN868=null;
        HiveParser.groupByExpression_return groupByExpression858 =null;

        HiveParser.groupByExpression_return groupByExpression860 =null;

        HiveParser.groupingSetExpression_return groupingSetExpression865 =null;

        HiveParser.groupingSetExpression_return groupingSetExpression867 =null;


        CommonTree rollup_tree=null;
        CommonTree cube_tree=null;
        CommonTree sets_tree=null;
        CommonTree KW_GROUP856_tree=null;
        CommonTree KW_BY857_tree=null;
        CommonTree COMMA859_tree=null;
        CommonTree KW_ROLLUP861_tree=null;
        CommonTree KW_CUBE862_tree=null;
        CommonTree KW_SETS863_tree=null;
        CommonTree LPAREN864_tree=null;
        CommonTree COMMA866_tree=null;
        CommonTree RPAREN868_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_KW_GROUPING=new RewriteRuleTokenStream(adaptor,"token KW_GROUPING");
        RewriteRuleTokenStream stream_KW_CUBE=new RewriteRuleTokenStream(adaptor,"token KW_CUBE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_KW_ROLLUP=new RewriteRuleTokenStream(adaptor,"token KW_ROLLUP");
        RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");
        RewriteRuleTokenStream stream_KW_GROUP=new RewriteRuleTokenStream(adaptor,"token KW_GROUP");
        RewriteRuleTokenStream stream_KW_SETS=new RewriteRuleTokenStream(adaptor,"token KW_SETS");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");
        RewriteRuleSubtreeStream stream_groupingSetExpression=new RewriteRuleSubtreeStream(adaptor,"rule groupingSetExpression");
        RewriteRuleSubtreeStream stream_groupByExpression=new RewriteRuleSubtreeStream(adaptor,"rule groupByExpression");
         msgs.push("group by clause"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1877:5: ( KW_GROUP KW_BY groupByExpression ( COMMA groupByExpression )* ( (rollup= KW_WITH KW_ROLLUP ) | (cube= KW_WITH KW_CUBE ) )? (sets= KW_GROUPING KW_SETS LPAREN groupingSetExpression ( COMMA groupingSetExpression )* RPAREN )? -> {rollup != null}? ^( TOK_ROLLUP_GROUPBY ( groupByExpression )+ ) -> {cube != null}? ^( TOK_CUBE_GROUPBY ( groupByExpression )+ ) -> {sets != null}? ^( TOK_GROUPING_SETS ( groupByExpression )+ ( groupingSetExpression )+ ) -> ^( TOK_GROUPBY ( groupByExpression )+ ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1878:5: KW_GROUP KW_BY groupByExpression ( COMMA groupByExpression )* ( (rollup= KW_WITH KW_ROLLUP ) | (cube= KW_WITH KW_CUBE ) )? (sets= KW_GROUPING KW_SETS LPAREN groupingSetExpression ( COMMA groupingSetExpression )* RPAREN )?
            {
            KW_GROUP856=(Token)match(input,KW_GROUP,FOLLOW_KW_GROUP_in_groupByClause13653);  
            stream_KW_GROUP.add(KW_GROUP856);


            KW_BY857=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_groupByClause13655);  
            stream_KW_BY.add(KW_BY857);


            pushFollow(FOLLOW_groupByExpression_in_groupByClause13661);
            groupByExpression858=groupByExpression();

            state._fsp--;

            stream_groupByExpression.add(groupByExpression858.getTree());

            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1880:5: ( COMMA groupByExpression )*
            loop256:
            do {
                int alt256=2;
                int LA256_0 = input.LA(1);

                if ( (LA256_0==COMMA) ) {
                    alt256=1;
                }


                switch (alt256) {
            	case 1 :
            	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1880:7: COMMA groupByExpression
            	    {
            	    COMMA859=(Token)match(input,COMMA,FOLLOW_COMMA_in_groupByClause13669);  
            	    stream_COMMA.add(COMMA859);


            	    pushFollow(FOLLOW_groupByExpression_in_groupByClause13671);
            	    groupByExpression860=groupByExpression();

            	    state._fsp--;

            	    stream_groupByExpression.add(groupByExpression860.getTree());

            	    }
            	    break;

            	default :
            	    break loop256;
                }
            } while (true);


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1881:5: ( (rollup= KW_WITH KW_ROLLUP ) | (cube= KW_WITH KW_CUBE ) )?
            int alt257=3;
            int LA257_0 = input.LA(1);

            if ( (LA257_0==KW_WITH) ) {
                int LA257_1 = input.LA(2);

                if ( (LA257_1==KW_ROLLUP) ) {
                    alt257=1;
                }
                else if ( (LA257_1==KW_CUBE) ) {
                    alt257=2;
                }
            }
            switch (alt257) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1881:6: (rollup= KW_WITH KW_ROLLUP )
                    {
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1881:6: (rollup= KW_WITH KW_ROLLUP )
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1881:7: rollup= KW_WITH KW_ROLLUP
                    {
                    rollup=(Token)match(input,KW_WITH,FOLLOW_KW_WITH_in_groupByClause13684);  
                    stream_KW_WITH.add(rollup);


                    KW_ROLLUP861=(Token)match(input,KW_ROLLUP,FOLLOW_KW_ROLLUP_in_groupByClause13686);  
                    stream_KW_ROLLUP.add(KW_ROLLUP861);


                    }


                    }
                    break;
                case 2 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1881:35: (cube= KW_WITH KW_CUBE )
                    {
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1881:35: (cube= KW_WITH KW_CUBE )
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1881:36: cube= KW_WITH KW_CUBE
                    {
                    cube=(Token)match(input,KW_WITH,FOLLOW_KW_WITH_in_groupByClause13694);  
                    stream_KW_WITH.add(cube);


                    KW_CUBE862=(Token)match(input,KW_CUBE,FOLLOW_KW_CUBE_in_groupByClause13696);  
                    stream_KW_CUBE.add(KW_CUBE862);


                    }


                    }
                    break;

            }


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1882:5: (sets= KW_GROUPING KW_SETS LPAREN groupingSetExpression ( COMMA groupingSetExpression )* RPAREN )?
            int alt259=2;
            int LA259_0 = input.LA(1);

            if ( (LA259_0==KW_GROUPING) ) {
                alt259=1;
            }
            switch (alt259) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1882:6: sets= KW_GROUPING KW_SETS LPAREN groupingSetExpression ( COMMA groupingSetExpression )* RPAREN
                    {
                    sets=(Token)match(input,KW_GROUPING,FOLLOW_KW_GROUPING_in_groupByClause13709);  
                    stream_KW_GROUPING.add(sets);


                    KW_SETS863=(Token)match(input,KW_SETS,FOLLOW_KW_SETS_in_groupByClause13711);  
                    stream_KW_SETS.add(KW_SETS863);


                    LPAREN864=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_groupByClause13718);  
                    stream_LPAREN.add(LPAREN864);


                    pushFollow(FOLLOW_groupingSetExpression_in_groupByClause13720);
                    groupingSetExpression865=groupingSetExpression();

                    state._fsp--;

                    stream_groupingSetExpression.add(groupingSetExpression865.getTree());

                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1883:34: ( COMMA groupingSetExpression )*
                    loop258:
                    do {
                        int alt258=2;
                        int LA258_0 = input.LA(1);

                        if ( (LA258_0==COMMA) ) {
                            alt258=1;
                        }


                        switch (alt258) {
                    	case 1 :
                    	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1883:36: COMMA groupingSetExpression
                    	    {
                    	    COMMA866=(Token)match(input,COMMA,FOLLOW_COMMA_in_groupByClause13724);  
                    	    stream_COMMA.add(COMMA866);


                    	    pushFollow(FOLLOW_groupingSetExpression_in_groupByClause13726);
                    	    groupingSetExpression867=groupingSetExpression();

                    	    state._fsp--;

                    	    stream_groupingSetExpression.add(groupingSetExpression867.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop258;
                        }
                    } while (true);


                    RPAREN868=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_groupByClause13731);  
                    stream_RPAREN.add(RPAREN868);


                    }
                    break;

            }


            // AST REWRITE
            // elements: groupByExpression, groupByExpression, groupByExpression, groupingSetExpression, groupByExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1884:5: -> {rollup != null}? ^( TOK_ROLLUP_GROUPBY ( groupByExpression )+ )
            if (rollup != null) {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1884:26: ^( TOK_ROLLUP_GROUPBY ( groupByExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_ROLLUP_GROUPBY, "TOK_ROLLUP_GROUPBY")
                , root_1);

                if ( !(stream_groupByExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_groupByExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_groupByExpression.nextTree());

                }
                stream_groupByExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 1885:5: -> {cube != null}? ^( TOK_CUBE_GROUPBY ( groupByExpression )+ )
            if (cube != null) {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1885:24: ^( TOK_CUBE_GROUPBY ( groupByExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_CUBE_GROUPBY, "TOK_CUBE_GROUPBY")
                , root_1);

                if ( !(stream_groupByExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_groupByExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_groupByExpression.nextTree());

                }
                stream_groupByExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 1886:5: -> {sets != null}? ^( TOK_GROUPING_SETS ( groupByExpression )+ ( groupingSetExpression )+ )
            if (sets != null) {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1886:24: ^( TOK_GROUPING_SETS ( groupByExpression )+ ( groupingSetExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_GROUPING_SETS, "TOK_GROUPING_SETS")
                , root_1);

                if ( !(stream_groupByExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_groupByExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_groupByExpression.nextTree());

                }
                stream_groupByExpression.reset();

                if ( !(stream_groupingSetExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_groupingSetExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_groupingSetExpression.nextTree());

                }
                stream_groupingSetExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 1887:5: -> ^( TOK_GROUPBY ( groupByExpression )+ )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1887:8: ^( TOK_GROUPBY ( groupByExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_GROUPBY, "TOK_GROUPBY")
                , root_1);

                if ( !(stream_groupByExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_groupByExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_groupByExpression.nextTree());

                }
                stream_groupByExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "groupByClause"


    public static class groupingSetExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "groupingSetExpression"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1890:1: groupingSetExpression : ( groupByExpression -> ^( TOK_GROUPING_SETS_EXPRESSION groupByExpression ) | LPAREN groupByExpression ( COMMA groupByExpression )* RPAREN -> ^( TOK_GROUPING_SETS_EXPRESSION ( groupByExpression )+ ) | LPAREN RPAREN -> ^( TOK_GROUPING_SETS_EXPRESSION ( groupByExpression )* ) );
    public final HiveParser.groupingSetExpression_return groupingSetExpression() throws RecognitionException {
        HiveParser.groupingSetExpression_return retval = new HiveParser.groupingSetExpression_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token LPAREN870=null;
        Token COMMA872=null;
        Token RPAREN874=null;
        Token LPAREN875=null;
        Token RPAREN876=null;
        HiveParser.groupByExpression_return groupByExpression869 =null;

        HiveParser.groupByExpression_return groupByExpression871 =null;

        HiveParser.groupByExpression_return groupByExpression873 =null;


        CommonTree LPAREN870_tree=null;
        CommonTree COMMA872_tree=null;
        CommonTree RPAREN874_tree=null;
        CommonTree LPAREN875_tree=null;
        CommonTree RPAREN876_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_groupByExpression=new RewriteRuleSubtreeStream(adaptor,"rule groupByExpression");
        msgs.push("grouping set expression"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1893:4: ( groupByExpression -> ^( TOK_GROUPING_SETS_EXPRESSION groupByExpression ) | LPAREN groupByExpression ( COMMA groupByExpression )* RPAREN -> ^( TOK_GROUPING_SETS_EXPRESSION ( groupByExpression )+ ) | LPAREN RPAREN -> ^( TOK_GROUPING_SETS_EXPRESSION ( groupByExpression )* ) )
            int alt261=3;
            alt261 = dfa261.predict(input);
            switch (alt261) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1894:4: groupByExpression
                    {
                    pushFollow(FOLLOW_groupByExpression_in_groupingSetExpression13825);
                    groupByExpression869=groupByExpression();

                    state._fsp--;

                    stream_groupByExpression.add(groupByExpression869.getTree());

                    // AST REWRITE
                    // elements: groupByExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1895:4: -> ^( TOK_GROUPING_SETS_EXPRESSION groupByExpression )
                    {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1895:7: ^( TOK_GROUPING_SETS_EXPRESSION groupByExpression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_GROUPING_SETS_EXPRESSION, "TOK_GROUPING_SETS_EXPRESSION")
                        , root_1);

                        adaptor.addChild(root_1, stream_groupByExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 2 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1897:4: LPAREN groupByExpression ( COMMA groupByExpression )* RPAREN
                    {
                    LPAREN870=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_groupingSetExpression13846);  
                    stream_LPAREN.add(LPAREN870);


                    pushFollow(FOLLOW_groupByExpression_in_groupingSetExpression13852);
                    groupByExpression871=groupByExpression();

                    state._fsp--;

                    stream_groupByExpression.add(groupByExpression871.getTree());

                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1898:22: ( COMMA groupByExpression )*
                    loop260:
                    do {
                        int alt260=2;
                        int LA260_0 = input.LA(1);

                        if ( (LA260_0==COMMA) ) {
                            alt260=1;
                        }


                        switch (alt260) {
                    	case 1 :
                    	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1898:23: COMMA groupByExpression
                    	    {
                    	    COMMA872=(Token)match(input,COMMA,FOLLOW_COMMA_in_groupingSetExpression13855);  
                    	    stream_COMMA.add(COMMA872);


                    	    pushFollow(FOLLOW_groupByExpression_in_groupingSetExpression13857);
                    	    groupByExpression873=groupByExpression();

                    	    state._fsp--;

                    	    stream_groupByExpression.add(groupByExpression873.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop260;
                        }
                    } while (true);


                    RPAREN874=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_groupingSetExpression13864);  
                    stream_RPAREN.add(RPAREN874);


                    // AST REWRITE
                    // elements: groupByExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1900:4: -> ^( TOK_GROUPING_SETS_EXPRESSION ( groupByExpression )+ )
                    {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1900:7: ^( TOK_GROUPING_SETS_EXPRESSION ( groupByExpression )+ )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_GROUPING_SETS_EXPRESSION, "TOK_GROUPING_SETS_EXPRESSION")
                        , root_1);

                        if ( !(stream_groupByExpression.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_groupByExpression.hasNext() ) {
                            adaptor.addChild(root_1, stream_groupByExpression.nextTree());

                        }
                        stream_groupByExpression.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 3 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1902:4: LPAREN RPAREN
                    {
                    LPAREN875=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_groupingSetExpression13886);  
                    stream_LPAREN.add(LPAREN875);


                    RPAREN876=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_groupingSetExpression13891);  
                    stream_RPAREN.add(RPAREN876);


                    // AST REWRITE
                    // elements: groupByExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1904:4: -> ^( TOK_GROUPING_SETS_EXPRESSION ( groupByExpression )* )
                    {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1904:7: ^( TOK_GROUPING_SETS_EXPRESSION ( groupByExpression )* )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_GROUPING_SETS_EXPRESSION, "TOK_GROUPING_SETS_EXPRESSION")
                        , root_1);

                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1904:38: ( groupByExpression )*
                        while ( stream_groupByExpression.hasNext() ) {
                        }
                        stream_groupByExpression.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "groupingSetExpression"


    public static class groupByExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "groupByExpression"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1908:1: groupByExpression : expression ;
    public final HiveParser.groupByExpression_return groupByExpression() throws RecognitionException {
        HiveParser.groupByExpression_return retval = new HiveParser.groupByExpression_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        HiveParser.expression_return expression877 =null;



         msgs.push("group by expression"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1911:5: ( expression )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1912:5: expression
            {
            root_0 = (CommonTree)adaptor.nil();


            pushFollow(FOLLOW_expression_in_groupByExpression13934);
            expression877=expression();

            state._fsp--;

            adaptor.addChild(root_0, expression877.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "groupByExpression"


    public static class havingClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "havingClause"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1915:1: havingClause : KW_HAVING havingCondition -> ^( TOK_HAVING havingCondition ) ;
    public final HiveParser.havingClause_return havingClause() throws RecognitionException {
        HiveParser.havingClause_return retval = new HiveParser.havingClause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_HAVING878=null;
        HiveParser.havingCondition_return havingCondition879 =null;


        CommonTree KW_HAVING878_tree=null;
        RewriteRuleTokenStream stream_KW_HAVING=new RewriteRuleTokenStream(adaptor,"token KW_HAVING");
        RewriteRuleSubtreeStream stream_havingCondition=new RewriteRuleSubtreeStream(adaptor,"rule havingCondition");
         msgs.push("having clause"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1918:5: ( KW_HAVING havingCondition -> ^( TOK_HAVING havingCondition ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1919:5: KW_HAVING havingCondition
            {
            KW_HAVING878=(Token)match(input,KW_HAVING,FOLLOW_KW_HAVING_in_havingClause13965);  
            stream_KW_HAVING.add(KW_HAVING878);


            pushFollow(FOLLOW_havingCondition_in_havingClause13967);
            havingCondition879=havingCondition();

            state._fsp--;

            stream_havingCondition.add(havingCondition879.getTree());

            // AST REWRITE
            // elements: havingCondition
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1919:31: -> ^( TOK_HAVING havingCondition )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1919:34: ^( TOK_HAVING havingCondition )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_HAVING, "TOK_HAVING")
                , root_1);

                adaptor.addChild(root_1, stream_havingCondition.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "havingClause"


    public static class havingCondition_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "havingCondition"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1922:1: havingCondition : expression ;
    public final HiveParser.havingCondition_return havingCondition() throws RecognitionException {
        HiveParser.havingCondition_return retval = new HiveParser.havingCondition_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        HiveParser.expression_return expression880 =null;



         msgs.push("having condition"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1925:5: ( expression )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1926:5: expression
            {
            root_0 = (CommonTree)adaptor.nil();


            pushFollow(FOLLOW_expression_in_havingCondition14006);
            expression880=expression();

            state._fsp--;

            adaptor.addChild(root_0, expression880.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "havingCondition"


    public static class orderByClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "orderByClause"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1930:1: orderByClause : ( KW_ORDER KW_BY LPAREN columnRefOrder ( COMMA columnRefOrder )* RPAREN -> ^( TOK_ORDERBY ( columnRefOrder )+ ) | KW_ORDER KW_BY columnRefOrder ( COMMA columnRefOrder )* -> ^( TOK_ORDERBY ( columnRefOrder )+ ) );
    public final HiveParser.orderByClause_return orderByClause() throws RecognitionException {
        HiveParser.orderByClause_return retval = new HiveParser.orderByClause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_ORDER881=null;
        Token KW_BY882=null;
        Token LPAREN883=null;
        Token COMMA885=null;
        Token RPAREN887=null;
        Token KW_ORDER888=null;
        Token KW_BY889=null;
        Token COMMA891=null;
        HiveParser.columnRefOrder_return columnRefOrder884 =null;

        HiveParser.columnRefOrder_return columnRefOrder886 =null;

        HiveParser.columnRefOrder_return columnRefOrder890 =null;

        HiveParser.columnRefOrder_return columnRefOrder892 =null;


        CommonTree KW_ORDER881_tree=null;
        CommonTree KW_BY882_tree=null;
        CommonTree LPAREN883_tree=null;
        CommonTree COMMA885_tree=null;
        CommonTree RPAREN887_tree=null;
        CommonTree KW_ORDER888_tree=null;
        CommonTree KW_BY889_tree=null;
        CommonTree COMMA891_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_KW_ORDER=new RewriteRuleTokenStream(adaptor,"token KW_ORDER");
        RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");
        RewriteRuleSubtreeStream stream_columnRefOrder=new RewriteRuleSubtreeStream(adaptor,"rule columnRefOrder");
         msgs.push("order by clause"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1933:5: ( KW_ORDER KW_BY LPAREN columnRefOrder ( COMMA columnRefOrder )* RPAREN -> ^( TOK_ORDERBY ( columnRefOrder )+ ) | KW_ORDER KW_BY columnRefOrder ( COMMA columnRefOrder )* -> ^( TOK_ORDERBY ( columnRefOrder )+ ) )
            int alt264=2;
            int LA264_0 = input.LA(1);

            if ( (LA264_0==KW_ORDER) ) {
                int LA264_1 = input.LA(2);

                if ( (LA264_1==KW_BY) ) {
                    int LA264_2 = input.LA(3);

                    if ( (LA264_2==LPAREN) ) {
                        alt264=1;
                    }
                    else if ( (LA264_2==BigintLiteral||LA264_2==CharSetName||LA264_2==Identifier||LA264_2==KW_ARRAY||(LA264_2 >= KW_CASE && LA264_2 <= KW_CAST)||LA264_2==KW_FALSE||LA264_2==KW_IF||LA264_2==KW_MAP||LA264_2==KW_NOT||LA264_2==KW_NULL||LA264_2==KW_STRUCT||LA264_2==KW_TRUE||LA264_2==KW_UNIONTYPE||LA264_2==MINUS||(LA264_2 >= Number && LA264_2 <= PLUS)||(LA264_2 >= SmallintLiteral && LA264_2 <= TILDE)||LA264_2==TinyintLiteral) ) {
                        alt264=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("", 264, 2, input);

                        throw nvae;

                    }
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("", 264, 1, input);

                    throw nvae;

                }
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 264, 0, input);

                throw nvae;

            }
            switch (alt264) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1934:5: KW_ORDER KW_BY LPAREN columnRefOrder ( COMMA columnRefOrder )* RPAREN
                    {
                    KW_ORDER881=(Token)match(input,KW_ORDER,FOLLOW_KW_ORDER_in_orderByClause14038);  
                    stream_KW_ORDER.add(KW_ORDER881);


                    KW_BY882=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_orderByClause14040);  
                    stream_KW_BY.add(KW_BY882);


                    LPAREN883=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_orderByClause14046);  
                    stream_LPAREN.add(LPAREN883);


                    pushFollow(FOLLOW_columnRefOrder_in_orderByClause14048);
                    columnRefOrder884=columnRefOrder();

                    state._fsp--;

                    stream_columnRefOrder.add(columnRefOrder884.getTree());

                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1936:5: ( COMMA columnRefOrder )*
                    loop262:
                    do {
                        int alt262=2;
                        int LA262_0 = input.LA(1);

                        if ( (LA262_0==COMMA) ) {
                            alt262=1;
                        }


                        switch (alt262) {
                    	case 1 :
                    	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1936:7: COMMA columnRefOrder
                    	    {
                    	    COMMA885=(Token)match(input,COMMA,FOLLOW_COMMA_in_orderByClause14056);  
                    	    stream_COMMA.add(COMMA885);


                    	    pushFollow(FOLLOW_columnRefOrder_in_orderByClause14058);
                    	    columnRefOrder886=columnRefOrder();

                    	    state._fsp--;

                    	    stream_columnRefOrder.add(columnRefOrder886.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop262;
                        }
                    } while (true);


                    RPAREN887=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_orderByClause14062);  
                    stream_RPAREN.add(RPAREN887);


                    // AST REWRITE
                    // elements: columnRefOrder
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1936:37: -> ^( TOK_ORDERBY ( columnRefOrder )+ )
                    {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1936:40: ^( TOK_ORDERBY ( columnRefOrder )+ )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_ORDERBY, "TOK_ORDERBY")
                        , root_1);

                        if ( !(stream_columnRefOrder.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_columnRefOrder.hasNext() ) {
                            adaptor.addChild(root_1, stream_columnRefOrder.nextTree());

                        }
                        stream_columnRefOrder.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 2 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1938:5: KW_ORDER KW_BY columnRefOrder ( COMMA columnRefOrder )*
                    {
                    KW_ORDER888=(Token)match(input,KW_ORDER,FOLLOW_KW_ORDER_in_orderByClause14083);  
                    stream_KW_ORDER.add(KW_ORDER888);


                    KW_BY889=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_orderByClause14085);  
                    stream_KW_BY.add(KW_BY889);


                    pushFollow(FOLLOW_columnRefOrder_in_orderByClause14091);
                    columnRefOrder890=columnRefOrder();

                    state._fsp--;

                    stream_columnRefOrder.add(columnRefOrder890.getTree());

                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1940:5: ( COMMA columnRefOrder )*
                    loop263:
                    do {
                        int alt263=2;
                        int LA263_0 = input.LA(1);

                        if ( (LA263_0==COMMA) ) {
                            alt263=1;
                        }


                        switch (alt263) {
                    	case 1 :
                    	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1940:7: COMMA columnRefOrder
                    	    {
                    	    COMMA891=(Token)match(input,COMMA,FOLLOW_COMMA_in_orderByClause14099);  
                    	    stream_COMMA.add(COMMA891);


                    	    pushFollow(FOLLOW_columnRefOrder_in_orderByClause14101);
                    	    columnRefOrder892=columnRefOrder();

                    	    state._fsp--;

                    	    stream_columnRefOrder.add(columnRefOrder892.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop263;
                        }
                    } while (true);


                    // AST REWRITE
                    // elements: columnRefOrder
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1940:30: -> ^( TOK_ORDERBY ( columnRefOrder )+ )
                    {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1940:33: ^( TOK_ORDERBY ( columnRefOrder )+ )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_ORDERBY, "TOK_ORDERBY")
                        , root_1);

                        if ( !(stream_columnRefOrder.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_columnRefOrder.hasNext() ) {
                            adaptor.addChild(root_1, stream_columnRefOrder.nextTree());

                        }
                        stream_columnRefOrder.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "orderByClause"


    public static class clusterByClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "clusterByClause"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1943:1: clusterByClause : ( KW_CLUSTER KW_BY LPAREN expression ( COMMA expression )* RPAREN -> ^( TOK_CLUSTERBY ( expression )+ ) | KW_CLUSTER KW_BY expression ( COMMA expression )* -> ^( TOK_CLUSTERBY ( expression )+ ) );
    public final HiveParser.clusterByClause_return clusterByClause() throws RecognitionException {
        HiveParser.clusterByClause_return retval = new HiveParser.clusterByClause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_CLUSTER893=null;
        Token KW_BY894=null;
        Token LPAREN895=null;
        Token COMMA897=null;
        Token RPAREN899=null;
        Token KW_CLUSTER900=null;
        Token KW_BY901=null;
        Token COMMA903=null;
        HiveParser.expression_return expression896 =null;

        HiveParser.expression_return expression898 =null;

        HiveParser.expression_return expression902 =null;

        HiveParser.expression_return expression904 =null;


        CommonTree KW_CLUSTER893_tree=null;
        CommonTree KW_BY894_tree=null;
        CommonTree LPAREN895_tree=null;
        CommonTree COMMA897_tree=null;
        CommonTree RPAREN899_tree=null;
        CommonTree KW_CLUSTER900_tree=null;
        CommonTree KW_BY901_tree=null;
        CommonTree COMMA903_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_KW_CLUSTER=new RewriteRuleTokenStream(adaptor,"token KW_CLUSTER");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
         msgs.push("cluster by clause"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1946:5: ( KW_CLUSTER KW_BY LPAREN expression ( COMMA expression )* RPAREN -> ^( TOK_CLUSTERBY ( expression )+ ) | KW_CLUSTER KW_BY expression ( COMMA expression )* -> ^( TOK_CLUSTERBY ( expression )+ ) )
            int alt267=2;
            int LA267_0 = input.LA(1);

            if ( (LA267_0==KW_CLUSTER) ) {
                int LA267_1 = input.LA(2);

                if ( (LA267_1==KW_BY) ) {
                    int LA267_2 = input.LA(3);

                    if ( (LA267_2==LPAREN) ) {
                        alt267=1;
                    }
                    else if ( (LA267_2==BigintLiteral||LA267_2==CharSetName||LA267_2==Identifier||LA267_2==KW_ARRAY||(LA267_2 >= KW_CASE && LA267_2 <= KW_CAST)||LA267_2==KW_FALSE||LA267_2==KW_IF||LA267_2==KW_MAP||LA267_2==KW_NOT||LA267_2==KW_NULL||LA267_2==KW_STRUCT||LA267_2==KW_TRUE||LA267_2==KW_UNIONTYPE||LA267_2==MINUS||(LA267_2 >= Number && LA267_2 <= PLUS)||(LA267_2 >= SmallintLiteral && LA267_2 <= TILDE)||LA267_2==TinyintLiteral) ) {
                        alt267=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("", 267, 2, input);

                        throw nvae;

                    }
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("", 267, 1, input);

                    throw nvae;

                }
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 267, 0, input);

                throw nvae;

            }
            switch (alt267) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1947:5: KW_CLUSTER KW_BY LPAREN expression ( COMMA expression )* RPAREN
                    {
                    KW_CLUSTER893=(Token)match(input,KW_CLUSTER,FOLLOW_KW_CLUSTER_in_clusterByClause14143);  
                    stream_KW_CLUSTER.add(KW_CLUSTER893);


                    KW_BY894=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_clusterByClause14145);  
                    stream_KW_BY.add(KW_BY894);


                    LPAREN895=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_clusterByClause14151);  
                    stream_LPAREN.add(LPAREN895);


                    pushFollow(FOLLOW_expression_in_clusterByClause14153);
                    expression896=expression();

                    state._fsp--;

                    stream_expression.add(expression896.getTree());

                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1948:23: ( COMMA expression )*
                    loop265:
                    do {
                        int alt265=2;
                        int LA265_0 = input.LA(1);

                        if ( (LA265_0==COMMA) ) {
                            alt265=1;
                        }


                        switch (alt265) {
                    	case 1 :
                    	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1948:24: COMMA expression
                    	    {
                    	    COMMA897=(Token)match(input,COMMA,FOLLOW_COMMA_in_clusterByClause14156);  
                    	    stream_COMMA.add(COMMA897);


                    	    pushFollow(FOLLOW_expression_in_clusterByClause14158);
                    	    expression898=expression();

                    	    state._fsp--;

                    	    stream_expression.add(expression898.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop265;
                        }
                    } while (true);


                    RPAREN899=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_clusterByClause14162);  
                    stream_RPAREN.add(RPAREN899);


                    // AST REWRITE
                    // elements: expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1948:50: -> ^( TOK_CLUSTERBY ( expression )+ )
                    {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1948:53: ^( TOK_CLUSTERBY ( expression )+ )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_CLUSTERBY, "TOK_CLUSTERBY")
                        , root_1);

                        if ( !(stream_expression.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_1, stream_expression.nextTree());

                        }
                        stream_expression.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 2 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1950:5: KW_CLUSTER KW_BY expression ( COMMA expression )*
                    {
                    KW_CLUSTER900=(Token)match(input,KW_CLUSTER,FOLLOW_KW_CLUSTER_in_clusterByClause14183);  
                    stream_KW_CLUSTER.add(KW_CLUSTER900);


                    KW_BY901=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_clusterByClause14185);  
                    stream_KW_BY.add(KW_BY901);


                    pushFollow(FOLLOW_expression_in_clusterByClause14191);
                    expression902=expression();

                    state._fsp--;

                    stream_expression.add(expression902.getTree());

                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1952:5: ( COMMA expression )*
                    loop266:
                    do {
                        int alt266=2;
                        int LA266_0 = input.LA(1);

                        if ( (LA266_0==COMMA) ) {
                            alt266=1;
                        }


                        switch (alt266) {
                    	case 1 :
                    	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1952:7: COMMA expression
                    	    {
                    	    COMMA903=(Token)match(input,COMMA,FOLLOW_COMMA_in_clusterByClause14199);  
                    	    stream_COMMA.add(COMMA903);


                    	    pushFollow(FOLLOW_expression_in_clusterByClause14201);
                    	    expression904=expression();

                    	    state._fsp--;

                    	    stream_expression.add(expression904.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop266;
                        }
                    } while (true);


                    // AST REWRITE
                    // elements: expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1952:27: -> ^( TOK_CLUSTERBY ( expression )+ )
                    {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1952:30: ^( TOK_CLUSTERBY ( expression )+ )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_CLUSTERBY, "TOK_CLUSTERBY")
                        , root_1);

                        if ( !(stream_expression.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_1, stream_expression.nextTree());

                        }
                        stream_expression.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "clusterByClause"


    public static class distributeByClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "distributeByClause"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1955:1: distributeByClause : ( KW_DISTRIBUTE KW_BY LPAREN expression ( COMMA expression )* RPAREN -> ^( TOK_DISTRIBUTEBY ( expression )+ ) | KW_DISTRIBUTE KW_BY expression ( COMMA expression )* -> ^( TOK_DISTRIBUTEBY ( expression )+ ) );
    public final HiveParser.distributeByClause_return distributeByClause() throws RecognitionException {
        HiveParser.distributeByClause_return retval = new HiveParser.distributeByClause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_DISTRIBUTE905=null;
        Token KW_BY906=null;
        Token LPAREN907=null;
        Token COMMA909=null;
        Token RPAREN911=null;
        Token KW_DISTRIBUTE912=null;
        Token KW_BY913=null;
        Token COMMA915=null;
        HiveParser.expression_return expression908 =null;

        HiveParser.expression_return expression910 =null;

        HiveParser.expression_return expression914 =null;

        HiveParser.expression_return expression916 =null;


        CommonTree KW_DISTRIBUTE905_tree=null;
        CommonTree KW_BY906_tree=null;
        CommonTree LPAREN907_tree=null;
        CommonTree COMMA909_tree=null;
        CommonTree RPAREN911_tree=null;
        CommonTree KW_DISTRIBUTE912_tree=null;
        CommonTree KW_BY913_tree=null;
        CommonTree COMMA915_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_KW_DISTRIBUTE=new RewriteRuleTokenStream(adaptor,"token KW_DISTRIBUTE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
         msgs.push("distribute by clause"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1958:5: ( KW_DISTRIBUTE KW_BY LPAREN expression ( COMMA expression )* RPAREN -> ^( TOK_DISTRIBUTEBY ( expression )+ ) | KW_DISTRIBUTE KW_BY expression ( COMMA expression )* -> ^( TOK_DISTRIBUTEBY ( expression )+ ) )
            int alt270=2;
            int LA270_0 = input.LA(1);

            if ( (LA270_0==KW_DISTRIBUTE) ) {
                int LA270_1 = input.LA(2);

                if ( (LA270_1==KW_BY) ) {
                    int LA270_2 = input.LA(3);

                    if ( (LA270_2==LPAREN) ) {
                        alt270=1;
                    }
                    else if ( (LA270_2==BigintLiteral||LA270_2==CharSetName||LA270_2==Identifier||LA270_2==KW_ARRAY||(LA270_2 >= KW_CASE && LA270_2 <= KW_CAST)||LA270_2==KW_FALSE||LA270_2==KW_IF||LA270_2==KW_MAP||LA270_2==KW_NOT||LA270_2==KW_NULL||LA270_2==KW_STRUCT||LA270_2==KW_TRUE||LA270_2==KW_UNIONTYPE||LA270_2==MINUS||(LA270_2 >= Number && LA270_2 <= PLUS)||(LA270_2 >= SmallintLiteral && LA270_2 <= TILDE)||LA270_2==TinyintLiteral) ) {
                        alt270=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("", 270, 2, input);

                        throw nvae;

                    }
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("", 270, 1, input);

                    throw nvae;

                }
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 270, 0, input);

                throw nvae;

            }
            switch (alt270) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1959:5: KW_DISTRIBUTE KW_BY LPAREN expression ( COMMA expression )* RPAREN
                    {
                    KW_DISTRIBUTE905=(Token)match(input,KW_DISTRIBUTE,FOLLOW_KW_DISTRIBUTE_in_distributeByClause14244);  
                    stream_KW_DISTRIBUTE.add(KW_DISTRIBUTE905);


                    KW_BY906=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_distributeByClause14246);  
                    stream_KW_BY.add(KW_BY906);


                    LPAREN907=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_distributeByClause14252);  
                    stream_LPAREN.add(LPAREN907);


                    pushFollow(FOLLOW_expression_in_distributeByClause14254);
                    expression908=expression();

                    state._fsp--;

                    stream_expression.add(expression908.getTree());

                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1960:23: ( COMMA expression )*
                    loop268:
                    do {
                        int alt268=2;
                        int LA268_0 = input.LA(1);

                        if ( (LA268_0==COMMA) ) {
                            alt268=1;
                        }


                        switch (alt268) {
                    	case 1 :
                    	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1960:24: COMMA expression
                    	    {
                    	    COMMA909=(Token)match(input,COMMA,FOLLOW_COMMA_in_distributeByClause14257);  
                    	    stream_COMMA.add(COMMA909);


                    	    pushFollow(FOLLOW_expression_in_distributeByClause14259);
                    	    expression910=expression();

                    	    state._fsp--;

                    	    stream_expression.add(expression910.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop268;
                        }
                    } while (true);


                    RPAREN911=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_distributeByClause14263);  
                    stream_RPAREN.add(RPAREN911);


                    // AST REWRITE
                    // elements: expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1960:50: -> ^( TOK_DISTRIBUTEBY ( expression )+ )
                    {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1960:53: ^( TOK_DISTRIBUTEBY ( expression )+ )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_DISTRIBUTEBY, "TOK_DISTRIBUTEBY")
                        , root_1);

                        if ( !(stream_expression.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_1, stream_expression.nextTree());

                        }
                        stream_expression.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 2 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1962:5: KW_DISTRIBUTE KW_BY expression ( COMMA expression )*
                    {
                    KW_DISTRIBUTE912=(Token)match(input,KW_DISTRIBUTE,FOLLOW_KW_DISTRIBUTE_in_distributeByClause14284);  
                    stream_KW_DISTRIBUTE.add(KW_DISTRIBUTE912);


                    KW_BY913=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_distributeByClause14286);  
                    stream_KW_BY.add(KW_BY913);


                    pushFollow(FOLLOW_expression_in_distributeByClause14292);
                    expression914=expression();

                    state._fsp--;

                    stream_expression.add(expression914.getTree());

                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1963:16: ( COMMA expression )*
                    loop269:
                    do {
                        int alt269=2;
                        int LA269_0 = input.LA(1);

                        if ( (LA269_0==COMMA) ) {
                            alt269=1;
                        }


                        switch (alt269) {
                    	case 1 :
                    	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1963:17: COMMA expression
                    	    {
                    	    COMMA915=(Token)match(input,COMMA,FOLLOW_COMMA_in_distributeByClause14295);  
                    	    stream_COMMA.add(COMMA915);


                    	    pushFollow(FOLLOW_expression_in_distributeByClause14297);
                    	    expression916=expression();

                    	    state._fsp--;

                    	    stream_expression.add(expression916.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop269;
                        }
                    } while (true);


                    // AST REWRITE
                    // elements: expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1963:36: -> ^( TOK_DISTRIBUTEBY ( expression )+ )
                    {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1963:39: ^( TOK_DISTRIBUTEBY ( expression )+ )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_DISTRIBUTEBY, "TOK_DISTRIBUTEBY")
                        , root_1);

                        if ( !(stream_expression.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_1, stream_expression.nextTree());

                        }
                        stream_expression.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "distributeByClause"


    public static class sortByClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "sortByClause"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1966:1: sortByClause : ( KW_SORT KW_BY LPAREN columnRefOrder ( COMMA columnRefOrder )* RPAREN -> ^( TOK_SORTBY ( columnRefOrder )+ ) | KW_SORT KW_BY columnRefOrder ( COMMA columnRefOrder )* -> ^( TOK_SORTBY ( columnRefOrder )+ ) );
    public final HiveParser.sortByClause_return sortByClause() throws RecognitionException {
        HiveParser.sortByClause_return retval = new HiveParser.sortByClause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_SORT917=null;
        Token KW_BY918=null;
        Token LPAREN919=null;
        Token COMMA921=null;
        Token RPAREN923=null;
        Token KW_SORT924=null;
        Token KW_BY925=null;
        Token COMMA927=null;
        HiveParser.columnRefOrder_return columnRefOrder920 =null;

        HiveParser.columnRefOrder_return columnRefOrder922 =null;

        HiveParser.columnRefOrder_return columnRefOrder926 =null;

        HiveParser.columnRefOrder_return columnRefOrder928 =null;


        CommonTree KW_SORT917_tree=null;
        CommonTree KW_BY918_tree=null;
        CommonTree LPAREN919_tree=null;
        CommonTree COMMA921_tree=null;
        CommonTree RPAREN923_tree=null;
        CommonTree KW_SORT924_tree=null;
        CommonTree KW_BY925_tree=null;
        CommonTree COMMA927_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_KW_SORT=new RewriteRuleTokenStream(adaptor,"token KW_SORT");
        RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");
        RewriteRuleSubtreeStream stream_columnRefOrder=new RewriteRuleSubtreeStream(adaptor,"rule columnRefOrder");
         msgs.push("sort by clause"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1969:5: ( KW_SORT KW_BY LPAREN columnRefOrder ( COMMA columnRefOrder )* RPAREN -> ^( TOK_SORTBY ( columnRefOrder )+ ) | KW_SORT KW_BY columnRefOrder ( COMMA columnRefOrder )* -> ^( TOK_SORTBY ( columnRefOrder )+ ) )
            int alt273=2;
            int LA273_0 = input.LA(1);

            if ( (LA273_0==KW_SORT) ) {
                int LA273_1 = input.LA(2);

                if ( (LA273_1==KW_BY) ) {
                    int LA273_2 = input.LA(3);

                    if ( (LA273_2==LPAREN) ) {
                        alt273=1;
                    }
                    else if ( (LA273_2==BigintLiteral||LA273_2==CharSetName||LA273_2==Identifier||LA273_2==KW_ARRAY||(LA273_2 >= KW_CASE && LA273_2 <= KW_CAST)||LA273_2==KW_FALSE||LA273_2==KW_IF||LA273_2==KW_MAP||LA273_2==KW_NOT||LA273_2==KW_NULL||LA273_2==KW_STRUCT||LA273_2==KW_TRUE||LA273_2==KW_UNIONTYPE||LA273_2==MINUS||(LA273_2 >= Number && LA273_2 <= PLUS)||(LA273_2 >= SmallintLiteral && LA273_2 <= TILDE)||LA273_2==TinyintLiteral) ) {
                        alt273=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("", 273, 2, input);

                        throw nvae;

                    }
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("", 273, 1, input);

                    throw nvae;

                }
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 273, 0, input);

                throw nvae;

            }
            switch (alt273) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1970:5: KW_SORT KW_BY LPAREN columnRefOrder ( COMMA columnRefOrder )* RPAREN
                    {
                    KW_SORT917=(Token)match(input,KW_SORT,FOLLOW_KW_SORT_in_sortByClause14339);  
                    stream_KW_SORT.add(KW_SORT917);


                    KW_BY918=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_sortByClause14341);  
                    stream_KW_BY.add(KW_BY918);


                    LPAREN919=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_sortByClause14347);  
                    stream_LPAREN.add(LPAREN919);


                    pushFollow(FOLLOW_columnRefOrder_in_sortByClause14349);
                    columnRefOrder920=columnRefOrder();

                    state._fsp--;

                    stream_columnRefOrder.add(columnRefOrder920.getTree());

                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1972:5: ( COMMA columnRefOrder )*
                    loop271:
                    do {
                        int alt271=2;
                        int LA271_0 = input.LA(1);

                        if ( (LA271_0==COMMA) ) {
                            alt271=1;
                        }


                        switch (alt271) {
                    	case 1 :
                    	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1972:7: COMMA columnRefOrder
                    	    {
                    	    COMMA921=(Token)match(input,COMMA,FOLLOW_COMMA_in_sortByClause14357);  
                    	    stream_COMMA.add(COMMA921);


                    	    pushFollow(FOLLOW_columnRefOrder_in_sortByClause14359);
                    	    columnRefOrder922=columnRefOrder();

                    	    state._fsp--;

                    	    stream_columnRefOrder.add(columnRefOrder922.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop271;
                        }
                    } while (true);


                    RPAREN923=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_sortByClause14363);  
                    stream_RPAREN.add(RPAREN923);


                    // AST REWRITE
                    // elements: columnRefOrder
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1972:37: -> ^( TOK_SORTBY ( columnRefOrder )+ )
                    {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1972:40: ^( TOK_SORTBY ( columnRefOrder )+ )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_SORTBY, "TOK_SORTBY")
                        , root_1);

                        if ( !(stream_columnRefOrder.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_columnRefOrder.hasNext() ) {
                            adaptor.addChild(root_1, stream_columnRefOrder.nextTree());

                        }
                        stream_columnRefOrder.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 2 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1974:5: KW_SORT KW_BY columnRefOrder ( COMMA columnRefOrder )*
                    {
                    KW_SORT924=(Token)match(input,KW_SORT,FOLLOW_KW_SORT_in_sortByClause14384);  
                    stream_KW_SORT.add(KW_SORT924);


                    KW_BY925=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_sortByClause14386);  
                    stream_KW_BY.add(KW_BY925);


                    pushFollow(FOLLOW_columnRefOrder_in_sortByClause14392);
                    columnRefOrder926=columnRefOrder();

                    state._fsp--;

                    stream_columnRefOrder.add(columnRefOrder926.getTree());

                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1976:5: ( COMMA columnRefOrder )*
                    loop272:
                    do {
                        int alt272=2;
                        int LA272_0 = input.LA(1);

                        if ( (LA272_0==COMMA) ) {
                            alt272=1;
                        }


                        switch (alt272) {
                    	case 1 :
                    	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1976:7: COMMA columnRefOrder
                    	    {
                    	    COMMA927=(Token)match(input,COMMA,FOLLOW_COMMA_in_sortByClause14400);  
                    	    stream_COMMA.add(COMMA927);


                    	    pushFollow(FOLLOW_columnRefOrder_in_sortByClause14402);
                    	    columnRefOrder928=columnRefOrder();

                    	    state._fsp--;

                    	    stream_columnRefOrder.add(columnRefOrder928.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop272;
                        }
                    } while (true);


                    // AST REWRITE
                    // elements: columnRefOrder
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1976:30: -> ^( TOK_SORTBY ( columnRefOrder )+ )
                    {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1976:33: ^( TOK_SORTBY ( columnRefOrder )+ )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_SORTBY, "TOK_SORTBY")
                        , root_1);

                        if ( !(stream_columnRefOrder.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_columnRefOrder.hasNext() ) {
                            adaptor.addChild(root_1, stream_columnRefOrder.nextTree());

                        }
                        stream_columnRefOrder.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "sortByClause"


    public static class function_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "function"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1980:1: function : functionName LPAREN ( (star= STAR ) | (dist= KW_DISTINCT )? ( expression ( COMMA expression )* )? ) RPAREN -> {$star != null}? ^( TOK_FUNCTIONSTAR functionName ) -> {$dist == null}? ^( TOK_FUNCTION functionName ( ( expression )+ )? ) -> ^( TOK_FUNCTIONDI functionName ( ( expression )+ )? ) ;
    public final HiveParser.function_return function() throws RecognitionException {
        HiveParser.function_return retval = new HiveParser.function_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token star=null;
        Token dist=null;
        Token LPAREN930=null;
        Token COMMA932=null;
        Token RPAREN934=null;
        HiveParser.functionName_return functionName929 =null;

        HiveParser.expression_return expression931 =null;

        HiveParser.expression_return expression933 =null;


        CommonTree star_tree=null;
        CommonTree dist_tree=null;
        CommonTree LPAREN930_tree=null;
        CommonTree COMMA932_tree=null;
        CommonTree RPAREN934_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_KW_DISTINCT=new RewriteRuleTokenStream(adaptor,"token KW_DISTINCT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_functionName=new RewriteRuleSubtreeStream(adaptor,"rule functionName");
         msgs.push("function specification"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1983:5: ( functionName LPAREN ( (star= STAR ) | (dist= KW_DISTINCT )? ( expression ( COMMA expression )* )? ) RPAREN -> {$star != null}? ^( TOK_FUNCTIONSTAR functionName ) -> {$dist == null}? ^( TOK_FUNCTION functionName ( ( expression )+ )? ) -> ^( TOK_FUNCTIONDI functionName ( ( expression )+ )? ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1984:5: functionName LPAREN ( (star= STAR ) | (dist= KW_DISTINCT )? ( expression ( COMMA expression )* )? ) RPAREN
            {
            pushFollow(FOLLOW_functionName_in_function14445);
            functionName929=functionName();

            state._fsp--;

            stream_functionName.add(functionName929.getTree());

            LPAREN930=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_function14451);  
            stream_LPAREN.add(LPAREN930);


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1986:7: ( (star= STAR ) | (dist= KW_DISTINCT )? ( expression ( COMMA expression )* )? )
            int alt277=2;
            int LA277_0 = input.LA(1);

            if ( (LA277_0==STAR) ) {
                alt277=1;
            }
            else if ( (LA277_0==BigintLiteral||LA277_0==CharSetName||LA277_0==Identifier||LA277_0==KW_ARRAY||(LA277_0 >= KW_CASE && LA277_0 <= KW_CAST)||LA277_0==KW_DISTINCT||LA277_0==KW_FALSE||LA277_0==KW_IF||LA277_0==KW_MAP||LA277_0==KW_NOT||LA277_0==KW_NULL||LA277_0==KW_STRUCT||LA277_0==KW_TRUE||LA277_0==KW_UNIONTYPE||LA277_0==LPAREN||LA277_0==MINUS||(LA277_0 >= Number && LA277_0 <= PLUS)||LA277_0==RPAREN||(LA277_0 >= SmallintLiteral && LA277_0 <= TILDE)||LA277_0==TinyintLiteral) ) {
                alt277=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 277, 0, input);

                throw nvae;

            }
            switch (alt277) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1987:9: (star= STAR )
                    {
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1987:9: (star= STAR )
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1987:10: star= STAR
                    {
                    star=(Token)match(input,STAR,FOLLOW_STAR_in_function14472);  
                    stream_STAR.add(star);


                    }


                    }
                    break;
                case 2 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1988:11: (dist= KW_DISTINCT )? ( expression ( COMMA expression )* )?
                    {
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1988:11: (dist= KW_DISTINCT )?
                    int alt274=2;
                    int LA274_0 = input.LA(1);

                    if ( (LA274_0==KW_DISTINCT) ) {
                        alt274=1;
                    }
                    switch (alt274) {
                        case 1 :
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1988:12: dist= KW_DISTINCT
                            {
                            dist=(Token)match(input,KW_DISTINCT,FOLLOW_KW_DISTINCT_in_function14488);  
                            stream_KW_DISTINCT.add(dist);


                            }
                            break;

                    }


                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1988:31: ( expression ( COMMA expression )* )?
                    int alt276=2;
                    int LA276_0 = input.LA(1);

                    if ( (LA276_0==BigintLiteral||LA276_0==CharSetName||LA276_0==Identifier||LA276_0==KW_ARRAY||(LA276_0 >= KW_CASE && LA276_0 <= KW_CAST)||LA276_0==KW_FALSE||LA276_0==KW_IF||LA276_0==KW_MAP||LA276_0==KW_NOT||LA276_0==KW_NULL||LA276_0==KW_STRUCT||LA276_0==KW_TRUE||LA276_0==KW_UNIONTYPE||LA276_0==LPAREN||LA276_0==MINUS||(LA276_0 >= Number && LA276_0 <= PLUS)||(LA276_0 >= SmallintLiteral && LA276_0 <= TILDE)||LA276_0==TinyintLiteral) ) {
                        alt276=1;
                    }
                    switch (alt276) {
                        case 1 :
                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1988:32: expression ( COMMA expression )*
                            {
                            pushFollow(FOLLOW_expression_in_function14493);
                            expression931=expression();

                            state._fsp--;

                            stream_expression.add(expression931.getTree());

                            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1988:43: ( COMMA expression )*
                            loop275:
                            do {
                                int alt275=2;
                                int LA275_0 = input.LA(1);

                                if ( (LA275_0==COMMA) ) {
                                    alt275=1;
                                }


                                switch (alt275) {
                            	case 1 :
                            	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1988:44: COMMA expression
                            	    {
                            	    COMMA932=(Token)match(input,COMMA,FOLLOW_COMMA_in_function14496);  
                            	    stream_COMMA.add(COMMA932);


                            	    pushFollow(FOLLOW_expression_in_function14498);
                            	    expression933=expression();

                            	    state._fsp--;

                            	    stream_expression.add(expression933.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop275;
                                }
                            } while (true);


                            }
                            break;

                    }


                    }
                    break;

            }


            RPAREN934=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_function14516);  
            stream_RPAREN.add(RPAREN934);


            // AST REWRITE
            // elements: functionName, expression, functionName, functionName, expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1990:12: -> {$star != null}? ^( TOK_FUNCTIONSTAR functionName )
            if (star != null) {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1990:32: ^( TOK_FUNCTIONSTAR functionName )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_FUNCTIONSTAR, "TOK_FUNCTIONSTAR")
                , root_1);

                adaptor.addChild(root_1, stream_functionName.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 1991:12: -> {$dist == null}? ^( TOK_FUNCTION functionName ( ( expression )+ )? )
            if (dist == null) {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1991:32: ^( TOK_FUNCTION functionName ( ( expression )+ )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_FUNCTION, "TOK_FUNCTION")
                , root_1);

                adaptor.addChild(root_1, stream_functionName.nextTree());

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1991:60: ( ( expression )+ )?
                if ( stream_expression.hasNext() ) {
                    if ( !(stream_expression.hasNext()) ) {
                        throw new RewriteEarlyExitException();
                    }
                    while ( stream_expression.hasNext() ) {
                        adaptor.addChild(root_1, stream_expression.nextTree());

                    }
                    stream_expression.reset();

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 1992:29: -> ^( TOK_FUNCTIONDI functionName ( ( expression )+ )? )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1992:32: ^( TOK_FUNCTIONDI functionName ( ( expression )+ )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_FUNCTIONDI, "TOK_FUNCTIONDI")
                , root_1);

                adaptor.addChild(root_1, stream_functionName.nextTree());

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1992:62: ( ( expression )+ )?
                if ( stream_expression.hasNext() ) {
                    if ( !(stream_expression.hasNext()) ) {
                        throw new RewriteEarlyExitException();
                    }
                    while ( stream_expression.hasNext() ) {
                        adaptor.addChild(root_1, stream_expression.nextTree());

                    }
                    stream_expression.reset();

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "function"


    public static class functionName_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "functionName"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1995:1: functionName : ( Identifier | KW_IF | KW_ARRAY | KW_MAP | KW_STRUCT | KW_UNIONTYPE );
    public final HiveParser.functionName_return functionName() throws RecognitionException {
        HiveParser.functionName_return retval = new HiveParser.functionName_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token set935=null;

        CommonTree set935_tree=null;

         msgs.push("function name"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1998:5: ( Identifier | KW_IF | KW_ARRAY | KW_MAP | KW_STRUCT | KW_UNIONTYPE )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:
            {
            root_0 = (CommonTree)adaptor.nil();


            set935=(Token)input.LT(1);

            if ( input.LA(1)==Identifier||input.LA(1)==KW_ARRAY||input.LA(1)==KW_IF||input.LA(1)==KW_MAP||input.LA(1)==KW_STRUCT||input.LA(1)==KW_UNIONTYPE ) {
                input.consume();
                adaptor.addChild(root_0, 
                (CommonTree)adaptor.create(set935)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "functionName"


    public static class castExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "castExpression"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2002:1: castExpression : KW_CAST LPAREN expression KW_AS primitiveType RPAREN -> ^( TOK_FUNCTION primitiveType expression ) ;
    public final HiveParser.castExpression_return castExpression() throws RecognitionException {
        HiveParser.castExpression_return retval = new HiveParser.castExpression_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_CAST936=null;
        Token LPAREN937=null;
        Token KW_AS939=null;
        Token RPAREN941=null;
        HiveParser.expression_return expression938 =null;

        HiveParser.primitiveType_return primitiveType940 =null;


        CommonTree KW_CAST936_tree=null;
        CommonTree LPAREN937_tree=null;
        CommonTree KW_AS939_tree=null;
        CommonTree RPAREN941_tree=null;
        RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_KW_CAST=new RewriteRuleTokenStream(adaptor,"token KW_CAST");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_primitiveType=new RewriteRuleSubtreeStream(adaptor,"rule primitiveType");
         msgs.push("cast expression"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2005:5: ( KW_CAST LPAREN expression KW_AS primitiveType RPAREN -> ^( TOK_FUNCTION primitiveType expression ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2006:5: KW_CAST LPAREN expression KW_AS primitiveType RPAREN
            {
            KW_CAST936=(Token)match(input,KW_CAST,FOLLOW_KW_CAST_in_castExpression14678);  
            stream_KW_CAST.add(KW_CAST936);


            LPAREN937=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_castExpression14684);  
            stream_LPAREN.add(LPAREN937);


            pushFollow(FOLLOW_expression_in_castExpression14696);
            expression938=expression();

            state._fsp--;

            stream_expression.add(expression938.getTree());

            KW_AS939=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_castExpression14708);  
            stream_KW_AS.add(KW_AS939);


            pushFollow(FOLLOW_primitiveType_in_castExpression14720);
            primitiveType940=primitiveType();

            state._fsp--;

            stream_primitiveType.add(primitiveType940.getTree());

            RPAREN941=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_castExpression14726);  
            stream_RPAREN.add(RPAREN941);


            // AST REWRITE
            // elements: primitiveType, expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 2011:12: -> ^( TOK_FUNCTION primitiveType expression )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2011:15: ^( TOK_FUNCTION primitiveType expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_FUNCTION, "TOK_FUNCTION")
                , root_1);

                adaptor.addChild(root_1, stream_primitiveType.nextTree());

                adaptor.addChild(root_1, stream_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "castExpression"


    public static class caseExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "caseExpression"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2014:1: caseExpression : KW_CASE expression ( KW_WHEN expression KW_THEN expression )+ ( KW_ELSE expression )? KW_END -> ^( TOK_FUNCTION KW_CASE ( expression )* ) ;
    public final HiveParser.caseExpression_return caseExpression() throws RecognitionException {
        HiveParser.caseExpression_return retval = new HiveParser.caseExpression_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_CASE942=null;
        Token KW_WHEN944=null;
        Token KW_THEN946=null;
        Token KW_ELSE948=null;
        Token KW_END950=null;
        HiveParser.expression_return expression943 =null;

        HiveParser.expression_return expression945 =null;

        HiveParser.expression_return expression947 =null;

        HiveParser.expression_return expression949 =null;


        CommonTree KW_CASE942_tree=null;
        CommonTree KW_WHEN944_tree=null;
        CommonTree KW_THEN946_tree=null;
        CommonTree KW_ELSE948_tree=null;
        CommonTree KW_END950_tree=null;
        RewriteRuleTokenStream stream_KW_THEN=new RewriteRuleTokenStream(adaptor,"token KW_THEN");
        RewriteRuleTokenStream stream_KW_CASE=new RewriteRuleTokenStream(adaptor,"token KW_CASE");
        RewriteRuleTokenStream stream_KW_WHEN=new RewriteRuleTokenStream(adaptor,"token KW_WHEN");
        RewriteRuleTokenStream stream_KW_END=new RewriteRuleTokenStream(adaptor,"token KW_END");
        RewriteRuleTokenStream stream_KW_ELSE=new RewriteRuleTokenStream(adaptor,"token KW_ELSE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
         msgs.push("case expression"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2017:5: ( KW_CASE expression ( KW_WHEN expression KW_THEN expression )+ ( KW_ELSE expression )? KW_END -> ^( TOK_FUNCTION KW_CASE ( expression )* ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2018:5: KW_CASE expression ( KW_WHEN expression KW_THEN expression )+ ( KW_ELSE expression )? KW_END
            {
            KW_CASE942=(Token)match(input,KW_CASE,FOLLOW_KW_CASE_in_caseExpression14767);  
            stream_KW_CASE.add(KW_CASE942);


            pushFollow(FOLLOW_expression_in_caseExpression14769);
            expression943=expression();

            state._fsp--;

            stream_expression.add(expression943.getTree());

            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2019:5: ( KW_WHEN expression KW_THEN expression )+
            int cnt278=0;
            loop278:
            do {
                int alt278=2;
                int LA278_0 = input.LA(1);

                if ( (LA278_0==KW_WHEN) ) {
                    alt278=1;
                }


                switch (alt278) {
            	case 1 :
            	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2019:6: KW_WHEN expression KW_THEN expression
            	    {
            	    KW_WHEN944=(Token)match(input,KW_WHEN,FOLLOW_KW_WHEN_in_caseExpression14776);  
            	    stream_KW_WHEN.add(KW_WHEN944);


            	    pushFollow(FOLLOW_expression_in_caseExpression14778);
            	    expression945=expression();

            	    state._fsp--;

            	    stream_expression.add(expression945.getTree());

            	    KW_THEN946=(Token)match(input,KW_THEN,FOLLOW_KW_THEN_in_caseExpression14780);  
            	    stream_KW_THEN.add(KW_THEN946);


            	    pushFollow(FOLLOW_expression_in_caseExpression14782);
            	    expression947=expression();

            	    state._fsp--;

            	    stream_expression.add(expression947.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt278 >= 1 ) break loop278;
                        EarlyExitException eee =
                            new EarlyExitException(278, input);
                        throw eee;
                }
                cnt278++;
            } while (true);


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2020:5: ( KW_ELSE expression )?
            int alt279=2;
            int LA279_0 = input.LA(1);

            if ( (LA279_0==KW_ELSE) ) {
                alt279=1;
            }
            switch (alt279) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2020:6: KW_ELSE expression
                    {
                    KW_ELSE948=(Token)match(input,KW_ELSE,FOLLOW_KW_ELSE_in_caseExpression14791);  
                    stream_KW_ELSE.add(KW_ELSE948);


                    pushFollow(FOLLOW_expression_in_caseExpression14793);
                    expression949=expression();

                    state._fsp--;

                    stream_expression.add(expression949.getTree());

                    }
                    break;

            }


            KW_END950=(Token)match(input,KW_END,FOLLOW_KW_END_in_caseExpression14801);  
            stream_KW_END.add(KW_END950);


            // AST REWRITE
            // elements: expression, KW_CASE
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 2021:12: -> ^( TOK_FUNCTION KW_CASE ( expression )* )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2021:15: ^( TOK_FUNCTION KW_CASE ( expression )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_FUNCTION, "TOK_FUNCTION")
                , root_1);

                adaptor.addChild(root_1, 
                stream_KW_CASE.nextNode()
                );

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2021:38: ( expression )*
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "caseExpression"


    public static class whenExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "whenExpression"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2024:1: whenExpression : KW_CASE ( KW_WHEN expression KW_THEN expression )+ ( KW_ELSE expression )? KW_END -> ^( TOK_FUNCTION KW_WHEN ( expression )* ) ;
    public final HiveParser.whenExpression_return whenExpression() throws RecognitionException {
        HiveParser.whenExpression_return retval = new HiveParser.whenExpression_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_CASE951=null;
        Token KW_WHEN952=null;
        Token KW_THEN954=null;
        Token KW_ELSE956=null;
        Token KW_END958=null;
        HiveParser.expression_return expression953 =null;

        HiveParser.expression_return expression955 =null;

        HiveParser.expression_return expression957 =null;


        CommonTree KW_CASE951_tree=null;
        CommonTree KW_WHEN952_tree=null;
        CommonTree KW_THEN954_tree=null;
        CommonTree KW_ELSE956_tree=null;
        CommonTree KW_END958_tree=null;
        RewriteRuleTokenStream stream_KW_THEN=new RewriteRuleTokenStream(adaptor,"token KW_THEN");
        RewriteRuleTokenStream stream_KW_CASE=new RewriteRuleTokenStream(adaptor,"token KW_CASE");
        RewriteRuleTokenStream stream_KW_WHEN=new RewriteRuleTokenStream(adaptor,"token KW_WHEN");
        RewriteRuleTokenStream stream_KW_END=new RewriteRuleTokenStream(adaptor,"token KW_END");
        RewriteRuleTokenStream stream_KW_ELSE=new RewriteRuleTokenStream(adaptor,"token KW_ELSE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
         msgs.push("case expression"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2027:5: ( KW_CASE ( KW_WHEN expression KW_THEN expression )+ ( KW_ELSE expression )? KW_END -> ^( TOK_FUNCTION KW_WHEN ( expression )* ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2028:5: KW_CASE ( KW_WHEN expression KW_THEN expression )+ ( KW_ELSE expression )? KW_END
            {
            KW_CASE951=(Token)match(input,KW_CASE,FOLLOW_KW_CASE_in_whenExpression14843);  
            stream_KW_CASE.add(KW_CASE951);


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2029:6: ( KW_WHEN expression KW_THEN expression )+
            int cnt280=0;
            loop280:
            do {
                int alt280=2;
                int LA280_0 = input.LA(1);

                if ( (LA280_0==KW_WHEN) ) {
                    alt280=1;
                }


                switch (alt280) {
            	case 1 :
            	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2029:8: KW_WHEN expression KW_THEN expression
            	    {
            	    KW_WHEN952=(Token)match(input,KW_WHEN,FOLLOW_KW_WHEN_in_whenExpression14852);  
            	    stream_KW_WHEN.add(KW_WHEN952);


            	    pushFollow(FOLLOW_expression_in_whenExpression14854);
            	    expression953=expression();

            	    state._fsp--;

            	    stream_expression.add(expression953.getTree());

            	    KW_THEN954=(Token)match(input,KW_THEN,FOLLOW_KW_THEN_in_whenExpression14856);  
            	    stream_KW_THEN.add(KW_THEN954);


            	    pushFollow(FOLLOW_expression_in_whenExpression14858);
            	    expression955=expression();

            	    state._fsp--;

            	    stream_expression.add(expression955.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt280 >= 1 ) break loop280;
                        EarlyExitException eee =
                            new EarlyExitException(280, input);
                        throw eee;
                }
                cnt280++;
            } while (true);


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2030:5: ( KW_ELSE expression )?
            int alt281=2;
            int LA281_0 = input.LA(1);

            if ( (LA281_0==KW_ELSE) ) {
                alt281=1;
            }
            switch (alt281) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2030:6: KW_ELSE expression
                    {
                    KW_ELSE956=(Token)match(input,KW_ELSE,FOLLOW_KW_ELSE_in_whenExpression14867);  
                    stream_KW_ELSE.add(KW_ELSE956);


                    pushFollow(FOLLOW_expression_in_whenExpression14869);
                    expression957=expression();

                    state._fsp--;

                    stream_expression.add(expression957.getTree());

                    }
                    break;

            }


            KW_END958=(Token)match(input,KW_END,FOLLOW_KW_END_in_whenExpression14877);  
            stream_KW_END.add(KW_END958);


            // AST REWRITE
            // elements: expression, KW_WHEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 2031:12: -> ^( TOK_FUNCTION KW_WHEN ( expression )* )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2031:15: ^( TOK_FUNCTION KW_WHEN ( expression )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_FUNCTION, "TOK_FUNCTION")
                , root_1);

                adaptor.addChild(root_1, 
                stream_KW_WHEN.nextNode()
                );

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2031:38: ( expression )*
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "whenExpression"


    public static class constant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "constant"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2034:1: constant : ( Number | StringLiteral | stringLiteralSequence | BigintLiteral | SmallintLiteral | TinyintLiteral | charSetStringLiteral | booleanValue );
    public final HiveParser.constant_return constant() throws RecognitionException {
        HiveParser.constant_return retval = new HiveParser.constant_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token Number959=null;
        Token StringLiteral960=null;
        Token BigintLiteral962=null;
        Token SmallintLiteral963=null;
        Token TinyintLiteral964=null;
        HiveParser.stringLiteralSequence_return stringLiteralSequence961 =null;

        HiveParser.charSetStringLiteral_return charSetStringLiteral965 =null;

        HiveParser.booleanValue_return booleanValue966 =null;


        CommonTree Number959_tree=null;
        CommonTree StringLiteral960_tree=null;
        CommonTree BigintLiteral962_tree=null;
        CommonTree SmallintLiteral963_tree=null;
        CommonTree TinyintLiteral964_tree=null;

         msgs.push("constant"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2037:5: ( Number | StringLiteral | stringLiteralSequence | BigintLiteral | SmallintLiteral | TinyintLiteral | charSetStringLiteral | booleanValue )
            int alt282=8;
            alt282 = dfa282.predict(input);
            switch (alt282) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2038:5: Number
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    Number959=(Token)match(input,Number,FOLLOW_Number_in_constant14919); 
                    Number959_tree = 
                    (CommonTree)adaptor.create(Number959)
                    ;
                    adaptor.addChild(root_0, Number959_tree);


                    }
                    break;
                case 2 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2039:7: StringLiteral
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    StringLiteral960=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_constant14927); 
                    StringLiteral960_tree = 
                    (CommonTree)adaptor.create(StringLiteral960)
                    ;
                    adaptor.addChild(root_0, StringLiteral960_tree);


                    }
                    break;
                case 3 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2040:7: stringLiteralSequence
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_stringLiteralSequence_in_constant14935);
                    stringLiteralSequence961=stringLiteralSequence();

                    state._fsp--;

                    adaptor.addChild(root_0, stringLiteralSequence961.getTree());

                    }
                    break;
                case 4 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2041:7: BigintLiteral
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    BigintLiteral962=(Token)match(input,BigintLiteral,FOLLOW_BigintLiteral_in_constant14943); 
                    BigintLiteral962_tree = 
                    (CommonTree)adaptor.create(BigintLiteral962)
                    ;
                    adaptor.addChild(root_0, BigintLiteral962_tree);


                    }
                    break;
                case 5 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2042:7: SmallintLiteral
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    SmallintLiteral963=(Token)match(input,SmallintLiteral,FOLLOW_SmallintLiteral_in_constant14951); 
                    SmallintLiteral963_tree = 
                    (CommonTree)adaptor.create(SmallintLiteral963)
                    ;
                    adaptor.addChild(root_0, SmallintLiteral963_tree);


                    }
                    break;
                case 6 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2043:7: TinyintLiteral
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    TinyintLiteral964=(Token)match(input,TinyintLiteral,FOLLOW_TinyintLiteral_in_constant14959); 
                    TinyintLiteral964_tree = 
                    (CommonTree)adaptor.create(TinyintLiteral964)
                    ;
                    adaptor.addChild(root_0, TinyintLiteral964_tree);


                    }
                    break;
                case 7 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2044:7: charSetStringLiteral
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_charSetStringLiteral_in_constant14967);
                    charSetStringLiteral965=charSetStringLiteral();

                    state._fsp--;

                    adaptor.addChild(root_0, charSetStringLiteral965.getTree());

                    }
                    break;
                case 8 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2045:7: booleanValue
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_booleanValue_in_constant14975);
                    booleanValue966=booleanValue();

                    state._fsp--;

                    adaptor.addChild(root_0, booleanValue966.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "constant"


    public static class stringLiteralSequence_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stringLiteralSequence"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2048:1: stringLiteralSequence : StringLiteral ( StringLiteral )+ -> ^( TOK_STRINGLITERALSEQUENCE StringLiteral ( StringLiteral )+ ) ;
    public final HiveParser.stringLiteralSequence_return stringLiteralSequence() throws RecognitionException {
        HiveParser.stringLiteralSequence_return retval = new HiveParser.stringLiteralSequence_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token StringLiteral967=null;
        Token StringLiteral968=null;

        CommonTree StringLiteral967_tree=null;
        CommonTree StringLiteral968_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");

        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2049:5: ( StringLiteral ( StringLiteral )+ -> ^( TOK_STRINGLITERALSEQUENCE StringLiteral ( StringLiteral )+ ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2050:5: StringLiteral ( StringLiteral )+
            {
            StringLiteral967=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_stringLiteralSequence14996);  
            stream_StringLiteral.add(StringLiteral967);


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2050:19: ( StringLiteral )+
            int cnt283=0;
            loop283:
            do {
                int alt283=2;
                int LA283_0 = input.LA(1);

                if ( (LA283_0==StringLiteral) ) {
                    alt283=1;
                }


                switch (alt283) {
            	case 1 :
            	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2050:19: StringLiteral
            	    {
            	    StringLiteral968=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_stringLiteralSequence14998);  
            	    stream_StringLiteral.add(StringLiteral968);


            	    }
            	    break;

            	default :
            	    if ( cnt283 >= 1 ) break loop283;
                        EarlyExitException eee =
                            new EarlyExitException(283, input);
                        throw eee;
                }
                cnt283++;
            } while (true);


            // AST REWRITE
            // elements: StringLiteral, StringLiteral
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 2050:34: -> ^( TOK_STRINGLITERALSEQUENCE StringLiteral ( StringLiteral )+ )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2050:37: ^( TOK_STRINGLITERALSEQUENCE StringLiteral ( StringLiteral )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_STRINGLITERALSEQUENCE, "TOK_STRINGLITERALSEQUENCE")
                , root_1);

                adaptor.addChild(root_1, 
                stream_StringLiteral.nextNode()
                );

                if ( !(stream_StringLiteral.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_StringLiteral.hasNext() ) {
                    adaptor.addChild(root_1, 
                    stream_StringLiteral.nextNode()
                    );

                }
                stream_StringLiteral.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "stringLiteralSequence"


    public static class charSetStringLiteral_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "charSetStringLiteral"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2053:1: charSetStringLiteral : csName= CharSetName csLiteral= CharSetLiteral -> ^( TOK_CHARSETLITERAL $csName $csLiteral) ;
    public final HiveParser.charSetStringLiteral_return charSetStringLiteral() throws RecognitionException {
        HiveParser.charSetStringLiteral_return retval = new HiveParser.charSetStringLiteral_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token csName=null;
        Token csLiteral=null;

        CommonTree csName_tree=null;
        CommonTree csLiteral_tree=null;
        RewriteRuleTokenStream stream_CharSetLiteral=new RewriteRuleTokenStream(adaptor,"token CharSetLiteral");
        RewriteRuleTokenStream stream_CharSetName=new RewriteRuleTokenStream(adaptor,"token CharSetName");

         msgs.push("character string literal"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2056:5: (csName= CharSetName csLiteral= CharSetLiteral -> ^( TOK_CHARSETLITERAL $csName $csLiteral) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2057:5: csName= CharSetName csLiteral= CharSetLiteral
            {
            csName=(Token)match(input,CharSetName,FOLLOW_CharSetName_in_charSetStringLiteral15043);  
            stream_CharSetName.add(csName);


            csLiteral=(Token)match(input,CharSetLiteral,FOLLOW_CharSetLiteral_in_charSetStringLiteral15047);  
            stream_CharSetLiteral.add(csLiteral);


            // AST REWRITE
            // elements: csLiteral, csName
            // token labels: csName, csLiteral
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_csName=new RewriteRuleTokenStream(adaptor,"token csName",csName);
            RewriteRuleTokenStream stream_csLiteral=new RewriteRuleTokenStream(adaptor,"token csLiteral",csLiteral);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 2057:49: -> ^( TOK_CHARSETLITERAL $csName $csLiteral)
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2057:52: ^( TOK_CHARSETLITERAL $csName $csLiteral)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_CHARSETLITERAL, "TOK_CHARSETLITERAL")
                , root_1);

                adaptor.addChild(root_1, stream_csName.nextNode());

                adaptor.addChild(root_1, stream_csLiteral.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "charSetStringLiteral"


    public static class expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expression"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2060:1: expression : precedenceOrExpression ;
    public final HiveParser.expression_return expression() throws RecognitionException {
        HiveParser.expression_return retval = new HiveParser.expression_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        HiveParser.precedenceOrExpression_return precedenceOrExpression969 =null;



         msgs.push("expression specification"); 
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2063:5: ( precedenceOrExpression )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2064:5: precedenceOrExpression
            {
            root_0 = (CommonTree)adaptor.nil();


            pushFollow(FOLLOW_precedenceOrExpression_in_expression15090);
            precedenceOrExpression969=precedenceOrExpression();

            state._fsp--;

            adaptor.addChild(root_0, precedenceOrExpression969.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expression"


    public static class atomExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "atomExpression"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2067:1: atomExpression : ( KW_NULL -> TOK_NULL | constant | function | castExpression | caseExpression | whenExpression | tableOrColumn | LPAREN ! expression RPAREN !);
    public final HiveParser.atomExpression_return atomExpression() throws RecognitionException {
        HiveParser.atomExpression_return retval = new HiveParser.atomExpression_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_NULL970=null;
        Token LPAREN977=null;
        Token RPAREN979=null;
        HiveParser.constant_return constant971 =null;

        HiveParser.function_return function972 =null;

        HiveParser.castExpression_return castExpression973 =null;

        HiveParser.caseExpression_return caseExpression974 =null;

        HiveParser.whenExpression_return whenExpression975 =null;

        HiveParser.tableOrColumn_return tableOrColumn976 =null;

        HiveParser.expression_return expression978 =null;


        CommonTree KW_NULL970_tree=null;
        CommonTree LPAREN977_tree=null;
        CommonTree RPAREN979_tree=null;
        RewriteRuleTokenStream stream_KW_NULL=new RewriteRuleTokenStream(adaptor,"token KW_NULL");

        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2068:5: ( KW_NULL -> TOK_NULL | constant | function | castExpression | caseExpression | whenExpression | tableOrColumn | LPAREN ! expression RPAREN !)
            int alt284=8;
            alt284 = dfa284.predict(input);
            switch (alt284) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2069:5: KW_NULL
                    {
                    KW_NULL970=(Token)match(input,KW_NULL,FOLLOW_KW_NULL_in_atomExpression15111);  
                    stream_KW_NULL.add(KW_NULL970);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 2069:13: -> TOK_NULL
                    {
                        adaptor.addChild(root_0, 
                        (CommonTree)adaptor.create(TOK_NULL, "TOK_NULL")
                        );

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 2 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2070:7: constant
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_constant_in_atomExpression15123);
                    constant971=constant();

                    state._fsp--;

                    adaptor.addChild(root_0, constant971.getTree());

                    }
                    break;
                case 3 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2071:7: function
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_function_in_atomExpression15131);
                    function972=function();

                    state._fsp--;

                    adaptor.addChild(root_0, function972.getTree());

                    }
                    break;
                case 4 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2072:7: castExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_castExpression_in_atomExpression15139);
                    castExpression973=castExpression();

                    state._fsp--;

                    adaptor.addChild(root_0, castExpression973.getTree());

                    }
                    break;
                case 5 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2073:7: caseExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_caseExpression_in_atomExpression15147);
                    caseExpression974=caseExpression();

                    state._fsp--;

                    adaptor.addChild(root_0, caseExpression974.getTree());

                    }
                    break;
                case 6 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2074:7: whenExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_whenExpression_in_atomExpression15155);
                    whenExpression975=whenExpression();

                    state._fsp--;

                    adaptor.addChild(root_0, whenExpression975.getTree());

                    }
                    break;
                case 7 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2075:7: tableOrColumn
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_tableOrColumn_in_atomExpression15163);
                    tableOrColumn976=tableOrColumn();

                    state._fsp--;

                    adaptor.addChild(root_0, tableOrColumn976.getTree());

                    }
                    break;
                case 8 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2076:7: LPAREN ! expression RPAREN !
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    LPAREN977=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_atomExpression15171); 

                    pushFollow(FOLLOW_expression_in_atomExpression15174);
                    expression978=expression();

                    state._fsp--;

                    adaptor.addChild(root_0, expression978.getTree());

                    RPAREN979=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_atomExpression15176); 

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "atomExpression"


    public static class precedenceFieldExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "precedenceFieldExpression"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2080:1: precedenceFieldExpression : atomExpression ( ( LSQUARE ^ expression RSQUARE !) | ( DOT ^ Identifier ) )* ;
    public final HiveParser.precedenceFieldExpression_return precedenceFieldExpression() throws RecognitionException {
        HiveParser.precedenceFieldExpression_return retval = new HiveParser.precedenceFieldExpression_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token LSQUARE981=null;
        Token RSQUARE983=null;
        Token DOT984=null;
        Token Identifier985=null;
        HiveParser.atomExpression_return atomExpression980 =null;

        HiveParser.expression_return expression982 =null;


        CommonTree LSQUARE981_tree=null;
        CommonTree RSQUARE983_tree=null;
        CommonTree DOT984_tree=null;
        CommonTree Identifier985_tree=null;

        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2081:5: ( atomExpression ( ( LSQUARE ^ expression RSQUARE !) | ( DOT ^ Identifier ) )* )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2082:5: atomExpression ( ( LSQUARE ^ expression RSQUARE !) | ( DOT ^ Identifier ) )*
            {
            root_0 = (CommonTree)adaptor.nil();


            pushFollow(FOLLOW_atomExpression_in_precedenceFieldExpression15199);
            atomExpression980=atomExpression();

            state._fsp--;

            adaptor.addChild(root_0, atomExpression980.getTree());

            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2082:20: ( ( LSQUARE ^ expression RSQUARE !) | ( DOT ^ Identifier ) )*
            loop285:
            do {
                int alt285=3;
                int LA285_0 = input.LA(1);

                if ( (LA285_0==LSQUARE) ) {
                    alt285=1;
                }
                else if ( (LA285_0==DOT) ) {
                    alt285=2;
                }


                switch (alt285) {
            	case 1 :
            	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2082:21: ( LSQUARE ^ expression RSQUARE !)
            	    {
            	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2082:21: ( LSQUARE ^ expression RSQUARE !)
            	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2082:22: LSQUARE ^ expression RSQUARE !
            	    {
            	    LSQUARE981=(Token)match(input,LSQUARE,FOLLOW_LSQUARE_in_precedenceFieldExpression15203); 
            	    LSQUARE981_tree = 
            	    (CommonTree)adaptor.create(LSQUARE981)
            	    ;
            	    root_0 = (CommonTree)adaptor.becomeRoot(LSQUARE981_tree, root_0);


            	    pushFollow(FOLLOW_expression_in_precedenceFieldExpression15206);
            	    expression982=expression();

            	    state._fsp--;

            	    adaptor.addChild(root_0, expression982.getTree());

            	    RSQUARE983=(Token)match(input,RSQUARE,FOLLOW_RSQUARE_in_precedenceFieldExpression15208); 

            	    }


            	    }
            	    break;
            	case 2 :
            	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2082:54: ( DOT ^ Identifier )
            	    {
            	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2082:54: ( DOT ^ Identifier )
            	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2082:55: DOT ^ Identifier
            	    {
            	    DOT984=(Token)match(input,DOT,FOLLOW_DOT_in_precedenceFieldExpression15215); 
            	    DOT984_tree = 
            	    (CommonTree)adaptor.create(DOT984)
            	    ;
            	    root_0 = (CommonTree)adaptor.becomeRoot(DOT984_tree, root_0);


            	    Identifier985=(Token)match(input,Identifier,FOLLOW_Identifier_in_precedenceFieldExpression15218); 
            	    Identifier985_tree = 
            	    (CommonTree)adaptor.create(Identifier985)
            	    ;
            	    adaptor.addChild(root_0, Identifier985_tree);


            	    }


            	    }
            	    break;

            	default :
            	    break loop285;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "precedenceFieldExpression"


    public static class precedenceUnaryOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "precedenceUnaryOperator"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2085:1: precedenceUnaryOperator : ( PLUS | MINUS | TILDE );
    public final HiveParser.precedenceUnaryOperator_return precedenceUnaryOperator() throws RecognitionException {
        HiveParser.precedenceUnaryOperator_return retval = new HiveParser.precedenceUnaryOperator_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token set986=null;

        CommonTree set986_tree=null;

        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2086:5: ( PLUS | MINUS | TILDE )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:
            {
            root_0 = (CommonTree)adaptor.nil();


            set986=(Token)input.LT(1);

            if ( input.LA(1)==MINUS||input.LA(1)==PLUS||input.LA(1)==TILDE ) {
                input.consume();
                adaptor.addChild(root_0, 
                (CommonTree)adaptor.create(set986)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "precedenceUnaryOperator"


    public static class nullCondition_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nullCondition"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2090:1: nullCondition : ( KW_NULL -> ^( TOK_ISNULL ) | KW_NOT KW_NULL -> ^( TOK_ISNOTNULL ) );
    public final HiveParser.nullCondition_return nullCondition() throws RecognitionException {
        HiveParser.nullCondition_return retval = new HiveParser.nullCondition_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_NULL987=null;
        Token KW_NOT988=null;
        Token KW_NULL989=null;

        CommonTree KW_NULL987_tree=null;
        CommonTree KW_NOT988_tree=null;
        CommonTree KW_NULL989_tree=null;
        RewriteRuleTokenStream stream_KW_NULL=new RewriteRuleTokenStream(adaptor,"token KW_NULL");
        RewriteRuleTokenStream stream_KW_NOT=new RewriteRuleTokenStream(adaptor,"token KW_NOT");

        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2091:5: ( KW_NULL -> ^( TOK_ISNULL ) | KW_NOT KW_NULL -> ^( TOK_ISNOTNULL ) )
            int alt286=2;
            int LA286_0 = input.LA(1);

            if ( (LA286_0==KW_NULL) ) {
                alt286=1;
            }
            else if ( (LA286_0==KW_NOT) ) {
                alt286=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 286, 0, input);

                throw nvae;

            }
            switch (alt286) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2092:5: KW_NULL
                    {
                    KW_NULL987=(Token)match(input,KW_NULL,FOLLOW_KW_NULL_in_nullCondition15271);  
                    stream_KW_NULL.add(KW_NULL987);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 2092:13: -> ^( TOK_ISNULL )
                    {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2092:16: ^( TOK_ISNULL )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_ISNULL, "TOK_ISNULL")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 2 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2093:7: KW_NOT KW_NULL
                    {
                    KW_NOT988=(Token)match(input,KW_NOT,FOLLOW_KW_NOT_in_nullCondition15285);  
                    stream_KW_NOT.add(KW_NOT988);


                    KW_NULL989=(Token)match(input,KW_NULL,FOLLOW_KW_NULL_in_nullCondition15287);  
                    stream_KW_NULL.add(KW_NULL989);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 2093:22: -> ^( TOK_ISNOTNULL )
                    {
                        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2093:25: ^( TOK_ISNOTNULL )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_ISNOTNULL, "TOK_ISNOTNULL")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nullCondition"


    public static class precedenceUnaryPrefixExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "precedenceUnaryPrefixExpression"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2096:1: precedenceUnaryPrefixExpression : ( precedenceUnaryOperator ^)* precedenceFieldExpression ;
    public final HiveParser.precedenceUnaryPrefixExpression_return precedenceUnaryPrefixExpression() throws RecognitionException {
        HiveParser.precedenceUnaryPrefixExpression_return retval = new HiveParser.precedenceUnaryPrefixExpression_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        HiveParser.precedenceUnaryOperator_return precedenceUnaryOperator990 =null;

        HiveParser.precedenceFieldExpression_return precedenceFieldExpression991 =null;



        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2097:5: ( ( precedenceUnaryOperator ^)* precedenceFieldExpression )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2098:5: ( precedenceUnaryOperator ^)* precedenceFieldExpression
            {
            root_0 = (CommonTree)adaptor.nil();


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2098:5: ( precedenceUnaryOperator ^)*
            loop287:
            do {
                int alt287=2;
                int LA287_0 = input.LA(1);

                if ( (LA287_0==MINUS||LA287_0==PLUS||LA287_0==TILDE) ) {
                    alt287=1;
                }


                switch (alt287) {
            	case 1 :
            	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2098:6: precedenceUnaryOperator ^
            	    {
            	    pushFollow(FOLLOW_precedenceUnaryOperator_in_precedenceUnaryPrefixExpression15315);
            	    precedenceUnaryOperator990=precedenceUnaryOperator();

            	    state._fsp--;

            	    root_0 = (CommonTree)adaptor.becomeRoot(precedenceUnaryOperator990.getTree(), root_0);

            	    }
            	    break;

            	default :
            	    break loop287;
                }
            } while (true);


            pushFollow(FOLLOW_precedenceFieldExpression_in_precedenceUnaryPrefixExpression15320);
            precedenceFieldExpression991=precedenceFieldExpression();

            state._fsp--;

            adaptor.addChild(root_0, precedenceFieldExpression991.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "precedenceUnaryPrefixExpression"


    public static class precedenceUnarySuffixExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "precedenceUnarySuffixExpression"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2101:1: precedenceUnarySuffixExpression : precedenceUnaryPrefixExpression (a= KW_IS nullCondition )? -> {$a != null}? ^( TOK_FUNCTION nullCondition precedenceUnaryPrefixExpression ) -> precedenceUnaryPrefixExpression ;
    public final HiveParser.precedenceUnarySuffixExpression_return precedenceUnarySuffixExpression() throws RecognitionException {
        HiveParser.precedenceUnarySuffixExpression_return retval = new HiveParser.precedenceUnarySuffixExpression_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token a=null;
        HiveParser.precedenceUnaryPrefixExpression_return precedenceUnaryPrefixExpression992 =null;

        HiveParser.nullCondition_return nullCondition993 =null;


        CommonTree a_tree=null;
        RewriteRuleTokenStream stream_KW_IS=new RewriteRuleTokenStream(adaptor,"token KW_IS");
        RewriteRuleSubtreeStream stream_precedenceUnaryPrefixExpression=new RewriteRuleSubtreeStream(adaptor,"rule precedenceUnaryPrefixExpression");
        RewriteRuleSubtreeStream stream_nullCondition=new RewriteRuleSubtreeStream(adaptor,"rule nullCondition");
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2102:5: ( precedenceUnaryPrefixExpression (a= KW_IS nullCondition )? -> {$a != null}? ^( TOK_FUNCTION nullCondition precedenceUnaryPrefixExpression ) -> precedenceUnaryPrefixExpression )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2102:7: precedenceUnaryPrefixExpression (a= KW_IS nullCondition )?
            {
            pushFollow(FOLLOW_precedenceUnaryPrefixExpression_in_precedenceUnarySuffixExpression15337);
            precedenceUnaryPrefixExpression992=precedenceUnaryPrefixExpression();

            state._fsp--;

            stream_precedenceUnaryPrefixExpression.add(precedenceUnaryPrefixExpression992.getTree());

            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2102:39: (a= KW_IS nullCondition )?
            int alt288=2;
            int LA288_0 = input.LA(1);

            if ( (LA288_0==KW_IS) ) {
                alt288=1;
            }
            switch (alt288) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2102:40: a= KW_IS nullCondition
                    {
                    a=(Token)match(input,KW_IS,FOLLOW_KW_IS_in_precedenceUnarySuffixExpression15342);  
                    stream_KW_IS.add(a);


                    pushFollow(FOLLOW_nullCondition_in_precedenceUnarySuffixExpression15344);
                    nullCondition993=nullCondition();

                    state._fsp--;

                    stream_nullCondition.add(nullCondition993.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: precedenceUnaryPrefixExpression, precedenceUnaryPrefixExpression, nullCondition
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 2103:5: -> {$a != null}? ^( TOK_FUNCTION nullCondition precedenceUnaryPrefixExpression )
            if (a != null) {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2103:22: ^( TOK_FUNCTION nullCondition precedenceUnaryPrefixExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_FUNCTION, "TOK_FUNCTION")
                , root_1);

                adaptor.addChild(root_1, stream_nullCondition.nextTree());

                adaptor.addChild(root_1, stream_precedenceUnaryPrefixExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 2104:5: -> precedenceUnaryPrefixExpression
            {
                adaptor.addChild(root_0, stream_precedenceUnaryPrefixExpression.nextTree());

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "precedenceUnarySuffixExpression"


    public static class precedenceBitwiseXorOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "precedenceBitwiseXorOperator"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2108:1: precedenceBitwiseXorOperator : BITWISEXOR ;
    public final HiveParser.precedenceBitwiseXorOperator_return precedenceBitwiseXorOperator() throws RecognitionException {
        HiveParser.precedenceBitwiseXorOperator_return retval = new HiveParser.precedenceBitwiseXorOperator_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token BITWISEXOR994=null;

        CommonTree BITWISEXOR994_tree=null;

        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2109:5: ( BITWISEXOR )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2110:5: BITWISEXOR
            {
            root_0 = (CommonTree)adaptor.nil();


            BITWISEXOR994=(Token)match(input,BITWISEXOR,FOLLOW_BITWISEXOR_in_precedenceBitwiseXorOperator15392); 
            BITWISEXOR994_tree = 
            (CommonTree)adaptor.create(BITWISEXOR994)
            ;
            adaptor.addChild(root_0, BITWISEXOR994_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "precedenceBitwiseXorOperator"


    public static class precedenceBitwiseXorExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "precedenceBitwiseXorExpression"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2113:1: precedenceBitwiseXorExpression : precedenceUnarySuffixExpression ( precedenceBitwiseXorOperator ^ precedenceUnarySuffixExpression )* ;
    public final HiveParser.precedenceBitwiseXorExpression_return precedenceBitwiseXorExpression() throws RecognitionException {
        HiveParser.precedenceBitwiseXorExpression_return retval = new HiveParser.precedenceBitwiseXorExpression_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        HiveParser.precedenceUnarySuffixExpression_return precedenceUnarySuffixExpression995 =null;

        HiveParser.precedenceBitwiseXorOperator_return precedenceBitwiseXorOperator996 =null;

        HiveParser.precedenceUnarySuffixExpression_return precedenceUnarySuffixExpression997 =null;



        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2114:5: ( precedenceUnarySuffixExpression ( precedenceBitwiseXorOperator ^ precedenceUnarySuffixExpression )* )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2115:5: precedenceUnarySuffixExpression ( precedenceBitwiseXorOperator ^ precedenceUnarySuffixExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();


            pushFollow(FOLLOW_precedenceUnarySuffixExpression_in_precedenceBitwiseXorExpression15413);
            precedenceUnarySuffixExpression995=precedenceUnarySuffixExpression();

            state._fsp--;

            adaptor.addChild(root_0, precedenceUnarySuffixExpression995.getTree());

            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2115:37: ( precedenceBitwiseXorOperator ^ precedenceUnarySuffixExpression )*
            loop289:
            do {
                int alt289=2;
                int LA289_0 = input.LA(1);

                if ( (LA289_0==BITWISEXOR) ) {
                    alt289=1;
                }


                switch (alt289) {
            	case 1 :
            	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2115:38: precedenceBitwiseXorOperator ^ precedenceUnarySuffixExpression
            	    {
            	    pushFollow(FOLLOW_precedenceBitwiseXorOperator_in_precedenceBitwiseXorExpression15416);
            	    precedenceBitwiseXorOperator996=precedenceBitwiseXorOperator();

            	    state._fsp--;

            	    root_0 = (CommonTree)adaptor.becomeRoot(precedenceBitwiseXorOperator996.getTree(), root_0);

            	    pushFollow(FOLLOW_precedenceUnarySuffixExpression_in_precedenceBitwiseXorExpression15419);
            	    precedenceUnarySuffixExpression997=precedenceUnarySuffixExpression();

            	    state._fsp--;

            	    adaptor.addChild(root_0, precedenceUnarySuffixExpression997.getTree());

            	    }
            	    break;

            	default :
            	    break loop289;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "precedenceBitwiseXorExpression"


    public static class precedenceStarOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "precedenceStarOperator"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2119:1: precedenceStarOperator : ( STAR | DIVIDE | MOD | DIV );
    public final HiveParser.precedenceStarOperator_return precedenceStarOperator() throws RecognitionException {
        HiveParser.precedenceStarOperator_return retval = new HiveParser.precedenceStarOperator_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token set998=null;

        CommonTree set998_tree=null;

        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2120:5: ( STAR | DIVIDE | MOD | DIV )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:
            {
            root_0 = (CommonTree)adaptor.nil();


            set998=(Token)input.LT(1);

            if ( (input.LA(1) >= DIV && input.LA(1) <= DIVIDE)||input.LA(1)==MOD||input.LA(1)==STAR ) {
                input.consume();
                adaptor.addChild(root_0, 
                (CommonTree)adaptor.create(set998)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "precedenceStarOperator"


    public static class precedenceStarExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "precedenceStarExpression"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2124:1: precedenceStarExpression : precedenceBitwiseXorExpression ( precedenceStarOperator ^ precedenceBitwiseXorExpression )* ;
    public final HiveParser.precedenceStarExpression_return precedenceStarExpression() throws RecognitionException {
        HiveParser.precedenceStarExpression_return retval = new HiveParser.precedenceStarExpression_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        HiveParser.precedenceBitwiseXorExpression_return precedenceBitwiseXorExpression999 =null;

        HiveParser.precedenceStarOperator_return precedenceStarOperator1000 =null;

        HiveParser.precedenceBitwiseXorExpression_return precedenceBitwiseXorExpression1001 =null;



        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2125:5: ( precedenceBitwiseXorExpression ( precedenceStarOperator ^ precedenceBitwiseXorExpression )* )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2126:5: precedenceBitwiseXorExpression ( precedenceStarOperator ^ precedenceBitwiseXorExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();


            pushFollow(FOLLOW_precedenceBitwiseXorExpression_in_precedenceStarExpression15476);
            precedenceBitwiseXorExpression999=precedenceBitwiseXorExpression();

            state._fsp--;

            adaptor.addChild(root_0, precedenceBitwiseXorExpression999.getTree());

            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2126:36: ( precedenceStarOperator ^ precedenceBitwiseXorExpression )*
            loop290:
            do {
                int alt290=2;
                int LA290_0 = input.LA(1);

                if ( ((LA290_0 >= DIV && LA290_0 <= DIVIDE)||LA290_0==MOD||LA290_0==STAR) ) {
                    alt290=1;
                }


                switch (alt290) {
            	case 1 :
            	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2126:37: precedenceStarOperator ^ precedenceBitwiseXorExpression
            	    {
            	    pushFollow(FOLLOW_precedenceStarOperator_in_precedenceStarExpression15479);
            	    precedenceStarOperator1000=precedenceStarOperator();

            	    state._fsp--;

            	    root_0 = (CommonTree)adaptor.becomeRoot(precedenceStarOperator1000.getTree(), root_0);

            	    pushFollow(FOLLOW_precedenceBitwiseXorExpression_in_precedenceStarExpression15482);
            	    precedenceBitwiseXorExpression1001=precedenceBitwiseXorExpression();

            	    state._fsp--;

            	    adaptor.addChild(root_0, precedenceBitwiseXorExpression1001.getTree());

            	    }
            	    break;

            	default :
            	    break loop290;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "precedenceStarExpression"


    public static class precedencePlusOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "precedencePlusOperator"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2130:1: precedencePlusOperator : ( PLUS | MINUS );
    public final HiveParser.precedencePlusOperator_return precedencePlusOperator() throws RecognitionException {
        HiveParser.precedencePlusOperator_return retval = new HiveParser.precedencePlusOperator_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token set1002=null;

        CommonTree set1002_tree=null;

        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2131:5: ( PLUS | MINUS )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:
            {
            root_0 = (CommonTree)adaptor.nil();


            set1002=(Token)input.LT(1);

            if ( input.LA(1)==MINUS||input.LA(1)==PLUS ) {
                input.consume();
                adaptor.addChild(root_0, 
                (CommonTree)adaptor.create(set1002)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "precedencePlusOperator"


    public static class precedencePlusExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "precedencePlusExpression"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2135:1: precedencePlusExpression : precedenceStarExpression ( precedencePlusOperator ^ precedenceStarExpression )* ;
    public final HiveParser.precedencePlusExpression_return precedencePlusExpression() throws RecognitionException {
        HiveParser.precedencePlusExpression_return retval = new HiveParser.precedencePlusExpression_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        HiveParser.precedenceStarExpression_return precedenceStarExpression1003 =null;

        HiveParser.precedencePlusOperator_return precedencePlusOperator1004 =null;

        HiveParser.precedenceStarExpression_return precedenceStarExpression1005 =null;



        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2136:5: ( precedenceStarExpression ( precedencePlusOperator ^ precedenceStarExpression )* )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2137:5: precedenceStarExpression ( precedencePlusOperator ^ precedenceStarExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();


            pushFollow(FOLLOW_precedenceStarExpression_in_precedencePlusExpression15531);
            precedenceStarExpression1003=precedenceStarExpression();

            state._fsp--;

            adaptor.addChild(root_0, precedenceStarExpression1003.getTree());

            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2137:30: ( precedencePlusOperator ^ precedenceStarExpression )*
            loop291:
            do {
                int alt291=2;
                int LA291_0 = input.LA(1);

                if ( (LA291_0==MINUS||LA291_0==PLUS) ) {
                    alt291=1;
                }


                switch (alt291) {
            	case 1 :
            	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2137:31: precedencePlusOperator ^ precedenceStarExpression
            	    {
            	    pushFollow(FOLLOW_precedencePlusOperator_in_precedencePlusExpression15534);
            	    precedencePlusOperator1004=precedencePlusOperator();

            	    state._fsp--;

            	    root_0 = (CommonTree)adaptor.becomeRoot(precedencePlusOperator1004.getTree(), root_0);

            	    pushFollow(FOLLOW_precedenceStarExpression_in_precedencePlusExpression15537);
            	    precedenceStarExpression1005=precedenceStarExpression();

            	    state._fsp--;

            	    adaptor.addChild(root_0, precedenceStarExpression1005.getTree());

            	    }
            	    break;

            	default :
            	    break loop291;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "precedencePlusExpression"


    public static class precedenceAmpersandOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "precedenceAmpersandOperator"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2141:1: precedenceAmpersandOperator : AMPERSAND ;
    public final HiveParser.precedenceAmpersandOperator_return precedenceAmpersandOperator() throws RecognitionException {
        HiveParser.precedenceAmpersandOperator_return retval = new HiveParser.precedenceAmpersandOperator_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token AMPERSAND1006=null;

        CommonTree AMPERSAND1006_tree=null;

        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2142:5: ( AMPERSAND )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2143:5: AMPERSAND
            {
            root_0 = (CommonTree)adaptor.nil();


            AMPERSAND1006=(Token)match(input,AMPERSAND,FOLLOW_AMPERSAND_in_precedenceAmpersandOperator15561); 
            AMPERSAND1006_tree = 
            (CommonTree)adaptor.create(AMPERSAND1006)
            ;
            adaptor.addChild(root_0, AMPERSAND1006_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "precedenceAmpersandOperator"


    public static class precedenceAmpersandExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "precedenceAmpersandExpression"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2146:1: precedenceAmpersandExpression : precedencePlusExpression ( precedenceAmpersandOperator ^ precedencePlusExpression )* ;
    public final HiveParser.precedenceAmpersandExpression_return precedenceAmpersandExpression() throws RecognitionException {
        HiveParser.precedenceAmpersandExpression_return retval = new HiveParser.precedenceAmpersandExpression_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        HiveParser.precedencePlusExpression_return precedencePlusExpression1007 =null;

        HiveParser.precedenceAmpersandOperator_return precedenceAmpersandOperator1008 =null;

        HiveParser.precedencePlusExpression_return precedencePlusExpression1009 =null;



        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2147:5: ( precedencePlusExpression ( precedenceAmpersandOperator ^ precedencePlusExpression )* )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2148:5: precedencePlusExpression ( precedenceAmpersandOperator ^ precedencePlusExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();


            pushFollow(FOLLOW_precedencePlusExpression_in_precedenceAmpersandExpression15582);
            precedencePlusExpression1007=precedencePlusExpression();

            state._fsp--;

            adaptor.addChild(root_0, precedencePlusExpression1007.getTree());

            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2148:30: ( precedenceAmpersandOperator ^ precedencePlusExpression )*
            loop292:
            do {
                int alt292=2;
                int LA292_0 = input.LA(1);

                if ( (LA292_0==AMPERSAND) ) {
                    alt292=1;
                }


                switch (alt292) {
            	case 1 :
            	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2148:31: precedenceAmpersandOperator ^ precedencePlusExpression
            	    {
            	    pushFollow(FOLLOW_precedenceAmpersandOperator_in_precedenceAmpersandExpression15585);
            	    precedenceAmpersandOperator1008=precedenceAmpersandOperator();

            	    state._fsp--;

            	    root_0 = (CommonTree)adaptor.becomeRoot(precedenceAmpersandOperator1008.getTree(), root_0);

            	    pushFollow(FOLLOW_precedencePlusExpression_in_precedenceAmpersandExpression15588);
            	    precedencePlusExpression1009=precedencePlusExpression();

            	    state._fsp--;

            	    adaptor.addChild(root_0, precedencePlusExpression1009.getTree());

            	    }
            	    break;

            	default :
            	    break loop292;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "precedenceAmpersandExpression"


    public static class precedenceBitwiseOrOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "precedenceBitwiseOrOperator"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2152:1: precedenceBitwiseOrOperator : BITWISEOR ;
    public final HiveParser.precedenceBitwiseOrOperator_return precedenceBitwiseOrOperator() throws RecognitionException {
        HiveParser.precedenceBitwiseOrOperator_return retval = new HiveParser.precedenceBitwiseOrOperator_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token BITWISEOR1010=null;

        CommonTree BITWISEOR1010_tree=null;

        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2153:5: ( BITWISEOR )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2154:5: BITWISEOR
            {
            root_0 = (CommonTree)adaptor.nil();


            BITWISEOR1010=(Token)match(input,BITWISEOR,FOLLOW_BITWISEOR_in_precedenceBitwiseOrOperator15612); 
            BITWISEOR1010_tree = 
            (CommonTree)adaptor.create(BITWISEOR1010)
            ;
            adaptor.addChild(root_0, BITWISEOR1010_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "precedenceBitwiseOrOperator"


    public static class precedenceBitwiseOrExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "precedenceBitwiseOrExpression"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2157:1: precedenceBitwiseOrExpression : precedenceAmpersandExpression ( precedenceBitwiseOrOperator ^ precedenceAmpersandExpression )* ;
    public final HiveParser.precedenceBitwiseOrExpression_return precedenceBitwiseOrExpression() throws RecognitionException {
        HiveParser.precedenceBitwiseOrExpression_return retval = new HiveParser.precedenceBitwiseOrExpression_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        HiveParser.precedenceAmpersandExpression_return precedenceAmpersandExpression1011 =null;

        HiveParser.precedenceBitwiseOrOperator_return precedenceBitwiseOrOperator1012 =null;

        HiveParser.precedenceAmpersandExpression_return precedenceAmpersandExpression1013 =null;



        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2158:5: ( precedenceAmpersandExpression ( precedenceBitwiseOrOperator ^ precedenceAmpersandExpression )* )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2159:5: precedenceAmpersandExpression ( precedenceBitwiseOrOperator ^ precedenceAmpersandExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();


            pushFollow(FOLLOW_precedenceAmpersandExpression_in_precedenceBitwiseOrExpression15633);
            precedenceAmpersandExpression1011=precedenceAmpersandExpression();

            state._fsp--;

            adaptor.addChild(root_0, precedenceAmpersandExpression1011.getTree());

            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2159:35: ( precedenceBitwiseOrOperator ^ precedenceAmpersandExpression )*
            loop293:
            do {
                int alt293=2;
                int LA293_0 = input.LA(1);

                if ( (LA293_0==BITWISEOR) ) {
                    alt293=1;
                }


                switch (alt293) {
            	case 1 :
            	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2159:36: precedenceBitwiseOrOperator ^ precedenceAmpersandExpression
            	    {
            	    pushFollow(FOLLOW_precedenceBitwiseOrOperator_in_precedenceBitwiseOrExpression15636);
            	    precedenceBitwiseOrOperator1012=precedenceBitwiseOrOperator();

            	    state._fsp--;

            	    root_0 = (CommonTree)adaptor.becomeRoot(precedenceBitwiseOrOperator1012.getTree(), root_0);

            	    pushFollow(FOLLOW_precedenceAmpersandExpression_in_precedenceBitwiseOrExpression15639);
            	    precedenceAmpersandExpression1013=precedenceAmpersandExpression();

            	    state._fsp--;

            	    adaptor.addChild(root_0, precedenceAmpersandExpression1013.getTree());

            	    }
            	    break;

            	default :
            	    break loop293;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "precedenceBitwiseOrExpression"


    public static class precedenceEqualNegatableOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "precedenceEqualNegatableOperator"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2164:1: precedenceEqualNegatableOperator : ( KW_LIKE | KW_RLIKE | KW_REGEXP );
    public final HiveParser.precedenceEqualNegatableOperator_return precedenceEqualNegatableOperator() throws RecognitionException {
        HiveParser.precedenceEqualNegatableOperator_return retval = new HiveParser.precedenceEqualNegatableOperator_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token set1014=null;

        CommonTree set1014_tree=null;

        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2165:5: ( KW_LIKE | KW_RLIKE | KW_REGEXP )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:
            {
            root_0 = (CommonTree)adaptor.nil();


            set1014=(Token)input.LT(1);

            if ( input.LA(1)==KW_LIKE||input.LA(1)==KW_REGEXP||input.LA(1)==KW_RLIKE ) {
                input.consume();
                adaptor.addChild(root_0, 
                (CommonTree)adaptor.create(set1014)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "precedenceEqualNegatableOperator"


    public static class precedenceEqualOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "precedenceEqualOperator"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2169:1: precedenceEqualOperator : ( precedenceEqualNegatableOperator | EQUAL | EQUAL_NS | NOTEQUAL | LESSTHANOREQUALTO | LESSTHAN | GREATERTHANOREQUALTO | GREATERTHAN );
    public final HiveParser.precedenceEqualOperator_return precedenceEqualOperator() throws RecognitionException {
        HiveParser.precedenceEqualOperator_return retval = new HiveParser.precedenceEqualOperator_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token EQUAL1016=null;
        Token EQUAL_NS1017=null;
        Token NOTEQUAL1018=null;
        Token LESSTHANOREQUALTO1019=null;
        Token LESSTHAN1020=null;
        Token GREATERTHANOREQUALTO1021=null;
        Token GREATERTHAN1022=null;
        HiveParser.precedenceEqualNegatableOperator_return precedenceEqualNegatableOperator1015 =null;


        CommonTree EQUAL1016_tree=null;
        CommonTree EQUAL_NS1017_tree=null;
        CommonTree NOTEQUAL1018_tree=null;
        CommonTree LESSTHANOREQUALTO1019_tree=null;
        CommonTree LESSTHAN1020_tree=null;
        CommonTree GREATERTHANOREQUALTO1021_tree=null;
        CommonTree GREATERTHAN1022_tree=null;

        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2170:5: ( precedenceEqualNegatableOperator | EQUAL | EQUAL_NS | NOTEQUAL | LESSTHANOREQUALTO | LESSTHAN | GREATERTHANOREQUALTO | GREATERTHAN )
            int alt294=8;
            switch ( input.LA(1) ) {
            case KW_LIKE:
            case KW_REGEXP:
            case KW_RLIKE:
                {
                alt294=1;
                }
                break;
            case EQUAL:
                {
                alt294=2;
                }
                break;
            case EQUAL_NS:
                {
                alt294=3;
                }
                break;
            case NOTEQUAL:
                {
                alt294=4;
                }
                break;
            case LESSTHANOREQUALTO:
                {
                alt294=5;
                }
                break;
            case LESSTHAN:
                {
                alt294=6;
                }
                break;
            case GREATERTHANOREQUALTO:
                {
                alt294=7;
                }
                break;
            case GREATERTHAN:
                {
                alt294=8;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 294, 0, input);

                throw nvae;

            }

            switch (alt294) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2171:5: precedenceEqualNegatableOperator
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_precedenceEqualNegatableOperator_in_precedenceEqualOperator15693);
                    precedenceEqualNegatableOperator1015=precedenceEqualNegatableOperator();

                    state._fsp--;

                    adaptor.addChild(root_0, precedenceEqualNegatableOperator1015.getTree());

                    }
                    break;
                case 2 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2171:40: EQUAL
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    EQUAL1016=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_precedenceEqualOperator15697); 
                    EQUAL1016_tree = 
                    (CommonTree)adaptor.create(EQUAL1016)
                    ;
                    adaptor.addChild(root_0, EQUAL1016_tree);


                    }
                    break;
                case 3 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2171:48: EQUAL_NS
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    EQUAL_NS1017=(Token)match(input,EQUAL_NS,FOLLOW_EQUAL_NS_in_precedenceEqualOperator15701); 
                    EQUAL_NS1017_tree = 
                    (CommonTree)adaptor.create(EQUAL_NS1017)
                    ;
                    adaptor.addChild(root_0, EQUAL_NS1017_tree);


                    }
                    break;
                case 4 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2171:59: NOTEQUAL
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    NOTEQUAL1018=(Token)match(input,NOTEQUAL,FOLLOW_NOTEQUAL_in_precedenceEqualOperator15705); 
                    NOTEQUAL1018_tree = 
                    (CommonTree)adaptor.create(NOTEQUAL1018)
                    ;
                    adaptor.addChild(root_0, NOTEQUAL1018_tree);


                    }
                    break;
                case 5 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2171:70: LESSTHANOREQUALTO
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    LESSTHANOREQUALTO1019=(Token)match(input,LESSTHANOREQUALTO,FOLLOW_LESSTHANOREQUALTO_in_precedenceEqualOperator15709); 
                    LESSTHANOREQUALTO1019_tree = 
                    (CommonTree)adaptor.create(LESSTHANOREQUALTO1019)
                    ;
                    adaptor.addChild(root_0, LESSTHANOREQUALTO1019_tree);


                    }
                    break;
                case 6 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2171:90: LESSTHAN
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    LESSTHAN1020=(Token)match(input,LESSTHAN,FOLLOW_LESSTHAN_in_precedenceEqualOperator15713); 
                    LESSTHAN1020_tree = 
                    (CommonTree)adaptor.create(LESSTHAN1020)
                    ;
                    adaptor.addChild(root_0, LESSTHAN1020_tree);


                    }
                    break;
                case 7 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2171:101: GREATERTHANOREQUALTO
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    GREATERTHANOREQUALTO1021=(Token)match(input,GREATERTHANOREQUALTO,FOLLOW_GREATERTHANOREQUALTO_in_precedenceEqualOperator15717); 
                    GREATERTHANOREQUALTO1021_tree = 
                    (CommonTree)adaptor.create(GREATERTHANOREQUALTO1021)
                    ;
                    adaptor.addChild(root_0, GREATERTHANOREQUALTO1021_tree);


                    }
                    break;
                case 8 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2171:124: GREATERTHAN
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    GREATERTHAN1022=(Token)match(input,GREATERTHAN,FOLLOW_GREATERTHAN_in_precedenceEqualOperator15721); 
                    GREATERTHAN1022_tree = 
                    (CommonTree)adaptor.create(GREATERTHAN1022)
                    ;
                    adaptor.addChild(root_0, GREATERTHAN1022_tree);


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "precedenceEqualOperator"


    public static class precedenceEqualExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "precedenceEqualExpression"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2174:1: precedenceEqualExpression : (left= precedenceBitwiseOrExpression -> $left) ( ( KW_NOT precedenceEqualNegatableOperator notExpr= precedenceBitwiseOrExpression ) -> ^( KW_NOT ^( precedenceEqualNegatableOperator $precedenceEqualExpression $notExpr) ) | ( precedenceEqualOperator equalExpr= precedenceBitwiseOrExpression ) -> ^( precedenceEqualOperator $precedenceEqualExpression $equalExpr) | ( KW_NOT KW_IN expressions ) -> ^( KW_NOT ^( TOK_FUNCTION KW_IN $precedenceEqualExpression expressions ) ) | ( KW_IN expressions ) -> ^( TOK_FUNCTION KW_IN $precedenceEqualExpression expressions ) | ( KW_NOT KW_BETWEEN (min= precedenceBitwiseOrExpression ) KW_AND (max= precedenceBitwiseOrExpression ) ) -> ^( TOK_FUNCTION Identifier[\"between\"] KW_TRUE $left $min $max) | ( KW_BETWEEN (min= precedenceBitwiseOrExpression ) KW_AND (max= precedenceBitwiseOrExpression ) ) -> ^( TOK_FUNCTION Identifier[\"between\"] KW_FALSE $left $min $max) )* ;
    public final HiveParser.precedenceEqualExpression_return precedenceEqualExpression() throws RecognitionException {
        HiveParser.precedenceEqualExpression_return retval = new HiveParser.precedenceEqualExpression_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_NOT1023=null;
        Token KW_NOT1026=null;
        Token KW_IN1027=null;
        Token KW_IN1029=null;
        Token KW_NOT1031=null;
        Token KW_BETWEEN1032=null;
        Token KW_AND1033=null;
        Token KW_BETWEEN1034=null;
        Token KW_AND1035=null;
        HiveParser.precedenceBitwiseOrExpression_return left =null;

        HiveParser.precedenceBitwiseOrExpression_return notExpr =null;

        HiveParser.precedenceBitwiseOrExpression_return equalExpr =null;

        HiveParser.precedenceBitwiseOrExpression_return min =null;

        HiveParser.precedenceBitwiseOrExpression_return max =null;

        HiveParser.precedenceEqualNegatableOperator_return precedenceEqualNegatableOperator1024 =null;

        HiveParser.precedenceEqualOperator_return precedenceEqualOperator1025 =null;

        HiveParser.expressions_return expressions1028 =null;

        HiveParser.expressions_return expressions1030 =null;


        CommonTree KW_NOT1023_tree=null;
        CommonTree KW_NOT1026_tree=null;
        CommonTree KW_IN1027_tree=null;
        CommonTree KW_IN1029_tree=null;
        CommonTree KW_NOT1031_tree=null;
        CommonTree KW_BETWEEN1032_tree=null;
        CommonTree KW_AND1033_tree=null;
        CommonTree KW_BETWEEN1034_tree=null;
        CommonTree KW_AND1035_tree=null;
        RewriteRuleTokenStream stream_KW_IN=new RewriteRuleTokenStream(adaptor,"token KW_IN");
        RewriteRuleTokenStream stream_KW_BETWEEN=new RewriteRuleTokenStream(adaptor,"token KW_BETWEEN");
        RewriteRuleTokenStream stream_KW_AND=new RewriteRuleTokenStream(adaptor,"token KW_AND");
        RewriteRuleTokenStream stream_KW_NOT=new RewriteRuleTokenStream(adaptor,"token KW_NOT");
        RewriteRuleSubtreeStream stream_precedenceEqualNegatableOperator=new RewriteRuleSubtreeStream(adaptor,"rule precedenceEqualNegatableOperator");
        RewriteRuleSubtreeStream stream_precedenceEqualOperator=new RewriteRuleSubtreeStream(adaptor,"rule precedenceEqualOperator");
        RewriteRuleSubtreeStream stream_precedenceBitwiseOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule precedenceBitwiseOrExpression");
        RewriteRuleSubtreeStream stream_expressions=new RewriteRuleSubtreeStream(adaptor,"rule expressions");
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2175:5: ( (left= precedenceBitwiseOrExpression -> $left) ( ( KW_NOT precedenceEqualNegatableOperator notExpr= precedenceBitwiseOrExpression ) -> ^( KW_NOT ^( precedenceEqualNegatableOperator $precedenceEqualExpression $notExpr) ) | ( precedenceEqualOperator equalExpr= precedenceBitwiseOrExpression ) -> ^( precedenceEqualOperator $precedenceEqualExpression $equalExpr) | ( KW_NOT KW_IN expressions ) -> ^( KW_NOT ^( TOK_FUNCTION KW_IN $precedenceEqualExpression expressions ) ) | ( KW_IN expressions ) -> ^( TOK_FUNCTION KW_IN $precedenceEqualExpression expressions ) | ( KW_NOT KW_BETWEEN (min= precedenceBitwiseOrExpression ) KW_AND (max= precedenceBitwiseOrExpression ) ) -> ^( TOK_FUNCTION Identifier[\"between\"] KW_TRUE $left $min $max) | ( KW_BETWEEN (min= precedenceBitwiseOrExpression ) KW_AND (max= precedenceBitwiseOrExpression ) ) -> ^( TOK_FUNCTION Identifier[\"between\"] KW_FALSE $left $min $max) )* )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2176:5: (left= precedenceBitwiseOrExpression -> $left) ( ( KW_NOT precedenceEqualNegatableOperator notExpr= precedenceBitwiseOrExpression ) -> ^( KW_NOT ^( precedenceEqualNegatableOperator $precedenceEqualExpression $notExpr) ) | ( precedenceEqualOperator equalExpr= precedenceBitwiseOrExpression ) -> ^( precedenceEqualOperator $precedenceEqualExpression $equalExpr) | ( KW_NOT KW_IN expressions ) -> ^( KW_NOT ^( TOK_FUNCTION KW_IN $precedenceEqualExpression expressions ) ) | ( KW_IN expressions ) -> ^( TOK_FUNCTION KW_IN $precedenceEqualExpression expressions ) | ( KW_NOT KW_BETWEEN (min= precedenceBitwiseOrExpression ) KW_AND (max= precedenceBitwiseOrExpression ) ) -> ^( TOK_FUNCTION Identifier[\"between\"] KW_TRUE $left $min $max) | ( KW_BETWEEN (min= precedenceBitwiseOrExpression ) KW_AND (max= precedenceBitwiseOrExpression ) ) -> ^( TOK_FUNCTION Identifier[\"between\"] KW_FALSE $left $min $max) )*
            {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2176:5: (left= precedenceBitwiseOrExpression -> $left)
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2176:6: left= precedenceBitwiseOrExpression
            {
            pushFollow(FOLLOW_precedenceBitwiseOrExpression_in_precedenceEqualExpression15745);
            left=precedenceBitwiseOrExpression();

            state._fsp--;

            stream_precedenceBitwiseOrExpression.add(left.getTree());

            // AST REWRITE
            // elements: left
            // token labels: 
            // rule labels: retval, left
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_left=new RewriteRuleSubtreeStream(adaptor,"rule left",left!=null?left.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 2176:41: -> $left
            {
                adaptor.addChild(root_0, stream_left.nextTree());

            }


            retval.tree = root_0;

            }


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2177:5: ( ( KW_NOT precedenceEqualNegatableOperator notExpr= precedenceBitwiseOrExpression ) -> ^( KW_NOT ^( precedenceEqualNegatableOperator $precedenceEqualExpression $notExpr) ) | ( precedenceEqualOperator equalExpr= precedenceBitwiseOrExpression ) -> ^( precedenceEqualOperator $precedenceEqualExpression $equalExpr) | ( KW_NOT KW_IN expressions ) -> ^( KW_NOT ^( TOK_FUNCTION KW_IN $precedenceEqualExpression expressions ) ) | ( KW_IN expressions ) -> ^( TOK_FUNCTION KW_IN $precedenceEqualExpression expressions ) | ( KW_NOT KW_BETWEEN (min= precedenceBitwiseOrExpression ) KW_AND (max= precedenceBitwiseOrExpression ) ) -> ^( TOK_FUNCTION Identifier[\"between\"] KW_TRUE $left $min $max) | ( KW_BETWEEN (min= precedenceBitwiseOrExpression ) KW_AND (max= precedenceBitwiseOrExpression ) ) -> ^( TOK_FUNCTION Identifier[\"between\"] KW_FALSE $left $min $max) )*
            loop295:
            do {
                int alt295=7;
                switch ( input.LA(1) ) {
                case KW_NOT:
                    {
                    switch ( input.LA(2) ) {
                    case KW_IN:
                        {
                        alt295=3;
                        }
                        break;
                    case KW_BETWEEN:
                        {
                        alt295=5;
                        }
                        break;
                    case KW_LIKE:
                    case KW_REGEXP:
                    case KW_RLIKE:
                        {
                        alt295=1;
                        }
                        break;

                    }

                    }
                    break;
                case EQUAL:
                case EQUAL_NS:
                case GREATERTHAN:
                case GREATERTHANOREQUALTO:
                case KW_LIKE:
                case KW_REGEXP:
                case KW_RLIKE:
                case LESSTHAN:
                case LESSTHANOREQUALTO:
                case NOTEQUAL:
                    {
                    alt295=2;
                    }
                    break;
                case KW_IN:
                    {
                    alt295=4;
                    }
                    break;
                case KW_BETWEEN:
                    {
                    alt295=6;
                    }
                    break;

                }

                switch (alt295) {
            	case 1 :
            	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2178:8: ( KW_NOT precedenceEqualNegatableOperator notExpr= precedenceBitwiseOrExpression )
            	    {
            	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2178:8: ( KW_NOT precedenceEqualNegatableOperator notExpr= precedenceBitwiseOrExpression )
            	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2178:9: KW_NOT precedenceEqualNegatableOperator notExpr= precedenceBitwiseOrExpression
            	    {
            	    KW_NOT1023=(Token)match(input,KW_NOT,FOLLOW_KW_NOT_in_precedenceEqualExpression15767);  
            	    stream_KW_NOT.add(KW_NOT1023);


            	    pushFollow(FOLLOW_precedenceEqualNegatableOperator_in_precedenceEqualExpression15769);
            	    precedenceEqualNegatableOperator1024=precedenceEqualNegatableOperator();

            	    state._fsp--;

            	    stream_precedenceEqualNegatableOperator.add(precedenceEqualNegatableOperator1024.getTree());

            	    pushFollow(FOLLOW_precedenceBitwiseOrExpression_in_precedenceEqualExpression15773);
            	    notExpr=precedenceBitwiseOrExpression();

            	    state._fsp--;

            	    stream_precedenceBitwiseOrExpression.add(notExpr.getTree());

            	    }


            	    // AST REWRITE
            	    // elements: precedenceEqualNegatableOperator, notExpr, KW_NOT, precedenceEqualExpression
            	    // token labels: 
            	    // rule labels: retval, notExpr
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            	    RewriteRuleSubtreeStream stream_notExpr=new RewriteRuleSubtreeStream(adaptor,"rule notExpr",notExpr!=null?notExpr.tree:null);

            	    root_0 = (CommonTree)adaptor.nil();
            	    // 2179:8: -> ^( KW_NOT ^( precedenceEqualNegatableOperator $precedenceEqualExpression $notExpr) )
            	    {
            	        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2179:11: ^( KW_NOT ^( precedenceEqualNegatableOperator $precedenceEqualExpression $notExpr) )
            	        {
            	        CommonTree root_1 = (CommonTree)adaptor.nil();
            	        root_1 = (CommonTree)adaptor.becomeRoot(
            	        stream_KW_NOT.nextNode()
            	        , root_1);

            	        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2179:20: ^( precedenceEqualNegatableOperator $precedenceEqualExpression $notExpr)
            	        {
            	        CommonTree root_2 = (CommonTree)adaptor.nil();
            	        root_2 = (CommonTree)adaptor.becomeRoot(stream_precedenceEqualNegatableOperator.nextNode(), root_2);

            	        adaptor.addChild(root_2, stream_retval.nextTree());

            	        adaptor.addChild(root_2, stream_notExpr.nextTree());

            	        adaptor.addChild(root_1, root_2);
            	        }

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }


            	    retval.tree = root_0;

            	    }
            	    break;
            	case 2 :
            	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2180:7: ( precedenceEqualOperator equalExpr= precedenceBitwiseOrExpression )
            	    {
            	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2180:7: ( precedenceEqualOperator equalExpr= precedenceBitwiseOrExpression )
            	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2180:8: precedenceEqualOperator equalExpr= precedenceBitwiseOrExpression
            	    {
            	    pushFollow(FOLLOW_precedenceEqualOperator_in_precedenceEqualExpression15806);
            	    precedenceEqualOperator1025=precedenceEqualOperator();

            	    state._fsp--;

            	    stream_precedenceEqualOperator.add(precedenceEqualOperator1025.getTree());

            	    pushFollow(FOLLOW_precedenceBitwiseOrExpression_in_precedenceEqualExpression15810);
            	    equalExpr=precedenceBitwiseOrExpression();

            	    state._fsp--;

            	    stream_precedenceBitwiseOrExpression.add(equalExpr.getTree());

            	    }


            	    // AST REWRITE
            	    // elements: precedenceEqualOperator, precedenceEqualExpression, equalExpr
            	    // token labels: 
            	    // rule labels: equalExpr, retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_equalExpr=new RewriteRuleSubtreeStream(adaptor,"rule equalExpr",equalExpr!=null?equalExpr.tree:null);
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (CommonTree)adaptor.nil();
            	    // 2181:8: -> ^( precedenceEqualOperator $precedenceEqualExpression $equalExpr)
            	    {
            	        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2181:11: ^( precedenceEqualOperator $precedenceEqualExpression $equalExpr)
            	        {
            	        CommonTree root_1 = (CommonTree)adaptor.nil();
            	        root_1 = (CommonTree)adaptor.becomeRoot(stream_precedenceEqualOperator.nextNode(), root_1);

            	        adaptor.addChild(root_1, stream_retval.nextTree());

            	        adaptor.addChild(root_1, stream_equalExpr.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }


            	    retval.tree = root_0;

            	    }
            	    break;
            	case 3 :
            	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2182:7: ( KW_NOT KW_IN expressions )
            	    {
            	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2182:7: ( KW_NOT KW_IN expressions )
            	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2182:8: KW_NOT KW_IN expressions
            	    {
            	    KW_NOT1026=(Token)match(input,KW_NOT,FOLLOW_KW_NOT_in_precedenceEqualExpression15839);  
            	    stream_KW_NOT.add(KW_NOT1026);


            	    KW_IN1027=(Token)match(input,KW_IN,FOLLOW_KW_IN_in_precedenceEqualExpression15841);  
            	    stream_KW_IN.add(KW_IN1027);


            	    pushFollow(FOLLOW_expressions_in_precedenceEqualExpression15843);
            	    expressions1028=expressions();

            	    state._fsp--;

            	    stream_expressions.add(expressions1028.getTree());

            	    }


            	    // AST REWRITE
            	    // elements: precedenceEqualExpression, expressions, KW_IN, KW_NOT
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (CommonTree)adaptor.nil();
            	    // 2183:8: -> ^( KW_NOT ^( TOK_FUNCTION KW_IN $precedenceEqualExpression expressions ) )
            	    {
            	        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2183:11: ^( KW_NOT ^( TOK_FUNCTION KW_IN $precedenceEqualExpression expressions ) )
            	        {
            	        CommonTree root_1 = (CommonTree)adaptor.nil();
            	        root_1 = (CommonTree)adaptor.becomeRoot(
            	        stream_KW_NOT.nextNode()
            	        , root_1);

            	        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2183:20: ^( TOK_FUNCTION KW_IN $precedenceEqualExpression expressions )
            	        {
            	        CommonTree root_2 = (CommonTree)adaptor.nil();
            	        root_2 = (CommonTree)adaptor.becomeRoot(
            	        (CommonTree)adaptor.create(TOK_FUNCTION, "TOK_FUNCTION")
            	        , root_2);

            	        adaptor.addChild(root_2, 
            	        stream_KW_IN.nextNode()
            	        );

            	        adaptor.addChild(root_2, stream_retval.nextTree());

            	        adaptor.addChild(root_2, stream_expressions.nextTree());

            	        adaptor.addChild(root_1, root_2);
            	        }

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }


            	    retval.tree = root_0;

            	    }
            	    break;
            	case 4 :
            	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2184:7: ( KW_IN expressions )
            	    {
            	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2184:7: ( KW_IN expressions )
            	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2184:8: KW_IN expressions
            	    {
            	    KW_IN1029=(Token)match(input,KW_IN,FOLLOW_KW_IN_in_precedenceEqualExpression15877);  
            	    stream_KW_IN.add(KW_IN1029);


            	    pushFollow(FOLLOW_expressions_in_precedenceEqualExpression15879);
            	    expressions1030=expressions();

            	    state._fsp--;

            	    stream_expressions.add(expressions1030.getTree());

            	    }


            	    // AST REWRITE
            	    // elements: expressions, KW_IN, precedenceEqualExpression
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (CommonTree)adaptor.nil();
            	    // 2185:8: -> ^( TOK_FUNCTION KW_IN $precedenceEqualExpression expressions )
            	    {
            	        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2185:11: ^( TOK_FUNCTION KW_IN $precedenceEqualExpression expressions )
            	        {
            	        CommonTree root_1 = (CommonTree)adaptor.nil();
            	        root_1 = (CommonTree)adaptor.becomeRoot(
            	        (CommonTree)adaptor.create(TOK_FUNCTION, "TOK_FUNCTION")
            	        , root_1);

            	        adaptor.addChild(root_1, 
            	        stream_KW_IN.nextNode()
            	        );

            	        adaptor.addChild(root_1, stream_retval.nextTree());

            	        adaptor.addChild(root_1, stream_expressions.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }


            	    retval.tree = root_0;

            	    }
            	    break;
            	case 5 :
            	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2186:7: ( KW_NOT KW_BETWEEN (min= precedenceBitwiseOrExpression ) KW_AND (max= precedenceBitwiseOrExpression ) )
            	    {
            	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2186:7: ( KW_NOT KW_BETWEEN (min= precedenceBitwiseOrExpression ) KW_AND (max= precedenceBitwiseOrExpression ) )
            	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2186:9: KW_NOT KW_BETWEEN (min= precedenceBitwiseOrExpression ) KW_AND (max= precedenceBitwiseOrExpression )
            	    {
            	    KW_NOT1031=(Token)match(input,KW_NOT,FOLLOW_KW_NOT_in_precedenceEqualExpression15910);  
            	    stream_KW_NOT.add(KW_NOT1031);


            	    KW_BETWEEN1032=(Token)match(input,KW_BETWEEN,FOLLOW_KW_BETWEEN_in_precedenceEqualExpression15912);  
            	    stream_KW_BETWEEN.add(KW_BETWEEN1032);


            	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2186:27: (min= precedenceBitwiseOrExpression )
            	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2186:28: min= precedenceBitwiseOrExpression
            	    {
            	    pushFollow(FOLLOW_precedenceBitwiseOrExpression_in_precedenceEqualExpression15917);
            	    min=precedenceBitwiseOrExpression();

            	    state._fsp--;

            	    stream_precedenceBitwiseOrExpression.add(min.getTree());

            	    }


            	    KW_AND1033=(Token)match(input,KW_AND,FOLLOW_KW_AND_in_precedenceEqualExpression15920);  
            	    stream_KW_AND.add(KW_AND1033);


            	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2186:70: (max= precedenceBitwiseOrExpression )
            	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2186:71: max= precedenceBitwiseOrExpression
            	    {
            	    pushFollow(FOLLOW_precedenceBitwiseOrExpression_in_precedenceEqualExpression15925);
            	    max=precedenceBitwiseOrExpression();

            	    state._fsp--;

            	    stream_precedenceBitwiseOrExpression.add(max.getTree());

            	    }


            	    }


            	    // AST REWRITE
            	    // elements: max, left, min
            	    // token labels: 
            	    // rule labels: min, retval, max, left
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_min=new RewriteRuleSubtreeStream(adaptor,"rule min",min!=null?min.tree:null);
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            	    RewriteRuleSubtreeStream stream_max=new RewriteRuleSubtreeStream(adaptor,"rule max",max!=null?max.tree:null);
            	    RewriteRuleSubtreeStream stream_left=new RewriteRuleSubtreeStream(adaptor,"rule left",left!=null?left.tree:null);

            	    root_0 = (CommonTree)adaptor.nil();
            	    // 2187:8: -> ^( TOK_FUNCTION Identifier[\"between\"] KW_TRUE $left $min $max)
            	    {
            	        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2187:11: ^( TOK_FUNCTION Identifier[\"between\"] KW_TRUE $left $min $max)
            	        {
            	        CommonTree root_1 = (CommonTree)adaptor.nil();
            	        root_1 = (CommonTree)adaptor.becomeRoot(
            	        (CommonTree)adaptor.create(TOK_FUNCTION, "TOK_FUNCTION")
            	        , root_1);

            	        adaptor.addChild(root_1, 
            	        (CommonTree)adaptor.create(Identifier, "between")
            	        );

            	        adaptor.addChild(root_1, 
            	        (CommonTree)adaptor.create(KW_TRUE, "KW_TRUE")
            	        );

            	        adaptor.addChild(root_1, stream_left.nextTree());

            	        adaptor.addChild(root_1, stream_min.nextTree());

            	        adaptor.addChild(root_1, stream_max.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }


            	    retval.tree = root_0;

            	    }
            	    break;
            	case 6 :
            	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2188:7: ( KW_BETWEEN (min= precedenceBitwiseOrExpression ) KW_AND (max= precedenceBitwiseOrExpression ) )
            	    {
            	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2188:7: ( KW_BETWEEN (min= precedenceBitwiseOrExpression ) KW_AND (max= precedenceBitwiseOrExpression ) )
            	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2188:9: KW_BETWEEN (min= precedenceBitwiseOrExpression ) KW_AND (max= precedenceBitwiseOrExpression )
            	    {
            	    KW_BETWEEN1034=(Token)match(input,KW_BETWEEN,FOLLOW_KW_BETWEEN_in_precedenceEqualExpression15965);  
            	    stream_KW_BETWEEN.add(KW_BETWEEN1034);


            	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2188:20: (min= precedenceBitwiseOrExpression )
            	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2188:21: min= precedenceBitwiseOrExpression
            	    {
            	    pushFollow(FOLLOW_precedenceBitwiseOrExpression_in_precedenceEqualExpression15970);
            	    min=precedenceBitwiseOrExpression();

            	    state._fsp--;

            	    stream_precedenceBitwiseOrExpression.add(min.getTree());

            	    }


            	    KW_AND1035=(Token)match(input,KW_AND,FOLLOW_KW_AND_in_precedenceEqualExpression15973);  
            	    stream_KW_AND.add(KW_AND1035);


            	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2188:63: (max= precedenceBitwiseOrExpression )
            	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2188:64: max= precedenceBitwiseOrExpression
            	    {
            	    pushFollow(FOLLOW_precedenceBitwiseOrExpression_in_precedenceEqualExpression15978);
            	    max=precedenceBitwiseOrExpression();

            	    state._fsp--;

            	    stream_precedenceBitwiseOrExpression.add(max.getTree());

            	    }


            	    }


            	    // AST REWRITE
            	    // elements: left, min, max
            	    // token labels: 
            	    // rule labels: min, retval, max, left
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_min=new RewriteRuleSubtreeStream(adaptor,"rule min",min!=null?min.tree:null);
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            	    RewriteRuleSubtreeStream stream_max=new RewriteRuleSubtreeStream(adaptor,"rule max",max!=null?max.tree:null);
            	    RewriteRuleSubtreeStream stream_left=new RewriteRuleSubtreeStream(adaptor,"rule left",left!=null?left.tree:null);

            	    root_0 = (CommonTree)adaptor.nil();
            	    // 2189:8: -> ^( TOK_FUNCTION Identifier[\"between\"] KW_FALSE $left $min $max)
            	    {
            	        // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2189:11: ^( TOK_FUNCTION Identifier[\"between\"] KW_FALSE $left $min $max)
            	        {
            	        CommonTree root_1 = (CommonTree)adaptor.nil();
            	        root_1 = (CommonTree)adaptor.becomeRoot(
            	        (CommonTree)adaptor.create(TOK_FUNCTION, "TOK_FUNCTION")
            	        , root_1);

            	        adaptor.addChild(root_1, 
            	        (CommonTree)adaptor.create(Identifier, "between")
            	        );

            	        adaptor.addChild(root_1, 
            	        (CommonTree)adaptor.create(KW_FALSE, "KW_FALSE")
            	        );

            	        adaptor.addChild(root_1, stream_left.nextTree());

            	        adaptor.addChild(root_1, stream_min.nextTree());

            	        adaptor.addChild(root_1, stream_max.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }


            	    retval.tree = root_0;

            	    }
            	    break;

            	default :
            	    break loop295;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "precedenceEqualExpression"


    public static class expressions_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expressions"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2193:1: expressions : LPAREN expression ( COMMA expression )* RPAREN -> ( expression )* ;
    public final HiveParser.expressions_return expressions() throws RecognitionException {
        HiveParser.expressions_return retval = new HiveParser.expressions_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token LPAREN1036=null;
        Token COMMA1038=null;
        Token RPAREN1040=null;
        HiveParser.expression_return expression1037 =null;

        HiveParser.expression_return expression1039 =null;


        CommonTree LPAREN1036_tree=null;
        CommonTree COMMA1038_tree=null;
        CommonTree RPAREN1040_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2194:5: ( LPAREN expression ( COMMA expression )* RPAREN -> ( expression )* )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2195:5: LPAREN expression ( COMMA expression )* RPAREN
            {
            LPAREN1036=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_expressions16036);  
            stream_LPAREN.add(LPAREN1036);


            pushFollow(FOLLOW_expression_in_expressions16038);
            expression1037=expression();

            state._fsp--;

            stream_expression.add(expression1037.getTree());

            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2195:23: ( COMMA expression )*
            loop296:
            do {
                int alt296=2;
                int LA296_0 = input.LA(1);

                if ( (LA296_0==COMMA) ) {
                    alt296=1;
                }


                switch (alt296) {
            	case 1 :
            	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2195:24: COMMA expression
            	    {
            	    COMMA1038=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressions16041);  
            	    stream_COMMA.add(COMMA1038);


            	    pushFollow(FOLLOW_expression_in_expressions16043);
            	    expression1039=expression();

            	    state._fsp--;

            	    stream_expression.add(expression1039.getTree());

            	    }
            	    break;

            	default :
            	    break loop296;
                }
            } while (true);


            RPAREN1040=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_expressions16047);  
            stream_RPAREN.add(RPAREN1040);


            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 2195:50: -> ( expression )*
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2195:53: ( expression )*
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_0, stream_expression.nextTree());

                }
                stream_expression.reset();

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expressions"


    public static class precedenceNotOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "precedenceNotOperator"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2198:1: precedenceNotOperator : KW_NOT ;
    public final HiveParser.precedenceNotOperator_return precedenceNotOperator() throws RecognitionException {
        HiveParser.precedenceNotOperator_return retval = new HiveParser.precedenceNotOperator_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_NOT1041=null;

        CommonTree KW_NOT1041_tree=null;

        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2199:5: ( KW_NOT )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2200:5: KW_NOT
            {
            root_0 = (CommonTree)adaptor.nil();


            KW_NOT1041=(Token)match(input,KW_NOT,FOLLOW_KW_NOT_in_precedenceNotOperator16073); 
            KW_NOT1041_tree = 
            (CommonTree)adaptor.create(KW_NOT1041)
            ;
            adaptor.addChild(root_0, KW_NOT1041_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "precedenceNotOperator"


    public static class precedenceNotExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "precedenceNotExpression"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2203:1: precedenceNotExpression : ( precedenceNotOperator ^)* precedenceEqualExpression ;
    public final HiveParser.precedenceNotExpression_return precedenceNotExpression() throws RecognitionException {
        HiveParser.precedenceNotExpression_return retval = new HiveParser.precedenceNotExpression_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        HiveParser.precedenceNotOperator_return precedenceNotOperator1042 =null;

        HiveParser.precedenceEqualExpression_return precedenceEqualExpression1043 =null;



        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2204:5: ( ( precedenceNotOperator ^)* precedenceEqualExpression )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2205:5: ( precedenceNotOperator ^)* precedenceEqualExpression
            {
            root_0 = (CommonTree)adaptor.nil();


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2205:5: ( precedenceNotOperator ^)*
            loop297:
            do {
                int alt297=2;
                int LA297_0 = input.LA(1);

                if ( (LA297_0==KW_NOT) ) {
                    alt297=1;
                }


                switch (alt297) {
            	case 1 :
            	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2205:6: precedenceNotOperator ^
            	    {
            	    pushFollow(FOLLOW_precedenceNotOperator_in_precedenceNotExpression16095);
            	    precedenceNotOperator1042=precedenceNotOperator();

            	    state._fsp--;

            	    root_0 = (CommonTree)adaptor.becomeRoot(precedenceNotOperator1042.getTree(), root_0);

            	    }
            	    break;

            	default :
            	    break loop297;
                }
            } while (true);


            pushFollow(FOLLOW_precedenceEqualExpression_in_precedenceNotExpression16100);
            precedenceEqualExpression1043=precedenceEqualExpression();

            state._fsp--;

            adaptor.addChild(root_0, precedenceEqualExpression1043.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "precedenceNotExpression"


    public static class precedenceAndOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "precedenceAndOperator"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2209:1: precedenceAndOperator : KW_AND ;
    public final HiveParser.precedenceAndOperator_return precedenceAndOperator() throws RecognitionException {
        HiveParser.precedenceAndOperator_return retval = new HiveParser.precedenceAndOperator_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_AND1044=null;

        CommonTree KW_AND1044_tree=null;

        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2210:5: ( KW_AND )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2211:5: KW_AND
            {
            root_0 = (CommonTree)adaptor.nil();


            KW_AND1044=(Token)match(input,KW_AND,FOLLOW_KW_AND_in_precedenceAndOperator16122); 
            KW_AND1044_tree = 
            (CommonTree)adaptor.create(KW_AND1044)
            ;
            adaptor.addChild(root_0, KW_AND1044_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "precedenceAndOperator"


    public static class precedenceAndExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "precedenceAndExpression"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2214:1: precedenceAndExpression : precedenceNotExpression ( precedenceAndOperator ^ precedenceNotExpression )* ;
    public final HiveParser.precedenceAndExpression_return precedenceAndExpression() throws RecognitionException {
        HiveParser.precedenceAndExpression_return retval = new HiveParser.precedenceAndExpression_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        HiveParser.precedenceNotExpression_return precedenceNotExpression1045 =null;

        HiveParser.precedenceAndOperator_return precedenceAndOperator1046 =null;

        HiveParser.precedenceNotExpression_return precedenceNotExpression1047 =null;



        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2215:5: ( precedenceNotExpression ( precedenceAndOperator ^ precedenceNotExpression )* )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2216:5: precedenceNotExpression ( precedenceAndOperator ^ precedenceNotExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();


            pushFollow(FOLLOW_precedenceNotExpression_in_precedenceAndExpression16143);
            precedenceNotExpression1045=precedenceNotExpression();

            state._fsp--;

            adaptor.addChild(root_0, precedenceNotExpression1045.getTree());

            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2216:29: ( precedenceAndOperator ^ precedenceNotExpression )*
            loop298:
            do {
                int alt298=2;
                int LA298_0 = input.LA(1);

                if ( (LA298_0==KW_AND) ) {
                    alt298=1;
                }


                switch (alt298) {
            	case 1 :
            	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2216:30: precedenceAndOperator ^ precedenceNotExpression
            	    {
            	    pushFollow(FOLLOW_precedenceAndOperator_in_precedenceAndExpression16146);
            	    precedenceAndOperator1046=precedenceAndOperator();

            	    state._fsp--;

            	    root_0 = (CommonTree)adaptor.becomeRoot(precedenceAndOperator1046.getTree(), root_0);

            	    pushFollow(FOLLOW_precedenceNotExpression_in_precedenceAndExpression16149);
            	    precedenceNotExpression1047=precedenceNotExpression();

            	    state._fsp--;

            	    adaptor.addChild(root_0, precedenceNotExpression1047.getTree());

            	    }
            	    break;

            	default :
            	    break loop298;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "precedenceAndExpression"


    public static class precedenceOrOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "precedenceOrOperator"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2220:1: precedenceOrOperator : KW_OR ;
    public final HiveParser.precedenceOrOperator_return precedenceOrOperator() throws RecognitionException {
        HiveParser.precedenceOrOperator_return retval = new HiveParser.precedenceOrOperator_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_OR1048=null;

        CommonTree KW_OR1048_tree=null;

        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2221:5: ( KW_OR )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2222:5: KW_OR
            {
            root_0 = (CommonTree)adaptor.nil();


            KW_OR1048=(Token)match(input,KW_OR,FOLLOW_KW_OR_in_precedenceOrOperator16173); 
            KW_OR1048_tree = 
            (CommonTree)adaptor.create(KW_OR1048)
            ;
            adaptor.addChild(root_0, KW_OR1048_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "precedenceOrOperator"


    public static class precedenceOrExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "precedenceOrExpression"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2225:1: precedenceOrExpression : precedenceAndExpression ( precedenceOrOperator ^ precedenceAndExpression )* ;
    public final HiveParser.precedenceOrExpression_return precedenceOrExpression() throws RecognitionException {
        HiveParser.precedenceOrExpression_return retval = new HiveParser.precedenceOrExpression_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        HiveParser.precedenceAndExpression_return precedenceAndExpression1049 =null;

        HiveParser.precedenceOrOperator_return precedenceOrOperator1050 =null;

        HiveParser.precedenceAndExpression_return precedenceAndExpression1051 =null;



        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2226:5: ( precedenceAndExpression ( precedenceOrOperator ^ precedenceAndExpression )* )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2227:5: precedenceAndExpression ( precedenceOrOperator ^ precedenceAndExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();


            pushFollow(FOLLOW_precedenceAndExpression_in_precedenceOrExpression16194);
            precedenceAndExpression1049=precedenceAndExpression();

            state._fsp--;

            adaptor.addChild(root_0, precedenceAndExpression1049.getTree());

            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2227:29: ( precedenceOrOperator ^ precedenceAndExpression )*
            loop299:
            do {
                int alt299=2;
                int LA299_0 = input.LA(1);

                if ( (LA299_0==KW_OR) ) {
                    alt299=1;
                }


                switch (alt299) {
            	case 1 :
            	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2227:30: precedenceOrOperator ^ precedenceAndExpression
            	    {
            	    pushFollow(FOLLOW_precedenceOrOperator_in_precedenceOrExpression16197);
            	    precedenceOrOperator1050=precedenceOrOperator();

            	    state._fsp--;

            	    root_0 = (CommonTree)adaptor.becomeRoot(precedenceOrOperator1050.getTree(), root_0);

            	    pushFollow(FOLLOW_precedenceAndExpression_in_precedenceOrExpression16200);
            	    precedenceAndExpression1051=precedenceAndExpression();

            	    state._fsp--;

            	    adaptor.addChild(root_0, precedenceAndExpression1051.getTree());

            	    }
            	    break;

            	default :
            	    break loop299;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "precedenceOrExpression"


    public static class booleanValue_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "booleanValue"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2231:1: booleanValue : ( KW_TRUE ^| KW_FALSE ^);
    public final HiveParser.booleanValue_return booleanValue() throws RecognitionException {
        HiveParser.booleanValue_return retval = new HiveParser.booleanValue_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_TRUE1052=null;
        Token KW_FALSE1053=null;

        CommonTree KW_TRUE1052_tree=null;
        CommonTree KW_FALSE1053_tree=null;

        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2232:5: ( KW_TRUE ^| KW_FALSE ^)
            int alt300=2;
            int LA300_0 = input.LA(1);

            if ( (LA300_0==KW_TRUE) ) {
                alt300=1;
            }
            else if ( (LA300_0==KW_FALSE) ) {
                alt300=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 300, 0, input);

                throw nvae;

            }
            switch (alt300) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2233:5: KW_TRUE ^
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    KW_TRUE1052=(Token)match(input,KW_TRUE,FOLLOW_KW_TRUE_in_booleanValue16224); 
                    KW_TRUE1052_tree = 
                    (CommonTree)adaptor.create(KW_TRUE1052)
                    ;
                    root_0 = (CommonTree)adaptor.becomeRoot(KW_TRUE1052_tree, root_0);


                    }
                    break;
                case 2 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2233:16: KW_FALSE ^
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    KW_FALSE1053=(Token)match(input,KW_FALSE,FOLLOW_KW_FALSE_in_booleanValue16229); 
                    KW_FALSE1053_tree = 
                    (CommonTree)adaptor.create(KW_FALSE1053)
                    ;
                    root_0 = (CommonTree)adaptor.becomeRoot(KW_FALSE1053_tree, root_0);


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "booleanValue"


    public static class tableOrPartition_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "tableOrPartition"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2236:1: tableOrPartition : tableName ( partitionSpec )? -> ^( TOK_TAB tableName ( partitionSpec )? ) ;
    public final HiveParser.tableOrPartition_return tableOrPartition() throws RecognitionException {
        HiveParser.tableOrPartition_return retval = new HiveParser.tableOrPartition_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        HiveParser.tableName_return tableName1054 =null;

        HiveParser.partitionSpec_return partitionSpec1055 =null;


        RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
        RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2237:4: ( tableName ( partitionSpec )? -> ^( TOK_TAB tableName ( partitionSpec )? ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2238:4: tableName ( partitionSpec )?
            {
            pushFollow(FOLLOW_tableName_in_tableOrPartition16249);
            tableName1054=tableName();

            state._fsp--;

            stream_tableName.add(tableName1054.getTree());

            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2238:14: ( partitionSpec )?
            int alt301=2;
            int LA301_0 = input.LA(1);

            if ( (LA301_0==KW_PARTITION) ) {
                alt301=1;
            }
            switch (alt301) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2238:14: partitionSpec
                    {
                    pushFollow(FOLLOW_partitionSpec_in_tableOrPartition16251);
                    partitionSpec1055=partitionSpec();

                    state._fsp--;

                    stream_partitionSpec.add(partitionSpec1055.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: tableName, partitionSpec
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 2238:29: -> ^( TOK_TAB tableName ( partitionSpec )? )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2238:32: ^( TOK_TAB tableName ( partitionSpec )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_TAB, "TOK_TAB")
                , root_1);

                adaptor.addChild(root_1, stream_tableName.nextTree());

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2238:52: ( partitionSpec )?
                if ( stream_partitionSpec.hasNext() ) {
                    adaptor.addChild(root_1, stream_partitionSpec.nextTree());

                }
                stream_partitionSpec.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "tableOrPartition"


    public static class partitionSpec_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "partitionSpec"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2241:1: partitionSpec : KW_PARTITION LPAREN partitionVal ( COMMA partitionVal )* RPAREN -> ^( TOK_PARTSPEC ( partitionVal )+ ) ;
    public final HiveParser.partitionSpec_return partitionSpec() throws RecognitionException {
        HiveParser.partitionSpec_return retval = new HiveParser.partitionSpec_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_PARTITION1056=null;
        Token LPAREN1057=null;
        Token COMMA1059=null;
        Token RPAREN1061=null;
        HiveParser.partitionVal_return partitionVal1058 =null;

        HiveParser.partitionVal_return partitionVal1060 =null;


        CommonTree KW_PARTITION1056_tree=null;
        CommonTree LPAREN1057_tree=null;
        CommonTree COMMA1059_tree=null;
        CommonTree RPAREN1061_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_KW_PARTITION=new RewriteRuleTokenStream(adaptor,"token KW_PARTITION");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_partitionVal=new RewriteRuleSubtreeStream(adaptor,"rule partitionVal");
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2242:5: ( KW_PARTITION LPAREN partitionVal ( COMMA partitionVal )* RPAREN -> ^( TOK_PARTSPEC ( partitionVal )+ ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2243:5: KW_PARTITION LPAREN partitionVal ( COMMA partitionVal )* RPAREN
            {
            KW_PARTITION1056=(Token)match(input,KW_PARTITION,FOLLOW_KW_PARTITION_in_partitionSpec16283);  
            stream_KW_PARTITION.add(KW_PARTITION1056);


            LPAREN1057=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_partitionSpec16290);  
            stream_LPAREN.add(LPAREN1057);


            pushFollow(FOLLOW_partitionVal_in_partitionSpec16292);
            partitionVal1058=partitionVal();

            state._fsp--;

            stream_partitionVal.add(partitionVal1058.getTree());

            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2244:26: ( COMMA partitionVal )*
            loop302:
            do {
                int alt302=2;
                int LA302_0 = input.LA(1);

                if ( (LA302_0==COMMA) ) {
                    alt302=1;
                }


                switch (alt302) {
            	case 1 :
            	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2244:27: COMMA partitionVal
            	    {
            	    COMMA1059=(Token)match(input,COMMA,FOLLOW_COMMA_in_partitionSpec16295);  
            	    stream_COMMA.add(COMMA1059);


            	    pushFollow(FOLLOW_partitionVal_in_partitionSpec16298);
            	    partitionVal1060=partitionVal();

            	    state._fsp--;

            	    stream_partitionVal.add(partitionVal1060.getTree());

            	    }
            	    break;

            	default :
            	    break loop302;
                }
            } while (true);


            RPAREN1061=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_partitionSpec16303);  
            stream_RPAREN.add(RPAREN1061);


            // AST REWRITE
            // elements: partitionVal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 2244:57: -> ^( TOK_PARTSPEC ( partitionVal )+ )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2244:60: ^( TOK_PARTSPEC ( partitionVal )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_PARTSPEC, "TOK_PARTSPEC")
                , root_1);

                if ( !(stream_partitionVal.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_partitionVal.hasNext() ) {
                    adaptor.addChild(root_1, stream_partitionVal.nextTree());

                }
                stream_partitionVal.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "partitionSpec"


    public static class partitionVal_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "partitionVal"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2247:1: partitionVal : Identifier ( EQUAL constant )? -> ^( TOK_PARTVAL Identifier ( constant )? ) ;
    public final HiveParser.partitionVal_return partitionVal() throws RecognitionException {
        HiveParser.partitionVal_return retval = new HiveParser.partitionVal_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token Identifier1062=null;
        Token EQUAL1063=null;
        HiveParser.constant_return constant1064 =null;


        CommonTree Identifier1062_tree=null;
        CommonTree EQUAL1063_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");
        RewriteRuleSubtreeStream stream_constant=new RewriteRuleSubtreeStream(adaptor,"rule constant");
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2248:5: ( Identifier ( EQUAL constant )? -> ^( TOK_PARTVAL Identifier ( constant )? ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2249:5: Identifier ( EQUAL constant )?
            {
            Identifier1062=(Token)match(input,Identifier,FOLLOW_Identifier_in_partitionVal16334);  
            stream_Identifier.add(Identifier1062);


            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2249:16: ( EQUAL constant )?
            int alt303=2;
            int LA303_0 = input.LA(1);

            if ( (LA303_0==EQUAL) ) {
                alt303=1;
            }
            switch (alt303) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2249:17: EQUAL constant
                    {
                    EQUAL1063=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_partitionVal16337);  
                    stream_EQUAL.add(EQUAL1063);


                    pushFollow(FOLLOW_constant_in_partitionVal16339);
                    constant1064=constant();

                    state._fsp--;

                    stream_constant.add(constant1064.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: Identifier, constant
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 2249:34: -> ^( TOK_PARTVAL Identifier ( constant )? )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2249:37: ^( TOK_PARTVAL Identifier ( constant )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_PARTVAL, "TOK_PARTVAL")
                , root_1);

                adaptor.addChild(root_1, 
                stream_Identifier.nextNode()
                );

                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2249:62: ( constant )?
                if ( stream_constant.hasNext() ) {
                    adaptor.addChild(root_1, stream_constant.nextTree());

                }
                stream_constant.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "partitionVal"


    public static class dropPartitionSpec_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "dropPartitionSpec"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2252:1: dropPartitionSpec : KW_PARTITION LPAREN dropPartitionVal ( COMMA dropPartitionVal )* RPAREN -> ^( TOK_PARTSPEC ( dropPartitionVal )+ ) ;
    public final HiveParser.dropPartitionSpec_return dropPartitionSpec() throws RecognitionException {
        HiveParser.dropPartitionSpec_return retval = new HiveParser.dropPartitionSpec_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_PARTITION1065=null;
        Token LPAREN1066=null;
        Token COMMA1068=null;
        Token RPAREN1070=null;
        HiveParser.dropPartitionVal_return dropPartitionVal1067 =null;

        HiveParser.dropPartitionVal_return dropPartitionVal1069 =null;


        CommonTree KW_PARTITION1065_tree=null;
        CommonTree LPAREN1066_tree=null;
        CommonTree COMMA1068_tree=null;
        CommonTree RPAREN1070_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_KW_PARTITION=new RewriteRuleTokenStream(adaptor,"token KW_PARTITION");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_dropPartitionVal=new RewriteRuleSubtreeStream(adaptor,"rule dropPartitionVal");
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2253:5: ( KW_PARTITION LPAREN dropPartitionVal ( COMMA dropPartitionVal )* RPAREN -> ^( TOK_PARTSPEC ( dropPartitionVal )+ ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2254:5: KW_PARTITION LPAREN dropPartitionVal ( COMMA dropPartitionVal )* RPAREN
            {
            KW_PARTITION1065=(Token)match(input,KW_PARTITION,FOLLOW_KW_PARTITION_in_dropPartitionSpec16373);  
            stream_KW_PARTITION.add(KW_PARTITION1065);


            LPAREN1066=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_dropPartitionSpec16380);  
            stream_LPAREN.add(LPAREN1066);


            pushFollow(FOLLOW_dropPartitionVal_in_dropPartitionSpec16382);
            dropPartitionVal1067=dropPartitionVal();

            state._fsp--;

            stream_dropPartitionVal.add(dropPartitionVal1067.getTree());

            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2255:30: ( COMMA dropPartitionVal )*
            loop304:
            do {
                int alt304=2;
                int LA304_0 = input.LA(1);

                if ( (LA304_0==COMMA) ) {
                    alt304=1;
                }


                switch (alt304) {
            	case 1 :
            	    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2255:31: COMMA dropPartitionVal
            	    {
            	    COMMA1068=(Token)match(input,COMMA,FOLLOW_COMMA_in_dropPartitionSpec16385);  
            	    stream_COMMA.add(COMMA1068);


            	    pushFollow(FOLLOW_dropPartitionVal_in_dropPartitionSpec16388);
            	    dropPartitionVal1069=dropPartitionVal();

            	    state._fsp--;

            	    stream_dropPartitionVal.add(dropPartitionVal1069.getTree());

            	    }
            	    break;

            	default :
            	    break loop304;
                }
            } while (true);


            RPAREN1070=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_dropPartitionSpec16393);  
            stream_RPAREN.add(RPAREN1070);


            // AST REWRITE
            // elements: dropPartitionVal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 2255:65: -> ^( TOK_PARTSPEC ( dropPartitionVal )+ )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2255:68: ^( TOK_PARTSPEC ( dropPartitionVal )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_PARTSPEC, "TOK_PARTSPEC")
                , root_1);

                if ( !(stream_dropPartitionVal.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_dropPartitionVal.hasNext() ) {
                    adaptor.addChild(root_1, stream_dropPartitionVal.nextTree());

                }
                stream_dropPartitionVal.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "dropPartitionSpec"


    public static class dropPartitionVal_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "dropPartitionVal"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2258:1: dropPartitionVal : Identifier dropPartitionOperator constant -> ^( TOK_PARTVAL Identifier dropPartitionOperator constant ) ;
    public final HiveParser.dropPartitionVal_return dropPartitionVal() throws RecognitionException {
        HiveParser.dropPartitionVal_return retval = new HiveParser.dropPartitionVal_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token Identifier1071=null;
        HiveParser.dropPartitionOperator_return dropPartitionOperator1072 =null;

        HiveParser.constant_return constant1073 =null;


        CommonTree Identifier1071_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_dropPartitionOperator=new RewriteRuleSubtreeStream(adaptor,"rule dropPartitionOperator");
        RewriteRuleSubtreeStream stream_constant=new RewriteRuleSubtreeStream(adaptor,"rule constant");
        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2259:5: ( Identifier dropPartitionOperator constant -> ^( TOK_PARTVAL Identifier dropPartitionOperator constant ) )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2260:5: Identifier dropPartitionOperator constant
            {
            Identifier1071=(Token)match(input,Identifier,FOLLOW_Identifier_in_dropPartitionVal16424);  
            stream_Identifier.add(Identifier1071);


            pushFollow(FOLLOW_dropPartitionOperator_in_dropPartitionVal16426);
            dropPartitionOperator1072=dropPartitionOperator();

            state._fsp--;

            stream_dropPartitionOperator.add(dropPartitionOperator1072.getTree());

            pushFollow(FOLLOW_constant_in_dropPartitionVal16428);
            constant1073=constant();

            state._fsp--;

            stream_constant.add(constant1073.getTree());

            // AST REWRITE
            // elements: dropPartitionOperator, constant, Identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 2260:47: -> ^( TOK_PARTVAL Identifier dropPartitionOperator constant )
            {
                // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2260:50: ^( TOK_PARTVAL Identifier dropPartitionOperator constant )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_PARTVAL, "TOK_PARTVAL")
                , root_1);

                adaptor.addChild(root_1, 
                stream_Identifier.nextNode()
                );

                adaptor.addChild(root_1, stream_dropPartitionOperator.nextTree());

                adaptor.addChild(root_1, stream_constant.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "dropPartitionVal"


    public static class dropPartitionOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "dropPartitionOperator"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2263:1: dropPartitionOperator : ( EQUAL | NOTEQUAL | LESSTHANOREQUALTO | LESSTHAN | GREATERTHANOREQUALTO | GREATERTHAN );
    public final HiveParser.dropPartitionOperator_return dropPartitionOperator() throws RecognitionException {
        HiveParser.dropPartitionOperator_return retval = new HiveParser.dropPartitionOperator_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token set1074=null;

        CommonTree set1074_tree=null;

        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2264:5: ( EQUAL | NOTEQUAL | LESSTHANOREQUALTO | LESSTHAN | GREATERTHANOREQUALTO | GREATERTHAN )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:
            {
            root_0 = (CommonTree)adaptor.nil();


            set1074=(Token)input.LT(1);

            if ( input.LA(1)==EQUAL||(input.LA(1) >= GREATERTHAN && input.LA(1) <= GREATERTHANOREQUALTO)||(input.LA(1) >= LESSTHAN && input.LA(1) <= LESSTHANOREQUALTO)||input.LA(1)==NOTEQUAL ) {
                input.consume();
                adaptor.addChild(root_0, 
                (CommonTree)adaptor.create(set1074)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "dropPartitionOperator"


    public static class sysFuncNames_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "sysFuncNames"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2268:1: sysFuncNames : ( KW_AND | KW_OR | KW_NOT | KW_LIKE | KW_IF | KW_CASE | KW_WHEN | KW_TINYINT | KW_SMALLINT | KW_INT | KW_BIGINT | KW_FLOAT | KW_DOUBLE | KW_BOOLEAN | KW_STRING | KW_BINARY | KW_ARRAY | KW_MAP | KW_STRUCT | KW_UNIONTYPE | EQUAL | EQUAL_NS | NOTEQUAL | LESSTHANOREQUALTO | LESSTHAN | GREATERTHANOREQUALTO | GREATERTHAN | DIVIDE | PLUS | MINUS | STAR | MOD | DIV | AMPERSAND | TILDE | BITWISEOR | BITWISEXOR | KW_RLIKE | KW_REGEXP | KW_IN | KW_BETWEEN );
    public final HiveParser.sysFuncNames_return sysFuncNames() throws RecognitionException {
        HiveParser.sysFuncNames_return retval = new HiveParser.sysFuncNames_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token set1075=null;

        CommonTree set1075_tree=null;

        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2269:5: ( KW_AND | KW_OR | KW_NOT | KW_LIKE | KW_IF | KW_CASE | KW_WHEN | KW_TINYINT | KW_SMALLINT | KW_INT | KW_BIGINT | KW_FLOAT | KW_DOUBLE | KW_BOOLEAN | KW_STRING | KW_BINARY | KW_ARRAY | KW_MAP | KW_STRUCT | KW_UNIONTYPE | EQUAL | EQUAL_NS | NOTEQUAL | LESSTHANOREQUALTO | LESSTHAN | GREATERTHANOREQUALTO | GREATERTHAN | DIVIDE | PLUS | MINUS | STAR | MOD | DIV | AMPERSAND | TILDE | BITWISEOR | BITWISEXOR | KW_RLIKE | KW_REGEXP | KW_IN | KW_BETWEEN )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:
            {
            root_0 = (CommonTree)adaptor.nil();


            set1075=(Token)input.LT(1);

            if ( (input.LA(1) >= AMPERSAND && input.LA(1) <= BITWISEXOR)||(input.LA(1) >= DIV && input.LA(1) <= DIVIDE)||(input.LA(1) >= EQUAL && input.LA(1) <= EQUAL_NS)||(input.LA(1) >= GREATERTHAN && input.LA(1) <= GREATERTHANOREQUALTO)||input.LA(1)==KW_AND||input.LA(1)==KW_ARRAY||(input.LA(1) >= KW_BETWEEN && input.LA(1) <= KW_BOOLEAN)||input.LA(1)==KW_CASE||input.LA(1)==KW_DOUBLE||input.LA(1)==KW_FLOAT||input.LA(1)==KW_IF||input.LA(1)==KW_IN||input.LA(1)==KW_INT||input.LA(1)==KW_LIKE||input.LA(1)==KW_MAP||input.LA(1)==KW_NOT||input.LA(1)==KW_OR||input.LA(1)==KW_REGEXP||input.LA(1)==KW_RLIKE||input.LA(1)==KW_SMALLINT||(input.LA(1) >= KW_STRING && input.LA(1) <= KW_STRUCT)||input.LA(1)==KW_TINYINT||input.LA(1)==KW_UNIONTYPE||input.LA(1)==KW_WHEN||(input.LA(1) >= LESSTHAN && input.LA(1) <= LESSTHANOREQUALTO)||(input.LA(1) >= MINUS && input.LA(1) <= NOTEQUAL)||input.LA(1)==PLUS||input.LA(1)==STAR||input.LA(1)==TILDE ) {
                input.consume();
                adaptor.addChild(root_0, 
                (CommonTree)adaptor.create(set1075)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "sysFuncNames"


    public static class descFuncNames_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "descFuncNames"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2313:1: descFuncNames : ( sysFuncNames | StringLiteral | Identifier );
    public final HiveParser.descFuncNames_return descFuncNames() throws RecognitionException {
        HiveParser.descFuncNames_return retval = new HiveParser.descFuncNames_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token StringLiteral1077=null;
        Token Identifier1078=null;
        HiveParser.sysFuncNames_return sysFuncNames1076 =null;


        CommonTree StringLiteral1077_tree=null;
        CommonTree Identifier1078_tree=null;

        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2314:5: ( sysFuncNames | StringLiteral | Identifier )
            int alt305=3;
            switch ( input.LA(1) ) {
            case AMPERSAND:
            case BITWISEOR:
            case BITWISEXOR:
            case DIV:
            case DIVIDE:
            case EQUAL:
            case EQUAL_NS:
            case GREATERTHAN:
            case GREATERTHANOREQUALTO:
            case KW_AND:
            case KW_ARRAY:
            case KW_BETWEEN:
            case KW_BIGINT:
            case KW_BINARY:
            case KW_BOOLEAN:
            case KW_CASE:
            case KW_DOUBLE:
            case KW_FLOAT:
            case KW_IF:
            case KW_IN:
            case KW_INT:
            case KW_LIKE:
            case KW_MAP:
            case KW_NOT:
            case KW_OR:
            case KW_REGEXP:
            case KW_RLIKE:
            case KW_SMALLINT:
            case KW_STRING:
            case KW_STRUCT:
            case KW_TINYINT:
            case KW_UNIONTYPE:
            case KW_WHEN:
            case LESSTHAN:
            case LESSTHANOREQUALTO:
            case MINUS:
            case MOD:
            case NOTEQUAL:
            case PLUS:
            case STAR:
            case TILDE:
                {
                alt305=1;
                }
                break;
            case StringLiteral:
                {
                alt305=2;
                }
                break;
            case Identifier:
                {
                alt305=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 305, 0, input);

                throw nvae;

            }

            switch (alt305) {
                case 1 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2315:7: sysFuncNames
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_sysFuncNames_in_descFuncNames16847);
                    sysFuncNames1076=sysFuncNames();

                    state._fsp--;

                    adaptor.addChild(root_0, sysFuncNames1076.getTree());

                    }
                    break;
                case 2 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2316:7: StringLiteral
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    StringLiteral1077=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_descFuncNames16855); 
                    StringLiteral1077_tree = 
                    (CommonTree)adaptor.create(StringLiteral1077)
                    ;
                    adaptor.addChild(root_0, StringLiteral1077_tree);


                    }
                    break;
                case 3 :
                    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2317:7: Identifier
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    Identifier1078=(Token)match(input,Identifier,FOLLOW_Identifier_in_descFuncNames16863); 
                    Identifier1078_tree = 
                    (CommonTree)adaptor.create(Identifier1078)
                    ;
                    adaptor.addChild(root_0, Identifier1078_tree);


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "descFuncNames"


    public static class kwUser_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "kwUser"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2322:1: kwUser :{...}? Identifier ;
    public final HiveParser.kwUser_return kwUser() throws RecognitionException {
        HiveParser.kwUser_return retval = new HiveParser.kwUser_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token Identifier1079=null;

        CommonTree Identifier1079_tree=null;

        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2323:1: ({...}? Identifier )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2324:1: {...}? Identifier
            {
            root_0 = (CommonTree)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("user"))) ) {
                throw new FailedPredicateException(input, "kwUser", "input.LT(1).getText().equalsIgnoreCase(\"user\")");
            }

            Identifier1079=(Token)match(input,Identifier,FOLLOW_Identifier_in_kwUser16880); 
            Identifier1079_tree = 
            (CommonTree)adaptor.create(Identifier1079)
            ;
            adaptor.addChild(root_0, Identifier1079_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "kwUser"


    public static class kwRole_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "kwRole"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2326:1: kwRole :{...}? Identifier ;
    public final HiveParser.kwRole_return kwRole() throws RecognitionException {
        HiveParser.kwRole_return retval = new HiveParser.kwRole_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token Identifier1080=null;

        CommonTree Identifier1080_tree=null;

        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2327:1: ({...}? Identifier )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2328:1: {...}? Identifier
            {
            root_0 = (CommonTree)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("role"))) ) {
                throw new FailedPredicateException(input, "kwRole", "input.LT(1).getText().equalsIgnoreCase(\"role\")");
            }

            Identifier1080=(Token)match(input,Identifier,FOLLOW_Identifier_in_kwRole16890); 
            Identifier1080_tree = 
            (CommonTree)adaptor.create(Identifier1080)
            ;
            adaptor.addChild(root_0, Identifier1080_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "kwRole"


    public static class kwInner_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "kwInner"
    // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2330:1: kwInner :{...}? Identifier ;
    public final HiveParser.kwInner_return kwInner() throws RecognitionException {
        HiveParser.kwInner_return retval = new HiveParser.kwInner_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token Identifier1081=null;

        CommonTree Identifier1081_tree=null;

        try {
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2331:1: ({...}? Identifier )
            // /home/leejy/work/hive-0.10.0-cdh4.2.0/src/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2332:1: {...}? Identifier
            {
            root_0 = (CommonTree)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("inner"))) ) {
                throw new FailedPredicateException(input, "kwInner", "input.LT(1).getText().equalsIgnoreCase(\"inner\")");
            }

            Identifier1081=(Token)match(input,Identifier,FOLLOW_Identifier_in_kwInner16900); 
            Identifier1081_tree = 
            (CommonTree)adaptor.create(Identifier1081)
            ;
            adaptor.addChild(root_0, Identifier1081_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "kwInner"

    // Delegated rules


    protected DFA9 dfa9 = new DFA9(this);
    protected DFA234 dfa234 = new DFA234(this);
    protected DFA261 dfa261 = new DFA261(this);
    protected DFA282 dfa282 = new DFA282(this);
    protected DFA284 dfa284 = new DFA284(this);
    static final String DFA9_eotS =
        "\101\uffff";
    static final String DFA9_eofS =
        "\101\uffff";
    static final String DFA9_minS =
        "\1\34\1\30\1\uffff\1\30\3\uffff\1\30\4\uffff\2\30\63\uffff";
    static final String DFA9_maxS =
        "\1\u00e7\1\u00ec\1\uffff\1\u00ec\3\uffff\1\u00d3\4\uffff\2\u00e6"+
        "\63\uffff";
    static final String DFA9_acceptS =
        "\2\uffff\1\2\1\uffff\1\6\1\7\2\uffff\1\11\1\20\1\21\1\22\2\uffff"+
        "\1\14\1\15\1\1\1\uffff\1\4\1\uffff\1\12\1\uffff\1\23\1\5\1\13\1"+
        "\16\1\17\1\3\1\uffff\1\24\1\10\7\uffff\1\27\5\uffff\1\30\1\25\10"+
        "\uffff\1\31\1\26\10\uffff\1\32";
    static final String DFA9_specialS =
        "\101\uffff}>";
    static final String[] DFA9_transitionS = {
            "\1\4\1\11\34\uffff\1\1\16\uffff\2\5\6\uffff\1\3\30\uffff\1\14"+
            "\36\uffff\1\12\6\uffff\1\10\44\uffff\1\15\16\uffff\1\7\37\uffff"+
            "\1\13\2\uffff\1\2",
            "\1\26\46\uffff\1\20\34\uffff\1\22\26\uffff\1\17\44\uffff\1"+
            "\24\41\uffff\1\20\25\uffff\1\22\3\uffff\1\16\27\uffff\1\24",
            "",
            "\1\35\46\uffff\1\33\63\uffff\1\31\106\uffff\1\33\25\uffff\1"+
            "\27\3\uffff\1\32\27\uffff\1\30",
            "",
            "",
            "",
            "\1\54\34\uffff\1\36\4\uffff\1\36\5\uffff\1\36\44\uffff\1\36"+
            "\3\uffff\1\36\1\46\10\uffff\2\36\25\uffff\1\36\26\uffff\1\36"+
            "\31\uffff\1\36\24\uffff\2\36\1\uffff\1\36",
            "",
            "",
            "",
            "",
            "\1\66\2\uffff\2\55\35\uffff\1\55\26\uffff\1\55\41\uffff\1\55"+
            "\25\uffff\1\55\62\uffff\1\55\10\uffff\1\55\40\uffff\1\55",
            "\1\100\2\uffff\2\67\35\uffff\1\67\26\uffff\1\67\41\uffff\1"+
            "\67\25\uffff\1\67\62\uffff\1\67\10\uffff\1\67\40\uffff\1\67",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA9_eot = DFA.unpackEncodedString(DFA9_eotS);
    static final short[] DFA9_eof = DFA.unpackEncodedString(DFA9_eofS);
    static final char[] DFA9_min = DFA.unpackEncodedStringToUnsignedChars(DFA9_minS);
    static final char[] DFA9_max = DFA.unpackEncodedStringToUnsignedChars(DFA9_maxS);
    static final short[] DFA9_accept = DFA.unpackEncodedString(DFA9_acceptS);
    static final short[] DFA9_special = DFA.unpackEncodedString(DFA9_specialS);
    static final short[][] DFA9_transition;

    static {
        int numStates = DFA9_transitionS.length;
        DFA9_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA9_transition[i] = DFA.unpackEncodedString(DFA9_transitionS[i]);
        }
    }

    class DFA9 extends DFA {

        public DFA9(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 9;
            this.eot = DFA9_eot;
            this.eof = DFA9_eof;
            this.min = DFA9_min;
            this.max = DFA9_max;
            this.accept = DFA9_accept;
            this.special = DFA9_special;
            this.transition = DFA9_transition;
        }
        public String getDescription() {
            return "343:1: ddlStatement : ( createDatabaseStatement | switchDatabaseStatement | dropDatabaseStatement | createTableStatement | dropTableStatement | alterStatement | descStatement | showStatement | metastoreCheck | createViewStatement | dropViewStatement | createFunctionStatement | createIndexStatement | dropIndexStatement | dropFunctionStatement | analyzeStatement | lockStatement | unlockStatement | createRoleStatement | dropRoleStatement | grantPrivileges | revokePrivileges | showGrants | showRoleGrants | grantRole | revokeRole );";
        }
    }
    static final String DFA234_eotS =
        "\100\uffff";
    static final String DFA234_eofS =
        "\14\uffff\1\1\63\uffff";
    static final String DFA234_minS =
        "\1\7\13\uffff\1\4\5\uffff\1\30\55\uffff";
    static final String DFA234_maxS =
        "\1\u0200\13\uffff\1\u0102\5\uffff\1\u0102\55\uffff";
    static final String DFA234_acceptS =
        "\1\uffff\1\1\17\uffff\1\2\54\uffff\1\1\1\uffff";
    static final String DFA234_specialS =
        "\100\uffff}>";
    static final String[] DFA234_transitionS = {
            "\1\1\4\uffff\1\1\13\uffff\1\14\7\uffff\1\1\14\uffff\2\1\56\uffff"+
            "\1\1\22\uffff\1\1\33\uffff\1\1\4\uffff\1\1\1\uffff\1\1\73\uffff"+
            "\1\1\16\uffff\1\1\3\uffff\1\1\21\uffff\1\1\2\uffff\1\1\2\uffff"+
            "\2\1\6\uffff\1\21\3\1\u00fa\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\3\1\2\uffff\1\1\3\uffff\2\1\1\uffff\1\22\1\uffff\2\1\1\uffff"+
            "\2\1\1\uffff\1\1\5\uffff\1\1\2\uffff\1\1\2\uffff\1\1\13\uffff"+
            "\1\1\36\uffff\1\1\26\uffff\1\1\4\uffff\1\1\1\uffff\1\1\4\uffff"+
            "\1\1\5\uffff\1\1\3\uffff\1\1\6\uffff\2\1\7\uffff\1\1\4\uffff"+
            "\1\1\6\uffff\2\1\24\uffff\3\1\6\uffff\1\1\1\uffff\1\1\2\uffff"+
            "\1\1\13\uffff\1\1\30\uffff\1\1\6\uffff\1\1\5\uffff\1\1\3\uffff"+
            "\4\1\1\uffff\3\1\1\uffff\1\1\2\uffff\1\1\3\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "\1\76\u00e9\uffff\1\21",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA234_eot = DFA.unpackEncodedString(DFA234_eotS);
    static final short[] DFA234_eof = DFA.unpackEncodedString(DFA234_eofS);
    static final char[] DFA234_min = DFA.unpackEncodedStringToUnsignedChars(DFA234_minS);
    static final char[] DFA234_max = DFA.unpackEncodedStringToUnsignedChars(DFA234_maxS);
    static final short[] DFA234_accept = DFA.unpackEncodedString(DFA234_acceptS);
    static final short[] DFA234_special = DFA.unpackEncodedString(DFA234_specialS);
    static final short[][] DFA234_transition;

    static {
        int numStates = DFA234_transitionS.length;
        DFA234_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA234_transition[i] = DFA.unpackEncodedString(DFA234_transitionS[i]);
        }
    }

    class DFA234 extends DFA {

        public DFA234(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 234;
            this.eot = DFA234_eot;
            this.eof = DFA234_eof;
            this.min = DFA234_min;
            this.max = DFA234_max;
            this.accept = DFA234_accept;
            this.special = DFA234_special;
            this.transition = DFA234_transition;
        }
        public String getDescription() {
            return "1690:1: selectExpression : ( expression | tableAllColumns );";
        }
    }
    static final String DFA261_eotS =
        "\u0136\uffff";
    static final String DFA261_eofS =
        "\u0136\uffff";
    static final String DFA261_minS =
        "\1\7\17\uffff\1\7\1\uffff\2\7\6\4\1\13\3\4\1\u00f4\1\7\1\u00f4\1"+
        "\7\u0114\uffff";
    static final String DFA261_maxS =
        "\1\u0200\17\uffff\1\u0200\1\uffff\2\u0200\2\u0102\1\u0104\3\u0102"+
        "\1\13\3\u0102\1\u00f4\1\u0200\1\u00f4\1\u0200\u0114\uffff";
    static final String DFA261_acceptS =
        "\1\uffff\1\1\17\uffff\1\3\20\uffff\65\1\1\2\26\1\1\uffff\27\1\1"+
        "\uffff\26\1\1\uffff\26\1\1\uffff\26\1\1\uffff\27\1\1\uffff\26\1"+
        "\1\uffff\27\1\1\uffff\43\1";
    static final String DFA261_specialS =
        "\u0136\uffff}>";
    static final String[] DFA261_transitionS = {
            "\1\1\4\uffff\1\1\13\uffff\1\1\7\uffff\1\1\14\uffff\2\1\56\uffff"+
            "\1\1\22\uffff\1\1\33\uffff\1\1\4\uffff\1\1\1\uffff\1\1\73\uffff"+
            "\1\1\16\uffff\1\1\3\uffff\1\1\21\uffff\1\20\2\uffff\1\1\2\uffff"+
            "\2\1\7\uffff\3\1\u00fa\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\27\4\uffff\1\32\13\uffff\1\35\7\uffff\1\40\14\uffff\1\37"+
            "\1\36\56\uffff\1\34\22\uffff\1\40\33\uffff\1\40\4\uffff\1\22"+
            "\1\uffff\1\24\73\uffff\1\40\16\uffff\1\33\3\uffff\1\40\21\uffff"+
            "\1\41\2\uffff\1\23\2\uffff\1\25\1\23\2\uffff\1\21\4\uffff\1"+
            "\30\1\26\1\23\u00fa\uffff\1\31",
            "",
            "\1\46\4\uffff\1\51\13\uffff\1\54\7\uffff\1\57\14\uffff\1\56"+
            "\1\55\56\uffff\1\53\22\uffff\1\57\33\uffff\1\57\4\uffff\1\61"+
            "\1\uffff\1\43\73\uffff\1\57\16\uffff\1\52\3\uffff\1\57\21\uffff"+
            "\1\60\2\uffff\1\42\2\uffff\1\44\1\42\7\uffff\1\47\1\45\1\42"+
            "\u00fa\uffff\1\50",
            "\1\65\4\uffff\1\70\13\uffff\1\73\7\uffff\1\76\14\uffff\1\75"+
            "\1\74\56\uffff\1\72\22\uffff\1\76\33\uffff\1\76\6\uffff\1\62"+
            "\73\uffff\1\76\16\uffff\1\71\3\uffff\1\76\21\uffff\1\77\2\uffff"+
            "\1\100\2\uffff\1\63\1\100\7\uffff\1\66\1\64\1\100\u00fa\uffff"+
            "\1\67",
            "\1\107\1\110\1\104\2\uffff\1\127\3\uffff\2\105\1\uffff\1\102"+
            "\1\uffff\1\113\1\114\1\uffff\1\121\1\120\7\uffff\1\124\5\uffff"+
            "\1\123\115\uffff\1\122\11\uffff\1\103\6\uffff\1\112\15\uffff"+
            "\1\111\6\uffff\1\125\27\uffff\1\112\6\uffff\1\112\72\uffff\1"+
            "\117\1\116\1\uffff\1\101\1\uffff\1\106\1\105\1\115\1\uffff\1"+
            "\106\2\uffff\1\126\3\uffff\1\105",
            "\1\136\1\137\1\133\2\uffff\1\127\3\uffff\2\134\1\uffff\1\131"+
            "\1\uffff\1\142\1\143\1\uffff\1\150\1\147\7\uffff\1\153\5\uffff"+
            "\1\152\115\uffff\1\151\11\uffff\1\132\6\uffff\1\141\15\uffff"+
            "\1\140\6\uffff\1\154\27\uffff\1\141\6\uffff\1\141\72\uffff\1"+
            "\146\1\145\1\uffff\1\130\1\uffff\1\135\1\134\1\144\1\uffff\1"+
            "\135\2\uffff\1\155\3\uffff\1\134",
            "\1\165\1\166\1\162\2\uffff\1\127\3\uffff\2\163\1\uffff\1\160"+
            "\1\uffff\1\171\1\172\1\uffff\1\177\1\176\7\uffff\1\u0082\5\uffff"+
            "\1\u0081\115\uffff\1\u0080\11\uffff\1\161\6\uffff\1\170\15\uffff"+
            "\1\167\6\uffff\1\u0083\27\uffff\1\170\6\uffff\1\170\72\uffff"+
            "\1\175\1\174\1\uffff\1\157\1\uffff\1\164\1\163\1\173\1\uffff"+
            "\1\164\2\uffff\1\u0084\3\uffff\1\163\1\uffff\1\u0085",
            "\1\u008d\1\u008e\1\u008a\2\uffff\1\127\3\uffff\2\u008b\1\uffff"+
            "\1\u0088\1\uffff\1\u0091\1\u0092\1\uffff\1\u0097\1\u0096\7\uffff"+
            "\1\u009a\5\uffff\1\u0099\115\uffff\1\u0098\11\uffff\1\u0089"+
            "\6\uffff\1\u0090\15\uffff\1\u008f\6\uffff\1\u009b\27\uffff\1"+
            "\u0090\6\uffff\1\u0090\72\uffff\1\u0095\1\u0094\1\uffff\1\u0087"+
            "\1\uffff\1\u008c\1\u008b\1\u0093\1\uffff\1\u008c\2\uffff\1\u009c"+
            "\3\uffff\1\u008b",
            "\1\u00a4\1\u00a5\1\u00a1\2\uffff\1\127\3\uffff\2\u00a2\1\uffff"+
            "\1\u009f\1\uffff\1\u00a8\1\u00a9\1\uffff\1\u00ae\1\u00ad\7\uffff"+
            "\1\u00b1\5\uffff\1\u00b0\115\uffff\1\u00af\11\uffff\1\u00a0"+
            "\6\uffff\1\u00a7\15\uffff\1\u00a6\6\uffff\1\u00b2\27\uffff\1"+
            "\u00a7\6\uffff\1\u00a7\72\uffff\1\u00ac\1\u00ab\1\uffff\1\u009e"+
            "\1\uffff\1\u00a3\1\u00a2\1\u00aa\1\uffff\1\u00a3\2\uffff\1\u00b3"+
            "\3\uffff\1\u00a2",
            "\1\u00bb\1\u00bc\1\u00b8\2\uffff\1\127\3\uffff\2\u00b9\1\uffff"+
            "\1\u00b6\1\uffff\1\u00bf\1\u00c0\1\uffff\1\u00c5\1\u00c4\7\uffff"+
            "\1\u00c8\5\uffff\1\u00c7\115\uffff\1\u00c6\11\uffff\1\u00b7"+
            "\6\uffff\1\u00be\15\uffff\1\u00bd\6\uffff\1\u00c9\27\uffff\1"+
            "\u00be\6\uffff\1\u00be\72\uffff\1\u00c3\1\u00c2\1\uffff\1\u00b5"+
            "\1\uffff\1\u00ba\1\u00b9\1\u00c1\1\uffff\1\u00ba\2\uffff\1\u00ca"+
            "\3\uffff\1\u00b9",
            "\1\u00cc",
            "\1\u00d3\1\u00d4\1\u00d0\2\uffff\1\127\3\uffff\2\u00d1\1\uffff"+
            "\1\u00ce\1\uffff\1\u00d7\1\u00d8\1\uffff\1\u00dd\1\u00dc\7\uffff"+
            "\1\u00e0\5\uffff\1\u00df\115\uffff\1\u00de\11\uffff\1\u00cf"+
            "\6\uffff\1\u00d6\15\uffff\1\u00d5\6\uffff\1\u00e1\27\uffff\1"+
            "\u00d6\6\uffff\1\u00d6\72\uffff\1\u00db\1\u00da\1\uffff\1\u00cd"+
            "\1\uffff\1\u00d2\1\u00d1\1\u00d9\1\uffff\1\u00d2\2\uffff\1\u00e2"+
            "\3\uffff\1\u00d1",
            "\1\u00ea\1\u00eb\1\u00e7\2\uffff\1\127\3\uffff\2\u00e8\1\uffff"+
            "\1\u00e5\1\uffff\1\u00ee\1\u00ef\1\uffff\1\u00f4\1\u00f3\7\uffff"+
            "\1\u00f7\5\uffff\1\u00f6\115\uffff\1\u00f5\11\uffff\1\u00e6"+
            "\6\uffff\1\u00ed\15\uffff\1\u00ec\6\uffff\1\u00f8\27\uffff\1"+
            "\u00ed\6\uffff\1\u00ed\72\uffff\1\u00f2\1\u00f1\1\uffff\1\u00e4"+
            "\1\uffff\1\u00e9\1\u00e8\1\u00f0\1\uffff\1\u00e9\2\uffff\1\u00f9"+
            "\3\uffff\1\u00e8",
            "\1\u0102\1\u0103\1\u00ff\2\uffff\1\127\3\uffff\2\u0100\1\uffff"+
            "\1\u00fd\1\uffff\1\u0106\1\u0107\1\uffff\1\u010c\1\u010b\7\uffff"+
            "\1\u010f\5\uffff\1\u010e\115\uffff\1\u010d\11\uffff\1\u00fe"+
            "\6\uffff\1\u0105\15\uffff\1\u0104\6\uffff\1\u0110\27\uffff\1"+
            "\u0105\6\uffff\1\u0105\72\uffff\1\u010a\1\u0109\1\u00fb\1\u00fc"+
            "\1\uffff\1\u0101\1\u0100\1\u0108\1\uffff\1\u0101\2\uffff\1\u0111"+
            "\3\uffff\1\u0100",
            "\1\u0113",
            "\1\u0119\4\uffff\1\u011c\13\uffff\1\u011f\7\uffff\1\u0122\14"+
            "\uffff\1\u0121\1\u0120\56\uffff\1\u011e\22\uffff\1\u0122\33"+
            "\uffff\1\u0122\4\uffff\1\u0114\1\uffff\1\u0116\73\uffff\1\u0122"+
            "\16\uffff\1\u011d\3\uffff\1\u0122\12\uffff\1\u0124\6\uffff\1"+
            "\u0123\2\uffff\1\u0115\2\uffff\1\u0117\1\u0115\7\uffff\1\u011a"+
            "\1\u0118\1\u0115\u00fa\uffff\1\u011b",
            "\1\u0125",
            "\1\u012b\4\uffff\1\u012e\13\uffff\1\u0131\7\uffff\1\u0134\14"+
            "\uffff\1\u0133\1\u0132\56\uffff\1\u0130\22\uffff\1\u0134\33"+
            "\uffff\1\u0134\4\uffff\1\u0126\1\uffff\1\u0128\73\uffff\1\u0134"+
            "\16\uffff\1\u012f\3\uffff\1\u0134\21\uffff\1\u0135\2\uffff\1"+
            "\u0127\2\uffff\1\u0129\1\u0127\7\uffff\1\u012c\1\u012a\1\u0127"+
            "\u00fa\uffff\1\u012d",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA261_eot = DFA.unpackEncodedString(DFA261_eotS);
    static final short[] DFA261_eof = DFA.unpackEncodedString(DFA261_eofS);
    static final char[] DFA261_min = DFA.unpackEncodedStringToUnsignedChars(DFA261_minS);
    static final char[] DFA261_max = DFA.unpackEncodedStringToUnsignedChars(DFA261_maxS);
    static final short[] DFA261_accept = DFA.unpackEncodedString(DFA261_acceptS);
    static final short[] DFA261_special = DFA.unpackEncodedString(DFA261_specialS);
    static final short[][] DFA261_transition;

    static {
        int numStates = DFA261_transitionS.length;
        DFA261_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA261_transition[i] = DFA.unpackEncodedString(DFA261_transitionS[i]);
        }
    }

    class DFA261 extends DFA {

        public DFA261(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 261;
            this.eot = DFA261_eot;
            this.eof = DFA261_eof;
            this.min = DFA261_min;
            this.max = DFA261_max;
            this.accept = DFA261_accept;
            this.special = DFA261_special;
            this.transition = DFA261_transition;
        }
        public String getDescription() {
            return "1890:1: groupingSetExpression : ( groupByExpression -> ^( TOK_GROUPING_SETS_EXPRESSION groupByExpression ) | LPAREN groupByExpression ( COMMA groupByExpression )* RPAREN -> ^( TOK_GROUPING_SETS_EXPRESSION ( groupByExpression )+ ) | LPAREN RPAREN -> ^( TOK_GROUPING_SETS_EXPRESSION ( groupByExpression )* ) );";
        }
    }
    static final String DFA282_eotS =
        "\103\uffff";
    static final String DFA282_eofS =
        "\2\uffff\1\11\100\uffff";
    static final String DFA282_minS =
        "\1\7\1\uffff\1\4\100\uffff";
    static final String DFA282_maxS =
        "\1\u0200\1\uffff\1\u0104\100\uffff";
    static final String DFA282_acceptS =
        "\1\uffff\1\1\1\uffff\1\4\1\5\1\6\1\7\1\10\1\uffff\1\2\70\uffff\1"+
        "\3";
    static final String DFA282_specialS =
        "\103\uffff}>";
    static final String[] DFA282_transitionS = {
            "\1\3\4\uffff\1\6\120\uffff\1\7\u0080\uffff\1\7\33\uffff\1\1"+
            "\10\uffff\1\4\1\2\u00fb\uffff\1\5",
            "",
            "\3\11\2\uffff\1\11\3\uffff\2\11\1\uffff\1\11\1\uffff\2\11\1"+
            "\uffff\2\11\1\uffff\1\11\5\uffff\1\11\2\uffff\2\11\1\uffff\1"+
            "\11\13\uffff\1\11\12\uffff\1\11\15\uffff\1\11\5\uffff\1\11\3"+
            "\uffff\1\11\1\uffff\1\11\20\uffff\2\11\3\uffff\3\11\4\uffff"+
            "\1\11\5\uffff\1\11\3\uffff\1\11\1\uffff\1\11\3\uffff\3\11\7"+
            "\uffff\1\11\4\uffff\1\11\6\uffff\2\11\24\uffff\3\11\5\uffff"+
            "\2\11\1\uffff\1\11\2\uffff\1\11\13\uffff\1\11\16\uffff\1\11"+
            "\11\uffff\1\11\6\uffff\1\11\4\uffff\2\11\1\uffff\1\11\1\uffff"+
            "\2\11\1\uffff\1\11\1\uffff\3\11\1\uffff\1\11\2\uffff\2\11\2"+
            "\uffff\1\11\1\uffff\1\102",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA282_eot = DFA.unpackEncodedString(DFA282_eotS);
    static final short[] DFA282_eof = DFA.unpackEncodedString(DFA282_eofS);
    static final char[] DFA282_min = DFA.unpackEncodedStringToUnsignedChars(DFA282_minS);
    static final char[] DFA282_max = DFA.unpackEncodedStringToUnsignedChars(DFA282_maxS);
    static final short[] DFA282_accept = DFA.unpackEncodedString(DFA282_acceptS);
    static final short[] DFA282_special = DFA.unpackEncodedString(DFA282_specialS);
    static final short[][] DFA282_transition;

    static {
        int numStates = DFA282_transitionS.length;
        DFA282_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA282_transition[i] = DFA.unpackEncodedString(DFA282_transitionS[i]);
        }
    }

    class DFA282 extends DFA {

        public DFA282(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 282;
            this.eot = DFA282_eot;
            this.eof = DFA282_eof;
            this.min = DFA282_min;
            this.max = DFA282_max;
            this.accept = DFA282_accept;
            this.special = DFA282_special;
            this.transition = DFA282_transition;
        }
        public String getDescription() {
            return "2034:1: constant : ( Number | StringLiteral | stringLiteralSequence | BigintLiteral | SmallintLiteral | TinyintLiteral | charSetStringLiteral | booleanValue );";
        }
    }
    static final String DFA284_eotS =
        "\132\uffff";
    static final String DFA284_eofS =
        "\12\uffff\1\20\117\uffff";
    static final String DFA284_minS =
        "\1\7\11\uffff\1\4\1\uffff\1\7\115\uffff";
    static final String DFA284_maxS =
        "\1\u0200\11\uffff\1\u0102\1\uffff\1\u0200\115\uffff";
    static final String DFA284_acceptS =
        "\1\uffff\1\1\1\2\10\uffff\1\4\1\uffff\1\3\1\10\1\uffff\1\7\70\uffff"+
        "\1\5\17\uffff\1\6";
    static final String DFA284_specialS =
        "\132\uffff}>";
    static final String[] DFA284_transitionS = {
            "\1\2\4\uffff\1\2\13\uffff\1\12\7\uffff\1\15\14\uffff\1\14\1"+
            "\13\56\uffff\1\2\22\uffff\1\15\33\uffff\1\15\6\uffff\1\1\73"+
            "\uffff\1\15\16\uffff\1\2\3\uffff\1\15\21\uffff\1\16\5\uffff"+
            "\1\2\10\uffff\2\2\u00fb\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\3\20\2\uffff\1\20\3\uffff\2\20\1\uffff\1\20\1\uffff\2\20\1"+
            "\uffff\2\20\1\uffff\1\20\5\uffff\1\20\2\uffff\2\20\1\uffff\1"+
            "\20\13\uffff\1\20\12\uffff\1\20\15\uffff\1\20\5\uffff\1\20\3"+
            "\uffff\1\20\1\uffff\1\20\20\uffff\2\20\3\uffff\3\20\4\uffff"+
            "\1\20\5\uffff\1\20\3\uffff\1\20\1\uffff\1\20\3\uffff\3\20\7"+
            "\uffff\1\20\4\uffff\1\20\6\uffff\2\20\24\uffff\3\20\5\uffff"+
            "\2\20\1\uffff\1\20\2\uffff\1\20\13\uffff\1\20\16\uffff\1\20"+
            "\11\uffff\1\20\6\uffff\1\20\4\uffff\2\20\1\uffff\1\20\1\uffff"+
            "\2\20\1\15\1\20\1\uffff\3\20\1\uffff\1\20\2\uffff\2\20\2\uffff"+
            "\1\20",
            "",
            "\1\111\4\uffff\1\111\13\uffff\1\111\7\uffff\1\111\14\uffff"+
            "\2\111\56\uffff\1\111\22\uffff\1\111\33\uffff\1\111\4\uffff"+
            "\1\111\1\uffff\1\111\73\uffff\1\111\16\uffff\1\111\3\uffff\1"+
            "\111\12\uffff\1\131\6\uffff\1\111\2\uffff\1\111\2\uffff\2\111"+
            "\7\uffff\3\111\u00fa\uffff\1\111",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA284_eot = DFA.unpackEncodedString(DFA284_eotS);
    static final short[] DFA284_eof = DFA.unpackEncodedString(DFA284_eofS);
    static final char[] DFA284_min = DFA.unpackEncodedStringToUnsignedChars(DFA284_minS);
    static final char[] DFA284_max = DFA.unpackEncodedStringToUnsignedChars(DFA284_maxS);
    static final short[] DFA284_accept = DFA.unpackEncodedString(DFA284_acceptS);
    static final short[] DFA284_special = DFA.unpackEncodedString(DFA284_specialS);
    static final short[][] DFA284_transition;

    static {
        int numStates = DFA284_transitionS.length;
        DFA284_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA284_transition[i] = DFA.unpackEncodedString(DFA284_transitionS[i]);
        }
    }

    class DFA284 extends DFA {

        public DFA284(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 284;
            this.eot = DFA284_eot;
            this.eof = DFA284_eof;
            this.min = DFA284_min;
            this.max = DFA284_max;
            this.accept = DFA284_accept;
            this.special = DFA284_special;
            this.transition = DFA284_transition;
        }
        public String getDescription() {
            return "2067:1: atomExpression : ( KW_NULL -> TOK_NULL | constant | function | castExpression | caseExpression | whenExpression | tableOrColumn | LPAREN ! expression RPAREN !);";
        }
    }
 

    public static final BitSet FOLLOW_explainStatement_in_statement823 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_statement825 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_execStatement_in_statement830 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_statement832 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_EXPLAIN_in_explainStatement853 = new BitSet(new long[]{0x0400000030000000L,0x010204600C020700L,0x1020800000011240L,0x0000009000000010L});
    public static final BitSet FOLLOW_KW_EXTENDED_in_explainStatement858 = new BitSet(new long[]{0x0400000030000000L,0x0102044004020600L,0x1020800000011240L,0x0000009000000010L});
    public static final BitSet FOLLOW_KW_FORMATTED_in_explainStatement862 = new BitSet(new long[]{0x0400000030000000L,0x0102044004020600L,0x1020800000011240L,0x0000009000000010L});
    public static final BitSet FOLLOW_KW_DEPENDENCY_in_explainStatement866 = new BitSet(new long[]{0x0400000030000000L,0x0102044004020600L,0x1020800000011240L,0x0000009000000010L});
    public static final BitSet FOLLOW_execStatement_in_explainStatement870 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_queryStatementExpression_in_execStatement912 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_loadStatement_in_execStatement920 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exportStatement_in_execStatement928 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_importStatement_in_execStatement936 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ddlStatement_in_execStatement944 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_LOAD_in_loadStatement971 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_KW_DATA_in_loadStatement973 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_KW_LOCAL_in_loadStatement978 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_KW_INPATH_in_loadStatement982 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_StringLiteral_in_loadStatement987 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_KW_OVERWRITE_in_loadStatement993 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_KW_INTO_in_loadStatement997 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_KW_TABLE_in_loadStatement999 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_tableOrPartition_in_loadStatement1004 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_EXPORT_in_exportStatement1056 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_KW_TABLE_in_exportStatement1058 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_tableOrPartition_in_exportStatement1063 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_KW_TO_in_exportStatement1066 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_StringLiteral_in_exportStatement1071 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_IMPORT_in_importStatement1112 = new BitSet(new long[]{0x0000000000000000L,0x0000004010000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_KW_EXTERNAL_in_importStatement1118 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_KW_TABLE_in_importStatement1122 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_tableOrPartition_in_importStatement1127 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_KW_FROM_in_importStatement1132 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_StringLiteral_in_importStatement1137 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_tableLocation_in_importStatement1140 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createDatabaseStatement_in_ddlStatement1192 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switchDatabaseStatement_in_ddlStatement1200 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dropDatabaseStatement_in_ddlStatement1208 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createTableStatement_in_ddlStatement1216 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dropTableStatement_in_ddlStatement1224 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatement_in_ddlStatement1232 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_descStatement_in_ddlStatement1240 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_showStatement_in_ddlStatement1248 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_metastoreCheck_in_ddlStatement1256 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createViewStatement_in_ddlStatement1264 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dropViewStatement_in_ddlStatement1272 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createFunctionStatement_in_ddlStatement1280 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createIndexStatement_in_ddlStatement1288 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dropIndexStatement_in_ddlStatement1296 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dropFunctionStatement_in_ddlStatement1304 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_analyzeStatement_in_ddlStatement1312 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lockStatement_in_ddlStatement1320 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unlockStatement_in_ddlStatement1328 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createRoleStatement_in_ddlStatement1336 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dropRoleStatement_in_ddlStatement1344 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_grantPrivileges_in_ddlStatement1352 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_revokePrivileges_in_ddlStatement1360 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_showGrants_in_ddlStatement1368 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_showRoleGrants_in_ddlStatement1376 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_grantRole_in_ddlStatement1384 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_revokeRole_in_ddlStatement1392 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_IF_in_ifExists1419 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_KW_EXISTS_in_ifExists1421 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_RESTRICT_in_restrictOrCascade1458 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CASCADE_in_restrictOrCascade1476 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_IF_in_ifNotExists1513 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_KW_NOT_in_ifNotExists1515 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_KW_EXISTS_in_ifNotExists1517 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_STORED_in_storedAsDirs1554 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_KW_AS_in_storedAsDirs1556 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_KW_DIRECTORIES_in_storedAsDirs1558 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_OR_in_orReplace1595 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_KW_REPLACE_in_orReplace1597 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CREATE_in_createDatabaseStatement1635 = new BitSet(new long[]{0x8000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_KW_DATABASE_in_createDatabaseStatement1638 = new BitSet(new long[]{0x0000000001000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_KW_SCHEMA_in_createDatabaseStatement1640 = new BitSet(new long[]{0x0000000001000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_ifNotExists_in_createDatabaseStatement1651 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_Identifier_in_createDatabaseStatement1664 = new BitSet(new long[]{0x0040000000000002L,0x0000000000000000L,0x0000000000000100L,0x0001000000000000L});
    public static final BitSet FOLLOW_databaseComment_in_createDatabaseStatement1674 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L,0x0001000000000000L});
    public static final BitSet FOLLOW_dbLocation_in_createDatabaseStatement1685 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_KW_WITH_in_createDatabaseStatement1697 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_KW_DBPROPERTIES_in_createDatabaseStatement1699 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_dbProperties_in_createDatabaseStatement1703 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_LOCATION_in_dbLocation1764 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_StringLiteral_in_dbLocation1768 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_dbProperties1810 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_dbPropertiesList_in_dbProperties1812 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_dbProperties1814 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyValueProperty_in_dbPropertiesList1855 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_COMMA_in_dbPropertiesList1858 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_keyValueProperty_in_dbPropertiesList1860 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_KW_USE_in_switchDatabaseStatement1899 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_Identifier_in_switchDatabaseStatement1901 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DROP_in_dropDatabaseStatement1940 = new BitSet(new long[]{0x8000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_KW_DATABASE_in_dropDatabaseStatement1943 = new BitSet(new long[]{0x0000000001000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_KW_SCHEMA_in_dropDatabaseStatement1945 = new BitSet(new long[]{0x0000000001000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_ifExists_in_dropDatabaseStatement1948 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_Identifier_in_dropDatabaseStatement1951 = new BitSet(new long[]{0x0000100000000002L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_restrictOrCascade_in_dropDatabaseStatement1953 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_COMMENT_in_databaseComment1999 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_StringLiteral_in_databaseComment2003 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CREATE_in_createTableStatement2043 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_KW_EXTERNAL_in_createTableStatement2048 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_KW_TABLE_in_createTableStatement2052 = new BitSet(new long[]{0x0000000001000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_ifNotExists_in_createTableStatement2054 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_tableName_in_createTableStatement2059 = new BitSet(new long[]{0x0042000200000002L,0x0000000000000000L,0x0200000100000108L,0x0010000000081040L});
    public static final BitSet FOLLOW_KW_LIKE_in_createTableStatement2072 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_tableName_in_createTableStatement2076 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_tableLocation_in_createTableStatement2087 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_createTableStatement2100 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_columnNameTypeList_in_createTableStatement2102 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_createTableStatement2104 = new BitSet(new long[]{0x0042000200000002L,0x0000000000000000L,0x0200000100000100L,0x0000000000081040L});
    public static final BitSet FOLLOW_tableComment_in_createTableStatement2117 = new BitSet(new long[]{0x0002000200000002L,0x0000000000000000L,0x0200000100000100L,0x0000000000081040L});
    public static final BitSet FOLLOW_tablePartition_in_createTableStatement2129 = new BitSet(new long[]{0x0002000200000002L,0x0000000000000000L,0x0200000000000100L,0x0000000000081040L});
    public static final BitSet FOLLOW_tableBuckets_in_createTableStatement2141 = new BitSet(new long[]{0x0000000200000002L,0x0000000000000000L,0x0200000000000100L,0x0000000000081040L});
    public static final BitSet FOLLOW_tableSkewed_in_createTableStatement2153 = new BitSet(new long[]{0x0000000200000002L,0x0000000000000000L,0x0200000000000100L,0x0000000000081000L});
    public static final BitSet FOLLOW_tableRowFormat_in_createTableStatement2165 = new BitSet(new long[]{0x0000000200000002L,0x0000000000000000L,0x0000000000000100L,0x0000000000081000L});
    public static final BitSet FOLLOW_tableFileFormat_in_createTableStatement2177 = new BitSet(new long[]{0x0000000200000002L,0x0000000000000000L,0x0000000000000100L,0x0000000000080000L});
    public static final BitSet FOLLOW_tableLocation_in_createTableStatement2189 = new BitSet(new long[]{0x0000000200000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_tablePropertiesPrefixed_in_createTableStatement2201 = new BitSet(new long[]{0x0000000200000002L});
    public static final BitSet FOLLOW_KW_AS_in_createTableStatement2214 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x1000800000001000L});
    public static final BitSet FOLLOW_selectStatement_in_createTableStatement2216 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CREATE_in_createIndexStatement2419 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_KW_INDEX_in_createIndexStatement2421 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_Identifier_in_createIndexStatement2425 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_KW_ON_in_createIndexStatement2433 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_KW_TABLE_in_createIndexStatement2435 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_tableName_in_createIndexStatement2439 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_createIndexStatement2441 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_columnNameList_in_createIndexStatement2445 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_createIndexStatement2447 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_KW_AS_in_createIndexStatement2455 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_StringLiteral_in_createIndexStatement2459 = new BitSet(new long[]{0x0040000000000002L,0x0004800000000000L,0x0200000000000100L,0x0001000000081000L});
    public static final BitSet FOLLOW_autoRebuild_in_createIndexStatement2467 = new BitSet(new long[]{0x0040000000000002L,0x0004800000000000L,0x0200000000000100L,0x0000000000081000L});
    public static final BitSet FOLLOW_indexPropertiesPrefixed_in_createIndexStatement2476 = new BitSet(new long[]{0x0040000000000002L,0x0004000000000000L,0x0200000000000100L,0x0000000000081000L});
    public static final BitSet FOLLOW_indexTblName_in_createIndexStatement2485 = new BitSet(new long[]{0x0040000000000002L,0x0000000000000000L,0x0200000000000100L,0x0000000000081000L});
    public static final BitSet FOLLOW_tableRowFormat_in_createIndexStatement2494 = new BitSet(new long[]{0x0040000000000002L,0x0000000000000000L,0x0000000000000100L,0x0000000000081000L});
    public static final BitSet FOLLOW_tableFileFormat_in_createIndexStatement2503 = new BitSet(new long[]{0x0040000000000002L,0x0000000000000000L,0x0000000000000100L,0x0000000000080000L});
    public static final BitSet FOLLOW_tableLocation_in_createIndexStatement2512 = new BitSet(new long[]{0x0040000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_tablePropertiesPrefixed_in_createIndexStatement2521 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_indexComment_in_createIndexStatement2530 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_COMMENT_in_indexComment2687 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_StringLiteral_in_indexComment2691 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_WITH_in_autoRebuild2732 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_KW_DEFERRED_in_autoRebuild2734 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_KW_REBUILD_in_autoRebuild2736 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_IN_in_indexTblName2772 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_KW_TABLE_in_indexTblName2774 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_tableName_in_indexTblName2778 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_IDXPROPERTIES_in_indexPropertiesPrefixed2825 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_indexProperties_in_indexPropertiesPrefixed2828 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_indexProperties2861 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_indexPropertiesList_in_indexProperties2863 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_indexProperties2865 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyValueProperty_in_indexPropertiesList2906 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_COMMA_in_indexPropertiesList2909 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_keyValueProperty_in_indexPropertiesList2911 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_KW_DROP_in_dropIndexStatement2949 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_KW_INDEX_in_dropIndexStatement2951 = new BitSet(new long[]{0x0000000001000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_ifExists_in_dropIndexStatement2953 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_Identifier_in_dropIndexStatement2958 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_KW_ON_in_dropIndexStatement2960 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_tableName_in_dropIndexStatement2964 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DROP_in_dropTableStatement3009 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_KW_TABLE_in_dropTableStatement3011 = new BitSet(new long[]{0x0000000001000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_ifExists_in_dropTableStatement3013 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_tableName_in_dropTableStatement3016 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ALTER_in_alterStatement3054 = new BitSet(new long[]{0x8000000000000000L,0x0008000000000000L,0x0000000000000000L,0x0000100000010000L});
    public static final BitSet FOLLOW_KW_TABLE_in_alterStatement3079 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_alterTableStatementSuffix_in_alterStatement3082 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_VIEW_in_alterStatement3106 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_alterViewStatementSuffix_in_alterStatement3109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_INDEX_in_alterStatement3133 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_alterIndexStatementSuffix_in_alterStatement3136 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DATABASE_in_alterStatement3160 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_alterDatabaseStatementSuffix_in_alterStatement3163 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixRename_in_alterTableStatementSuffix3200 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixAddCol_in_alterTableStatementSuffix3208 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixRenameCol_in_alterTableStatementSuffix3216 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixDropPartitions_in_alterTableStatementSuffix3224 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixAddPartitions_in_alterTableStatementSuffix3232 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixTouch_in_alterTableStatementSuffix3240 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixArchive_in_alterTableStatementSuffix3248 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixUnArchive_in_alterTableStatementSuffix3256 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixProperties_in_alterTableStatementSuffix3264 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterTblPartitionStatement_in_alterTableStatementSuffix3272 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixClusterbySortby_in_alterTableStatementSuffix3280 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixSkewedby_in_alterTableStatementSuffix3288 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterViewSuffixProperties_in_alterViewStatementSuffix3315 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixRename_in_alterViewStatementSuffix3323 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixAddPartitions_in_alterViewStatementSuffix3347 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixDropPartitions_in_alterViewStatementSuffix3371 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_alterIndexStatementSuffix3416 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_KW_ON_in_alterIndexStatementSuffix3425 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_Identifier_in_alterIndexStatementSuffix3429 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100080000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_partitionSpec_in_alterIndexStatementSuffix3438 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_KW_REBUILD_in_alterIndexStatementSuffix3453 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SET_in_alterIndexStatementSuffix3487 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_KW_IDXPROPERTIES_in_alterIndexStatementSuffix3489 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_indexProperties_in_alterIndexStatementSuffix3497 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterDatabaseSuffixProperties_in_alterDatabaseStatementSuffix3549 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_alterDatabaseSuffixProperties3578 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SET_in_alterDatabaseSuffixProperties3580 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_KW_DBPROPERTIES_in_alterDatabaseSuffixProperties3582 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_dbProperties_in_alterDatabaseSuffixProperties3584 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_alterStatementSuffixRename3628 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_KW_RENAME_in_alterStatementSuffixRename3630 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_KW_TO_in_alterStatementSuffixRename3632 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_Identifier_in_alterStatementSuffixRename3636 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_alterStatementSuffixAddCol3679 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_KW_ADD_in_alterStatementSuffixAddCol3684 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_KW_REPLACE_in_alterStatementSuffixAddCol3690 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_KW_COLUMNS_in_alterStatementSuffixAddCol3693 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_alterStatementSuffixAddCol3695 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_columnNameTypeList_in_alterStatementSuffixAddCol3697 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_alterStatementSuffixAddCol3699 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_alterStatementSuffixRenameCol3772 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_KW_CHANGE_in_alterStatementSuffixRenameCol3774 = new BitSet(new long[]{0x0010000001000000L});
    public static final BitSet FOLLOW_KW_COLUMN_in_alterStatementSuffixRenameCol3776 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_Identifier_in_alterStatementSuffixRenameCol3781 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_Identifier_in_alterStatementSuffixRenameCol3785 = new BitSet(new long[]{0x000000E100000000L,0x0200000400010016L,0x0000000000001000L,0x000000040300C080L});
    public static final BitSet FOLLOW_colType_in_alterStatementSuffixRenameCol3787 = new BitSet(new long[]{0x0040000004000002L,0x0000000200000000L});
    public static final BitSet FOLLOW_KW_COMMENT_in_alterStatementSuffixRenameCol3790 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_StringLiteral_in_alterStatementSuffixRenameCol3794 = new BitSet(new long[]{0x0000000004000002L,0x0000000200000000L});
    public static final BitSet FOLLOW_alterStatementChangeColPosition_in_alterStatementSuffixRenameCol3798 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_FIRST_in_alterStatementChangeColPosition3844 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_AFTER_in_alterStatementChangeColPosition3846 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_Identifier_in_alterStatementChangeColPosition3850 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_alterStatementSuffixAddPartitions3902 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_KW_ADD_in_alterStatementSuffixAddPartitions3904 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_ifNotExists_in_alterStatementSuffixAddPartitions3906 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_partitionSpec_in_alterStatementSuffixAddPartitions3909 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000080000100L});
    public static final BitSet FOLLOW_partitionLocation_in_alterStatementSuffixAddPartitions3911 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_partitionSpec_in_alterStatementSuffixAddPartitions3915 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000080000100L});
    public static final BitSet FOLLOW_partitionLocation_in_alterStatementSuffixAddPartitions3917 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_Identifier_in_alterStatementSuffixTouch3970 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_KW_TOUCH_in_alterStatementSuffixTouch3972 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_partitionSpec_in_alterStatementSuffixTouch3975 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_Identifier_in_alterStatementSuffixArchive4021 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_KW_ARCHIVE_in_alterStatementSuffixArchive4023 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_partitionSpec_in_alterStatementSuffixArchive4026 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_Identifier_in_alterStatementSuffixUnArchive4072 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_KW_UNARCHIVE_in_alterStatementSuffixUnArchive4074 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_partitionSpec_in_alterStatementSuffixUnArchive4077 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_KW_LOCATION_in_partitionLocation4129 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_StringLiteral_in_partitionLocation4133 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_alterStatementSuffixDropPartitions4169 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_KW_DROP_in_alterStatementSuffixDropPartitions4171 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_ifExists_in_alterStatementSuffixDropPartitions4173 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_dropPartitionSpec_in_alterStatementSuffixDropPartitions4176 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_COMMA_in_alterStatementSuffixDropPartitions4179 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_dropPartitionSpec_in_alterStatementSuffixDropPartitions4181 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_Identifier_in_alterStatementSuffixProperties4230 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SET_in_alterStatementSuffixProperties4232 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_KW_TBLPROPERTIES_in_alterStatementSuffixProperties4234 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_tableProperties_in_alterStatementSuffixProperties4236 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_alterViewSuffixProperties4280 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SET_in_alterViewSuffixProperties4282 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_KW_TBLPROPERTIES_in_alterViewSuffixProperties4284 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_tableProperties_in_alterViewSuffixProperties4286 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SET_in_alterStatementSuffixSerdeProperties4328 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_KW_SERDE_in_alterStatementSuffixSerdeProperties4330 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_StringLiteral_in_alterStatementSuffixSerdeProperties4334 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_KW_WITH_in_alterStatementSuffixSerdeProperties4337 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_KW_SERDEPROPERTIES_in_alterStatementSuffixSerdeProperties4339 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_tableProperties_in_alterStatementSuffixSerdeProperties4341 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SET_in_alterStatementSuffixSerdeProperties4367 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_KW_SERDEPROPERTIES_in_alterStatementSuffixSerdeProperties4369 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_tableProperties_in_alterStatementSuffixSerdeProperties4371 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_tablePartitionPrefix4409 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_partitionSpec_in_tablePartitionPrefix4411 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tablePartitionPrefix_in_alterTblPartitionStatement4449 = new BitSet(new long[]{0x0100000000000000L,0x0000000000102000L,0x0002000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_alterTblPartitionStatementSuffix_in_alterTblPartitionStatement4451 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixFileFormat_in_alterTblPartitionStatementSuffix4486 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixLocation_in_alterTblPartitionStatementSuffix4492 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixProtectMode_in_alterTblPartitionStatementSuffix4498 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixMergeFiles_in_alterTblPartitionStatementSuffix4504 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixSerdeProperties_in_alterTblPartitionStatementSuffix4510 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixRenamePart_in_alterTblPartitionStatementSuffix4516 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterTblPartitionStatementSuffixSkewedLocation_in_alterTblPartitionStatementSuffix4522 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SET_in_alterStatementSuffixFileFormat4544 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_KW_FILEFORMAT_in_alterStatementSuffixFileFormat4546 = new BitSet(new long[]{0x0000000001000000L,0x0080000000000000L,0x4000010000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_fileFormat_in_alterStatementSuffixFileFormat4548 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SET_in_alterTblPartitionStatementSuffixSkewedLocation4579 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_KW_SKEWED_in_alterTblPartitionStatementSuffixSkewedLocation4581 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_KW_LOCATION_in_alterTblPartitionStatementSuffixSkewedLocation4583 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_skewedLocations_in_alterTblPartitionStatementSuffixSkewedLocation4585 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_skewedLocations4628 = new BitSet(new long[]{0x0000000000001080L,0x0000000020000000L,0x0000000000000000L,0x0410000040000000L,0x0000000000000018L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_skewedLocationsList_in_skewedLocations4630 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_skewedLocations4632 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_skewedLocationMap_in_skewedLocationsList4673 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_COMMA_in_skewedLocationsList4676 = new BitSet(new long[]{0x0000000000001080L,0x0000000020000000L,0x0000000000000000L,0x0410000040000000L,0x0000000000000018L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_skewedLocationMap_in_skewedLocationsList4678 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_skewedValueLocationElement_in_skewedLocationMap4724 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_EQUAL_in_skewedLocationMap4726 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_StringLiteral_in_skewedLocationMap4730 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SET_in_alterStatementSuffixLocation4767 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_KW_LOCATION_in_alterStatementSuffixLocation4769 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_StringLiteral_in_alterStatementSuffixLocation4773 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_alterStatementSuffixSkewedby4808 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_tableSkewed_in_alterStatementSuffixSkewedby4810 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_alterStatementSuffixSkewedby4829 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_KW_NOT_in_alterStatementSuffixSkewedby4831 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_KW_SKEWED_in_alterStatementSuffixSkewedby4833 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_alterStatementSuffixSkewedby4850 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_KW_NOT_in_alterStatementSuffixSkewedby4852 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_storedAsDirs_in_alterStatementSuffixSkewedby4854 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterProtectMode_in_alterStatementSuffixProtectMode4889 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_RENAME_in_alterStatementSuffixRenamePart4928 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_KW_TO_in_alterStatementSuffixRenamePart4930 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_partitionSpec_in_alterStatementSuffixRenamePart4932 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CONCATENATE_in_alterStatementSuffixMergeFiles4970 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ENABLE_in_alterProtectMode5007 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000240000L});
    public static final BitSet FOLLOW_alterProtectModeMode_in_alterProtectMode5009 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DISABLE_in_alterProtectMode5026 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000240000L});
    public static final BitSet FOLLOW_alterProtectModeMode_in_alterProtectMode5028 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_OFFLINE_in_alterProtectModeMode5064 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_NO_DROP_in_alterProtectModeMode5079 = new BitSet(new long[]{0x0000100000000002L});
    public static final BitSet FOLLOW_KW_CASCADE_in_alterProtectModeMode5081 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_READONLY_in_alterProtectModeMode5099 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_alterStatementSuffixClusterbySortby5131 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_tableBuckets_in_alterStatementSuffixClusterbySortby5133 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_alterStatementSuffixClusterbySortby5152 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_KW_NOT_in_alterStatementSuffixClusterbySortby5154 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_KW_CLUSTERED_in_alterStatementSuffixClusterbySortby5156 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SEQUENCEFILE_in_fileFormat5189 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_TEXTFILE_in_fileFormat5204 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_RCFILE_in_fileFormat5219 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_INPUTFORMAT_in_fileFormat5234 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_StringLiteral_in_fileFormat5238 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_KW_OUTPUTFORMAT_in_fileFormat5240 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_StringLiteral_in_fileFormat5244 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_KW_INPUTDRIVER_in_fileFormat5247 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_StringLiteral_in_fileFormat5251 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_KW_OUTPUTDRIVER_in_fileFormat5253 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_StringLiteral_in_fileFormat5257 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_fileFormat5295 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_tabTypeExpr5331 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_DOT_in_tabTypeExpr5334 = new BitSet(new long[]{0x0000000001000000L,0x0000000000040000L,0x0000000000000001L,0x0000080000000000L});
    public static final BitSet FOLLOW_set_in_tabTypeExpr5337 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_Identifier_in_descTabTypeExpr5379 = new BitSet(new long[]{0x0000000001010002L});
    public static final BitSet FOLLOW_DOT_in_descTabTypeExpr5382 = new BitSet(new long[]{0x0000000001000000L,0x0000000000040000L,0x0000000000000001L,0x0000080000000000L});
    public static final BitSet FOLLOW_set_in_descTabTypeExpr5385 = new BitSet(new long[]{0x0000000001010002L});
    public static final BitSet FOLLOW_Identifier_in_descTabTypeExpr5403 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tabTypeExpr_in_partTypeExpr5431 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_partitionSpec_in_partTypeExpr5433 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_descTabTypeExpr_in_descPartTypeExpr5473 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_partitionSpec_in_descPartTypeExpr5475 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DESCRIBE_in_descStatement5515 = new BitSet(new long[]{0x0000000001000000L,0x0000002008000000L});
    public static final BitSet FOLLOW_KW_DESC_in_descStatement5517 = new BitSet(new long[]{0x0000000001000000L,0x0000002008000000L});
    public static final BitSet FOLLOW_KW_FORMATTED_in_descStatement5523 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_KW_EXTENDED_in_descStatement5527 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_descPartTypeExpr_in_descStatement5534 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DESCRIBE_in_descStatement5557 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_KW_DESC_in_descStatement5559 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_KW_FUNCTION_in_descStatement5562 = new BitSet(new long[]{0x000020F1416C6070L,0x0205000408010000L,0x0081000001021008L,0x0B8C20040200C080L,0x0000000000000034L});
    public static final BitSet FOLLOW_KW_EXTENDED_in_descStatement5564 = new BitSet(new long[]{0x000020F1416C6070L,0x0205000400010000L,0x0081000001021008L,0x0B8C20040200C080L,0x0000000000000034L});
    public static final BitSet FOLLOW_descFuncNames_in_descStatement5570 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DESCRIBE_in_descStatement5592 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_KW_DESC_in_descStatement5594 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_KW_DATABASE_in_descStatement5597 = new BitSet(new long[]{0x0000000001000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_KW_EXTENDED_in_descStatement5599 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_Identifier_in_descStatement5605 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ANALYZE_in_analyzeStatement5645 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_KW_TABLE_in_analyzeStatement5647 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_tableOrPartition_in_analyzeStatement5652 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_KW_COMPUTE_in_analyzeStatement5655 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_KW_STATISTICS_in_analyzeStatement5657 = new BitSet(new long[]{0x0000000000000002L,0x0000000800000000L});
    public static final BitSet FOLLOW_KW_FOR_in_analyzeStatement5660 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_KW_COLUMNS_in_analyzeStatement5662 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_columnNameList_in_analyzeStatement5666 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SHOW_in_showStatement5708 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L,0x0800000000000000L});
    public static final BitSet FOLLOW_KW_DATABASES_in_showStatement5711 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_KW_SCHEMAS_in_showStatement5713 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_KW_LIKE_in_showStatement5717 = new BitSet(new long[]{0x0000000001000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_showStmtIdentifier_in_showStatement5719 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SHOW_in_showStatement5738 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_KW_TABLES_in_showStatement5740 = new BitSet(new long[]{0x0000000001000002L,0x0004004000000000L,0x0000000000000008L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_KW_FROM_in_showStatement5744 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_KW_IN_in_showStatement5746 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_Identifier_in_showStatement5751 = new BitSet(new long[]{0x0000000001000002L,0x0000000000000000L,0x0000000000000008L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_KW_LIKE_in_showStatement5756 = new BitSet(new long[]{0x0000000001000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_showStmtIdentifier_in_showStatement5758 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_showStmtIdentifier_in_showStatement5760 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SHOW_in_showStatement5788 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_KW_COLUMNS_in_showStatement5790 = new BitSet(new long[]{0x0000000000000000L,0x0004004000000000L});
    public static final BitSet FOLLOW_KW_FROM_in_showStatement5793 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_KW_IN_in_showStatement5795 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_tableName_in_showStatement5800 = new BitSet(new long[]{0x0000000000000002L,0x0004004000000000L});
    public static final BitSet FOLLOW_KW_FROM_in_showStatement5804 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_KW_IN_in_showStatement5806 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_Identifier_in_showStatement5811 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SHOW_in_showStatement5839 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_KW_FUNCTIONS_in_showStatement5841 = new BitSet(new long[]{0x0000000001000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_showStmtIdentifier_in_showStatement5843 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SHOW_in_showStatement5862 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_KW_PARTITIONS_in_showStatement5864 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_Identifier_in_showStatement5866 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_partitionSpec_in_showStatement5868 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SHOW_in_showStatement5888 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_KW_CREATE_in_showStatement5890 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_KW_TABLE_in_showStatement5892 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_tableName_in_showStatement5896 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SHOW_in_showStatement5913 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_KW_TABLE_in_showStatement5915 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_KW_EXTENDED_in_showStatement5917 = new BitSet(new long[]{0x0000000000000000L,0x0004004000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_KW_FROM_in_showStatement5921 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_KW_IN_in_showStatement5923 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_Identifier_in_showStatement5928 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_KW_LIKE_in_showStatement5932 = new BitSet(new long[]{0x0000000001000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_showStmtIdentifier_in_showStatement5934 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_partitionSpec_in_showStatement5936 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SHOW_in_showStatement5964 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_KW_TBLPROPERTIES_in_showStatement5966 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_Identifier_in_showStatement5970 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_showStatement5973 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_StringLiteral_in_showStatement5977 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_showStatement5979 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SHOW_in_showStatement6002 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_KW_LOCKS_in_showStatement6004 = new BitSet(new long[]{0x0000000001000002L,0x0000000008000000L});
    public static final BitSet FOLLOW_partTypeExpr_in_showStatement6009 = new BitSet(new long[]{0x0000000000000002L,0x0000000008000000L});
    public static final BitSet FOLLOW_KW_EXTENDED_in_showStatement6016 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SHOW_in_showStatement6040 = new BitSet(new long[]{0x0000000000000000L,0x0018002000000000L});
    public static final BitSet FOLLOW_KW_FORMATTED_in_showStatement6045 = new BitSet(new long[]{0x0000000000000000L,0x0018000000000000L});
    public static final BitSet FOLLOW_KW_INDEX_in_showStatement6050 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_KW_INDEXES_in_showStatement6052 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_KW_ON_in_showStatement6055 = new BitSet(new long[]{0x0000000001000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_showStmtIdentifier_in_showStatement6057 = new BitSet(new long[]{0x0000000000000002L,0x0004004000000000L});
    public static final BitSet FOLLOW_KW_FROM_in_showStatement6061 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_KW_IN_in_showStatement6063 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_Identifier_in_showStatement6068 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_LOCK_in_lockStatement6117 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_KW_TABLE_in_lockStatement6119 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_tableName_in_lockStatement6121 = new BitSet(new long[]{0x0000000000000000L,0x0000000000800000L,0x0000000080000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_partitionSpec_in_lockStatement6123 = new BitSet(new long[]{0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_lockMode_in_lockStatement6126 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_UNLOCK_in_unlockStatement6197 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_KW_TABLE_in_unlockStatement6199 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_tableName_in_unlockStatement6201 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_partitionSpec_in_unlockStatement6203 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CREATE_in_createRoleStatement6243 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_kwRole_in_createRoleStatement6245 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_Identifier_in_createRoleStatement6249 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DROP_in_dropRoleStatement6289 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_kwRole_in_dropRoleStatement6291 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_Identifier_in_dropRoleStatement6295 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_GRANT_in_grantPrivileges6335 = new BitSet(new long[]{0x0400000018000000L,0x0008000000020000L,0x1000000000000200L,0x0000004000000020L});
    public static final BitSet FOLLOW_privilegeList_in_grantPrivileges6339 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000400000L,0x0000000004000000L});
    public static final BitSet FOLLOW_privilegeObject_in_grantPrivileges6347 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_KW_TO_in_grantPrivileges6356 = new BitSet(new long[]{0x0000000001000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_principalSpecification_in_grantPrivileges6358 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_KW_WITH_in_grantPrivileges6367 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_withOption_in_grantPrivileges6369 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_REVOKE_in_revokePrivileges6419 = new BitSet(new long[]{0x0400000018000000L,0x0008000000020000L,0x1000000000000200L,0x0000004000000020L});
    public static final BitSet FOLLOW_privilegeList_in_revokePrivileges6421 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_privilegeObject_in_revokePrivileges6423 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_KW_FROM_in_revokePrivileges6426 = new BitSet(new long[]{0x0000000001000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_principalSpecification_in_revokePrivileges6428 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_GRANT_in_grantRole6472 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_kwRole_in_grantRole6474 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_Identifier_in_grantRole6476 = new BitSet(new long[]{0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_COMMA_in_grantRole6479 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_Identifier_in_grantRole6481 = new BitSet(new long[]{0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_KW_TO_in_grantRole6485 = new BitSet(new long[]{0x0000000001000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_principalSpecification_in_grantRole6487 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_REVOKE_in_revokeRole6529 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_kwRole_in_revokeRole6531 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_Identifier_in_revokeRole6533 = new BitSet(new long[]{0x0000000000000200L,0x0000004000000000L});
    public static final BitSet FOLLOW_COMMA_in_revokeRole6536 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_Identifier_in_revokeRole6538 = new BitSet(new long[]{0x0000000000000200L,0x0000004000000000L});
    public static final BitSet FOLLOW_KW_FROM_in_revokeRole6542 = new BitSet(new long[]{0x0000000001000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_principalSpecification_in_revokeRole6544 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SHOW_in_showRoleGrants6586 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_kwRole_in_showRoleGrants6588 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_KW_GRANT_in_showRoleGrants6590 = new BitSet(new long[]{0x0000000001000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_principalName_in_showRoleGrants6592 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SHOW_in_showGrants6631 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_KW_GRANT_in_showGrants6633 = new BitSet(new long[]{0x0000000001000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_principalName_in_showGrants6635 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_privilegeIncludeColObject_in_showGrants6637 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ON_in_privilegeIncludeColObject6680 = new BitSet(new long[]{0x8000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_KW_TABLE_in_privilegeIncludeColObject6685 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_KW_DATABASE_in_privilegeIncludeColObject6687 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_Identifier_in_privilegeIncludeColObject6690 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000080000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_privilegeIncludeColObject6693 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_columnNameList_in_privilegeIncludeColObject6697 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_privilegeIncludeColObject6699 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_partitionSpec_in_privilegeIncludeColObject6703 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ON_in_privilegeObject6754 = new BitSet(new long[]{0x8000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_KW_TABLE_in_privilegeObject6759 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_KW_DATABASE_in_privilegeObject6761 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_Identifier_in_privilegeObject6764 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_partitionSpec_in_privilegeObject6766 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_privlegeDef_in_privilegeList6813 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_COMMA_in_privilegeList6816 = new BitSet(new long[]{0x0400000018000000L,0x0008000000020000L,0x1000000000000200L,0x0000004000000020L});
    public static final BitSet FOLLOW_privlegeDef_in_privilegeList6818 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_privilegeType_in_privlegeDef6860 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_privlegeDef6863 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_columnNameList_in_privlegeDef6867 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_privlegeDef6869 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ALL_in_privilegeType6914 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ALTER_in_privilegeType6928 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_UPDATE_in_privilegeType6942 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CREATE_in_privilegeType6956 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DROP_in_privilegeType6970 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_INDEX_in_privilegeType6984 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_LOCK_in_privilegeType6998 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SELECT_in_privilegeType7012 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SHOW_DATABASE_in_privilegeType7026 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_principalName_in_principalSpecification7059 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_COMMA_in_principalSpecification7062 = new BitSet(new long[]{0x0000000001000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_principalName_in_principalSpecification7064 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_kwUser_in_principalName7102 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_Identifier_in_principalName7104 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_GROUP_in_principalName7120 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_Identifier_in_principalName7122 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_kwRole_in_principalName7138 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_Identifier_in_principalName7140 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_GRANT_in_withOption7175 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_KW_OPTION_in_withOption7177 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_MSCK_in_metastoreCheck7214 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0004000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_KW_REPAIR_in_metastoreCheck7219 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_KW_TABLE_in_metastoreCheck7224 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_Identifier_in_metastoreCheck7228 = new BitSet(new long[]{0x0000000000000202L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_partitionSpec_in_metastoreCheck7230 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_COMMA_in_metastoreCheck7234 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_partitionSpec_in_metastoreCheck7236 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_KW_CREATE_in_createFunctionStatement7290 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_KW_TEMPORARY_in_createFunctionStatement7292 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_KW_FUNCTION_in_createFunctionStatement7294 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_Identifier_in_createFunctionStatement7296 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_KW_AS_in_createFunctionStatement7298 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_StringLiteral_in_createFunctionStatement7300 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DROP_in_dropFunctionStatement7341 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_KW_TEMPORARY_in_dropFunctionStatement7343 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_KW_FUNCTION_in_dropFunctionStatement7345 = new BitSet(new long[]{0x0000000001000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_ifExists_in_dropFunctionStatement7347 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_Identifier_in_dropFunctionStatement7350 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CREATE_in_createViewStatement7392 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_orReplace_in_createViewStatement7395 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_KW_VIEW_in_createViewStatement7399 = new BitSet(new long[]{0x0000000001000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_ifNotExists_in_createViewStatement7402 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_tableName_in_createViewStatement7408 = new BitSet(new long[]{0x0040000200000000L,0x0000000000000000L,0x0000000100000000L,0x0010000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_createViewStatement7419 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_columnNameCommentList_in_createViewStatement7421 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_createViewStatement7423 = new BitSet(new long[]{0x0040000200000000L,0x0000000000000000L,0x0000000100000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_tableComment_in_createViewStatement7427 = new BitSet(new long[]{0x0000000200000000L,0x0000000000000000L,0x0000000100000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_viewPartition_in_createViewStatement7430 = new BitSet(new long[]{0x0000000200000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_tablePropertiesPrefixed_in_createViewStatement7441 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_KW_AS_in_createViewStatement7452 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x1000800000001000L});
    public static final BitSet FOLLOW_selectStatement_in_createViewStatement7462 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_PARTITIONED_in_viewPartition7585 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_KW_ON_in_viewPartition7587 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_viewPartition7589 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_columnNameList_in_viewPartition7591 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_viewPartition7593 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DROP_in_dropViewStatement7632 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_KW_VIEW_in_dropViewStatement7634 = new BitSet(new long[]{0x0000000001000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_ifExists_in_dropViewStatement7636 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_viewName_in_dropViewStatement7639 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_COMMENT_in_tableComment7718 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_StringLiteral_in_tableComment7722 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_PARTITIONED_in_tablePartition7759 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_KW_BY_in_tablePartition7761 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_tablePartition7763 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_columnNameTypeList_in_tablePartition7765 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_tablePartition7767 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CLUSTERED_in_tableBuckets7812 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_KW_BY_in_tableBuckets7814 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_tableBuckets7816 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_columnNameList_in_tableBuckets7820 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_tableBuckets7822 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_KW_SORTED_in_tableBuckets7825 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_KW_BY_in_tableBuckets7827 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_tableBuckets7829 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_columnNameOrderList_in_tableBuckets7833 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_tableBuckets7835 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_KW_INTO_in_tableBuckets7839 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_Number_in_tableBuckets7843 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_KW_BUCKETS_in_tableBuckets7845 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SKEWED_in_tableSkewed7897 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_KW_BY_in_tableSkewed7899 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_tableSkewed7901 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_columnNameList_in_tableSkewed7905 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_tableSkewed7907 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_KW_ON_in_tableSkewed7909 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_tableSkewed7911 = new BitSet(new long[]{0x0000000000001080L,0x0000000020000000L,0x0000000000000000L,0x0410000040000000L,0x0000000000000018L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_skewedValueElement_in_tableSkewed7916 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_tableSkewed7919 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_storedAsDirs_in_tableSkewed7922 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rowFormatSerde_in_rowFormat7970 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rowFormatDelimited_in_rowFormat7986 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_RECORDREADER_in_recordReader8035 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_StringLiteral_in_recordReader8037 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_RECORDWRITER_in_recordWriter8086 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_StringLiteral_in_recordWriter8088 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ROW_in_rowFormatSerde8137 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_KW_FORMAT_in_rowFormatSerde8139 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_KW_SERDE_in_rowFormatSerde8141 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_StringLiteral_in_rowFormatSerde8145 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_KW_WITH_in_rowFormatSerde8148 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_KW_SERDEPROPERTIES_in_rowFormatSerde8150 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_tableProperties_in_rowFormatSerde8154 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ROW_in_rowFormatDelimited8206 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_KW_FORMAT_in_rowFormatDelimited8208 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_KW_DELIMITED_in_rowFormatDelimited8210 = new BitSet(new long[]{0x0008000000000002L,0x0000000080000000L,0x0000000000001020L});
    public static final BitSet FOLLOW_tableRowFormatFieldIdentifier_in_rowFormatDelimited8212 = new BitSet(new long[]{0x0008000000000002L,0x0000000000000000L,0x0000000000001020L});
    public static final BitSet FOLLOW_tableRowFormatCollItemsIdentifier_in_rowFormatDelimited8215 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000001020L});
    public static final BitSet FOLLOW_tableRowFormatMapKeysIdentifier_in_rowFormatDelimited8218 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_tableRowFormatLinesIdentifier_in_rowFormatDelimited8221 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rowFormatDelimited_in_tableRowFormat8277 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rowFormatSerde_in_tableRowFormat8297 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_TBLPROPERTIES_in_tablePropertiesPrefixed8344 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_tableProperties_in_tablePropertiesPrefixed8347 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_tableProperties8380 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_tablePropertiesList_in_tableProperties8382 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_tableProperties8384 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyValueProperty_in_tablePropertiesList8425 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_COMMA_in_tablePropertiesList8428 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_keyValueProperty_in_tablePropertiesList8430 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_StringLiteral_in_keyValueProperty8476 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_EQUAL_in_keyValueProperty8478 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_StringLiteral_in_keyValueProperty8482 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_FIELDS_in_tableRowFormatFieldIdentifier8527 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_KW_TERMINATED_in_tableRowFormatFieldIdentifier8529 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_KW_BY_in_tableRowFormatFieldIdentifier8531 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_StringLiteral_in_tableRowFormatFieldIdentifier8535 = new BitSet(new long[]{0x0000000000000002L,0x0000000000400000L});
    public static final BitSet FOLLOW_KW_ESCAPED_in_tableRowFormatFieldIdentifier8538 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_KW_BY_in_tableRowFormatFieldIdentifier8540 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_StringLiteral_in_tableRowFormatFieldIdentifier8544 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_COLLECTION_in_tableRowFormatCollItemsIdentifier8596 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_KW_ITEMS_in_tableRowFormatCollItemsIdentifier8598 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_KW_TERMINATED_in_tableRowFormatCollItemsIdentifier8600 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_KW_BY_in_tableRowFormatCollItemsIdentifier8602 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_StringLiteral_in_tableRowFormatCollItemsIdentifier8606 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_MAP_in_tableRowFormatMapKeysIdentifier8652 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_KW_KEYS_in_tableRowFormatMapKeysIdentifier8654 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_KW_TERMINATED_in_tableRowFormatMapKeysIdentifier8656 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_KW_BY_in_tableRowFormatMapKeysIdentifier8658 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_StringLiteral_in_tableRowFormatMapKeysIdentifier8662 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_LINES_in_tableRowFormatLinesIdentifier8708 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_KW_TERMINATED_in_tableRowFormatLinesIdentifier8710 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_KW_BY_in_tableRowFormatLinesIdentifier8712 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_StringLiteral_in_tableRowFormatLinesIdentifier8716 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_STORED_in_tableFileFormat8762 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_KW_AS_in_tableFileFormat8764 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_KW_SEQUENCEFILE_in_tableFileFormat8766 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_STORED_in_tableFileFormat8781 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_KW_AS_in_tableFileFormat8783 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_KW_TEXTFILE_in_tableFileFormat8785 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_STORED_in_tableFileFormat8800 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_KW_AS_in_tableFileFormat8802 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_KW_RCFILE_in_tableFileFormat8804 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_STORED_in_tableFileFormat8819 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_KW_AS_in_tableFileFormat8821 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_KW_INPUTFORMAT_in_tableFileFormat8823 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_StringLiteral_in_tableFileFormat8827 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_KW_OUTPUTFORMAT_in_tableFileFormat8829 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_StringLiteral_in_tableFileFormat8833 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_KW_INPUTDRIVER_in_tableFileFormat8836 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_StringLiteral_in_tableFileFormat8840 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_KW_OUTPUTDRIVER_in_tableFileFormat8842 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_StringLiteral_in_tableFileFormat8846 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_STORED_in_tableFileFormat8884 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_KW_BY_in_tableFileFormat8886 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_StringLiteral_in_tableFileFormat8890 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_KW_WITH_in_tableFileFormat8902 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_KW_SERDEPROPERTIES_in_tableFileFormat8904 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_tableProperties_in_tableFileFormat8908 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_STORED_in_tableFileFormat8939 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_KW_AS_in_tableFileFormat8941 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_Identifier_in_tableFileFormat8945 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_LOCATION_in_tableLocation8993 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_StringLiteral_in_tableLocation8997 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_columnNameType_in_columnNameTypeList9033 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_COMMA_in_columnNameTypeList9036 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_columnNameType_in_columnNameTypeList9038 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_columnNameColonType_in_columnNameColonTypeList9076 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_COMMA_in_columnNameColonTypeList9079 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_columnNameColonType_in_columnNameColonTypeList9081 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_columnName_in_columnNameList9119 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_COMMA_in_columnNameList9122 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_columnName_in_columnNameList9124 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_Identifier_in_columnName9168 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_columnNameOrder_in_columnNameOrderList9195 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_COMMA_in_columnNameOrderList9198 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_columnNameOrder_in_columnNameOrderList9200 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_skewedColumnValues_in_skewedValueElement9245 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_skewedColumnValuePairList_in_skewedValueElement9254 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_skewedColumnValuePair_in_skewedColumnValuePairList9281 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_COMMA_in_skewedColumnValuePairList9284 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_skewedColumnValuePair_in_skewedColumnValuePairList9286 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_LPAREN_in_skewedColumnValuePair9331 = new BitSet(new long[]{0x0000000000001080L,0x0000000020000000L,0x0000000000000000L,0x0400000040000000L,0x0000000000000018L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_skewedColumnValues_in_skewedColumnValuePair9335 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_skewedColumnValuePair9337 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_skewedColumnValue_in_skewedColumnValues9380 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_COMMA_in_skewedColumnValues9383 = new BitSet(new long[]{0x0000000000001080L,0x0000000020000000L,0x0000000000000000L,0x0400000040000000L,0x0000000000000018L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_skewedColumnValue_in_skewedColumnValues9385 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_constant_in_skewedColumnValue9429 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_skewedColumnValue_in_skewedValueLocationElement9463 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_skewedColumnValuePair_in_skewedValueLocationElement9472 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_columnNameOrder9503 = new BitSet(new long[]{0x0000000400000002L,0x0000000000000200L});
    public static final BitSet FOLLOW_KW_ASC_in_columnNameOrder9508 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DESC_in_columnNameOrder9514 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_columnNameComment_in_columnNameCommentList9586 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_COMMA_in_columnNameCommentList9589 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_columnNameComment_in_columnNameCommentList9591 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_Identifier_in_columnNameComment9631 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_KW_COMMENT_in_columnNameComment9634 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_StringLiteral_in_columnNameComment9638 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_columnRefOrder9686 = new BitSet(new long[]{0x0000000400000002L,0x0000000000000200L});
    public static final BitSet FOLLOW_KW_ASC_in_columnRefOrder9691 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DESC_in_columnRefOrder9697 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_columnNameType9771 = new BitSet(new long[]{0x000000E100000000L,0x0200000400010016L,0x0000000000001000L,0x000000040300C080L});
    public static final BitSet FOLLOW_colType_in_columnNameType9773 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_KW_COMMENT_in_columnNameType9776 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_StringLiteral_in_columnNameType9780 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_columnNameColonType9866 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_COLON_in_columnNameColonType9868 = new BitSet(new long[]{0x000000E100000000L,0x0200000400010016L,0x0000000000001000L,0x000000040300C080L});
    public static final BitSet FOLLOW_colType_in_columnNameColonType9870 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_KW_COMMENT_in_columnNameColonType9873 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_StringLiteral_in_columnNameColonType9877 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_colType9961 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_colType_in_colTypeList9988 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_COMMA_in_colTypeList9991 = new BitSet(new long[]{0x000000E100000000L,0x0200000400010016L,0x0000000000001000L,0x000000040300C080L});
    public static final BitSet FOLLOW_colType_in_colTypeList9993 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_primitiveType_in_type10021 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_listType_in_type10029 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_structType_in_type10037 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mapType_in_type10045 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unionType_in_type10053 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_TINYINT_in_primitiveType10075 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SMALLINT_in_primitiveType10096 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_INT_in_primitiveType10116 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_BIGINT_in_primitiveType10141 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_BOOLEAN_in_primitiveType10163 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_FLOAT_in_primitiveType10184 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DOUBLE_in_primitiveType10207 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DATE_in_primitiveType10229 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DATETIME_in_primitiveType10253 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_TIMESTAMP_in_primitiveType10273 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_STRING_in_primitiveType10292 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_BINARY_in_primitiveType10314 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DECIMAL_in_primitiveType10336 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ARRAY_in_listType10376 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_LESSTHAN_in_listType10378 = new BitSet(new long[]{0x000000E100000000L,0x0200000400010016L,0x0000000000001000L,0x000000040300C080L});
    public static final BitSet FOLLOW_type_in_listType10380 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_GREATERTHAN_in_listType10382 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_STRUCT_in_structType10419 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_LESSTHAN_in_structType10421 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_columnNameColonTypeList_in_structType10423 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_GREATERTHAN_in_structType10425 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_MAP_in_mapType10460 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_LESSTHAN_in_mapType10462 = new BitSet(new long[]{0x000000E000000000L,0x0200000400010016L,0x0000000000000000L,0x0000000003004080L});
    public static final BitSet FOLLOW_primitiveType_in_mapType10466 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_COMMA_in_mapType10468 = new BitSet(new long[]{0x000000E100000000L,0x0200000400010016L,0x0000000000001000L,0x000000040300C080L});
    public static final BitSet FOLLOW_type_in_mapType10472 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_GREATERTHAN_in_mapType10474 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_UNIONTYPE_in_unionType10517 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_LESSTHAN_in_unionType10519 = new BitSet(new long[]{0x000000E100000000L,0x0200000400010016L,0x0000000000001000L,0x000000040300C080L});
    public static final BitSet FOLLOW_colTypeList_in_unionType10521 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_GREATERTHAN_in_unionType10523 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_UNION_in_queryOperator10558 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_KW_ALL_in_queryOperator10560 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_queryStatement_in_queryStatementExpression10584 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_queryOperator_in_queryStatementExpression10587 = new BitSet(new long[]{0x0000000000000000L,0x0100004000000000L,0x1000800000001000L});
    public static final BitSet FOLLOW_queryStatement_in_queryStatementExpression10590 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_fromClause_in_queryStatement10613 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L,0x1000800000001000L});
    public static final BitSet FOLLOW_body_in_queryStatement10623 = new BitSet(new long[]{0x0000000000000002L,0x0100000000000000L,0x1000800000001000L});
    public static final BitSet FOLLOW_regular_body_in_queryStatement10645 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_insertClause_in_regular_body10664 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x1000800000001000L});
    public static final BitSet FOLLOW_selectClause_in_regular_body10669 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_fromClause_in_regular_body10674 = new BitSet(new long[]{0x0001000000000002L,0x0000280000008000L,0x0000000002000010L,0x0000400000000100L});
    public static final BitSet FOLLOW_whereClause_in_regular_body10679 = new BitSet(new long[]{0x0001000000000002L,0x0000280000008000L,0x0000000002000010L,0x0000000000000100L});
    public static final BitSet FOLLOW_groupByClause_in_regular_body10685 = new BitSet(new long[]{0x0001000000000002L,0x0000200000008000L,0x0000000002000010L,0x0000000000000100L});
    public static final BitSet FOLLOW_havingClause_in_regular_body10691 = new BitSet(new long[]{0x0001000000000002L,0x0000000000008000L,0x0000000002000010L,0x0000000000000100L});
    public static final BitSet FOLLOW_orderByClause_in_regular_body10697 = new BitSet(new long[]{0x0001000000000002L,0x0000000000008000L,0x0000000000000010L,0x0000000000000100L});
    public static final BitSet FOLLOW_clusterByClause_in_regular_body10703 = new BitSet(new long[]{0x0000000000000002L,0x0000000000008000L,0x0000000000000010L,0x0000000000000100L});
    public static final BitSet FOLLOW_distributeByClause_in_regular_body10709 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000010L,0x0000000000000100L});
    public static final BitSet FOLLOW_sortByClause_in_regular_body10715 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_limitClause_in_regular_body10721 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectStatement_in_regular_body10814 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectClause_in_selectStatement10832 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_fromClause_in_selectStatement10837 = new BitSet(new long[]{0x0001000000000002L,0x0000280000008000L,0x0000000002000010L,0x0000400000000100L});
    public static final BitSet FOLLOW_whereClause_in_selectStatement10842 = new BitSet(new long[]{0x0001000000000002L,0x0000280000008000L,0x0000000002000010L,0x0000000000000100L});
    public static final BitSet FOLLOW_groupByClause_in_selectStatement10848 = new BitSet(new long[]{0x0001000000000002L,0x0000200000008000L,0x0000000002000010L,0x0000000000000100L});
    public static final BitSet FOLLOW_havingClause_in_selectStatement10854 = new BitSet(new long[]{0x0001000000000002L,0x0000000000008000L,0x0000000002000010L,0x0000000000000100L});
    public static final BitSet FOLLOW_orderByClause_in_selectStatement10860 = new BitSet(new long[]{0x0001000000000002L,0x0000000000008000L,0x0000000000000010L,0x0000000000000100L});
    public static final BitSet FOLLOW_clusterByClause_in_selectStatement10866 = new BitSet(new long[]{0x0000000000000002L,0x0000000000008000L,0x0000000000000010L,0x0000000000000100L});
    public static final BitSet FOLLOW_distributeByClause_in_selectStatement10872 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000010L,0x0000000000000100L});
    public static final BitSet FOLLOW_sortByClause_in_selectStatement10878 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_limitClause_in_selectStatement10884 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_insertClause_in_body10994 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x1000800000001000L});
    public static final BitSet FOLLOW_selectClause_in_body10999 = new BitSet(new long[]{0x0001000000000002L,0x0000280000008000L,0x0000000002000010L,0x0000400000000100L});
    public static final BitSet FOLLOW_whereClause_in_body11004 = new BitSet(new long[]{0x0001000000000002L,0x0000280000008000L,0x0000000002000010L,0x0000000000000100L});
    public static final BitSet FOLLOW_groupByClause_in_body11010 = new BitSet(new long[]{0x0001000000000002L,0x0000200000008000L,0x0000000002000010L,0x0000000000000100L});
    public static final BitSet FOLLOW_havingClause_in_body11016 = new BitSet(new long[]{0x0001000000000002L,0x0000000000008000L,0x0000000002000010L,0x0000000000000100L});
    public static final BitSet FOLLOW_orderByClause_in_body11022 = new BitSet(new long[]{0x0001000000000002L,0x0000000000008000L,0x0000000000000010L,0x0000000000000100L});
    public static final BitSet FOLLOW_clusterByClause_in_body11028 = new BitSet(new long[]{0x0000000000000002L,0x0000000000008000L,0x0000000000000010L,0x0000000000000100L});
    public static final BitSet FOLLOW_distributeByClause_in_body11034 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000010L,0x0000000000000100L});
    public static final BitSet FOLLOW_sortByClause_in_body11040 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_limitClause_in_body11046 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectClause_in_body11134 = new BitSet(new long[]{0x0001000000000002L,0x0000280000008000L,0x0000000002000010L,0x0000400000000100L});
    public static final BitSet FOLLOW_whereClause_in_body11139 = new BitSet(new long[]{0x0001000000000002L,0x0000280000008000L,0x0000000002000010L,0x0000000000000100L});
    public static final BitSet FOLLOW_groupByClause_in_body11145 = new BitSet(new long[]{0x0001000000000002L,0x0000200000008000L,0x0000000002000010L,0x0000000000000100L});
    public static final BitSet FOLLOW_havingClause_in_body11151 = new BitSet(new long[]{0x0001000000000002L,0x0000000000008000L,0x0000000002000010L,0x0000000000000100L});
    public static final BitSet FOLLOW_orderByClause_in_body11157 = new BitSet(new long[]{0x0001000000000002L,0x0000000000008000L,0x0000000000000010L,0x0000000000000100L});
    public static final BitSet FOLLOW_clusterByClause_in_body11163 = new BitSet(new long[]{0x0000000000000002L,0x0000000000008000L,0x0000000000000010L,0x0000000000000100L});
    public static final BitSet FOLLOW_distributeByClause_in_body11169 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000010L,0x0000000000000100L});
    public static final BitSet FOLLOW_sortByClause_in_body11175 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_limitClause_in_body11181 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_INSERT_in_insertClause11296 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_KW_OVERWRITE_in_insertClause11298 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L,0x0000000000000080L,0x0000000000010000L});
    public static final BitSet FOLLOW_destination_in_insertClause11300 = new BitSet(new long[]{0x0000000000000002L,0x0001000000000000L});
    public static final BitSet FOLLOW_ifNotExists_in_insertClause11302 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_INSERT_in_insertClause11321 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_KW_INTO_in_insertClause11323 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_KW_TABLE_in_insertClause11325 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_tableOrPartition_in_insertClause11327 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_LOCAL_in_destination11372 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_KW_DIRECTORY_in_destination11374 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_StringLiteral_in_destination11376 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DIRECTORY_in_destination11391 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_StringLiteral_in_destination11393 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_TABLE_in_destination11408 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_tableOrPartition_in_destination11410 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_LIMIT_in_limitClause11442 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_Number_in_limitClause11446 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SELECT_in_selectClause11487 = new BitSet(new long[]{0x0000600109005080L,0x0001000020004000L,0x00000000000A1000L,0x0C90000450008000L,0x000000000000003CL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_hintClause_in_selectClause11489 = new BitSet(new long[]{0x0000600109001080L,0x0001000020004000L,0x00000000000A1000L,0x0C90000450008000L,0x000000000000003CL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_KW_ALL_in_selectClause11495 = new BitSet(new long[]{0x0000600101001080L,0x0001000020000000L,0x00000000000A1000L,0x0C90000440008000L,0x000000000000003CL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_KW_DISTINCT_in_selectClause11501 = new BitSet(new long[]{0x0000600101001080L,0x0001000020000000L,0x00000000000A1000L,0x0C90000440008000L,0x000000000000003CL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_selectList_in_selectClause11505 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_TRANSFORM_in_selectClause11539 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_selectTrfmClause_in_selectClause11541 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_trfmClause_in_selectClause11612 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectItem_in_selectList11655 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_COMMA_in_selectList11659 = new BitSet(new long[]{0x0000600101001080L,0x0001000020000000L,0x00000000000A1000L,0x0C90000440008000L,0x000000000000003CL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_selectItem_in_selectList11662 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_LPAREN_in_selectTrfmClause11701 = new BitSet(new long[]{0x0000600101001080L,0x0001000020000000L,0x00000000000A1000L,0x0C90000440008000L,0x000000000000003CL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_selectExpressionList_in_selectTrfmClause11703 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_selectTrfmClause11705 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0200400000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_rowFormat_in_selectTrfmClause11713 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_recordWriter_in_selectTrfmClause11717 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_KW_USING_in_selectTrfmClause11723 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_StringLiteral_in_selectTrfmClause11725 = new BitSet(new long[]{0x0000000200000000L,0x0000000000000000L,0x0200200000000000L});
    public static final BitSet FOLLOW_KW_AS_in_selectTrfmClause11733 = new BitSet(new long[]{0x0000000001000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_selectTrfmClause11737 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_aliasList_in_selectTrfmClause11740 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_columnNameTypeList_in_selectTrfmClause11744 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_selectTrfmClause11747 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0200200000000000L});
    public static final BitSet FOLLOW_aliasList_in_selectTrfmClause11753 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0200200000000000L});
    public static final BitSet FOLLOW_columnNameTypeList_in_selectTrfmClause11757 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0200200000000000L});
    public static final BitSet FOLLOW_rowFormat_in_selectTrfmClause11769 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_recordReader_in_selectTrfmClause11773 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DIVIDE_in_hintClause11836 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_STAR_in_hintClause11838 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_PLUS_in_hintClause11840 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L,0x0000000000002000L,0x0000000000002000L});
    public static final BitSet FOLLOW_hintList_in_hintClause11842 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_STAR_in_hintClause11844 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_DIVIDE_in_hintClause11846 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hintItem_in_hintList11885 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_COMMA_in_hintList11888 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L,0x0000000000002000L,0x0000000000002000L});
    public static final BitSet FOLLOW_hintItem_in_hintList11890 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_hintName_in_hintItem11928 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_hintItem11931 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_hintArgs_in_hintItem11933 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_hintItem11935 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_MAPJOIN_in_hintName11979 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_STREAMTABLE_in_hintName11991 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_HOLD_DDLTIME_in_hintName12003 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hintArgName_in_hintArgs12038 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_COMMA_in_hintArgs12041 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_hintArgName_in_hintArgs12043 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_Identifier_in_hintArgName12085 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectExpression_in_selectItem12118 = new BitSet(new long[]{0x0000000201000002L});
    public static final BitSet FOLLOW_KW_AS_in_selectItem12123 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_Identifier_in_selectItem12126 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_AS_in_selectItem12132 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_selectItem12134 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_Identifier_in_selectItem12136 = new BitSet(new long[]{0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_selectItem12139 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_Identifier_in_selectItem12141 = new BitSet(new long[]{0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_selectItem12145 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_MAP_in_trfmClause12195 = new BitSet(new long[]{0x0000600101001080L,0x0001000020000000L,0x00000000000A1000L,0x0C90000440008000L,0x000000000000003CL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_selectExpressionList_in_trfmClause12200 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0200400000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_KW_REDUCE_in_trfmClause12210 = new BitSet(new long[]{0x0000600101001080L,0x0001000020000000L,0x00000000000A1000L,0x0C90000440008000L,0x000000000000003CL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_selectExpressionList_in_trfmClause12212 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0200400000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_rowFormat_in_trfmClause12222 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_recordWriter_in_trfmClause12226 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_KW_USING_in_trfmClause12232 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_StringLiteral_in_trfmClause12234 = new BitSet(new long[]{0x0000000200000000L,0x0000000000000000L,0x0200200000000000L});
    public static final BitSet FOLLOW_KW_AS_in_trfmClause12242 = new BitSet(new long[]{0x0000000001000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_trfmClause12246 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_aliasList_in_trfmClause12249 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_columnNameTypeList_in_trfmClause12253 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_trfmClause12256 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0200200000000000L});
    public static final BitSet FOLLOW_aliasList_in_trfmClause12262 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0200200000000000L});
    public static final BitSet FOLLOW_columnNameTypeList_in_trfmClause12266 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0200200000000000L});
    public static final BitSet FOLLOW_rowFormat_in_trfmClause12278 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_recordReader_in_trfmClause12282 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_selectExpression12345 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tableAllColumns_in_selectExpression12349 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectExpression_in_selectExpressionList12380 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_COMMA_in_selectExpressionList12383 = new BitSet(new long[]{0x0000600101001080L,0x0001000020000000L,0x00000000000A1000L,0x0C90000440008000L,0x000000000000003CL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_selectExpression_in_selectExpressionList12385 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_STAR_in_tableAllColumns12416 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tableName_in_tableAllColumns12438 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_DOT_in_tableAllColumns12440 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_STAR_in_tableAllColumns12442 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_tableOrColumn12490 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_expressionList12529 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_COMMA_in_expressionList12532 = new BitSet(new long[]{0x0000600101001080L,0x0001000020000000L,0x00000000000A1000L,0x0C90000440008000L,0x0000000000000038L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_expression_in_expressionList12534 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_Identifier_in_aliasList12576 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_COMMA_in_aliasList12579 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_Identifier_in_aliasList12581 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_KW_FROM_in_fromClause12625 = new BitSet(new long[]{0x0000000001000000L,0x0000000000000000L,0x0000000000000000L,0x0010000800000000L});
    public static final BitSet FOLLOW_joinSource_in_fromClause12627 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fromSource_in_joinSource12662 = new BitSet(new long[]{0x0800000001000002L,0x4000008000000000L,0x0040000000000004L});
    public static final BitSet FOLLOW_joinToken_in_joinSource12666 = new BitSet(new long[]{0x0000000001000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_fromSource_in_joinSource12669 = new BitSet(new long[]{0x0800000001000002L,0x4000008000000000L,0x0040000000400004L});
    public static final BitSet FOLLOW_KW_ON_in_joinSource12672 = new BitSet(new long[]{0x0000600101001080L,0x0001000020000000L,0x00000000000A1000L,0x0C90000440008000L,0x0000000000000038L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_expression_in_joinSource12675 = new BitSet(new long[]{0x0800000001000002L,0x4000008000000000L,0x0040000000000004L});
    public static final BitSet FOLLOW_uniqueJoinToken_in_joinSource12688 = new BitSet(new long[]{0x0000000001000000L,0x0000000000000000L,0x0000001000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_uniqueJoinSource_in_joinSource12691 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_COMMA_in_joinSource12694 = new BitSet(new long[]{0x0000000001000000L,0x0000000000000000L,0x0000001000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_uniqueJoinSource_in_joinSource12697 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_KW_PRESERVE_in_uniqueJoinSource12726 = new BitSet(new long[]{0x0000000001000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_fromSource_in_uniqueJoinSource12729 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_uniqueJoinExpr_in_uniqueJoinSource12731 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_uniqueJoinExpr12758 = new BitSet(new long[]{0x0000600101001080L,0x0001000020000000L,0x00000000000A1000L,0x0C90000440008000L,0x0000000000000038L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_expression_in_uniqueJoinExpr12762 = new BitSet(new long[]{0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_uniqueJoinExpr12765 = new BitSet(new long[]{0x0000600101001080L,0x0001000020000000L,0x00000000000A1000L,0x0C90000440008000L,0x0000000000000038L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_expression_in_uniqueJoinExpr12769 = new BitSet(new long[]{0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_uniqueJoinExpr12773 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_UNIQUEJOIN_in_uniqueJoinToken12816 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_JOIN_in_joinToken12848 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_kwInner_in_joinToken12880 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_KW_JOIN_in_joinToken12883 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CROSS_in_joinToken12906 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_KW_JOIN_in_joinToken12908 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_LEFT_in_joinToken12931 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_KW_OUTER_in_joinToken12934 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_KW_JOIN_in_joinToken12936 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_RIGHT_in_joinToken12950 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_KW_OUTER_in_joinToken12952 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_KW_JOIN_in_joinToken12954 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_FULL_in_joinToken12968 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_KW_OUTER_in_joinToken12971 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_KW_JOIN_in_joinToken12973 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_LEFT_in_joinToken12987 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_KW_SEMI_in_joinToken12990 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_KW_JOIN_in_joinToken12993 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_LATERAL_in_lateralView13024 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_KW_VIEW_in_lateralView13026 = new BitSet(new long[]{0x0000000101000000L,0x0001000000000000L,0x0000000000001000L,0x0000000400008000L});
    public static final BitSet FOLLOW_function_in_lateralView13028 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_tableAlias_in_lateralView13030 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_KW_AS_in_lateralView13032 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_Identifier_in_lateralView13034 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_COMMA_in_lateralView13037 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_Identifier_in_lateralView13039 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_Identifier_in_tableAlias13090 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tableSource_in_fromSource13130 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_subQuerySource_in_fromSource13134 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_lateralView_in_fromSource13138 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_KW_TABLESAMPLE_in_tableBucketSample13172 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_tableBucketSample13174 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_KW_BUCKET_in_tableBucketSample13176 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_Number_in_tableBucketSample13181 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_KW_OUT_in_tableBucketSample13184 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_KW_OF_in_tableBucketSample13186 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_Number_in_tableBucketSample13191 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000400000L,0x4000000000000000L});
    public static final BitSet FOLLOW_KW_ON_in_tableBucketSample13195 = new BitSet(new long[]{0x0000600101001080L,0x0001000020000000L,0x00000000000A1000L,0x0C90000440008000L,0x0000000000000038L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_expression_in_tableBucketSample13199 = new BitSet(new long[]{0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_tableBucketSample13202 = new BitSet(new long[]{0x0000600101001080L,0x0001000020000000L,0x00000000000A1000L,0x0C90000440008000L,0x0000000000000038L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_expression_in_tableBucketSample13206 = new BitSet(new long[]{0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_tableBucketSample13212 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_TABLESAMPLE_in_splitSample13259 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_splitSample13261 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_Number_in_splitSample13267 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_KW_PERCENT_in_splitSample13270 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_splitSample13272 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tableBucketSample_in_tableSample13312 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_splitSample_in_tableSample13320 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tableName_in_tableSource13349 = new BitSet(new long[]{0x0000000001000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_tableSample_in_tableSource13354 = new BitSet(new long[]{0x0000000001000002L});
    public static final BitSet FOLLOW_Identifier_in_tableSource13361 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_tableName13414 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_DOT_in_tableName13416 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_Identifier_in_tableName13422 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_viewName13473 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_DOT_in_viewName13475 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_Identifier_in_viewName13481 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_subQuerySource13529 = new BitSet(new long[]{0x0000000000000000L,0x0100004000000000L,0x1000800000001000L});
    public static final BitSet FOLLOW_queryStatementExpression_in_subQuerySource13531 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_subQuerySource13533 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_Identifier_in_subQuerySource13535 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_WHERE_in_whereClause13578 = new BitSet(new long[]{0x0000600101001080L,0x0001000020000000L,0x00000000000A1000L,0x0C90000440008000L,0x0000000000000038L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_searchCondition_in_whereClause13580 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_searchCondition13619 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_GROUP_in_groupByClause13653 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_KW_BY_in_groupByClause13655 = new BitSet(new long[]{0x0000600101001080L,0x0001000020000000L,0x00000000000A1000L,0x0C90000440008000L,0x0000000000000038L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_groupByExpression_in_groupByClause13661 = new BitSet(new long[]{0x0000000000000202L,0x0000100000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_COMMA_in_groupByClause13669 = new BitSet(new long[]{0x0000600101001080L,0x0001000020000000L,0x00000000000A1000L,0x0C90000440008000L,0x0000000000000038L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_groupByExpression_in_groupByClause13671 = new BitSet(new long[]{0x0000000000000202L,0x0000100000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_KW_WITH_in_groupByClause13684 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_KW_ROLLUP_in_groupByClause13686 = new BitSet(new long[]{0x0000000000000002L,0x0000100000000000L});
    public static final BitSet FOLLOW_KW_WITH_in_groupByClause13694 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_KW_CUBE_in_groupByClause13696 = new BitSet(new long[]{0x0000000000000002L,0x0000100000000000L});
    public static final BitSet FOLLOW_KW_GROUPING_in_groupByClause13709 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_KW_SETS_in_groupByClause13711 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_groupByClause13718 = new BitSet(new long[]{0x0000600101001080L,0x0001000020000000L,0x00000000000A1000L,0x0C90000440008000L,0x0000000000000038L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_groupingSetExpression_in_groupByClause13720 = new BitSet(new long[]{0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_groupByClause13724 = new BitSet(new long[]{0x0000600101001080L,0x0001000020000000L,0x00000000000A1000L,0x0C90000440008000L,0x0000000000000038L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_groupingSetExpression_in_groupByClause13726 = new BitSet(new long[]{0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_groupByClause13731 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_groupByExpression_in_groupingSetExpression13825 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_groupingSetExpression13846 = new BitSet(new long[]{0x0000600101001080L,0x0001000020000000L,0x00000000000A1000L,0x0C90000440008000L,0x0000000000000038L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_groupByExpression_in_groupingSetExpression13852 = new BitSet(new long[]{0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_groupingSetExpression13855 = new BitSet(new long[]{0x0000600101001080L,0x0001000020000000L,0x00000000000A1000L,0x0C90000440008000L,0x0000000000000038L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_groupByExpression_in_groupingSetExpression13857 = new BitSet(new long[]{0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_groupingSetExpression13864 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_groupingSetExpression13886 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_groupingSetExpression13891 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_groupByExpression13934 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_HAVING_in_havingClause13965 = new BitSet(new long[]{0x0000600101001080L,0x0001000020000000L,0x00000000000A1000L,0x0C90000440008000L,0x0000000000000038L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_havingCondition_in_havingClause13967 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_havingCondition14006 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ORDER_in_orderByClause14038 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_KW_BY_in_orderByClause14040 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_orderByClause14046 = new BitSet(new long[]{0x0000600101001080L,0x0001000020000000L,0x00000000000A1000L,0x0C90000440008000L,0x0000000000000038L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_columnRefOrder_in_orderByClause14048 = new BitSet(new long[]{0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_orderByClause14056 = new BitSet(new long[]{0x0000600101001080L,0x0001000020000000L,0x00000000000A1000L,0x0C90000440008000L,0x0000000000000038L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_columnRefOrder_in_orderByClause14058 = new BitSet(new long[]{0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_orderByClause14062 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ORDER_in_orderByClause14083 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_KW_BY_in_orderByClause14085 = new BitSet(new long[]{0x0000600101001080L,0x0001000020000000L,0x00000000000A1000L,0x0C90000440008000L,0x0000000000000038L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_columnRefOrder_in_orderByClause14091 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_COMMA_in_orderByClause14099 = new BitSet(new long[]{0x0000600101001080L,0x0001000020000000L,0x00000000000A1000L,0x0C90000440008000L,0x0000000000000038L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_columnRefOrder_in_orderByClause14101 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_KW_CLUSTER_in_clusterByClause14143 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_KW_BY_in_clusterByClause14145 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_clusterByClause14151 = new BitSet(new long[]{0x0000600101001080L,0x0001000020000000L,0x00000000000A1000L,0x0C90000440008000L,0x0000000000000038L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_expression_in_clusterByClause14153 = new BitSet(new long[]{0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_clusterByClause14156 = new BitSet(new long[]{0x0000600101001080L,0x0001000020000000L,0x00000000000A1000L,0x0C90000440008000L,0x0000000000000038L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_expression_in_clusterByClause14158 = new BitSet(new long[]{0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_clusterByClause14162 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CLUSTER_in_clusterByClause14183 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_KW_BY_in_clusterByClause14185 = new BitSet(new long[]{0x0000600101001080L,0x0001000020000000L,0x00000000000A1000L,0x0C90000440008000L,0x0000000000000038L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_expression_in_clusterByClause14191 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_COMMA_in_clusterByClause14199 = new BitSet(new long[]{0x0000600101001080L,0x0001000020000000L,0x00000000000A1000L,0x0C90000440008000L,0x0000000000000038L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_expression_in_clusterByClause14201 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_KW_DISTRIBUTE_in_distributeByClause14244 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_KW_BY_in_distributeByClause14246 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_distributeByClause14252 = new BitSet(new long[]{0x0000600101001080L,0x0001000020000000L,0x00000000000A1000L,0x0C90000440008000L,0x0000000000000038L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_expression_in_distributeByClause14254 = new BitSet(new long[]{0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_distributeByClause14257 = new BitSet(new long[]{0x0000600101001080L,0x0001000020000000L,0x00000000000A1000L,0x0C90000440008000L,0x0000000000000038L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_expression_in_distributeByClause14259 = new BitSet(new long[]{0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_distributeByClause14263 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DISTRIBUTE_in_distributeByClause14284 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_KW_BY_in_distributeByClause14286 = new BitSet(new long[]{0x0000600101001080L,0x0001000020000000L,0x00000000000A1000L,0x0C90000440008000L,0x0000000000000038L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_expression_in_distributeByClause14292 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_COMMA_in_distributeByClause14295 = new BitSet(new long[]{0x0000600101001080L,0x0001000020000000L,0x00000000000A1000L,0x0C90000440008000L,0x0000000000000038L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_expression_in_distributeByClause14297 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_KW_SORT_in_sortByClause14339 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_KW_BY_in_sortByClause14341 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_sortByClause14347 = new BitSet(new long[]{0x0000600101001080L,0x0001000020000000L,0x00000000000A1000L,0x0C90000440008000L,0x0000000000000038L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_columnRefOrder_in_sortByClause14349 = new BitSet(new long[]{0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_sortByClause14357 = new BitSet(new long[]{0x0000600101001080L,0x0001000020000000L,0x00000000000A1000L,0x0C90000440008000L,0x0000000000000038L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_columnRefOrder_in_sortByClause14359 = new BitSet(new long[]{0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_sortByClause14363 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SORT_in_sortByClause14384 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_KW_BY_in_sortByClause14386 = new BitSet(new long[]{0x0000600101001080L,0x0001000020000000L,0x00000000000A1000L,0x0C90000440008000L,0x0000000000000038L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_columnRefOrder_in_sortByClause14392 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_COMMA_in_sortByClause14400 = new BitSet(new long[]{0x0000600101001080L,0x0001000020000000L,0x00000000000A1000L,0x0C90000440008000L,0x0000000000000038L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_columnRefOrder_in_sortByClause14402 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_functionName_in_function14445 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_function14451 = new BitSet(new long[]{0x0000600101001080L,0x0001000020004000L,0x00000000000A1000L,0x4C90000440008000L,0x000000000000003CL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_STAR_in_function14472 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_KW_DISTINCT_in_function14488 = new BitSet(new long[]{0x0000600101001080L,0x0001000020000000L,0x00000000000A1000L,0x4C90000440008000L,0x0000000000000038L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_expression_in_function14493 = new BitSet(new long[]{0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_function14496 = new BitSet(new long[]{0x0000600101001080L,0x0001000020000000L,0x00000000000A1000L,0x0C90000440008000L,0x0000000000000038L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_expression_in_function14498 = new BitSet(new long[]{0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_function14516 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CAST_in_castExpression14678 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_castExpression14684 = new BitSet(new long[]{0x0000600101001080L,0x0001000020000000L,0x00000000000A1000L,0x0C90000440008000L,0x0000000000000038L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_expression_in_castExpression14696 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_KW_AS_in_castExpression14708 = new BitSet(new long[]{0x000000E000000000L,0x0200000400010016L,0x0000000000000000L,0x0000000003004080L});
    public static final BitSet FOLLOW_primitiveType_in_castExpression14720 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_castExpression14726 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CASE_in_caseExpression14767 = new BitSet(new long[]{0x0000600101001080L,0x0001000020000000L,0x00000000000A1000L,0x0C90000440008000L,0x0000000000000038L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_expression_in_caseExpression14769 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_KW_WHEN_in_caseExpression14776 = new BitSet(new long[]{0x0000600101001080L,0x0001000020000000L,0x00000000000A1000L,0x0C90000440008000L,0x0000000000000038L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_expression_in_caseExpression14778 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_KW_THEN_in_caseExpression14780 = new BitSet(new long[]{0x0000600101001080L,0x0001000020000000L,0x00000000000A1000L,0x0C90000440008000L,0x0000000000000038L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_expression_in_caseExpression14782 = new BitSet(new long[]{0x0000000000000000L,0x0000000000280000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_KW_ELSE_in_caseExpression14791 = new BitSet(new long[]{0x0000600101001080L,0x0001000020000000L,0x00000000000A1000L,0x0C90000440008000L,0x0000000000000038L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_expression_in_caseExpression14793 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_KW_END_in_caseExpression14801 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CASE_in_whenExpression14843 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_KW_WHEN_in_whenExpression14852 = new BitSet(new long[]{0x0000600101001080L,0x0001000020000000L,0x00000000000A1000L,0x0C90000440008000L,0x0000000000000038L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_expression_in_whenExpression14854 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_KW_THEN_in_whenExpression14856 = new BitSet(new long[]{0x0000600101001080L,0x0001000020000000L,0x00000000000A1000L,0x0C90000440008000L,0x0000000000000038L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_expression_in_whenExpression14858 = new BitSet(new long[]{0x0000000000000000L,0x0000000000280000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_KW_ELSE_in_whenExpression14867 = new BitSet(new long[]{0x0000600101001080L,0x0001000020000000L,0x00000000000A1000L,0x0C90000440008000L,0x0000000000000038L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_expression_in_whenExpression14869 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_KW_END_in_whenExpression14877 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Number_in_constant14919 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_StringLiteral_in_constant14927 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stringLiteralSequence_in_constant14935 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BigintLiteral_in_constant14943 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SmallintLiteral_in_constant14951 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TinyintLiteral_in_constant14959 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_charSetStringLiteral_in_constant14967 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_booleanValue_in_constant14975 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_StringLiteral_in_stringLiteralSequence14996 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_StringLiteral_in_stringLiteralSequence14998 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_CharSetName_in_charSetStringLiteral15043 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_CharSetLiteral_in_charSetStringLiteral15047 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_precedenceOrExpression_in_expression15090 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_NULL_in_atomExpression15111 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_atomExpression15123 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_in_atomExpression15131 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_castExpression_in_atomExpression15139 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_caseExpression_in_atomExpression15147 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_whenExpression_in_atomExpression15155 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tableOrColumn_in_atomExpression15163 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_atomExpression15171 = new BitSet(new long[]{0x0000600101001080L,0x0001000020000000L,0x00000000000A1000L,0x0C90000440008000L,0x0000000000000038L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_expression_in_atomExpression15174 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_atomExpression15176 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_atomExpression_in_precedenceFieldExpression15199 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_LSQUARE_in_precedenceFieldExpression15203 = new BitSet(new long[]{0x0000600101001080L,0x0001000020000000L,0x00000000000A1000L,0x0C90000440008000L,0x0000000000000038L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_expression_in_precedenceFieldExpression15206 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_RSQUARE_in_precedenceFieldExpression15208 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_DOT_in_precedenceFieldExpression15215 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_Identifier_in_precedenceFieldExpression15218 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_KW_NULL_in_nullCondition15271 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_NOT_in_nullCondition15285 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_KW_NULL_in_nullCondition15287 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_precedenceUnaryOperator_in_precedenceUnaryPrefixExpression15315 = new BitSet(new long[]{0x0000600101001080L,0x0001000020000000L,0x0000000000081000L,0x0C90000440008000L,0x0000000000000038L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_precedenceFieldExpression_in_precedenceUnaryPrefixExpression15320 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_precedenceUnaryPrefixExpression_in_precedenceUnarySuffixExpression15337 = new BitSet(new long[]{0x0000000000000002L,0x1000000000000000L});
    public static final BitSet FOLLOW_KW_IS_in_precedenceUnarySuffixExpression15342 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x00000000000A0000L});
    public static final BitSet FOLLOW_nullCondition_in_precedenceUnarySuffixExpression15344 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BITWISEXOR_in_precedenceBitwiseXorOperator15392 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_precedenceUnarySuffixExpression_in_precedenceBitwiseXorExpression15413 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_precedenceBitwiseXorOperator_in_precedenceBitwiseXorExpression15416 = new BitSet(new long[]{0x0000600101001080L,0x0001000020000000L,0x0000000000081000L,0x0C90000440008000L,0x0000000000000038L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_precedenceUnarySuffixExpression_in_precedenceBitwiseXorExpression15419 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_precedenceBitwiseXorExpression_in_precedenceStarExpression15476 = new BitSet(new long[]{0x0000000000006002L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_precedenceStarOperator_in_precedenceStarExpression15479 = new BitSet(new long[]{0x0000600101001080L,0x0001000020000000L,0x0000000000081000L,0x0C90000440008000L,0x0000000000000038L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_precedenceBitwiseXorExpression_in_precedenceStarExpression15482 = new BitSet(new long[]{0x0000000000006002L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_precedenceStarExpression_in_precedencePlusExpression15531 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0880000000000000L});
    public static final BitSet FOLLOW_precedencePlusOperator_in_precedencePlusExpression15534 = new BitSet(new long[]{0x0000600101001080L,0x0001000020000000L,0x0000000000081000L,0x0C90000440008000L,0x0000000000000038L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_precedenceStarExpression_in_precedencePlusExpression15537 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0880000000000000L});
    public static final BitSet FOLLOW_AMPERSAND_in_precedenceAmpersandOperator15561 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_precedencePlusExpression_in_precedenceAmpersandExpression15582 = new BitSet(new long[]{0x0000000000000012L});
    public static final BitSet FOLLOW_precedenceAmpersandOperator_in_precedenceAmpersandExpression15585 = new BitSet(new long[]{0x0000600101001080L,0x0001000020000000L,0x0000000000081000L,0x0C90000440008000L,0x0000000000000038L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_precedencePlusExpression_in_precedenceAmpersandExpression15588 = new BitSet(new long[]{0x0000000000000012L});
    public static final BitSet FOLLOW_BITWISEOR_in_precedenceBitwiseOrOperator15612 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_precedenceAmpersandExpression_in_precedenceBitwiseOrExpression15633 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_precedenceBitwiseOrOperator_in_precedenceBitwiseOrExpression15636 = new BitSet(new long[]{0x0000600101001080L,0x0001000020000000L,0x0000000000081000L,0x0C90000440008000L,0x0000000000000038L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_precedenceAmpersandExpression_in_precedenceBitwiseOrExpression15639 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_precedenceEqualNegatableOperator_in_precedenceEqualOperator15693 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EQUAL_in_precedenceEqualOperator15697 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EQUAL_NS_in_precedenceEqualOperator15701 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOTEQUAL_in_precedenceEqualOperator15705 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LESSTHANOREQUALTO_in_precedenceEqualOperator15709 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LESSTHAN_in_precedenceEqualOperator15713 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GREATERTHANOREQUALTO_in_precedenceEqualOperator15717 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GREATERTHAN_in_precedenceEqualOperator15721 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_precedenceBitwiseOrExpression_in_precedenceEqualExpression15745 = new BitSet(new long[]{0x00000010006C0002L,0x0004000000000000L,0x0081000000020008L,0x020C000000000000L});
    public static final BitSet FOLLOW_KW_NOT_in_precedenceEqualExpression15767 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0081000000000008L});
    public static final BitSet FOLLOW_precedenceEqualNegatableOperator_in_precedenceEqualExpression15769 = new BitSet(new long[]{0x0000600101001080L,0x0001000020000000L,0x0000000000081000L,0x0C90000440008000L,0x0000000000000038L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_precedenceBitwiseOrExpression_in_precedenceEqualExpression15773 = new BitSet(new long[]{0x00000010006C0002L,0x0004000000000000L,0x0081000000020008L,0x020C000000000000L});
    public static final BitSet FOLLOW_precedenceEqualOperator_in_precedenceEqualExpression15806 = new BitSet(new long[]{0x0000600101001080L,0x0001000020000000L,0x0000000000081000L,0x0C90000440008000L,0x0000000000000038L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_precedenceBitwiseOrExpression_in_precedenceEqualExpression15810 = new BitSet(new long[]{0x00000010006C0002L,0x0004000000000000L,0x0081000000020008L,0x020C000000000000L});
    public static final BitSet FOLLOW_KW_NOT_in_precedenceEqualExpression15839 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_KW_IN_in_precedenceEqualExpression15841 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_expressions_in_precedenceEqualExpression15843 = new BitSet(new long[]{0x00000010006C0002L,0x0004000000000000L,0x0081000000020008L,0x020C000000000000L});
    public static final BitSet FOLLOW_KW_IN_in_precedenceEqualExpression15877 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_expressions_in_precedenceEqualExpression15879 = new BitSet(new long[]{0x00000010006C0002L,0x0004000000000000L,0x0081000000020008L,0x020C000000000000L});
    public static final BitSet FOLLOW_KW_NOT_in_precedenceEqualExpression15910 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_KW_BETWEEN_in_precedenceEqualExpression15912 = new BitSet(new long[]{0x0000600101001080L,0x0001000020000000L,0x0000000000081000L,0x0C90000440008000L,0x0000000000000038L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_precedenceBitwiseOrExpression_in_precedenceEqualExpression15917 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_KW_AND_in_precedenceEqualExpression15920 = new BitSet(new long[]{0x0000600101001080L,0x0001000020000000L,0x0000000000081000L,0x0C90000440008000L,0x0000000000000038L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_precedenceBitwiseOrExpression_in_precedenceEqualExpression15925 = new BitSet(new long[]{0x00000010006C0002L,0x0004000000000000L,0x0081000000020008L,0x020C000000000000L});
    public static final BitSet FOLLOW_KW_BETWEEN_in_precedenceEqualExpression15965 = new BitSet(new long[]{0x0000600101001080L,0x0001000020000000L,0x0000000000081000L,0x0C90000440008000L,0x0000000000000038L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_precedenceBitwiseOrExpression_in_precedenceEqualExpression15970 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_KW_AND_in_precedenceEqualExpression15973 = new BitSet(new long[]{0x0000600101001080L,0x0001000020000000L,0x0000000000081000L,0x0C90000440008000L,0x0000000000000038L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_precedenceBitwiseOrExpression_in_precedenceEqualExpression15978 = new BitSet(new long[]{0x00000010006C0002L,0x0004000000000000L,0x0081000000020008L,0x020C000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_expressions16036 = new BitSet(new long[]{0x0000600101001080L,0x0001000020000000L,0x00000000000A1000L,0x0C90000440008000L,0x0000000000000038L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_expression_in_expressions16038 = new BitSet(new long[]{0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_expressions16041 = new BitSet(new long[]{0x0000600101001080L,0x0001000020000000L,0x00000000000A1000L,0x0C90000440008000L,0x0000000000000038L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_expression_in_expressions16043 = new BitSet(new long[]{0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_expressions16047 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_NOT_in_precedenceNotOperator16073 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_precedenceNotOperator_in_precedenceNotExpression16095 = new BitSet(new long[]{0x0000600101001080L,0x0001000020000000L,0x00000000000A1000L,0x0C90000440008000L,0x0000000000000038L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_precedenceEqualExpression_in_precedenceNotExpression16100 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_AND_in_precedenceAndOperator16122 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_precedenceNotExpression_in_precedenceAndExpression16143 = new BitSet(new long[]{0x0000000040000002L});
    public static final BitSet FOLLOW_precedenceAndOperator_in_precedenceAndExpression16146 = new BitSet(new long[]{0x0000600101001080L,0x0001000020000000L,0x00000000000A1000L,0x0C90000440008000L,0x0000000000000038L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_precedenceNotExpression_in_precedenceAndExpression16149 = new BitSet(new long[]{0x0000000040000002L});
    public static final BitSet FOLLOW_KW_OR_in_precedenceOrOperator16173 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_precedenceAndExpression_in_precedenceOrExpression16194 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_precedenceOrOperator_in_precedenceOrExpression16197 = new BitSet(new long[]{0x0000600101001080L,0x0001000020000000L,0x00000000000A1000L,0x0C90000440008000L,0x0000000000000038L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_precedenceAndExpression_in_precedenceOrExpression16200 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_KW_TRUE_in_booleanValue16224 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_FALSE_in_booleanValue16229 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tableName_in_tableOrPartition16249 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_partitionSpec_in_tableOrPartition16251 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_PARTITION_in_partitionSpec16283 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_partitionSpec16290 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_partitionVal_in_partitionSpec16292 = new BitSet(new long[]{0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_partitionSpec16295 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_partitionVal_in_partitionSpec16298 = new BitSet(new long[]{0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_partitionSpec16303 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_partitionVal16334 = new BitSet(new long[]{0x0000000000040002L});
    public static final BitSet FOLLOW_EQUAL_in_partitionVal16337 = new BitSet(new long[]{0x0000000000001080L,0x0000000020000000L,0x0000000000000000L,0x0400000040000000L,0x0000000000000018L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_constant_in_partitionVal16339 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_PARTITION_in_dropPartitionSpec16373 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_dropPartitionSpec16380 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_dropPartitionVal_in_dropPartitionSpec16382 = new BitSet(new long[]{0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_dropPartitionSpec16385 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_dropPartitionVal_in_dropPartitionSpec16388 = new BitSet(new long[]{0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_dropPartitionSpec16393 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_dropPartitionVal16424 = new BitSet(new long[]{0x0000000000640000L,0x0000000000000000L,0x0000000000000000L,0x020C000000000000L});
    public static final BitSet FOLLOW_dropPartitionOperator_in_dropPartitionVal16426 = new BitSet(new long[]{0x0000000000001080L,0x0000000020000000L,0x0000000000000000L,0x0400000040000000L,0x0000000000000018L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_constant_in_dropPartitionVal16428 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sysFuncNames_in_descFuncNames16847 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_StringLiteral_in_descFuncNames16855 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_descFuncNames16863 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_kwUser16880 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_kwRole16890 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_kwInner16900 = new BitSet(new long[]{0x0000000000000002L});

}